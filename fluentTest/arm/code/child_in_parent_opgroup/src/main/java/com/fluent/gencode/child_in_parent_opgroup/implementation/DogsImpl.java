/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.fluent.gencode.child_in_parent_opgroup.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.fluent.gencode.child_in_parent_opgroup.Dogs;
import com.fluent.gencode.child_in_parent_opgroup.Dog;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.fluent.gencode.child_in_parent_opgroup.AccessUri;
import com.fluent.gencode.child_in_parent_opgroup.GrantAccessData;
import com.fluent.gencode.child_in_parent_opgroup.Puppy;

class DogsImpl extends GroupableResourcesCoreImpl<Dog, DogImpl, DogInner, DogsInner, Child_In_Parent_OpGroupManager>  implements Dogs {
    protected DogsImpl(Child_In_Parent_OpGroupManager manager) {
        super(manager.inner().dogs(), manager);
    }

    @Override
    protected Observable<DogInner> getInnerAsync(String resourceGroupName, String name) {
        DogsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        DogsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<Dog> listByResourceGroup(String resourceGroupName) {
        DogsInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<Dog> listByResourceGroupAsync(String resourceGroupName) {
        DogsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<DogInner>, Iterable<DogInner>>() {
            @Override
            public Iterable<DogInner> call(Page<DogInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DogInner, Dog>() {
            @Override
            public Dog call(DogInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<Dog> list() {
        DogsInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<Dog> listAsync() {
        DogsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<DogInner>, Iterable<DogInner>>() {
            @Override
            public Iterable<DogInner> call(Page<DogInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DogInner, Dog>() {
            @Override
            public Dog call(DogInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public DogImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Observable<AccessUri> grantAccessAsync(String resourceGroupName, String dogName, GrantAccessData grantAccessData) {
        DogsInner client = this.inner();
        return client.grantAccessAsync(resourceGroupName, dogName, grantAccessData)
        .map(new Func1<AccessUriInner, AccessUri>() {
            @Override
            public AccessUri call(AccessUriInner inner) {
                return new AccessUriImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable revokeAccessAsync(String resourceGroupName, String dogName) {
        DogsInner client = this.inner();
        return client.revokeAccessAsync(resourceGroupName, dogName).toCompletable();
    }

    @Override
    protected DogImpl wrapModel(DogInner inner) {
        return  new DogImpl(inner.name(), inner, manager());
    }

    @Override
    protected DogImpl wrapModel(String name) {
        return new DogImpl(name, new DogInner(), this.manager());
    }

    @Override
    public PuppyImpl definePuppy(String name) {
        return wrapPuppyModel(name);
    }

    private PuppyImpl wrapPuppyModel(String name) {
        return new PuppyImpl(name, this.manager());
    }

    private PuppyImpl wrapPuppyModel(PuppyInner inner) {
        return  new PuppyImpl(inner, manager());
    }

    private Observable<PuppyInner> getPuppyInnerUsingDogsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String dogName = IdParsingUtils.getValueFromIdByName(id, "dogs");
        String puppyName = IdParsingUtils.getValueFromIdByName(id, "puppies");
        DogsInner client = this.inner();
        return client.getPuppyAsync(resourceGroupName, dogName, puppyName);
    }

    @Override
    public Observable<Puppy> getPuppyAsync(String resourceGroupName, String dogName, String puppyName) {
        DogsInner client = this.inner();
        return client.getPuppyAsync(resourceGroupName, dogName, puppyName)
        .map(new Func1<PuppyInner, Puppy>() {
            @Override
            public Puppy call(PuppyInner inner) {
                return wrapPuppyModel(inner);
            }
       });
    }

    @Override
    public Observable<Puppy> listPuppiesByDogAsync(final String resourceGroupName, final String dogName) {
        DogsInner client = this.inner();
        return client.listPuppiesByDogAsync(resourceGroupName, dogName)
        .flatMapIterable(new Func1<Page<PuppyInner>, Iterable<PuppyInner>>() {
            @Override
            public Iterable<PuppyInner> call(Page<PuppyInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PuppyInner, Puppy>() {
            @Override
            public Puppy call(PuppyInner inner) {
                return wrapPuppyModel(inner);
            }
        });
    }

    @Override
    public Completable deletePuppyAsync(String resourceGroupName, String dogName, String puppyName) {
        DogsInner client = this.inner();
        return client.deletePuppyAsync(resourceGroupName, dogName, puppyName).toCompletable();
    }

    @Override
    public Observable<AccessUri> grantAccessToPuppyAsync(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData) {
        DogsInner client = this.inner();
        return client.grantAccessToPuppyAsync(resourceGroupName, dogName, puppyName, grantAccessData)
        .map(new Func1<AccessUriInner, AccessUri>() {
            @Override
            public AccessUri call(AccessUriInner inner) {
                return new AccessUriImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable revokeAccessToPuppyAsync(String resourceGroupName, String dogName, String puppyName) {
        DogsInner client = this.inner();
        return client.revokeAccessToPuppyAsync(resourceGroupName, dogName, puppyName).toCompletable();
    }

}
