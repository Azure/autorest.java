/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.fluent.gencode.parent_child_indiff_opgroup.implementation;
import com.fluent.gencode.parent_child_indiff_opgroup.CatUpdate;
import com.fluent.gencode.parent_child_indiff_opgroup.ColorTypes;
import com.fluent.gencode.parent_child_indiff_opgroup.CreationData;
import com.fluent.gencode.parent_child_indiff_opgroup.Dog;
import com.fluent.gencode.parent_child_indiff_opgroup.DogSku;
import com.fluent.gencode.parent_child_indiff_opgroup.Dogs;
import com.fluent.gencode.parent_child_indiff_opgroup.Puppies;
import com.fluent.gencode.parent_child_indiff_opgroup.Puppy;
import com.fluent.gencode.parent_child_indiff_opgroup.PuppySku;
import com.fluent.gencode.parent_child_indiff_opgroup.SkuNames;
import com.microsoft.azure.arm.core.TestBase;
import com.microsoft.azure.arm.resources.Region;
import com.microsoft.rest.RestClient;
import org.junit.Assert;
import org.junit.Test;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.HashSet;

public class ParentChildInDiffOpGroupTest extends TestBase {
    protected static Parent_Child_Indiff_OpGroupManager petsManager;

    @Override
    protected void initializeClients(RestClient restClient, String defaultSubscription, String domain) {
        petsManager = Parent_Child_Indiff_OpGroupManager
                .authenticate(restClient, defaultSubscription);
    }

    @Override
    protected void cleanUpResources() {
    }

    @Test
    public void ensureGroupableResourceInheritance() {
        //
        HashSet<String> expectedExtends = new HashSet<>();
        expectedExtends.add("com.microsoft.azure.arm.model.HasInner");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.Resource");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.GroupableResourceCore");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.HasResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.model.Refreshable");
        expectedExtends.add("com.microsoft.azure.arm.model.Updatable");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.HasManager");
        //
        Class cls = Dog.class;
        Class[] eInterfaces = cls.getInterfaces();
        HashSet<String> currentExtends = new HashSet<>();
        for (Class eInterface : eInterfaces) {
            currentExtends.add(eInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), currentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!currentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented", false);
            }
        }

        for (String currentExtend : currentExtends) {
            if (!expectedExtends.contains(currentExtend)) {
                Assert.assertTrue("Groupable interface 'Dog' implements unexpected interface '" + currentExtend + "'", false);
            }
        }
    }

    @Test
    public void ensureGroupableResourceExpectedConstructor() {
        try {
            Class<?>[] parameters = new Class[]{String.class, DogInner.class, Parent_Child_Indiff_OpGroupManager.class};
            DogImpl.class.getDeclaredConstructor(parameters);
        } catch (NoSuchMethodException ex) {
            Assert.assertTrue( "Expected Ctr 'DogImpl(String, DogInner, PetsManager)' not found", false);
        }
    }

    @Test
    public void ensureGroupableResourcesInheritance() {
        //
        HashSet<String> expectedExtends = new HashSet<>();
        expectedExtends.add("com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.model.HasInner");
        expectedExtends.add("com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion");
        expectedExtends.add("com.microsoft.azure.arm.collection.SupportsCreating");
        expectedExtends.add("com.microsoft.azure.arm.collection.SupportsListing");
        //

        Class cls = Dogs.class;
        Class[] eInterfaces = cls.getInterfaces();
        HashSet<String> currentExtends = new HashSet<>();
        for (Class eInterface : eInterfaces) {
            currentExtends.add(eInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), currentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!currentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented", false);
            }
        }
    }

    @Test
    public void ensureGroupableResourcesStandardMethods() {
        Method[] declMethods = DogsImpl.class.getMethods();
        HashSet<String> methodSignatures = new HashSet<>();
        methodSignatures.add("class com.fluent.gencode.parent_child_indiff_opgroup.implementation.DogImpl:define");
        //
        methodSignatures.add("rx.Observable<com.fluent.gencode.parent_child_indiff_opgroup.Dog>:listAsync");
        methodSignatures.add("com.microsoft.azure.PagedList<com.fluent.gencode.parent_child_indiff_opgroup.Dog>:list");
        //
        methodSignatures.add("rx.Observable<com.fluent.gencode.parent_child_indiff_opgroup.Dog>:listByResourceGroupAsync");
        methodSignatures.add("com.microsoft.azure.PagedList<com.fluent.gencode.parent_child_indiff_opgroup.Dog>:listByResourceGroup");
        //
        methodSignatures.add("rx.Observable<java.lang.String>:deleteByIdsAsync");
        methodSignatures.add("void:deleteByIds");

        for (String methodSignature : methodSignatures) {
            boolean found = false;
            for (Method method : declMethods) {
                String mSign = method.getGenericReturnType() + ":" + method.getName();
                if (methodSignature.equals(mSign)) {
                    found = true;
                    break;
                }
            }
            Assert.assertTrue("Standard Method '" + methodSignature + "' not found", found);
        }
    }

    @Test
    public void ensureGroupableResourcesOtherMethods() {
        Method[] declMethods = Dogs.class.getMethods();
        HashSet<String> methodSignatures = new HashSet<>();
        methodSignatures.add("rx.Observable<com.fluent.gencode.parent_child_indiff_opgroup.AccessUri>:grantAccessAsync");
        methodSignatures.add("class rx.Completable:revokeAccessAsync");

        for (String methodSignature : methodSignatures) {
            boolean found = false;
            for (Method method : declMethods) {
                String mSign = method.getGenericReturnType() + ":" + method.getName();
                if (methodSignature.equals(mSign)) {
                    found = true;
                    break;
                }
            }
            Assert.assertTrue("Other Method '" + methodSignature + "' not found", found);
        }
    }

    @Test
    public void ensureGroupableResourceDefineFlow() {
        Dog.DefinitionStages.Blank blankStage = this.petsManager.dogs().define("dogname");
        Dog.DefinitionStages.WithGroup afterRegion = blankStage.withRegion(Region.ASIA_EAST);
        Dog.DefinitionStages.WithCreationData afterRG = afterRegion.withExistingResourceGroup("rgname");
        Dog.DefinitionStages.WithCreate withCreate = afterRG.withCreationData(new CreationData());
        withCreate = withCreate.withAnimalSizeGB(33);
        withCreate = withCreate.withOsType(ColorTypes.BLACK);
        withCreate = withCreate.withSku(new DogSku().withName(SkuNames.LARGE));
        withCreate.withTags(new HashMap<String, String>());
    }

    @Test
    public void ensureGroupableResourceUpdateFlow() {
        Dog dog = new DogImpl("name", new DogInner(), this.petsManager);
        Dog.Update withUpdate = dog.update();
        withUpdate = withUpdate.withAnimalSizeGB(44);
        withUpdate = withUpdate.withOsType(ColorTypes.BLACK);
        withUpdate = withUpdate.withSku(new DogSku().withName(SkuNames.LARGE));
        withUpdate = withUpdate.withTag("a", "aa");
        withUpdate = withUpdate.withTags(new HashMap<String, String>());
        withUpdate.withoutTag("b");
    }

    @Test
    public void ensureNestedResourceInheritance() {
        //
        HashSet<String> expectedExtends = new HashSet<>();
        expectedExtends.add("com.microsoft.azure.arm.model.HasInner");
        expectedExtends.add("com.microsoft.azure.arm.model.Refreshable");
        expectedExtends.add("com.microsoft.azure.arm.model.Indexable");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.HasManager");
        expectedExtends.add("com.microsoft.azure.arm.model.Updatable");
        //
        Class cls = Puppy.class;
        Class[] eInterfaces = cls.getInterfaces();
        HashSet<String> currentExtends = new HashSet<>();
        for (Class eInterface : eInterfaces) {
            currentExtends.add(eInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), currentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!currentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented", false);
            }
        }
        //
        for (String currentExtend : currentExtends) {
            if (!expectedExtends.contains(currentExtend)) {
                Assert.assertTrue("Nested interface 'Puppy' implements unexpected interface '" + currentExtend + "'", false);
            }
        }
    }

    @Test
    public void ensureNestedResourceImplInheritance() {
        HashSet<String> expectedImplements = new HashSet<>();
        expectedImplements.add("com.fluent.gencode.parent_child_indiff_opgroup.Puppy$Definition");
        expectedImplements.add("com.fluent.gencode.parent_child_indiff_opgroup.Puppy$Update");
        expectedImplements.add("com.fluent.gencode.parent_child_indiff_opgroup.Puppy");
        //
        Class cls = PuppyImpl.class;
        Class[] eInterfaces = cls.getInterfaces();
        HashSet<String> currentImplements = new HashSet<>();
        for (Class eInterface : eInterfaces) {
            currentImplements.add(eInterface.getName());
        }
        //
        Assert.assertEquals(expectedImplements.size(), currentImplements.size());
        //
        for (String expectedImplement : expectedImplements) {
            if (!currentImplements.contains(expectedImplement)) {
                Assert.assertTrue("Expected interface '" + expectedImplement + "' is not implemented", false);
            }
        }
        //
        for (String currentImplement : currentImplements) {
            if (!expectedImplements.contains(currentImplement)) {
                Assert.assertTrue("Nested impl 'PuppyImpl' implements unexpected interface '" + currentImplement + "'", false);
            }
        }
        //
        Class superClass = cls.getSuperclass();
        Assert.assertEquals("com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl", superClass.getName());
    }

    @Test
    public void ensureNestedResourcesInheritance() {
        //
        HashSet<String> expectedExtends = new HashSet<>();
        expectedExtends.add("com.microsoft.azure.arm.model.HasInner");
        expectedExtends.add("com.microsoft.azure.arm.collection.SupportsCreating");
        //
        Class cls = Puppies.class;
        Class[] eInterfaces = cls.getInterfaces();
        HashSet<String> currentExtends = new HashSet<>();
        for (Class eInterface : eInterfaces) {
            currentExtends.add(eInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), currentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!currentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented", false);
            }
        }
        //
        for (String currentExtend : currentExtends) {
            if (!expectedExtends.contains(currentExtend)) {
                Assert.assertTrue("Nested interface col 'Puppies' implements unexpected interface '" + currentExtend + "'", false);
            }
        }
    }

    @Test
    public void ensureNestedResourcesImplInheritance() {
        //
        Class cls = PuppiesImpl.class;
        Class[] eInterfaces = cls.getInterfaces();
        HashSet<String> currentImplements = new HashSet<>();
        for (Class eInterface : eInterfaces) {
            currentImplements.add(eInterface.getName());
        }
        Assert.assertEquals(1, currentImplements.size());
        Assert.assertTrue(currentImplements.contains("com.fluent.gencode.parent_child_indiff_opgroup.Puppies"));
        //
        Class superClass = cls.getSuperclass();
        Assert.assertEquals("com.microsoft.azure.arm.model.implementation.WrapperImpl", superClass.getName());
    }

    @Test
    public void ensureMethodsInNestedResource() {
        HashSet<String> methodSignatures = new HashSet<>();
        methodSignatures.add("rx.Observable<com.fluent.gencode.parent_child_indiff_opgroup.AccessUri>:grantAccessAsync");
        //
        methodSignatures.add("rx.Observable<com.fluent.gencode.parent_child_indiff_opgroup.Puppy>:listByDogAsync");
        methodSignatures.add("class rx.Completable:revokeAccessAsync");
        //
        methodSignatures.add("class rx.Completable:deleteAsync");
        methodSignatures.add("rx.Observable<com.fluent.gencode.parent_child_indiff_opgroup.Puppy>:getAsync");
        //
        Method[] declMethods = Puppies.class.getMethods();
        for (String methodSignature : methodSignatures) {
            boolean found = false;
            for (Method method : declMethods) {
                String mSign = method.getGenericReturnType() + ":" + method.getName();
                if (methodSignature.equals(mSign)) {
                    found = true;
                    break;
                }
            }
            Assert.assertTrue("Method '" + methodSignature + "' not found", found);
        }
    }

    @Test
    public void ensureNestedResourceImplWrapModelMethods() {
        try {
            Method method = PuppiesImpl.class.getDeclaredMethod("wrapModel", PuppyInner.class);
            Assert.assertEquals("class com.fluent.gencode.parent_child_indiff_opgroup.implementation.PuppyImpl", method.getGenericReturnType().toString());
        } catch (NoSuchMethodException e) {
            Assert.assertTrue("Expected wrapModel(PuppyInner) not found", false);
        }

        try {
            Method method = PuppiesImpl.class.getDeclaredMethod("wrapModel", String.class);
            Assert.assertEquals("class com.fluent.gencode.parent_child_indiff_opgroup.implementation.PuppyImpl", method.getGenericReturnType().toString());
        } catch (NoSuchMethodException e) {
            Assert.assertTrue("Expected wrapModel(String) not found", false);
        }
    }

    @Test
    public void ensureNestedResourceDefineFlow() {
        Puppy.DefinitionStages.Blank blankStage = this.petsManager.puppies().define("puppyname");
        Puppy.DefinitionStages.WithCreationData afterDog = blankStage.withExistingDog("rgName", "dogName");
        Puppy.DefinitionStages.WithLocation afterCreationDate = afterDog.withCreationData(new CreationData());
        Puppy.DefinitionStages.WithCreate withCreate = afterCreationDate.withLocation("westus");
        withCreate = withCreate.withAnimalSizeGB(33);
        withCreate = withCreate.withOsType(ColorTypes.BLACK);
        withCreate = withCreate.withSku(new PuppySku().withName(SkuNames.LARGE));
        withCreate.withTags(new HashMap<String, String>());
    }

    @Test
    public void ensureNestedResourceUpdateFlow() {
        Puppy puppy = new PuppyImpl(new PuppyInner(), this.petsManager);
        Puppy.Update withUpdate = puppy.update();
        withUpdate.withAnimalSizeGB(22);
        withUpdate.withOsType(ColorTypes.BLACK);
        withUpdate.withSku(new PuppySku().withName(SkuNames.LARGE));
        withUpdate.withTags(new HashMap<String, String>());
    }

    @Test
    public void ensureNestedResourceIdParsingAndInitInCtr() {
        PuppyInner puppyInner = new PuppyInner();
        Assert.assertEquals("com.microsoft.azure.Resource", puppyInner.getClass().getSuperclass().getName());
        Assert.assertEquals("com.microsoft.azure.ProxyResource", puppyInner.getClass().getSuperclass().getSuperclass().getName());
        try {
            Field idFiled = puppyInner.getClass().getSuperclass().getSuperclass().getDeclaredField("id");
            idFiled.setAccessible(true);
            idFiled.set(puppyInner, "/subscriptions/mySub/resourceGroups/myRG/providers/Microsoft.Pets/dogs/dogName1/puppies/puppyName1");
        } catch (NoSuchFieldException e) {
            Assert.assertTrue("Expected field Id not found in puppyInner instance", false);
        } catch (IllegalAccessException e) {
            Assert.assertTrue("Unable to set puppyInner::id property", false);
        }

        PuppyImpl puppyImpl = new PuppyImpl(puppyInner, this.petsManager);
        //
        try {
            Field rgFiled = puppyImpl.getClass().getDeclaredField("resourceGroupName");
            rgFiled.setAccessible(true);
            String rgName = (String) rgFiled.get(puppyImpl);
            Assert.assertEquals("myRG", rgName);
        } catch (NoSuchFieldException e) {
        Assert.assertTrue("Expected field resourceGroupName not found in puppyImpl instance", false);
        } catch (IllegalAccessException e) {
            Assert.assertTrue("Unable to get puppyImpl::resourceGroupName property", false);
        }
        //
        try {
            Field dogNameFiled = puppyImpl.getClass().getDeclaredField("dogName");
            dogNameFiled.setAccessible(true);
            String rgName = (String) dogNameFiled.get(puppyImpl);
            Assert.assertEquals("dogName1", rgName);
        } catch (NoSuchFieldException e) {
            Assert.assertTrue("Expected field dogName not found in puppyImpl instance", false);
        } catch (IllegalAccessException e) {
            Assert.assertTrue("Unable to get puppyImpl::dogName property", false);
        }
        //
        try {
            Field puppyNameField = puppyImpl.getClass().getDeclaredField("puppyName");
            puppyNameField.setAccessible(true);
            String rgName = (String) puppyNameField.get(puppyImpl);
            Assert.assertEquals("puppyName1", rgName);
        } catch (NoSuchFieldException e) {
            Assert.assertTrue("Expected field puppyName not found in puppyImpl instance", false);
        } catch (IllegalAccessException e) {
            Assert.assertTrue("Unable to get puppyImpl::puppyName property", false);
        }
        //
        try {
            Field puppyNameField = puppyImpl.getClass().getDeclaredField("updateParameter");
            puppyNameField.setAccessible(true);
            CatUpdate updateParam = (CatUpdate) puppyNameField.get(puppyImpl);
            Assert.assertNotNull("CatUpdate parameter is not initialized in Ctr", updateParam);
        } catch (NoSuchFieldException e) {
            Assert.assertTrue("Expected field updateParameter not found in puppyImpl instance", false);
        } catch (IllegalAccessException e) {
            Assert.assertTrue("Unable to get puppyImpl::updateParameter property", false);
        }
    }
}
