/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.fluent.gencode.parent_child_indiff_opgroup.implementation;

import retrofit2.Retrofit;
import com.fluent.gencode.parent_child_indiff_opgroup.CatUpdate;
import com.fluent.gencode.parent_child_indiff_opgroup.GrantAccessData;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Puppies.
 */
public class PuppiesInner {
    /** The Retrofit service to perform REST calls. */
    private PuppiesService service;
    /** The service client containing this operation class. */
    private PetResourceProviderClientImpl client;

    /**
     * Initializes an instance of PuppiesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PuppiesInner(Retrofit retrofit, PetResourceProviderClientImpl client) {
        this.service = retrofit.create(PuppiesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Puppies to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PuppiesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Body PuppyInner puppy, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Body PuppyInner puppy, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Body CatUpdate puppy, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Body CatUpdate puppy, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies listByDog" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies")
        Observable<Response<ResponseBody>> listByDog(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies grantAccess" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}/beginGetAccess")
        Observable<Response<ResponseBody>> grantAccess(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Body GrantAccessData grantAccessData, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies beginGrantAccess" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}/beginGetAccess")
        Observable<Response<ResponseBody>> beginGrantAccess(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Body GrantAccessData grantAccessData, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies revokeAccess" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}/endGetAccess")
        Observable<Response<ResponseBody>> revokeAccess(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies beginRevokeAccess" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies/{puppyName}/endGetAccess")
        Observable<Response<ResponseBody>> beginRevokeAccess(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Path("puppyName") String puppyName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.parent_child_indiff_opgroup.Puppies listByDogNext" })
        @GET
        Observable<Response<ResponseBody>> listByDogNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Put dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PuppyInner object if successful.
     */
    public PuppyInner createOrUpdate(String resourceGroupName, String dogName, String puppyName, PuppyInner puppy) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy).toBlocking().last().body();
    }

    /**
     * Creates or updates a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Put dog operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PuppyInner> createOrUpdateAsync(String resourceGroupName, String dogName, String puppyName, PuppyInner puppy, final ServiceCallback<PuppyInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy), serviceCallback);
    }

    /**
     * Creates or updates a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Put dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PuppyInner> createOrUpdateAsync(String resourceGroupName, String dogName, String puppyName, PuppyInner puppy) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy).map(new Func1<ServiceResponse<PuppyInner>, PuppyInner>() {
            @Override
            public PuppyInner call(ServiceResponse<PuppyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Put dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PuppyInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName, PuppyInner puppy) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (puppy == null) {
            throw new IllegalArgumentException("Parameter puppy is required and cannot be null.");
        }
        Validator.validate(puppy);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), puppy, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PuppyInner>() { }.getType());
    }

    /**
     * Creates or updates a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Put dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PuppyInner object if successful.
     */
    public PuppyInner beginCreateOrUpdate(String resourceGroupName, String dogName, String puppyName, PuppyInner puppy) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy).toBlocking().single().body();
    }

    /**
     * Creates or updates a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Put dog operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PuppyInner> beginCreateOrUpdateAsync(String resourceGroupName, String dogName, String puppyName, PuppyInner puppy, final ServiceCallback<PuppyInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy), serviceCallback);
    }

    /**
     * Creates or updates a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Put dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PuppyInner object
     */
    public Observable<PuppyInner> beginCreateOrUpdateAsync(String resourceGroupName, String dogName, String puppyName, PuppyInner puppy) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy).map(new Func1<ServiceResponse<PuppyInner>, PuppyInner>() {
            @Override
            public PuppyInner call(ServiceResponse<PuppyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Put dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PuppyInner object
     */
    public Observable<ServiceResponse<PuppyInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName, PuppyInner puppy) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (puppy == null) {
            throw new IllegalArgumentException("Parameter puppy is required and cannot be null.");
        }
        Validator.validate(puppy);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), puppy, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PuppyInner>>>() {
                @Override
                public Observable<ServiceResponse<PuppyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PuppyInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PuppyInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PuppyInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PuppyInner>() { }.getType())
                .register(202, new TypeToken<PuppyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates (patches) a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Patch puppy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PuppyInner object if successful.
     */
    public PuppyInner update(String resourceGroupName, String dogName, String puppyName, CatUpdate puppy) {
        return updateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy).toBlocking().last().body();
    }

    /**
     * Updates (patches) a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Patch puppy operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PuppyInner> updateAsync(String resourceGroupName, String dogName, String puppyName, CatUpdate puppy, final ServiceCallback<PuppyInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy), serviceCallback);
    }

    /**
     * Updates (patches) a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Patch puppy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PuppyInner> updateAsync(String resourceGroupName, String dogName, String puppyName, CatUpdate puppy) {
        return updateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy).map(new Func1<ServiceResponse<PuppyInner>, PuppyInner>() {
            @Override
            public PuppyInner call(ServiceResponse<PuppyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates (patches) a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Patch puppy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PuppyInner>> updateWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName, CatUpdate puppy) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (puppy == null) {
            throw new IllegalArgumentException("Parameter puppy is required and cannot be null.");
        }
        Validator.validate(puppy);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), puppy, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PuppyInner>() { }.getType());
    }

    /**
     * Updates (patches) a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Patch puppy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PuppyInner object if successful.
     */
    public PuppyInner beginUpdate(String resourceGroupName, String dogName, String puppyName, CatUpdate puppy) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy).toBlocking().single().body();
    }

    /**
     * Updates (patches) a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Patch puppy operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PuppyInner> beginUpdateAsync(String resourceGroupName, String dogName, String puppyName, CatUpdate puppy, final ServiceCallback<PuppyInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy), serviceCallback);
    }

    /**
     * Updates (patches) a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Patch puppy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PuppyInner object
     */
    public Observable<PuppyInner> beginUpdateAsync(String resourceGroupName, String dogName, String puppyName, CatUpdate puppy) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, dogName, puppyName, puppy).map(new Func1<ServiceResponse<PuppyInner>, PuppyInner>() {
            @Override
            public PuppyInner call(ServiceResponse<PuppyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates (patches) a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param puppy Puppy object supplied in the body of the Patch puppy operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PuppyInner object
     */
    public Observable<ServiceResponse<PuppyInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName, CatUpdate puppy) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (puppy == null) {
            throw new IllegalArgumentException("Parameter puppy is required and cannot be null.");
        }
        Validator.validate(puppy);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), puppy, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PuppyInner>>>() {
                @Override
                public Observable<ServiceResponse<PuppyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PuppyInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PuppyInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PuppyInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PuppyInner>() { }.getType())
                .register(202, new TypeToken<PuppyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets information about a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PuppyInner object if successful.
     */
    public PuppyInner get(String resourceGroupName, String dogName, String puppyName) {
        return getWithServiceResponseAsync(resourceGroupName, dogName, puppyName).toBlocking().single().body();
    }

    /**
     * Gets information about a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PuppyInner> getAsync(String resourceGroupName, String dogName, String puppyName, final ServiceCallback<PuppyInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, dogName, puppyName), serviceCallback);
    }

    /**
     * Gets information about a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PuppyInner object
     */
    public Observable<PuppyInner> getAsync(String resourceGroupName, String dogName, String puppyName) {
        return getWithServiceResponseAsync(resourceGroupName, dogName, puppyName).map(new Func1<ServiceResponse<PuppyInner>, PuppyInner>() {
            @Override
            public PuppyInner call(ServiceResponse<PuppyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PuppyInner object
     */
    public Observable<ServiceResponse<PuppyInner>> getWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PuppyInner>>>() {
                @Override
                public Observable<ServiceResponse<PuppyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PuppyInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PuppyInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PuppyInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PuppyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String dogName, String puppyName) {
        deleteWithServiceResponseAsync(resourceGroupName, dogName, puppyName).toBlocking().last().body();
    }

    /**
     * Deletes a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String dogName, String puppyName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, dogName, puppyName), serviceCallback);
    }

    /**
     * Deletes a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String dogName, String puppyName) {
        return deleteWithServiceResponseAsync(resourceGroupName, dogName, puppyName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String dogName, String puppyName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, dogName, puppyName).toBlocking().single().body();
    }

    /**
     * Deletes a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String dogName, String puppyName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, dogName, puppyName), serviceCallback);
    }

    /**
     * Deletes a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String dogName, String puppyName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, dogName, puppyName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists cats under a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PuppyInner&gt; object if successful.
     */
    public PagedList<PuppyInner> listByDog(final String resourceGroupName, final String dogName) {
        ServiceResponse<Page<PuppyInner>> response = listByDogSinglePageAsync(resourceGroupName, dogName).toBlocking().single();
        return new PagedList<PuppyInner>(response.body()) {
            @Override
            public Page<PuppyInner> nextPage(String nextPageLink) {
                return listByDogNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists cats under a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PuppyInner>> listByDogAsync(final String resourceGroupName, final String dogName, final ListOperationCallback<PuppyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDogSinglePageAsync(resourceGroupName, dogName),
            new Func1<String, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(String nextPageLink) {
                    return listByDogNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists cats under a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PuppyInner&gt; object
     */
    public Observable<Page<PuppyInner>> listByDogAsync(final String resourceGroupName, final String dogName) {
        return listByDogWithServiceResponseAsync(resourceGroupName, dogName)
            .map(new Func1<ServiceResponse<Page<PuppyInner>>, Page<PuppyInner>>() {
                @Override
                public Page<PuppyInner> call(ServiceResponse<Page<PuppyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists cats under a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PuppyInner&gt; object
     */
    public Observable<ServiceResponse<Page<PuppyInner>>> listByDogWithServiceResponseAsync(final String resourceGroupName, final String dogName) {
        return listByDogSinglePageAsync(resourceGroupName, dogName)
            .concatMap(new Func1<ServiceResponse<Page<PuppyInner>>, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(ServiceResponse<Page<PuppyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDogNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists cats under a dog.
     *
    ServiceResponse<PageImpl<PuppyInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<PuppyInner>> * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PuppyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PuppyInner>>> listByDogSinglePageAsync(final String resourceGroupName, final String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDog(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PuppyInner>> result = listByDogDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PuppyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PuppyInner>> listByDogDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PuppyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PuppyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Grants access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get puppy access operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccessUriInner object if successful.
     */
    public AccessUriInner grantAccess(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData) {
        return grantAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName, grantAccessData).toBlocking().last().body();
    }

    /**
     * Grants access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get puppy access operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccessUriInner> grantAccessAsync(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData, final ServiceCallback<AccessUriInner> serviceCallback) {
        return ServiceFuture.fromResponse(grantAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName, grantAccessData), serviceCallback);
    }

    /**
     * Grants access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get puppy access operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<AccessUriInner> grantAccessAsync(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData) {
        return grantAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName, grantAccessData).map(new Func1<ServiceResponse<AccessUriInner>, AccessUriInner>() {
            @Override
            public AccessUriInner call(ServiceResponse<AccessUriInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Grants access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get puppy access operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<AccessUriInner>> grantAccessWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (grantAccessData == null) {
            throw new IllegalArgumentException("Parameter grantAccessData is required and cannot be null.");
        }
        Validator.validate(grantAccessData);
        Observable<Response<ResponseBody>> observable = service.grantAccess(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), grantAccessData, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<AccessUriInner>() { }.getType());
    }

    /**
     * Grants access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get puppy access operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AccessUriInner object if successful.
     */
    public AccessUriInner beginGrantAccess(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData) {
        return beginGrantAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName, grantAccessData).toBlocking().single().body();
    }

    /**
     * Grants access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get puppy access operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AccessUriInner> beginGrantAccessAsync(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData, final ServiceCallback<AccessUriInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginGrantAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName, grantAccessData), serviceCallback);
    }

    /**
     * Grants access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get puppy access operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccessUriInner object
     */
    public Observable<AccessUriInner> beginGrantAccessAsync(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData) {
        return beginGrantAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName, grantAccessData).map(new Func1<ServiceResponse<AccessUriInner>, AccessUriInner>() {
            @Override
            public AccessUriInner call(ServiceResponse<AccessUriInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Grants access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param grantAccessData Access data object supplied in the body of the get puppy access operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AccessUriInner object
     */
    public Observable<ServiceResponse<AccessUriInner>> beginGrantAccessWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (grantAccessData == null) {
            throw new IllegalArgumentException("Parameter grantAccessData is required and cannot be null.");
        }
        Validator.validate(grantAccessData);
        return service.beginGrantAccess(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), grantAccessData, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AccessUriInner>>>() {
                @Override
                public Observable<ServiceResponse<AccessUriInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AccessUriInner> clientResponse = beginGrantAccessDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AccessUriInner> beginGrantAccessDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AccessUriInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AccessUriInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Revokes access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void revokeAccess(String resourceGroupName, String dogName, String puppyName) {
        revokeAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName).toBlocking().last().body();
    }

    /**
     * Revokes access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> revokeAccessAsync(String resourceGroupName, String dogName, String puppyName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(revokeAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName), serviceCallback);
    }

    /**
     * Revokes access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> revokeAccessAsync(String resourceGroupName, String dogName, String puppyName) {
        return revokeAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Revokes access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> revokeAccessWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.revokeAccess(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Revokes access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginRevokeAccess(String resourceGroupName, String dogName, String puppyName) {
        beginRevokeAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName).toBlocking().single().body();
    }

    /**
     * Revokes access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginRevokeAccessAsync(String resourceGroupName, String dogName, String puppyName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginRevokeAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName), serviceCallback);
    }

    /**
     * Revokes access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginRevokeAccessAsync(String resourceGroupName, String dogName, String puppyName) {
        return beginRevokeAccessWithServiceResponseAsync(resourceGroupName, dogName, puppyName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Revokes access to a puppy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param puppyName The name of the puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginRevokeAccessWithServiceResponseAsync(String resourceGroupName, String dogName, String puppyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (puppyName == null) {
            throw new IllegalArgumentException("Parameter puppyName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginRevokeAccess(this.client.subscriptionId(), resourceGroupName, dogName, puppyName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginRevokeAccessDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginRevokeAccessDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists cats under a dog.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PuppyInner&gt; object if successful.
     */
    public PagedList<PuppyInner> listByDogNext(final String nextPageLink) {
        ServiceResponse<Page<PuppyInner>> response = listByDogNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PuppyInner>(response.body()) {
            @Override
            public Page<PuppyInner> nextPage(String nextPageLink) {
                return listByDogNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists cats under a dog.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PuppyInner>> listByDogNextAsync(final String nextPageLink, final ServiceFuture<List<PuppyInner>> serviceFuture, final ListOperationCallback<PuppyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDogNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(String nextPageLink) {
                    return listByDogNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists cats under a dog.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PuppyInner&gt; object
     */
    public Observable<Page<PuppyInner>> listByDogNextAsync(final String nextPageLink) {
        return listByDogNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PuppyInner>>, Page<PuppyInner>>() {
                @Override
                public Page<PuppyInner> call(ServiceResponse<Page<PuppyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists cats under a dog.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PuppyInner&gt; object
     */
    public Observable<ServiceResponse<Page<PuppyInner>>> listByDogNextWithServiceResponseAsync(final String nextPageLink) {
        return listByDogNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PuppyInner>>, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(ServiceResponse<Page<PuppyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDogNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists cats under a dog.
     *
    ServiceResponse<PageImpl<PuppyInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PuppyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PuppyInner>>> listByDogNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByDogNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PuppyInner>> result = listByDogNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PuppyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PuppyInner>> listByDogNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PuppyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PuppyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
