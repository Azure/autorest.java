/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.fluent.gencode.groupable_resource_inheritance.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.fluent.gencode.groupable_resource_inheritance.Cat;
import rx.Observable;
import com.fluent.gencode.groupable_resource_inheritance.CatUpdate;
import com.fluent.gencode.groupable_resource_inheritance.CatSku;
import org.joda.time.DateTime;
import com.fluent.gencode.groupable_resource_inheritance.ColorTypes;
import com.fluent.gencode.groupable_resource_inheritance.CreationData;
import rx.functions.Func1;

class CatImpl extends GroupableResourceCoreImpl<Cat, CatInner, CatImpl, PetsManager> implements Cat, Cat.Definition, Cat.Update {
    private CatUpdate updateParameter;
    CatImpl(String name, CatInner inner, PetsManager manager) {
        super(name, inner, manager);
        this.updateParameter = new CatUpdate();
    }

    @Override
    public Observable<Cat> createResourceAsync() {
        CatsInner client = this.manager().inner().cats();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<CatInner, CatInner>() {
               @Override
               public CatInner call(CatInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Cat> updateResourceAsync() {
        CatsInner client = this.manager().inner().cats();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<CatInner, CatInner>() {
               @Override
               public CatInner call(CatInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<CatInner> getInnerAsync() {
        CatsInner client = this.manager().inner().cats();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new CatUpdate();
    }

    @Override
    public Integer animalSizeGB() {
        return this.inner().animalSizeGB();
    }

    @Override
    public CreationData creationData() {
        return this.inner().creationData();
    }

    @Override
    public String managedBy() {
        return this.inner().managedBy();
    }

    @Override
    public ColorTypes osType() {
        return this.inner().osType();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public CatSku sku() {
        return this.inner().sku();
    }

    @Override
    public DateTime timeCreated() {
        return this.inner().timeCreated();
    }

    @Override
    public CatImpl withCreationData(CreationData creationData) {
        this.inner().withCreationData(creationData);
        return this;
    }

    @Override
    public CatImpl withAnimalSizeGB(Integer animalSizeGB) {
        if (isInCreateMode()) {
            this.inner().withAnimalSizeGB(animalSizeGB);
        } else {
            this.updateParameter.withAnimalSizeGB(animalSizeGB);
        }
        return this;
    }

    @Override
    public CatImpl withOsType(ColorTypes osType) {
        if (isInCreateMode()) {
            this.inner().withOsType(osType);
        } else {
            this.updateParameter.withOsType(osType);
        }
        return this;
    }

    @Override
    public CatImpl withSku(CatSku sku) {
        if (isInCreateMode()) {
            this.inner().withSku(sku);
        } else {
            this.updateParameter.withSku(sku);
        }
        return this;
    }

}
