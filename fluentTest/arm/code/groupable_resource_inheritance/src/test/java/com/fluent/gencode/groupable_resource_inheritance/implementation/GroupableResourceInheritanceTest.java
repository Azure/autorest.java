/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.fluent.gencode.groupable_resource_inheritance.implementation;
import com.fluent.gencode.groupable_resource_inheritance.Cat;
import com.fluent.gencode.groupable_resource_inheritance.Cats;
import com.fluent.gencode.groupable_resource_inheritance.Dog;
import com.fluent.gencode.groupable_resource_inheritance.Dogs;
import com.microsoft.azure.arm.core.TestBase;
import com.microsoft.azure.management.resources.implementation.ResourceManager;
import com.microsoft.rest.RestClient;
import org.junit.Assert;
import org.junit.Test;

import java.lang.reflect.Method;
import java.util.HashSet;

public class GroupableResourceInheritanceTest extends TestBase {
    protected static ResourceManager resourceManager;
    protected static PetsManager petsManager;

    @Override
    protected void initializeClients(RestClient restClient, String defaultSubscription, String domain) {
        resourceManager = ResourceManager
                .authenticate(restClient)
                .withSubscription(defaultSubscription);
        petsManager = PetsManager
                .authenticate(restClient, defaultSubscription);
    }

    @Override
    protected void cleanUpResources() {
    }

    @Test
    public void ensureGroupableResourceInheritance() {
        //
        HashSet<String> expectedExtends = new HashSet<>();
        expectedExtends.add("com.microsoft.azure.arm.model.HasInner");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.Resource");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.GroupableResourceCore");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.HasResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.model.Refreshable");
        expectedExtends.add("com.microsoft.azure.arm.model.Updatable");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.HasManager");
        //
        Class dogCls = Dog.class;
        Class[] dogEInterfaces = dogCls.getInterfaces();
        HashSet<String> dogCurrentExtends = new HashSet<>();
        for (Class dogEInterface : dogEInterfaces) {
            dogCurrentExtends.add(dogEInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), dogCurrentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!dogCurrentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented", false);
            }
        }
        //
        Class catCls = Cat.class;
        Class[] catEInterfaces = catCls.getInterfaces();
        HashSet<String> catCurrentExtends = new HashSet<>();
        for (Class catEInterface : catEInterfaces) {
            catCurrentExtends.add(catEInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), catCurrentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!catCurrentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented", false);
            }
        }
    }

    @Test
    public void ensureGroupableResourceExpectedConstructor() {
        try {
            Class<?>[] parameters = new Class[]{String.class, DogInner.class, PetsManager.class};
            DogImpl.class.getDeclaredConstructor(parameters);
        } catch (NoSuchMethodException ex) {
            Assert.assertTrue( "Expected Ctr 'DogImpl(String, DogInner, PetsManager)' not found", false);
        }
        //
        try {
            Class<?>[] parameters = new Class[]{String.class, CatInner.class, PetsManager.class};
            CatImpl.class.getDeclaredConstructor(parameters);
        } catch (NoSuchMethodException ex) {
            Assert.assertTrue( "Expected Ctr 'CatImpl(String, CatInner, PetsManager)' not found", false);
        }
    }

    @Test
    public void ensureGroupableResourcesInheritance() {
        //
        HashSet<String> expectedExtends = new HashSet<>();
        expectedExtends.add("com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.model.HasInner");
        expectedExtends.add("com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion");
        expectedExtends.add("com.microsoft.azure.arm.collection.SupportsCreating");
        expectedExtends.add("com.microsoft.azure.arm.collection.SupportsListing");
        //
        Class dogCls = Dogs.class;
        Class[] dogEInterfaces = dogCls.getInterfaces();
        HashSet<String> dogCurrentExtends = new HashSet<>();
        for (Class dogEInterface : dogEInterfaces) {
            dogCurrentExtends.add(dogEInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), dogCurrentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!dogCurrentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented by Dog", false);
            }
        }

        for (String dogCurrentExtend : dogCurrentExtends) {
            if (!expectedExtends.contains(dogCurrentExtend)) {
                Assert.assertTrue("Groupable interface 'Dog' implements unexpected interface '" + dogCurrentExtend + "'", false);
            }
        }
        //
        Class catsCls = Cats.class;
        Class[] catEInterfaces = catsCls.getInterfaces();
        HashSet<String> catCurrentExtends = new HashSet<>();
        for (Class catEInterface : catEInterfaces) {
            catCurrentExtends.add(catEInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), catCurrentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!catCurrentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented by Cat", false);
            }
        }

        for (String catCurrentExtend : catCurrentExtends) {
            if (!expectedExtends.contains(catCurrentExtend)) {
                Assert.assertTrue("Groupable interface 'Cat' implements unexpected interface '" + catCurrentExtend + "'", false);
            }
        }
    }

    @Test
    public void ensureGroupableResourcesImplStandardMethods() {
        Method[] dogsDeclMethods = DogsImpl.class.getMethods();
        HashSet<String> dogsMethodSignatures = new HashSet<>();
        dogsMethodSignatures.add("class com.fluent.gencode.groupable_resource_inheritance.implementation.DogImpl:define");
        //
        dogsMethodSignatures.add("rx.Observable<com.fluent.gencode.groupable_resource_inheritance.Dog>:listAsync");
        dogsMethodSignatures.add("com.microsoft.azure.PagedList<com.fluent.gencode.groupable_resource_inheritance.Dog>:list");
        //
        dogsMethodSignatures.add("rx.Observable<com.fluent.gencode.groupable_resource_inheritance.Dog>:listByResourceGroupAsync");
        dogsMethodSignatures.add("com.microsoft.azure.PagedList<com.fluent.gencode.groupable_resource_inheritance.Dog>:listByResourceGroup");
        //
        dogsMethodSignatures.add("rx.Observable<java.lang.String>:deleteByIdsAsync");
        dogsMethodSignatures.add("void:deleteByIds");

        for (String methodSignature : dogsMethodSignatures) {
            boolean found = false;
            for (Method dogMethod : dogsDeclMethods) {
                String mSign = dogMethod.getGenericReturnType() + ":" + dogMethod.getName();
                if (methodSignature.equals(mSign)) {
                    found = true;
                    break;
                }
            }
            Assert.assertTrue("Dog::Method '" + methodSignature + "' not found", found);
        }
        //
        Method[] catsDeclMethods = CatsImpl.class.getMethods();
        HashSet<String> catsMethodSignatures = new HashSet<>();
        catsMethodSignatures.add("class com.fluent.gencode.groupable_resource_inheritance.implementation.CatImpl:define");
        //
        catsMethodSignatures.add("rx.Observable<com.fluent.gencode.groupable_resource_inheritance.Cat>:listAsync");
        catsMethodSignatures.add("com.microsoft.azure.PagedList<com.fluent.gencode.groupable_resource_inheritance.Cat>:list");
        //
        catsMethodSignatures.add("rx.Observable<com.fluent.gencode.groupable_resource_inheritance.Cat>:listByResourceGroupAsync");
        catsMethodSignatures.add("com.microsoft.azure.PagedList<com.fluent.gencode.groupable_resource_inheritance.Cat>:listByResourceGroup");
        //
        catsMethodSignatures.add("rx.Observable<java.lang.String>:deleteByIdsAsync");
        catsMethodSignatures.add("void:deleteByIds");

        for (String methodSignature : catsMethodSignatures) {
            boolean found = false;
            for (Method catMethod : catsDeclMethods) {
                String mSign = catMethod.getGenericReturnType() + ":" + catMethod.getName();
                if (methodSignature.equals(mSign)) {
                    found = true;
                    break;
                }
            }
            Assert.assertTrue("Cat::Method '" + methodSignature + "' not found", found);
        }

    }
}
