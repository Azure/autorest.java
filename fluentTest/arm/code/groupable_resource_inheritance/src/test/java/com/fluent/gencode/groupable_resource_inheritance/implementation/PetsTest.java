/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.fluent.gencode.groupable_resource_inheritance.implementation;
import com.fluent.gencode.groupable_resource_inheritance.Dog;
import com.microsoft.azure.arm.core.TestBase;
import com.microsoft.azure.management.resources.implementation.ResourceManager;
import com.microsoft.rest.RestClient;
import org.junit.Assert;
import org.junit.Test;

import java.util.HashSet;

public class PetsTest extends TestBase {
    protected static ResourceManager resourceManager;
    protected static PetsManager petsManager;

    @Override
    protected void initializeClients(RestClient restClient, String defaultSubscription, String domain) {
        resourceManager = ResourceManager
                .authenticate(restClient)
                .withSubscription(defaultSubscription);
        petsManager = PetsManager
                .authenticate(restClient, defaultSubscription);
    }

    @Override
    protected void cleanUpResources() {
    }

    @Test
    public void ensureGroupableResourceInheritance() {
        //
        HashSet<String> expectedExtends = new HashSet<>();
        expectedExtends.add("com.microsoft.azure.arm.model.HasInner");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.Resource");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.GroupableResourceCore");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.HasResourceGroup");
        expectedExtends.add("com.microsoft.azure.arm.model.Refreshable");
        expectedExtends.add("com.microsoft.azure.arm.model.Updatable");
        expectedExtends.add("com.microsoft.azure.arm.resources.models.HasManager");
        //
        Class cls = Dog.class;
        Class[] eInterfaces = cls.getInterfaces();
        HashSet<String> currentExtends = new HashSet<>();
        for (Class eInterface : eInterfaces) {
            currentExtends.add(eInterface.getName());
        }
        //
        Assert.assertEquals(expectedExtends.size(), currentExtends.size());
        //
        for (String expectedExtend : expectedExtends) {
            if (!currentExtends.contains(expectedExtend)) {
                Assert.assertTrue("Expected interface '" + expectedExtend + "' is not implemented", false);
            }
        }
    }

    @Test
    public void ensureExpectedConstructor() {
        try {
            Class<?>[] parameters = new Class[]{String.class, DogInner.class, PetsManager.class};
            DogImpl.class.getDeclaredConstructor(parameters);
        } catch (NoSuchMethodException ex) {
            Assert.assertTrue( "Expected Ctr 'DogImpl(String, DogInner, PetsManager)' not found", false);
        }
    }
}
