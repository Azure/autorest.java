/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.fluent.gencode.parent_child_insame_opgroup.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.fluent.gencode.parent_child_insame_opgroup.Pets;
import rx.Observable;
import rx.functions.Func1;
import com.fluent.gencode.parent_child_insame_opgroup.Dog;
import com.microsoft.azure.Page;
import rx.Completable;
import com.fluent.gencode.parent_child_insame_opgroup.AccessUri;
import com.fluent.gencode.parent_child_insame_opgroup.GrantAccessData;
import com.fluent.gencode.parent_child_insame_opgroup.Puppy;

class PetsImpl extends WrapperImpl<PetsInner> implements Pets {
    private final Parent_Child_Insame_OpGroupManager manager;

    PetsImpl(Parent_Child_Insame_OpGroupManager manager) {
        super(manager.inner().pets());
        this.manager = manager;
    }

    public Parent_Child_Insame_OpGroupManager manager() {
        return this.manager;
    }

    @Override
    public DogImpl defineDog(String name) {
        return wrapDogModel(name);
    }

    @Override
    public PuppyImpl definePuppy(String name) {
        return wrapPuppyModel(name);
    }

    private DogImpl wrapDogModel(String name) {
        return new DogImpl(name, new DogInner(), this.manager());
    }

    private PuppyImpl wrapPuppyModel(String name) {
        return new PuppyImpl(name, this.manager());
    }

    private DogImpl wrapDogModel(DogInner inner) {
        return  new DogImpl(inner.name(), inner, manager());
    }

    private PuppyImpl wrapPuppyModel(PuppyInner inner) {
        return  new PuppyImpl(inner, manager());
    }

    private Observable<DogInner> getDogInnerUsingPetsInnerAsync(String resourceGroupName, String name) {
        PetsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    private Observable<PuppyInner> getPuppyInnerUsingPetsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String dogName = IdParsingUtils.getValueFromIdByName(id, "dogs");
        String puppyName = IdParsingUtils.getValueFromIdByName(id, "puppies");
        PetsInner client = this.inner();
        return client.getPuppyAsync(resourceGroupName, dogName, puppyName);
    }

    @Override
    public Observable<Dog> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getDogInnerUsingPetsInnerAsync(resourceGroupName, name).map(new Func1<DogInner, Dog> () {
            @Override
            public Dog call(DogInner inner) {
                return wrapDogModel(inner);
            }
        });
    }

    @Override
    public Observable<Dog> listByResourceGroupAsync(String resourceGroupName) {
        PetsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<DogInner>, Iterable<DogInner>>() {
            @Override
            public Iterable<DogInner> call(Page<DogInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DogInner, Dog>() {
            @Override
            public Dog call(DogInner inner) {
                return wrapDogModel(inner);
            }
        });
    }

    @Override
    public Observable<Dog> listAsync() {
        PetsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<DogInner>, Iterable<DogInner>>() {
            @Override
            public Iterable<DogInner> call(Page<DogInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DogInner, Dog>() {
            @Override
            public Dog call(DogInner inner) {
                return wrapDogModel(inner);
            }
        });
    }

    @Override
    public Completable deleteDogAsync(String resourceGroupName, String name) {
        return this.inner().deleteDogAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<AccessUri> grantAccessToDogAsync(String resourceGroupName, String dogName, GrantAccessData grantAccessData) {
        PetsInner client = this.inner();
        return client.grantAccessToDogAsync(resourceGroupName, dogName, grantAccessData)
        .map(new Func1<AccessUriInner, AccessUri>() {
            @Override
            public AccessUri call(AccessUriInner inner) {
                return new AccessUriImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable revokeAccessToDogAsync(String resourceGroupName, String dogName) {
        PetsInner client = this.inner();
        return client.revokeAccessToDogAsync(resourceGroupName, dogName).toCompletable();
    }

    @Override
    public Observable<Puppy> getPuppyAsync(String resourceGroupName, String dogName, String puppyName) {
        PetsInner client = this.inner();
        return client.getPuppyAsync(resourceGroupName, dogName, puppyName)
        .map(new Func1<PuppyInner, Puppy>() {
            @Override
            public Puppy call(PuppyInner inner) {
                return wrapPuppyModel(inner);
            }
       });
    }

    @Override
    public Observable<Puppy> listPuppiesByDogAsync(final String resourceGroupName, final String dogName) {
        PetsInner client = this.inner();
        return client.listPuppiesByDogAsync(resourceGroupName, dogName)
        .flatMapIterable(new Func1<Page<PuppyInner>, Iterable<PuppyInner>>() {
            @Override
            public Iterable<PuppyInner> call(Page<PuppyInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PuppyInner, Puppy>() {
            @Override
            public Puppy call(PuppyInner inner) {
                return wrapPuppyModel(inner);
            }
        });
    }

    @Override
    public Completable deletePuppyAsync(String resourceGroupName, String dogName, String puppyName) {
        PetsInner client = this.inner();
        return client.deletePuppyAsync(resourceGroupName, dogName, puppyName).toCompletable();
    }

    @Override
    public Observable<AccessUri> grantAccessToPuppyAsync(String resourceGroupName, String dogName, String puppyName, GrantAccessData grantAccessData) {
        PetsInner client = this.inner();
        return client.grantAccessToPuppyAsync(resourceGroupName, dogName, puppyName, grantAccessData)
        .map(new Func1<AccessUriInner, AccessUri>() {
            @Override
            public AccessUri call(AccessUriInner inner) {
                return new AccessUriImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable revokeAccessToPuppyAsync(String resourceGroupName, String dogName, String puppyName) {
        PetsInner client = this.inner();
        return client.revokeAccessToPuppyAsync(resourceGroupName, dogName, puppyName).toCompletable();
    }

}
