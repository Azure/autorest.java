/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.fluent.gencode.list_operation_variants.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.fluent.gencode.list_operation_variants.Puppies;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.Page;
import java.util.List;
import com.fluent.gencode.list_operation_variants.Puppy;
import com.fluent.gencode.list_operation_variants.PuppyList;

class PuppiesImpl extends WrapperImpl<PuppiesInner> implements Puppies {
    private final List_Operation_VariantsManager manager;

    PuppiesImpl(List_Operation_VariantsManager manager) {
        super(manager.inner().puppies());
        this.manager = manager;
    }

    public List_Operation_VariantsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<Puppy> list1Async(final String resourceGroupName, final String dogName) {
        PuppiesInner client = this.inner();
        return client.list1Async(resourceGroupName, dogName)
        .flatMapIterable(new Func1<Page<PuppyInner>, Iterable<PuppyInner>>() {
            @Override
            public Iterable<PuppyInner> call(Page<PuppyInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PuppyInner, Puppy>() {
            @Override
            public Puppy call(PuppyInner inner) {
                return new PuppyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Puppy> list2Async(String resourceGroupName, String dogName) {
        PuppiesInner client = this.inner();
        return client.list2Async(resourceGroupName, dogName)
        .flatMap(new Func1<List<PuppyInner>, Observable<PuppyInner>>() {
            @Override
            public Observable<PuppyInner> call(List<PuppyInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<PuppyInner, Puppy>() {
            @Override
            public Puppy call(PuppyInner inner) {
                return new PuppyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<PuppyList> list3Async(String resourceGroupName, String dogName) {
        PuppiesInner client = this.inner();
        return client.list3Async(resourceGroupName, dogName)
        .map(new Func1<PuppyListInner, PuppyList>() {
            @Override
            public PuppyList call(PuppyListInner inner) {
                return new PuppyListImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Puppy> list4Async(String resourceGroupName, String dogName) {
        PuppiesInner client = this.inner();
        return client.list4Async(resourceGroupName, dogName)
        .flatMap(new Func1<List<PuppyInner>, Observable<PuppyInner>>() {
            @Override
            public Observable<PuppyInner> call(List<PuppyInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<PuppyInner, Puppy>() {
            @Override
            public Puppy call(PuppyInner inner) {
                return new PuppyImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<Puppy> listByResourceGroupAsync(String resourceGroupName, String dogName) {
        PuppiesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName, dogName)
        .flatMap(new Func1<Page<PuppyInner>, Observable<PuppyInner>>() {
            @Override
            public Observable<PuppyInner> call(Page<PuppyInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<PuppyInner, Puppy>() {
            @Override
            public Puppy call(PuppyInner inner) {
                return new PuppyImpl(inner, manager());
            }
        });
    }

}
