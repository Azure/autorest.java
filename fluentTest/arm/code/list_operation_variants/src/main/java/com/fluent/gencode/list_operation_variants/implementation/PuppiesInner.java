/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.fluent.gencode.list_operation_variants.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Puppies.
 */
public class PuppiesInner {
    /** The Retrofit service to perform REST calls. */
    private PuppiesService service;
    /** The service client containing this operation class. */
    private PetResourceProviderClientImpl client;

    /**
     * Initializes an instance of PuppiesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PuppiesInner(Retrofit retrofit, PetResourceProviderClientImpl client) {
        this.service = retrofit.create(PuppiesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Puppies to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PuppiesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.list_operation_variants.Puppies list1" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies1")
        Observable<Response<ResponseBody>> list1(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.list_operation_variants.Puppies list2" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies2")
        Observable<Response<ResponseBody>> list2(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.list_operation_variants.Puppies list3" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies3")
        Observable<Response<ResponseBody>> list3(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.list_operation_variants.Puppies list4" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}/puppies4")
        Observable<Response<ResponseBody>> list4(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.list_operation_variants.Puppies listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/puppies")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.list_operation_variants.Puppies list1Next" })
        @GET
        Observable<Response<ResponseBody>> list1Next(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PuppyInner&gt; object if successful.
     */
    public PagedList<PuppyInner> list1(final String resourceGroupName, final String dogName) {
        ServiceResponse<Page<PuppyInner>> response = list1SinglePageAsync(resourceGroupName, dogName).toBlocking().single();
        return new PagedList<PuppyInner>(response.body()) {
            @Override
            public Page<PuppyInner> nextPage(String nextPageLink) {
                return list1NextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PuppyInner>> list1Async(final String resourceGroupName, final String dogName, final ListOperationCallback<PuppyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            list1SinglePageAsync(resourceGroupName, dogName),
            new Func1<String, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(String nextPageLink) {
                    return list1NextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PuppyInner&gt; object
     */
    public Observable<Page<PuppyInner>> list1Async(final String resourceGroupName, final String dogName) {
        return list1WithServiceResponseAsync(resourceGroupName, dogName)
            .map(new Func1<ServiceResponse<Page<PuppyInner>>, Page<PuppyInner>>() {
                @Override
                public Page<PuppyInner> call(ServiceResponse<Page<PuppyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PuppyInner&gt; object
     */
    public Observable<ServiceResponse<Page<PuppyInner>>> list1WithServiceResponseAsync(final String resourceGroupName, final String dogName) {
        return list1SinglePageAsync(resourceGroupName, dogName)
            .concatMap(new Func1<ServiceResponse<Page<PuppyInner>>, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(ServiceResponse<Page<PuppyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(list1NextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the puppies.
     *
    ServiceResponse<PageImpl<PuppyInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<PuppyInner>> * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PuppyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PuppyInner>>> list1SinglePageAsync(final String resourceGroupName, final String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list1(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PuppyInner>> result = list1Delegate(response);
                        return Observable.just(new ServiceResponse<Page<PuppyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PuppyInner>> list1Delegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PuppyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PuppyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PuppyInner&gt; object if successful.
     */
    public List<PuppyInner> list2(String resourceGroupName, String dogName) {
        return list2WithServiceResponseAsync(resourceGroupName, dogName).toBlocking().single().body();
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PuppyInner>> list2Async(String resourceGroupName, String dogName, final ServiceCallback<List<PuppyInner>> serviceCallback) {
        return ServiceFuture.fromResponse(list2WithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PuppyInner&gt; object
     */
    public Observable<List<PuppyInner>> list2Async(String resourceGroupName, String dogName) {
        return list2WithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<List<PuppyInner>>, List<PuppyInner>>() {
            @Override
            public List<PuppyInner> call(ServiceResponse<List<PuppyInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PuppyInner&gt; object
     */
    public Observable<ServiceResponse<List<PuppyInner>>> list2WithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list2(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<PuppyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PuppyInner>> result = list2Delegate(response);
                        List<PuppyInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<PuppyInner>> clientResponse = new ServiceResponse<List<PuppyInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PuppyInner>> list2Delegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PuppyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PuppyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PuppyListInner object if successful.
     */
    public PuppyListInner list3(String resourceGroupName, String dogName) {
        return list3WithServiceResponseAsync(resourceGroupName, dogName).toBlocking().single().body();
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PuppyListInner> list3Async(String resourceGroupName, String dogName, final ServiceCallback<PuppyListInner> serviceCallback) {
        return ServiceFuture.fromResponse(list3WithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PuppyListInner object
     */
    public Observable<PuppyListInner> list3Async(String resourceGroupName, String dogName) {
        return list3WithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<PuppyListInner>, PuppyListInner>() {
            @Override
            public PuppyListInner call(ServiceResponse<PuppyListInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PuppyListInner object
     */
    public Observable<ServiceResponse<PuppyListInner>> list3WithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list3(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PuppyListInner>>>() {
                @Override
                public Observable<ServiceResponse<PuppyListInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PuppyListInner> clientResponse = list3Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PuppyListInner> list3Delegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PuppyListInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PuppyListInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PuppyInner&gt; object if successful.
     */
    public List<PuppyInner> list4(String resourceGroupName, String dogName) {
        return list4WithServiceResponseAsync(resourceGroupName, dogName).toBlocking().single().body();
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PuppyInner>> list4Async(String resourceGroupName, String dogName, final ServiceCallback<List<PuppyInner>> serviceCallback) {
        return ServiceFuture.fromResponse(list4WithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PuppyInner&gt; object
     */
    public Observable<List<PuppyInner>> list4Async(String resourceGroupName, String dogName) {
        return list4WithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<List<PuppyInner>>, List<PuppyInner>>() {
            @Override
            public List<PuppyInner> call(ServiceResponse<List<PuppyInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PuppyInner&gt; object
     */
    public Observable<ServiceResponse<List<PuppyInner>>> list4WithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list4(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<PuppyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<PuppyInner>> clientResponse = list4Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<PuppyInner>> list4Delegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<PuppyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<PuppyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @return the PagedList<PuppyInner> object if successful.
     */
    public PagedList<PuppyInner> listByResourceGroup(String resourceGroupName, String dogName) {
        PageImpl1<PuppyInner> page = new PageImpl1<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName, dogName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<PuppyInner>(page) {
            @Override
            public Page<PuppyInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PuppyInner>> listByResourceGroupAsync(String resourceGroupName, String dogName, final ServiceCallback<List<PuppyInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @return the observable to the List&lt;PuppyInner&gt; object
     */
    public Observable<Page<PuppyInner>> listByResourceGroupAsync(String resourceGroupName, String dogName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<List<PuppyInner>>, Page<PuppyInner>>() {
            @Override
            public Page<PuppyInner> call(ServiceResponse<List<PuppyInner>> response) {
                PageImpl1<PuppyInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Lists all the puppies.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed puppy that is being created. The name can't be changed after the puppy is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @return the observable to the List&lt;PuppyInner&gt; object
     */
    public Observable<ServiceResponse<List<PuppyInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<PuppyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PuppyInner>> result = listByResourceGroupDelegate(response);
                        List<PuppyInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<PuppyInner>> clientResponse = new ServiceResponse<List<PuppyInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PuppyInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PuppyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PuppyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all the puppies.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PuppyInner&gt; object if successful.
     */
    public PagedList<PuppyInner> list1Next(final String nextPageLink) {
        ServiceResponse<Page<PuppyInner>> response = list1NextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PuppyInner>(response.body()) {
            @Override
            public Page<PuppyInner> nextPage(String nextPageLink) {
                return list1NextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all the puppies.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PuppyInner>> list1NextAsync(final String nextPageLink, final ServiceFuture<List<PuppyInner>> serviceFuture, final ListOperationCallback<PuppyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            list1NextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(String nextPageLink) {
                    return list1NextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all the puppies.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PuppyInner&gt; object
     */
    public Observable<Page<PuppyInner>> list1NextAsync(final String nextPageLink) {
        return list1NextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PuppyInner>>, Page<PuppyInner>>() {
                @Override
                public Page<PuppyInner> call(ServiceResponse<Page<PuppyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all the puppies.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PuppyInner&gt; object
     */
    public Observable<ServiceResponse<Page<PuppyInner>>> list1NextWithServiceResponseAsync(final String nextPageLink) {
        return list1NextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PuppyInner>>, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(ServiceResponse<Page<PuppyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(list1NextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all the puppies.
     *
    ServiceResponse<PageImpl<PuppyInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PuppyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PuppyInner>>> list1NextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.list1Next(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PuppyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PuppyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PuppyInner>> result = list1NextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PuppyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PuppyInner>> list1NextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PuppyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PuppyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
