/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.fluent.gencode.list_operation_variants.implementation;

import com.fluent.gencode.list_operation_variants.Puppies;
import com.microsoft.azure.arm.core.TestBase;
import com.microsoft.rest.RestClient;
import org.junit.Assert;
import org.junit.Test;

import java.lang.reflect.Method;
import java.util.HashSet;

public class ListOperationVariantsTest extends TestBase {
    protected static List_Operation_VariantsManager petsManager;

    @Override
    protected void initializeClients(RestClient restClient, String defaultSubscription, String domain) {
        petsManager = List_Operation_VariantsManager
                .authenticate(restClient, defaultSubscription);
    }

    @Override
    protected void cleanUpResources() {
    }

    @Test
    public void ensureVariousListMethodsAndSignature() {
        HashSet<String> methodSignatures = new HashSet<>();
        methodSignatures.add("rx.Observable<com.fluent.gencode.list_operation_variants.Puppy>:listByResourceGroupAsync");
        methodSignatures.add("rx.Observable<com.fluent.gencode.list_operation_variants.Puppy>:list2Async");
        methodSignatures.add("rx.Observable<com.fluent.gencode.list_operation_variants.PuppyList>:list3Async");
        methodSignatures.add("rx.Observable<com.fluent.gencode.list_operation_variants.Puppy>:list4Async");
        methodSignatures.add("rx.Observable<com.fluent.gencode.list_operation_variants.Puppy>:list1Async");
        //
        Method[] declMethods = Puppies.class.getMethods();
        for (String methodSignature : methodSignatures) {
            boolean found = false;
            for (Method method : declMethods) {
                String mSign = method.getGenericReturnType() + ":" + method.getName();
                if (methodSignature.equals(mSign)) {
                    found = true;
                    break;
                }
            }
            Assert.assertTrue("Method '" + methodSignature + "' not found", found);
        }

        try {
            Method method = PuppiesImpl.class.getDeclaredMethod("listByResourceGroupAsync", String.class, String.class);
            Assert.assertEquals("rx.Observable<com.fluent.gencode.list_operation_variants.Puppy>", method.getGenericReturnType().toString());
        } catch (NoSuchMethodException e) {
            Assert.assertTrue("Expected listByResourceGroupAsync(String, String) not found", false);
        }
        //
        try {
            Method method = PuppiesImpl.class.getDeclaredMethod("list2Async", String.class, String.class);
            Assert.assertEquals("rx.Observable<com.fluent.gencode.list_operation_variants.Puppy>", method.getGenericReturnType().toString());
        } catch (NoSuchMethodException e) {
            Assert.assertTrue("Expected list2Async(String, String) not found", false);
        }
        //
        try {
            Method method = PuppiesImpl.class.getDeclaredMethod("list3Async", String.class, String.class);
            Assert.assertEquals("rx.Observable<com.fluent.gencode.list_operation_variants.PuppyList>", method.getGenericReturnType().toString());
        } catch (NoSuchMethodException e) {
            Assert.assertTrue("Expected list3Async(String, String) not found", false);
        }
        //
        try {
            Method method = PuppiesImpl.class.getDeclaredMethod("list4Async", String.class, String.class);
            Assert.assertEquals("rx.Observable<com.fluent.gencode.list_operation_variants.Puppy>", method.getGenericReturnType().toString());
        } catch (NoSuchMethodException e) {
            Assert.assertTrue("Expected list4Async(String, String) not found", false);
        }
        //
        try {
            Method method = PuppiesImpl.class.getDeclaredMethod("list1Async", String.class, String.class);
            Assert.assertEquals("rx.Observable<com.fluent.gencode.list_operation_variants.Puppy>", method.getGenericReturnType().toString());
        } catch (NoSuchMethodException e) {
            Assert.assertTrue("Expected list1Async(String, String) not found", false);
        }
    }
}
