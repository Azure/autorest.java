/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.fluent.gencode.create_with_nullpayload_update_with_payload.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.fluent.gencode.create_with_nullpayload_update_with_payload.DogUpdate;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Dogs.
 */
public class DogsInner implements InnerSupportsGet<DogInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private DogsService service;
    /** The service client containing this operation class. */
    private PetResourceProviderClientImpl client;

    /**
     * Initializes an instance of DogsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DogsInner(Retrofit retrofit, PetResourceProviderClientImpl client) {
        this.service = retrofit.create(DogsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Dogs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DogsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.create_with_nullpayload_update_with_payload.Dogs createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.create_with_nullpayload_update_with_payload.Dogs beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.create_with_nullpayload_update_with_payload.Dogs updateDog" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}")
        Observable<Response<ResponseBody>> updateDog(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Body DogUpdate dog, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.create_with_nullpayload_update_with_payload.Dogs beginUpdateDog" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}")
        Observable<Response<ResponseBody>> beginUpdateDog(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Body DogUpdate dog, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.create_with_nullpayload_update_with_payload.Dogs getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.create_with_nullpayload_update_with_payload.Dogs delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.fluent.gencode.create_with_nullpayload_update_with_payload.Dogs beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Pets/dogs/{dogName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dogName") String dogName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DogInner object if successful.
     */
    public DogInner createOrUpdate(String resourceGroupName, String dogName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, dogName).toBlocking().last().body();
    }

    /**
     * Creates or updates a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DogInner> createOrUpdateAsync(String resourceGroupName, String dogName, final ServiceCallback<DogInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Creates or updates a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DogInner> createOrUpdateAsync(String resourceGroupName, String dogName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<DogInner>, DogInner>() {
            @Override
            public DogInner call(ServiceResponse<DogInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DogInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DogInner>() { }.getType());
    }

    /**
     * Creates or updates a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DogInner object if successful.
     */
    public DogInner beginCreateOrUpdate(String resourceGroupName, String dogName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dogName).toBlocking().single().body();
    }

    /**
     * Creates or updates a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DogInner> beginCreateOrUpdateAsync(String resourceGroupName, String dogName, final ServiceCallback<DogInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Creates or updates a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DogInner object
     */
    public Observable<DogInner> beginCreateOrUpdateAsync(String resourceGroupName, String dogName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<DogInner>, DogInner>() {
            @Override
            public DogInner call(ServiceResponse<DogInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DogInner object
     */
    public Observable<ServiceResponse<DogInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DogInner>>>() {
                @Override
                public Observable<ServiceResponse<DogInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DogInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DogInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DogInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DogInner>() { }.getType())
                .register(202, new TypeToken<DogInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates (patches) a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param dog Dog object supplied in the body of the Patch dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DogInner object if successful.
     */
    public DogInner updateDog(String resourceGroupName, String dogName, DogUpdate dog) {
        return updateDogWithServiceResponseAsync(resourceGroupName, dogName, dog).toBlocking().last().body();
    }

    /**
     * Updates (patches) a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param dog Dog object supplied in the body of the Patch dog operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DogInner> updateDogAsync(String resourceGroupName, String dogName, DogUpdate dog, final ServiceCallback<DogInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateDogWithServiceResponseAsync(resourceGroupName, dogName, dog), serviceCallback);
    }

    /**
     * Updates (patches) a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param dog Dog object supplied in the body of the Patch dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DogInner> updateDogAsync(String resourceGroupName, String dogName, DogUpdate dog) {
        return updateDogWithServiceResponseAsync(resourceGroupName, dogName, dog).map(new Func1<ServiceResponse<DogInner>, DogInner>() {
            @Override
            public DogInner call(ServiceResponse<DogInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates (patches) a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param dog Dog object supplied in the body of the Patch dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DogInner>> updateDogWithServiceResponseAsync(String resourceGroupName, String dogName, DogUpdate dog) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (dog == null) {
            throw new IllegalArgumentException("Parameter dog is required and cannot be null.");
        }
        Validator.validate(dog);
        Observable<Response<ResponseBody>> observable = service.updateDog(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), dog, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DogInner>() { }.getType());
    }

    /**
     * Updates (patches) a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param dog Dog object supplied in the body of the Patch dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DogInner object if successful.
     */
    public DogInner beginUpdateDog(String resourceGroupName, String dogName, DogUpdate dog) {
        return beginUpdateDogWithServiceResponseAsync(resourceGroupName, dogName, dog).toBlocking().single().body();
    }

    /**
     * Updates (patches) a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param dog Dog object supplied in the body of the Patch dog operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DogInner> beginUpdateDogAsync(String resourceGroupName, String dogName, DogUpdate dog, final ServiceCallback<DogInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateDogWithServiceResponseAsync(resourceGroupName, dogName, dog), serviceCallback);
    }

    /**
     * Updates (patches) a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param dog Dog object supplied in the body of the Patch dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DogInner object
     */
    public Observable<DogInner> beginUpdateDogAsync(String resourceGroupName, String dogName, DogUpdate dog) {
        return beginUpdateDogWithServiceResponseAsync(resourceGroupName, dogName, dog).map(new Func1<ServiceResponse<DogInner>, DogInner>() {
            @Override
            public DogInner call(ServiceResponse<DogInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates (patches) a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param dog Dog object supplied in the body of the Patch dog operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DogInner object
     */
    public Observable<ServiceResponse<DogInner>> beginUpdateDogWithServiceResponseAsync(String resourceGroupName, String dogName, DogUpdate dog) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (dog == null) {
            throw new IllegalArgumentException("Parameter dog is required and cannot be null.");
        }
        Validator.validate(dog);
        return service.beginUpdateDog(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), dog, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DogInner>>>() {
                @Override
                public Observable<ServiceResponse<DogInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DogInner> clientResponse = beginUpdateDogDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DogInner> beginUpdateDogDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DogInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DogInner>() { }.getType())
                .register(202, new TypeToken<DogInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets information about a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DogInner object if successful.
     */
    public DogInner getByResourceGroup(String resourceGroupName, String dogName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dogName).toBlocking().single().body();
    }

    /**
     * Gets information about a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DogInner> getByResourceGroupAsync(String resourceGroupName, String dogName, final ServiceCallback<DogInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Gets information about a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DogInner object
     */
    public Observable<DogInner> getByResourceGroupAsync(String resourceGroupName, String dogName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<DogInner>, DogInner>() {
            @Override
            public DogInner call(ServiceResponse<DogInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DogInner object
     */
    public Observable<ServiceResponse<DogInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DogInner>>>() {
                @Override
                public Observable<ServiceResponse<DogInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DogInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DogInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DogInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DogInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String dogName) {
        deleteWithServiceResponseAsync(resourceGroupName, dogName).toBlocking().last().body();
    }

    /**
     * Deletes a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String dogName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Deletes a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String dogName) {
        return deleteWithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String dogName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, dogName).toBlocking().single().body();
    }

    /**
     * Deletes a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String dogName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, dogName), serviceCallback);
    }

    /**
     * Deletes a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String dogName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, dogName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a dog.
     *
     * @param resourceGroupName The name of the resource group.
     * @param dogName The name of the managed dog that is being created. The name can't be changed after the dog is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String dogName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dogName == null) {
            throw new IllegalArgumentException("Parameter dogName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, dogName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
