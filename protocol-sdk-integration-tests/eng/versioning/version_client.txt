# Format;
# <groupId>:<artifactId>;dependency-version;current-version
#
# The dependency-version is used by other Azure SDKs outside of the release group when listing the library as a Maven
# dependency in its POM. The current-version is used by the library to denote its in-development version and as the
# Maven dependency version for other Azure SDKs inside the same release group.
#
# Given com.azure:azure-example;1.1.0;1.2.0-beta.1 in the release group /sdk/example
# - com.azure:azure-example2 in release group /sdk/example will use the current-version (1.2.0-beta.1) when using
# com.azure:azure-example as a dependency.
# - com.azure:azure-not-an-example in release group /sdk/notanexample will use the dependency-version (1.1.0) when using
# com.azure:azure-example as a dependency.
#
# When releasing a library the current-version should be set to the version being released to Maven. Upon release of the
# library an automated PR will be submitted to update the dependency-version and current-version, the updates are
# dependent on the current and previous releases of the library.
#
# - When both dependency and current are beta both versions will update upon release. Given the version release state
#   of 1.0.0-beta.2;1.0.0-beta.3 the updated versions will become 1.0.0-beta.3;1.0.0-beta.4.
#
# - When both dependency and current are GA both versions will update upon release. Given the version release state of
#   1.0.0;1.0.1 the updated versions will become 1.0.1;1.1.0-beta.1. Current version will always become the next minor
#   beta version.
#
# - When dependency is GA and current is beta only the current version will update upon release. Given the version
#   release state of 1.0.0;1.1.0-beta.1 the updated versions will become 1.0.0;1.1.0-beta.2. The dependency version will
#   remain as-is as GA libraries could depend on the library being released, if they were to take a beta dependencies it
#   could result in an invalid release state (GA libraries can never have beta dependencies). The current version will
#   become the next beta increment version. If a library requires the released beta version as a dependency view the
#   beta dependency guidelines below.
#
# When adding a new library the dependency-version and current-version will be the same until the first release is
# performed. So, if com.azure:azure-new-library is added with major version 2 it'll use
# com.azure:azure-new-library;2.0.0-beta.1;2.0.0-beta.1 as its initial version tag.

com.azure:azure-client-sdk-parent;1.7.0;1.7.0
com.azure:azure-core;1.22.0-beta.1;1.22.0-beta.2
com.azure:azure-core-http-netty;1.11.1;1.12.0-beta.1
com.azure:azure-core-management;1.4.2;1.5.0-beta.1
com.azure:azure-core-test;1.7.3;1.8.0-beta.1
com.azure:azure-identity;1.4.0;1.5.0-beta.1

# Unreleased dependencies: Copy the entry from above, prepend "unreleased_" and remove the current
# version. Unreleased dependencies are only valid for dependency versions.
# Format;
# unreleased_<groupId>:<artifactId>;dependency-version
# note: The unreleased dependencies will not be manipulated with the automatic PR creation code.
# In the pom, the version update tag after the version should name the unreleased package and the dependency version:
# <!-- {x-version-update;unreleased_com.azure:azure-core;dependency} -->

# Released Beta dependencies: Copy the entry from above, prepend "beta_", remove the current
# version and set the version to the released beta. Released beta dependencies are only valid
# for dependency versions. These entries are specifically for when we've released a beta for
# a library but need to keep the dependency version at the latest released GA.
# Format;
# beta_<groupId>:<artifactId>;dependency-version
# note: Released beta versions will not be manipulated with the automatic PR creation code.
