// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.bodycomplex.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The GoblinShark model.
 */
@Fluent
public final class GoblinShark extends Shark {
    /*
     * The fishtype property.
     */
    @Generated
    private String fishtype = "goblin";

    /*
     * The jawsize property.
     */
    @Generated
    private Integer jawsize;

    /*
     * Colors possible
     */
    @Generated
    private GoblinSharkColor color;

    /**
     * Creates an instance of GoblinShark class.
     */
    @Generated
    public GoblinShark() {
    }

    /**
     * Get the fishtype property: The fishtype property.
     * 
     * @return the fishtype value.
     */
    @Generated
    @Override
    public String getFishtype() {
        return this.fishtype;
    }

    /**
     * Get the jawsize property: The jawsize property.
     * 
     * @return the jawsize value.
     */
    @Generated
    public Integer getJawsize() {
        return this.jawsize;
    }

    /**
     * Set the jawsize property: The jawsize property.
     * 
     * @param jawsize the jawsize value to set.
     * @return the GoblinShark object itself.
     */
    @Generated
    public GoblinShark setJawsize(Integer jawsize) {
        this.jawsize = jawsize;
        return this;
    }

    /**
     * Get the color property: Colors possible.
     * 
     * @return the color value.
     */
    @Generated
    public GoblinSharkColor getColor() {
        return this.color;
    }

    /**
     * Set the color property: Colors possible.
     * 
     * @param color the color value to set.
     * @return the GoblinShark object itself.
     */
    @Generated
    public GoblinShark setColor(GoblinSharkColor color) {
        this.color = color;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public GoblinShark setAge(Integer age) {
        super.setAge(age);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public GoblinShark setBirthday(OffsetDateTime birthday) {
        super.setBirthday(birthday);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public GoblinShark setSpecies(String species) {
        super.setSpecies(species);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public GoblinShark setLength(float length) {
        super.setLength(length);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public GoblinShark setSiblings(List<Fish> siblings) {
        super.setSiblings(siblings);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeFloatField("length", getLength());
        jsonWriter.writeStringField("birthday",
            getBirthday() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getBirthday()));
        jsonWriter.writeStringField("species", getSpecies());
        jsonWriter.writeArrayField("siblings", getSiblings(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("age", getAge());
        jsonWriter.writeStringField("fishtype", this.fishtype);
        jsonWriter.writeNumberField("jawsize", this.jawsize);
        jsonWriter.writeStringField("color", this.color == null ? null : this.color.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GoblinShark from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GoblinShark if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GoblinShark.
     */
    @Generated
    public static GoblinShark fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GoblinShark deserializedGoblinShark = new GoblinShark();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("length".equals(fieldName)) {
                    deserializedGoblinShark.setLength(reader.getFloat());
                } else if ("birthday".equals(fieldName)) {
                    deserializedGoblinShark.setBirthday(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("species".equals(fieldName)) {
                    deserializedGoblinShark.setSpecies(reader.getString());
                } else if ("siblings".equals(fieldName)) {
                    List<Fish> siblings = reader.readArray(reader1 -> Fish.fromJson(reader1));
                    deserializedGoblinShark.setSiblings(siblings);
                } else if ("age".equals(fieldName)) {
                    deserializedGoblinShark.setAge(reader.getNullable(JsonReader::getInt));
                } else if ("fishtype".equals(fieldName)) {
                    deserializedGoblinShark.fishtype = reader.getString();
                } else if ("jawsize".equals(fieldName)) {
                    deserializedGoblinShark.jawsize = reader.getNullable(JsonReader::getInt);
                } else if ("color".equals(fieldName)) {
                    deserializedGoblinShark.color = GoblinSharkColor.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGoblinShark;
        });
    }
}
