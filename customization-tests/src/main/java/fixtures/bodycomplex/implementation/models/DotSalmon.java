// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package fixtures.bodycomplex.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The DotSalmon model.
 */
@Fluent
@JsonProperty(value = "isWild")
public final class DotSalmon extends DotFish {

    /*
     * The fish.type property.
     */
    @Generated
    private String fishType = "DotSalmon";

    /*
     * The location property.
     */
    @Generated
    private String location;

    /*
     * The iswild property.
     */
    @Generated
    private Boolean isWild;

    /**
     * Creates an instance of DotSalmon class.
     */
    @Generated
    public DotSalmon() {
    }

    /**
     * Get the fishType property: The fish.type property.
     *
     * @return the fishType value.
     */
    @Generated
    @Override
    public String getFishType() {
        return this.fishType;
    }

    /**
     * Get the location property: The location property.
     *
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Set the location property: The location property.
     *
     * @param location the location value to set.
     * @return the DotSalmon object itself.
     */
    @Generated
    public DotSalmon setLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the isWild property: The iswild property.
     *
     * @return the isWild value.
     */
    @Generated
    public boolean isWild() {
        return this.isWild;
    }

    /**
     * Set the isWild property: The iswild property.
     *
     * @param isWild the isWild value to set.
     */
    @Generated
    public void setWild(Boolean isWild) {
        this.isWild = isWild;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public DotSalmon setSpecies(String species) {
        super.setSpecies(species);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("species", getSpecies());
        jsonWriter.writeStringField("fish.type", this.fishType);
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeBooleanField("iswild", this.isWild);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DotSalmon from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DotSalmon if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DotSalmon.
     */
    @Generated
    public static DotSalmon fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DotSalmon deserializedDotSalmon = new DotSalmon();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("species".equals(fieldName)) {
                    deserializedDotSalmon.setSpecies(reader.getString());
                } else if ("fish.type".equals(fieldName)) {
                    deserializedDotSalmon.fishType = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedDotSalmon.location = reader.getString();
                } else if ("iswild".equals(fieldName)) {
                    deserializedDotSalmon.isWild = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDotSalmon;
        });
    }

    /**
     * Return if the salmon is a domestic species.
     *
     * @return true if the salmon is domestic
     * @deprecated Removing in the next version
     */
    @Deprecated
    public boolean isDomestic() {
        return "US".equalsIgnoreCase(getLocation());
    }
}
