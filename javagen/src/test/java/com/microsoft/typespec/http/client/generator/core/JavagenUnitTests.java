// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package com.microsoft.typespec.http.client.generator.core;

import com.microsoft.typespec.http.client.generator.core.extension.model.codemodel.CodeModel;
import com.microsoft.typespec.http.client.generator.core.extension.plugin.JavaSettings;
import com.microsoft.typespec.http.client.generator.core.mapper.Mappers;
import com.microsoft.typespec.http.client.generator.core.model.clientmodel.Client;
import com.microsoft.typespec.http.client.generator.core.model.javamodel.JavaPackage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * unit test entry
 */
public class JavagenUnitTests {

    @Test
    public void generateTest() {
        MockUnitJavagen javagen = new MockUnitJavagen();
        // SOURCE SWAGGER URL: https://github.com/Azure/azure-rest-api-specs/blob/main/specification/containerregistry/data-plane/Azure.ContainerRegistry/stable/2021-07-01/containerregistry.json
        // It's generated by preprocessor. It can be found under preprocessor module after calling autorest for generation.
        String fileName = "containerregistry-code-model-processed-no-tags.yaml";

        CodeModel codeModel = javagen.parseCodeModel(fileName);
        Client client = Mappers.getClientMapper().map(codeModel);
        JavaPackage javaPackage = javagen.writeToTemplates(codeModel, client, JavaSettings.getInstance(), true);

        System.out.println(javaPackage.getJavaFiles().size());
    }

//    /**
//     * Test the correctness of generated returnType javadoc.
//     * It consists of two dimensions:
//     * 1. whether description exists already on operation or schema itself
//     * 2. when baseType and returnType varies
//     */
//    @Test
//    public void returnTypeDescTest(){
//        MockUnitJavagen javagen = new MockUnitJavagen(); // set NewPlugin host
//
//        Operation operation;
//        IType returnType;
//        IType baseType;
//        String description;
//        String operationDesc;
//        String responseSchemaDesc;
//        String expectedDescription;
//
//        // description on operation
//        // Mono
//        operationDesc ="desc from operation";
//        responseSchemaDesc = "desc from response schema";
//        operation = operationWithDescOnOperationAndResponseSchema(operationDesc, responseSchemaDesc);
//        expectedDescription = String.format("%s on successful completion of {@link Mono}", operationDesc);
//
//        // Mono<Void>
//        baseType = PrimitiveType.VOID;
//        returnType = GenericType.Mono(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        Assertions.assertEquals(expectedDescription, description);        // Mono<Boolean>
//        baseType = PrimitiveType.BOOLEAN;
//        returnType = GenericType.Mono(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        Assertions.assertEquals(expectedDescription, description);
//        //Response
//        operation = operationWithDescOnOperationAndResponseSchema(operationDesc, responseSchemaDesc);
//        expectedDescription = String.format("%s along with {@link Response}", operationDesc);
//        // Response<Void>
//        baseType = PrimitiveType.VOID;
//        returnType = GenericType.Response(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        Assertions.assertEquals(expectedDescription, description);        // Response<Boolean>
//        baseType = PrimitiveType.BOOLEAN;
//        returnType = GenericType.Response(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        Assertions.assertEquals(expectedDescription, description);
//
//        // description on schema
//        // Mono
//        operation = operationWithDescOnResponseSchema(responseSchemaDesc);
//        expectedDescription = String.format("%s on successful completion of {@link Mono}", responseSchemaDesc);
//        // Mono<Void>
//        baseType = PrimitiveType.VOID;
//        returnType = GenericType.Mono(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        // Mono<Boolean>
//        Assertions.assertEquals(expectedDescription, description);
//        baseType = PrimitiveType.BOOLEAN;
//        returnType = GenericType.Mono(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        // Mono<T>
//        Assertions.assertEquals(expectedDescription, description);
//        baseType = GenericType.Response(ClassType.STRING);
//        returnType = GenericType.Mono(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        expectedDescription = "desc from response schema along with {@link Response} on successful completion of {@link Mono}";
//        Assertions.assertEquals(expectedDescription, description);
//
//        // Response
//        operation = operationWithDescOnResponseSchema(responseSchemaDesc);
//        expectedDescription = String.format("%s along with {@link Response}", responseSchemaDesc);
//        // Response<Void>
//        baseType = PrimitiveType.VOID;
//        returnType = GenericType.Response(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        Assertions.assertEquals(expectedDescription, description);
//        // Response<Boolean>
//        baseType = PrimitiveType.BOOLEAN;
//        returnType = GenericType.Response(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        Assertions.assertEquals(expectedDescription, description);
//        // Response<T>
//        baseType = GenericType.Mono(ClassType.STRING);
//        returnType = GenericType.Response(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        Assertions.assertEquals(expectedDescription, description);
//
//
//        // no description on either operation or schema
//        // Mono
//        operation = operationWithNoDesc();
//        // Mono<Void>
//        baseType = PrimitiveType.VOID;
//        returnType = GenericType.Mono(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        expectedDescription = "A {@link Mono} that completes when a successful response is received";
//        Assertions.assertEquals(expectedDescription, description);
//        // Mono<Boolean>
//        baseType = PrimitiveType.BOOLEAN;
//        returnType = GenericType.Mono(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        expectedDescription = String.format("%s on successful completion of {@link Mono}", "whether resource exists");
//        Assertions.assertEquals(expectedDescription, description);
//        // Mono<Response>
//        baseType = GenericType.Response(ClassType.STRING);
//        returnType = GenericType.Mono(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        expectedDescription = "the response body along with {@link Response} on successful completion of {@link Mono}";
//        Assertions.assertEquals(expectedDescription, description);
//
//        // Response
//        operation = operationWithNoDesc();
//        // Response<Void>
//        baseType = PrimitiveType.VOID;
//        returnType = GenericType.Response(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        expectedDescription = "the {@link Response}";
//        Assertions.assertEquals(expectedDescription, description);
//        // Response<Boolean>
//        baseType = PrimitiveType.BOOLEAN;
//        returnType = GenericType.Response(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        expectedDescription = String.format("%s along with {@link Response}", "whether resource exists");
//        Assertions.assertEquals(expectedDescription, description);
//        // Response<T>
//        baseType = ClassType.STRING;
//        returnType = GenericType.Response(baseType);
//        description = ClientMethodMapperAccessor.getDescription(operation, returnType, baseType);
//        expectedDescription = "the response body along with {@link Response}";
//        Assertions.assertEquals(expectedDescription, description);
//    }
//
//    private Operation operationWithNoDesc() {
//        return operationWithDescOnOperationAndResponseSchema(null, null);
//    }
//
//    private Operation operationWithDescOnResponseSchema(String responseSchemaDesc) {
//        return operationWithDescOnOperationAndResponseSchema(null, responseSchemaDesc);
//    }
//
//    private Operation operationWithDescOnOperationAndResponseSchema(String operationDesc, String responseSchemaDesc) {
//        Operation operation;
//        operation = new Operation();
//        Languages languages = new Languages();
//        Language defaultLang = new Language();
//        if (operationDesc != null) {
//            defaultLang.setDescription("get " + operationDesc);
//        }
//        languages.setDefault(defaultLang);
//        operation.setLanguage(languages);
//        Response response = new Response();
//        Schema schema = new Schema();
//        schema.setSummary(responseSchemaDesc);
//        response.setSchema(schema);
//        operation.setResponses(new ArrayList<>(Collections.singletonList(response)));
//        Request request = new Request();
//        Protocols protocols = new Protocols();
//        Protocol http = new Protocol();
//        http.setMethod(HttpMethod.HEAD.name());
//        protocols.setHttp(http);
//        request.setProtocol(protocols);
//        operation.setRequests(new ArrayList<>(Collections.singletonList(request)));
//        return operation;
//    }
}
