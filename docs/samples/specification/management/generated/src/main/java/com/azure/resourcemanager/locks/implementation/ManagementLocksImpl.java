// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.locks.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.locks.fluent.ManagementLocksClient;
import com.azure.resourcemanager.locks.fluent.models.ManagementLockObjectInner;
import com.azure.resourcemanager.locks.models.ManagementLockObject;
import com.azure.resourcemanager.locks.models.ManagementLocks;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagementLocksImpl implements ManagementLocks {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagementLocksImpl.class);

    private final ManagementLocksClient innerClient;

    private final com.azure.resourcemanager.locks.ManagementLockManager serviceManager;

    public ManagementLocksImpl(
        ManagementLocksClient innerClient, com.azure.resourcemanager.locks.ManagementLockManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String lockName) {
        this.serviceClient().delete(resourceGroupName, lockName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String lockName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, lockName, context);
    }

    public ManagementLockObject getByResourceGroup(String resourceGroupName, String lockName) {
        ManagementLockObjectInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, lockName);
        if (inner != null) {
            return new ManagementLockObjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagementLockObject> getByResourceGroupWithResponse(
        String resourceGroupName, String lockName, Context context) {
        Response<ManagementLockObjectInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, lockName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagementLockObjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagementLockObject createOrUpdateByScope(
        String scope, String lockName, ManagementLockObjectInner parameters) {
        ManagementLockObjectInner inner = this.serviceClient().createOrUpdateByScope(scope, lockName, parameters);
        if (inner != null) {
            return new ManagementLockObjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagementLockObject> createOrUpdateByScopeWithResponse(
        String scope, String lockName, ManagementLockObjectInner parameters, Context context) {
        Response<ManagementLockObjectInner> inner =
            this.serviceClient().createOrUpdateByScopeWithResponse(scope, lockName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagementLockObjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByScope(String scope, String lockName) {
        this.serviceClient().deleteByScope(scope, lockName);
    }

    public Response<Void> deleteByScopeWithResponse(String scope, String lockName, Context context) {
        return this.serviceClient().deleteByScopeWithResponse(scope, lockName, context);
    }

    public ManagementLockObject getByScope(String scope, String lockName) {
        ManagementLockObjectInner inner = this.serviceClient().getByScope(scope, lockName);
        if (inner != null) {
            return new ManagementLockObjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagementLockObject> getByScopeWithResponse(String scope, String lockName, Context context) {
        Response<ManagementLockObjectInner> inner =
            this.serviceClient().getByScopeWithResponse(scope, lockName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagementLockObjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagementLockObject createOrUpdateAtResourceLevel(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String lockName,
        ManagementLockObjectInner parameters) {
        ManagementLockObjectInner inner =
            this
                .serviceClient()
                .createOrUpdateAtResourceLevel(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    lockName,
                    parameters);
        if (inner != null) {
            return new ManagementLockObjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagementLockObject> createOrUpdateAtResourceLevelWithResponse(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String lockName,
        ManagementLockObjectInner parameters,
        Context context) {
        Response<ManagementLockObjectInner> inner =
            this
                .serviceClient()
                .createOrUpdateAtResourceLevelWithResponse(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    lockName,
                    parameters,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagementLockObjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteAtResourceLevel(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String lockName) {
        this
            .serviceClient()
            .deleteAtResourceLevel(
                resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName);
    }

    public Response<Void> deleteAtResourceLevelWithResponse(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String lockName,
        Context context) {
        return this
            .serviceClient()
            .deleteAtResourceLevelWithResponse(
                resourceGroupName,
                resourceProviderNamespace,
                parentResourcePath,
                resourceType,
                resourceName,
                lockName,
                context);
    }

    public ManagementLockObject getAtResourceLevel(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String lockName) {
        ManagementLockObjectInner inner =
            this
                .serviceClient()
                .getAtResourceLevel(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    lockName);
        if (inner != null) {
            return new ManagementLockObjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagementLockObject> getAtResourceLevelWithResponse(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String lockName,
        Context context) {
        Response<ManagementLockObjectInner> inner =
            this
                .serviceClient()
                .getAtResourceLevelWithResponse(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    lockName,
                    context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagementLockObjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ManagementLockObject createOrUpdateAtSubscriptionLevel(
        String lockName, ManagementLockObjectInner parameters) {
        ManagementLockObjectInner inner = this.serviceClient().createOrUpdateAtSubscriptionLevel(lockName, parameters);
        if (inner != null) {
            return new ManagementLockObjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagementLockObject> createOrUpdateAtSubscriptionLevelWithResponse(
        String lockName, ManagementLockObjectInner parameters, Context context) {
        Response<ManagementLockObjectInner> inner =
            this.serviceClient().createOrUpdateAtSubscriptionLevelWithResponse(lockName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagementLockObjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteAtSubscriptionLevel(String lockName) {
        this.serviceClient().deleteAtSubscriptionLevel(lockName);
    }

    public Response<Void> deleteAtSubscriptionLevelWithResponse(String lockName, Context context) {
        return this.serviceClient().deleteAtSubscriptionLevelWithResponse(lockName, context);
    }

    public ManagementLockObject getAtSubscriptionLevel(String lockName) {
        ManagementLockObjectInner inner = this.serviceClient().getAtSubscriptionLevel(lockName);
        if (inner != null) {
            return new ManagementLockObjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagementLockObject> getAtSubscriptionLevelWithResponse(String lockName, Context context) {
        Response<ManagementLockObjectInner> inner =
            this.serviceClient().getAtSubscriptionLevelWithResponse(lockName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagementLockObjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ManagementLockObject> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ManagementLockObjectInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ManagementLockObjectImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagementLockObject> listByResourceGroup(
        String resourceGroupName, String filter, Context context) {
        PagedIterable<ManagementLockObjectInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, filter, context);
        return Utils.mapPage(inner, inner1 -> new ManagementLockObjectImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagementLockObject> listAtResourceLevel(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName) {
        PagedIterable<ManagementLockObjectInner> inner =
            this
                .serviceClient()
                .listAtResourceLevel(
                    resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName);
        return Utils.mapPage(inner, inner1 -> new ManagementLockObjectImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagementLockObject> listAtResourceLevel(
        String resourceGroupName,
        String resourceProviderNamespace,
        String parentResourcePath,
        String resourceType,
        String resourceName,
        String filter,
        Context context) {
        PagedIterable<ManagementLockObjectInner> inner =
            this
                .serviceClient()
                .listAtResourceLevel(
                    resourceGroupName,
                    resourceProviderNamespace,
                    parentResourcePath,
                    resourceType,
                    resourceName,
                    filter,
                    context);
        return Utils.mapPage(inner, inner1 -> new ManagementLockObjectImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagementLockObject> list() {
        PagedIterable<ManagementLockObjectInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ManagementLockObjectImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagementLockObject> list(String filter, Context context) {
        PagedIterable<ManagementLockObjectInner> inner = this.serviceClient().list(filter, context);
        return Utils.mapPage(inner, inner1 -> new ManagementLockObjectImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagementLockObject> listByScope(String scope) {
        PagedIterable<ManagementLockObjectInner> inner = this.serviceClient().listByScope(scope);
        return Utils.mapPage(inner, inner1 -> new ManagementLockObjectImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagementLockObject> listByScope(String scope, String filter, Context context) {
        PagedIterable<ManagementLockObjectInner> inner = this.serviceClient().listByScope(scope, filter, context);
        return Utils.mapPage(inner, inner1 -> new ManagementLockObjectImpl(inner1, this.manager()));
    }

    public ManagementLockObject getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String lockName = Utils.getValueFromIdByName(id, "locks");
        if (lockName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, lockName, Context.NONE).getValue();
    }

    public Response<ManagementLockObject> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String lockName = Utils.getValueFromIdByName(id, "locks");
        if (lockName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, lockName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String lockName = Utils.getValueFromIdByName(id, "locks");
        if (lockName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locks'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, lockName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String lockName = Utils.getValueFromIdByName(id, "locks");
        if (lockName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'locks'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, lockName, context);
    }

    private ManagementLocksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.locks.ManagementLockManager manager() {
        return this.serviceManager;
    }

    public ManagementLockObjectImpl define(String name) {
        return new ManagementLockObjectImpl(name, this.manager());
    }
}
