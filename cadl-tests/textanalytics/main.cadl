// Original Swagger: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cognitiveservices/data-plane/Language/preview/2022-03-01-preview

import "@azure-tools/cadl-azure-core";
import "./lib.cadl";
import "@azure-tools/cadl-autorest";
import "@cadl-lang/rest";
import "@cadl-lang/versioning";

import "./customentities.cadl";
import "./custommultilabel.cadl";
import "./customsinglelabel.cadl";
import "./entities.cadl";
import "./entitylinking.cadl";
import "./healthcare.cadl";
import "./keyphrases.cadl";
import "./languages.cadl";
import "./pii.cadl";
import "./sentiment.cadl";
import "./summarization.cadl";

using Autorest;
using Cadl.Http;
using Cadl.Versioning;

@versioned(Versions)
@serviceTitle("Microsoft Cognitive Language Text Analytics")
@doc("""
The language service API is a suite of natural language processing
(NLP) skills built with best-in-class Microsoft machine learning algorithms.  The
API can be used to analyze unstructured text for tasks such as sentiment analysis,
key phrase extraction, language detection and question answering. Further documentation
can be found in <a href="https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview">https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview</a>.0
""")
@server(
  "{Endpoint}/language",
  "Language Service",
  {
    Endpoint: Endpoint,
  }
)
namespace Azure.Language.TextAnalytics;

enum Versions {
  v2022_05_15_preview: "2022-05-15-preview",
}

interface Analyze {
  // TODO: Security definitions
  //   "securityDefinitions": {
  //   "apim_key": {
  //     "type": "apiKey",
  //     "description": "A subscription key for a Language service resource.",
  //     "name": "Ocp-Apim-Subscription-Key",
  //     "in": "header"
  //   }
  // },

  @route(":analyze-text")
  @summary("Request text analysis over a collection of documents.")
  @doc("Submit a collection of text documents for analysis.  Specify a single unique task to be executed immediately.")
  // TODO: The other examples
  @example("./examples/SuccessfulEntityLinkingRequest.json", "Successful Entity Linking Request")
  // TODO: consumes/produces?
  @post
  analyzeText(
    ...Core.ApiVersionParameter,
    ...ShowStatsParameter,
    @body body: AnalyzeTextTask
  ): Response<AnalyzeTextTaskResult>;

  @route("/analyze-text/jobs")
  @summary("Submit text analysis job")
  @doc("Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed as a long-running operation.")
  @example(
    "./examples/SuccessfulAnalyzeTextJobsMultipleTaskSubmitRequest.json",
    "Successful Submit Analysis Job Request"
  )
  @post
  submitJob(...Core.ApiVersionParameter, @body body: AnalyzeTextJobsInput): LongRunningResponse;

  @route("/analyze-text/jobs/{jobId}")
  @summary("Get analysis status and results")
  @doc("Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task.")
  @example(
    "./examples/SuccessfulAnalyzeTextJobsMultipleTaskStatusRequest.json",
    "Successful Get Text Analysis Job Status Request"
  )
  @get
  getJobStatus(
    ...Core.ApiVersionParameter,
    ...JobIdParameter,
    ...TopSkipParameters,
    ...ShowStatsParameter
  ): Response<AnalyzeTextJobState>;

  @route("/analyze-text/jobs/{jobId}:cancel")
  @summary("Cancel a long-running Text Analysis job")
  @doc("Cancel a long-running Text Analysis job.")
  @example(
    "./examples/SuccessfulAnalyzeTextJobsCancelRequest.json",
    "Successful Job Cancel Request"
  )
  @post
  cancelJob(...Core.ApiVersionParameter, ...JobIdParameter): LongRunningResponse;
}

model AnalyzeTextJobsInput {
  @doc("Optional display name for the analysis job.")
  displayName?: string;
  analysisInput: MultiLanguageAnalysisInput;

  @doc("The set of tasks to execute on the input documents.")
  tasks: AnalyzeTextTask[];
}

model AnalyzeTextJobState {
  ...JobState;
  ...TasksState;
  ...AnalyzeTextJobStatistics;
}

model JobState {
  displayName?: string;
  createdDateTime: zonedDateTime;
  expirationDateTime?: zonedDateTime;
  lastUpdateDateTime: zonedDateTime;
  // TODO: uuid
  jobId: string;
  status: State;
  errors?: Error[];
  "@nextLink": string;
}

model TasksState {
  tasks: TasksStateCounts;
}

model TasksStateCounts {
  completed: int32;
  failed: int32;
  inProgress: int32;
  total: int32;
  items?: AnalyzeTextLROResult[];
}

@knownValues(TaskStateKV)
model TaskStateValue is string {}
enum TaskStateKV {
  notStarted,
  running,
  succeeded,
  failed,
  cancelled,
  cancelling,
}

model AnalyzeTextJobStatistics {
  statistics?: DocumentRequestStatistics;
}
