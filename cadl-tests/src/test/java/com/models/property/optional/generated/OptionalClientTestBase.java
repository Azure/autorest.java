// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.models.property.optional.generated;

import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestBase;
import com.azure.core.test.TestMode;
import com.models.property.optional.BytesClient;
import com.models.property.optional.CollectionsByteClient;
import com.models.property.optional.CollectionsModelClient;
import com.models.property.optional.DatetimeOperationClient;
import com.models.property.optional.DurationOperationClient;
import com.models.property.optional.OptionalClientBuilder;
import com.models.property.optional.RequiredAndOptionalClient;
import com.models.property.optional.StringOperationClient;

class OptionalClientTestBase extends TestBase {
    protected StringOperationClient stringOperationClient;

    protected BytesClient bytesClient;

    protected DatetimeOperationClient datetimeOperationClient;

    protected DurationOperationClient durationOperationClient;

    protected CollectionsByteClient collectionsByteClient;

    protected CollectionsModelClient collectionsModelClient;

    protected RequiredAndOptionalClient requiredAndOptionalClient;

    @Override
    protected void beforeTest() {
        OptionalClientBuilder stringOperationClientbuilder =
                new OptionalClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            stringOperationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            stringOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        stringOperationClient = stringOperationClientbuilder.buildStringOperationClient();

        OptionalClientBuilder bytesClientbuilder =
                new OptionalClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            bytesClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            bytesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        bytesClient = bytesClientbuilder.buildBytesClient();

        OptionalClientBuilder datetimeOperationClientbuilder =
                new OptionalClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            datetimeOperationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            datetimeOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        datetimeOperationClient = datetimeOperationClientbuilder.buildDatetimeOperationClient();

        OptionalClientBuilder durationOperationClientbuilder =
                new OptionalClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            durationOperationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            durationOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        durationOperationClient = durationOperationClientbuilder.buildDurationOperationClient();

        OptionalClientBuilder collectionsByteClientbuilder =
                new OptionalClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            collectionsByteClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            collectionsByteClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsByteClient = collectionsByteClientbuilder.buildCollectionsByteClient();

        OptionalClientBuilder collectionsModelClientbuilder =
                new OptionalClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            collectionsModelClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            collectionsModelClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsModelClient = collectionsModelClientbuilder.buildCollectionsModelClient();

        OptionalClientBuilder requiredAndOptionalClientbuilder =
                new OptionalClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            requiredAndOptionalClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            requiredAndOptionalClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        requiredAndOptionalClient = requiredAndOptionalClientbuilder.buildRequiredAndOptionalClient();
    }
}
