// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.models.property.types.generated;

import com.azure.core.http.HttpClient;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.test.TestBase;
import com.azure.core.test.TestMode;
import com.models.property.types.BooleanOperationClient;
import com.models.property.types.BytesClient;
import com.models.property.types.CollectionsIntClient;
import com.models.property.types.CollectionsModelClient;
import com.models.property.types.CollectionsStringClient;
import com.models.property.types.DatetimeOperationClient;
import com.models.property.types.DictionaryStringClient;
import com.models.property.types.DurationOperationClient;
import com.models.property.types.EnumClient;
import com.models.property.types.ExtensibleEnumClient;
import com.models.property.types.FloatOperationClient;
import com.models.property.types.IntClient;
import com.models.property.types.ModelClient;
import com.models.property.types.NeverClient;
import com.models.property.types.StringOperationClient;
import com.models.property.types.TypesClientBuilder;

class TypesClientTestBase extends TestBase {
    protected BooleanOperationClient booleanOperationClient;

    protected StringOperationClient stringOperationClient;

    protected BytesClient bytesClient;

    protected IntClient intClient;

    protected FloatOperationClient floatOperationClient;

    protected DatetimeOperationClient datetimeOperationClient;

    protected DurationOperationClient durationOperationClient;

    protected EnumClient enumClient;

    protected ExtensibleEnumClient extensibleEnumClient;

    protected ModelClient modelClient;

    protected CollectionsStringClient collectionsStringClient;

    protected CollectionsIntClient collectionsIntClient;

    protected CollectionsModelClient collectionsModelClient;

    protected DictionaryStringClient dictionaryStringClient;

    protected NeverClient neverClient;

    @Override
    protected void beforeTest() {
        TypesClientBuilder booleanOperationClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            booleanOperationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            booleanOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        booleanOperationClient = booleanOperationClientbuilder.buildBooleanOperationClient();

        TypesClientBuilder stringOperationClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            stringOperationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            stringOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        stringOperationClient = stringOperationClientbuilder.buildStringOperationClient();

        TypesClientBuilder bytesClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            bytesClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            bytesClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        bytesClient = bytesClientbuilder.buildBytesClient();

        TypesClientBuilder intClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            intClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            intClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        intClient = intClientbuilder.buildIntClient();

        TypesClientBuilder floatOperationClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            floatOperationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            floatOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        floatOperationClient = floatOperationClientbuilder.buildFloatOperationClient();

        TypesClientBuilder datetimeOperationClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            datetimeOperationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            datetimeOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        datetimeOperationClient = datetimeOperationClientbuilder.buildDatetimeOperationClient();

        TypesClientBuilder durationOperationClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            durationOperationClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            durationOperationClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        durationOperationClient = durationOperationClientbuilder.buildDurationOperationClient();

        TypesClientBuilder enumClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            enumClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            enumClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        enumClient = enumClientbuilder.buildEnumClient();

        TypesClientBuilder extensibleEnumClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            extensibleEnumClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            extensibleEnumClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        extensibleEnumClient = extensibleEnumClientbuilder.buildExtensibleEnumClient();

        TypesClientBuilder modelClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            modelClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            modelClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        modelClient = modelClientbuilder.buildModelClient();

        TypesClientBuilder collectionsStringClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            collectionsStringClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            collectionsStringClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsStringClient = collectionsStringClientbuilder.buildCollectionsStringClient();

        TypesClientBuilder collectionsIntClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            collectionsIntClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            collectionsIntClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsIntClient = collectionsIntClientbuilder.buildCollectionsIntClient();

        TypesClientBuilder collectionsModelClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            collectionsModelClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            collectionsModelClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        collectionsModelClient = collectionsModelClientbuilder.buildCollectionsModelClient();

        TypesClientBuilder dictionaryStringClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            dictionaryStringClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            dictionaryStringClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        dictionaryStringClient = dictionaryStringClientbuilder.buildDictionaryStringClient();

        TypesClientBuilder neverClientbuilder =
                new TypesClientBuilder()
                        .httpClient(HttpClient.createDefault())
                        .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            neverClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            neverClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        neverClient = neverClientbuilder.buildNeverClient();
    }
}
