// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.models.property.optional;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.client.traits.ConfigurationTrait;
import com.azure.core.client.traits.HttpTrait;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.builder.ClientBuilderUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.models.property.optional.implementation.ModelsPropertyOptionalClientImpl;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

/** A builder for creating a new instance of the ModelsPropertyOptionalClient type. */
@ServiceClientBuilder(
        serviceClients = {
            StringOperationClient.class,
            BytesClient.class,
            DatetimeOperationClient.class,
            DurationOperationClient.class,
            CollectionsByteClient.class,
            CollectionsModelClient.class,
            RequiredAndOptionalClient.class,
            StringOperationAsyncClient.class,
            BytesAsyncClient.class,
            DatetimeOperationAsyncClient.class,
            DurationOperationAsyncClient.class,
            CollectionsByteAsyncClient.class,
            CollectionsModelAsyncClient.class,
            RequiredAndOptionalAsyncClient.class
        })
public final class ModelsPropertyOptionalClientBuilder
        implements HttpTrait<ModelsPropertyOptionalClientBuilder>,
                ConfigurationTrait<ModelsPropertyOptionalClientBuilder> {
    @Generated private static final String SDK_NAME = "name";

    @Generated private static final String SDK_VERSION = "version";

    @Generated
    private static final Map<String, String> PROPERTIES =
            CoreUtils.getProperties("models-property-optional.properties");

    @Generated private final List<HttpPipelinePolicy> pipelinePolicies;

    /** Create an instance of the ModelsPropertyOptionalClientBuilder. */
    @Generated
    public ModelsPropertyOptionalClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * The HTTP pipeline to send requests through.
     */
    @Generated private HttpPipeline pipeline;

    /** {@inheritDoc}. */
    @Generated
    @Override
    public ModelsPropertyOptionalClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    @Generated private HttpClient httpClient;

    /** {@inheritDoc}. */
    @Generated
    @Override
    public ModelsPropertyOptionalClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    @Generated private HttpLogOptions httpLogOptions;

    /** {@inheritDoc}. */
    @Generated
    @Override
    public ModelsPropertyOptionalClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The client options such as application ID and custom headers to set on a request.
     */
    @Generated private ClientOptions clientOptions;

    /** {@inheritDoc}. */
    @Generated
    @Override
    public ModelsPropertyOptionalClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /*
     * The retry options to configure retry policy for failed requests.
     */
    @Generated private RetryOptions retryOptions;

    /** {@inheritDoc}. */
    @Generated
    @Override
    public ModelsPropertyOptionalClientBuilder retryOptions(RetryOptions retryOptions) {
        this.retryOptions = retryOptions;
        return this;
    }

    /** {@inheritDoc}. */
    @Generated
    @Override
    public ModelsPropertyOptionalClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        Objects.requireNonNull(customPolicy, "'customPolicy' cannot be null.");
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /*
     * The configuration store that is used during construction of the service client.
     */
    @Generated private Configuration configuration;

    /** {@inheritDoc}. */
    @Generated
    @Override
    public ModelsPropertyOptionalClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if applicable.
     */
    @Generated private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the ModelsPropertyOptionalClientBuilder.
     */
    @Generated
    public ModelsPropertyOptionalClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /**
     * Builds an instance of ModelsPropertyOptionalClientImpl with the provided parameters.
     *
     * @return an instance of ModelsPropertyOptionalClientImpl.
     */
    @Generated
    private ModelsPropertyOptionalClientImpl buildInnerClient() {
        HttpPipeline localPipeline = (pipeline != null) ? pipeline : createHttpPipeline();
        ModelsPropertyOptionalClientImpl client =
                new ModelsPropertyOptionalClientImpl(localPipeline, JacksonAdapter.createDefaultSerializerAdapter());
        return client;
    }

    @Generated
    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration =
                (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        HttpLogOptions localHttpLogOptions = this.httpLogOptions == null ? new HttpLogOptions() : this.httpLogOptions;
        ClientOptions localClientOptions = this.clientOptions == null ? new ClientOptions() : this.clientOptions;
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = PROPERTIES.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(localClientOptions, localHttpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        policies.add(new RequestIdPolicy());
        policies.add(new AddHeadersFromContextPolicy());
        HttpHeaders headers = new HttpHeaders();
        localClientOptions.getHeaders().forEach(header -> headers.set(header.getName(), header.getValue()));
        if (headers.getSize() > 0) {
            policies.add(new AddHeadersPolicy(headers));
        }
        policies.addAll(
                this.pipelinePolicies.stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(ClientBuilderUtil.validateAndGetRetryPolicy(retryPolicy, retryOptions, new RetryPolicy()));
        policies.add(new AddDatePolicy());
        policies.add(new CookiePolicy());
        policies.addAll(
                this.pipelinePolicies.stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                        .policies(policies.toArray(new HttpPipelinePolicy[0]))
                        .httpClient(httpClient)
                        .clientOptions(localClientOptions)
                        .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of StringOperationAsyncClient class.
     *
     * @return an instance of StringOperationAsyncClient.
     */
    @Generated
    public StringOperationAsyncClient buildStringOperationAsyncClient() {
        return new StringOperationAsyncClient(buildInnerClient().getStringOperations());
    }

    /**
     * Builds an instance of BytesAsyncClient class.
     *
     * @return an instance of BytesAsyncClient.
     */
    @Generated
    public BytesAsyncClient buildBytesAsyncClient() {
        return new BytesAsyncClient(buildInnerClient().getBytes());
    }

    /**
     * Builds an instance of DatetimeOperationAsyncClient class.
     *
     * @return an instance of DatetimeOperationAsyncClient.
     */
    @Generated
    public DatetimeOperationAsyncClient buildDatetimeOperationAsyncClient() {
        return new DatetimeOperationAsyncClient(buildInnerClient().getDatetimeOperations());
    }

    /**
     * Builds an instance of DurationOperationAsyncClient class.
     *
     * @return an instance of DurationOperationAsyncClient.
     */
    @Generated
    public DurationOperationAsyncClient buildDurationOperationAsyncClient() {
        return new DurationOperationAsyncClient(buildInnerClient().getDurationOperations());
    }

    /**
     * Builds an instance of CollectionsByteAsyncClient class.
     *
     * @return an instance of CollectionsByteAsyncClient.
     */
    @Generated
    public CollectionsByteAsyncClient buildCollectionsByteAsyncClient() {
        return new CollectionsByteAsyncClient(buildInnerClient().getCollectionsBytes());
    }

    /**
     * Builds an instance of CollectionsModelAsyncClient class.
     *
     * @return an instance of CollectionsModelAsyncClient.
     */
    @Generated
    public CollectionsModelAsyncClient buildCollectionsModelAsyncClient() {
        return new CollectionsModelAsyncClient(buildInnerClient().getCollectionsModels());
    }

    /**
     * Builds an instance of RequiredAndOptionalAsyncClient class.
     *
     * @return an instance of RequiredAndOptionalAsyncClient.
     */
    @Generated
    public RequiredAndOptionalAsyncClient buildRequiredAndOptionalAsyncClient() {
        return new RequiredAndOptionalAsyncClient(buildInnerClient().getRequiredAndOptionals());
    }

    /**
     * Builds an instance of StringOperationClient class.
     *
     * @return an instance of StringOperationClient.
     */
    @Generated
    public StringOperationClient buildStringOperationClient() {
        return new StringOperationClient(new StringOperationAsyncClient(buildInnerClient().getStringOperations()));
    }

    /**
     * Builds an instance of BytesClient class.
     *
     * @return an instance of BytesClient.
     */
    @Generated
    public BytesClient buildBytesClient() {
        return new BytesClient(new BytesAsyncClient(buildInnerClient().getBytes()));
    }

    /**
     * Builds an instance of DatetimeOperationClient class.
     *
     * @return an instance of DatetimeOperationClient.
     */
    @Generated
    public DatetimeOperationClient buildDatetimeOperationClient() {
        return new DatetimeOperationClient(
                new DatetimeOperationAsyncClient(buildInnerClient().getDatetimeOperations()));
    }

    /**
     * Builds an instance of DurationOperationClient class.
     *
     * @return an instance of DurationOperationClient.
     */
    @Generated
    public DurationOperationClient buildDurationOperationClient() {
        return new DurationOperationClient(
                new DurationOperationAsyncClient(buildInnerClient().getDurationOperations()));
    }

    /**
     * Builds an instance of CollectionsByteClient class.
     *
     * @return an instance of CollectionsByteClient.
     */
    @Generated
    public CollectionsByteClient buildCollectionsByteClient() {
        return new CollectionsByteClient(new CollectionsByteAsyncClient(buildInnerClient().getCollectionsBytes()));
    }

    /**
     * Builds an instance of CollectionsModelClient class.
     *
     * @return an instance of CollectionsModelClient.
     */
    @Generated
    public CollectionsModelClient buildCollectionsModelClient() {
        return new CollectionsModelClient(new CollectionsModelAsyncClient(buildInnerClient().getCollectionsModels()));
    }

    /**
     * Builds an instance of RequiredAndOptionalClient class.
     *
     * @return an instance of RequiredAndOptionalClient.
     */
    @Generated
    public RequiredAndOptionalClient buildRequiredAndOptionalClient() {
        return new RequiredAndOptionalClient(
                new RequiredAndOptionalAsyncClient(buildInnerClient().getRequiredAndOptionals()));
    }
}
