// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.nestedmodelsbasic;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.nestedmodelsbasic.models.InputModel;
import com.nestedmodelsbasic.models.OutputModel;
import com.nestedmodelsbasic.models.RoundTripModel;

/** Initializes a new instance of the synchronous NestedModelsBasicClient type. */
@ServiceClient(builder = NestedModelsBasicClientBuilder.class)
public final class NestedModelsBasicClient {
    @Generated private final NestedModelsBasicAsyncClient client;

    /**
     * Initializes an instance of NestedModelsBasicClient class.
     *
     * @param client the async client.
     */
    @Generated
    NestedModelsBasicClient(NestedModelsBasicAsyncClient client) {
        this.client = client;
    }

    /**
     * The sendNestedModel operation.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     NestedInputModel (Required): {
     *         requiredString: String (Required)
     *         requiredInt: long (Required)
     *         requiredStringList (Required): [
     *             String (Required)
     *         ]
     *         requiredIntList (Required): [
     *             long (Required)
     *         ]
     *     }
     *     NestedSharedModel (Required): {
     *         requiredString: String (Required)
     *         requiredInt: long (Required)
     *         requiredStringList (Required): [
     *             String (Required)
     *         ]
     *         requiredIntList (Required): [
     *             long (Required)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param input Input model with nested model properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendNestedModelWithResponse(BinaryData input, RequestOptions requestOptions) {
        return this.client.sendNestedModelWithResponse(input, requestOptions).block();
    }

    /**
     * The getNestedModel operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     NestedOutputModel (Required): {
     *         requiredString: String (Required)
     *         requiredInt: long (Required)
     *         requiredStringList (Required): [
     *             String (Required)
     *         ]
     *         requiredIntList (Required): [
     *             long (Required)
     *         ]
     *     }
     *     NestedSharedModel (Required): {
     *         requiredString: String (Required)
     *         requiredInt: long (Required)
     *         requiredStringList (Required): [
     *             String (Required)
     *         ]
     *         requiredIntList (Required): [
     *             long (Required)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return output model with nested model properties along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getNestedModelWithResponse(RequestOptions requestOptions) {
        return this.client.getNestedModelWithResponse(requestOptions).block();
    }

    /**
     * The setNestedModel operation.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     NestedRoundTripModel (Required): {
     *         requiredString: String (Required)
     *         requiredInt: long (Required)
     *         requiredStringList (Required): [
     *             String (Required)
     *         ]
     *         requiredIntList (Required): [
     *             long (Required)
     *         ]
     *     }
     *     NestedSharedModel (Required): {
     *         requiredString: String (Required)
     *         requiredInt: long (Required)
     *         requiredStringList (Required): [
     *             String (Required)
     *         ]
     *         requiredIntList (Required): [
     *             long (Required)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     NestedRoundTripModel (Required): {
     *         requiredString: String (Required)
     *         requiredInt: long (Required)
     *         requiredStringList (Required): [
     *             String (Required)
     *         ]
     *         requiredIntList (Required): [
     *             long (Required)
     *         ]
     *     }
     *     NestedSharedModel (Required): {
     *         requiredString: String (Required)
     *         requiredInt: long (Required)
     *         requiredStringList (Required): [
     *             String (Required)
     *         ]
     *         requiredIntList (Required): [
     *             long (Required)
     *         ]
     *     }
     * }
     * }</pre>
     *
     * @param input Round-trip model with nested model properties.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return round-trip model with nested model properties along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> setNestedModelWithResponse(BinaryData input, RequestOptions requestOptions) {
        return this.client.setNestedModelWithResponse(input, requestOptions).block();
    }

    /**
     * The sendNestedModel operation.
     *
     * @param input Input model with nested model properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendNestedModel(InputModel input) {
        // Generated convenience method for sendNestedModelWithResponse

        RequestOptions requestOptions = new RequestOptions();
        sendNestedModelWithResponse(BinaryData.fromObject(input), requestOptions).getValue();
    }

    /**
     * The sendNestedModel operation.
     *
     * @param input Input model with nested model properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendNestedModelWithResponse(InputModel input, Context context) {
        // Generated convenience method for sendNestedModelWithResponse

        RequestOptions requestOptions = new RequestOptions();
        requestOptions.setContext(context);
        return sendNestedModelWithResponse(BinaryData.fromObject(input), requestOptions);
    }

    /**
     * The getNestedModel operation.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output model with nested model properties.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OutputModel getNestedModel() {
        // Generated convenience method for getNestedModelWithResponse

        RequestOptions requestOptions = new RequestOptions();
        return getNestedModelWithResponse(requestOptions).getValue().toObject(OutputModel.class);
    }

    /**
     * The getNestedModel operation.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output model with nested model properties along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OutputModel> getNestedModelWithResponse(Context context) {
        // Generated convenience method for getNestedModelWithResponse

        RequestOptions requestOptions = new RequestOptions();
        requestOptions.setContext(context);
        Response<BinaryData> protocolMethodResponse = getNestedModelWithResponse(requestOptions);
        return new SimpleResponse<>(
                protocolMethodResponse, protocolMethodResponse.getValue().toObject(OutputModel.class));
    }

    /**
     * The setNestedModel operation.
     *
     * @param input Round-trip model with nested model properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return round-trip model with nested model properties.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RoundTripModel setNestedModel(RoundTripModel input) {
        // Generated convenience method for setNestedModelWithResponse

        RequestOptions requestOptions = new RequestOptions();
        return setNestedModelWithResponse(BinaryData.fromObject(input), requestOptions)
                .getValue()
                .toObject(RoundTripModel.class);
    }

    /**
     * The setNestedModel operation.
     *
     * @param input Round-trip model with nested model properties.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return round-trip model with nested model properties along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RoundTripModel> setNestedModelWithResponse(RoundTripModel input, Context context) {
        // Generated convenience method for setNestedModelWithResponse

        RequestOptions requestOptions = new RequestOptions();
        requestOptions.setContext(context);
        Response<BinaryData> protocolMethodResponse =
                setNestedModelWithResponse(BinaryData.fromObject(input), requestOptions);
        return new SimpleResponse<>(
                protocolMethodResponse, protocolMethodResponse.getValue().toObject(RoundTripModel.class));
    }
}
