// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.cadl.multicontenttypes;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.cadl.multicontenttypes.models.ContentType;
import com.cadl.multicontenttypes.models.DataModelBase;

/** Initializes a new instance of the synchronous MultiContentTypesClient type. */
@ServiceClient(builder = MultiContentTypesClientBuilder.class)
public final class MultiContentTypesClient {
    @Generated private final MultiContentTypesAsyncClient client;

    /**
     * Initializes an instance of MultiContentTypesClient class.
     *
     * @param client the async client.
     */
    @Generated
    MultiContentTypesClient(MultiContentTypesAsyncClient client) {
        this.client = client;
    }

    /**
     * one data type maps to multiple content types.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * byte[]
     * }</pre>
     *
     * @param contentType The contentType parameter. Allowed values: "application/octet-stream", "image/jpeg",
     *     "image/png".
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadSimpleWithResponse(String contentType, BinaryData body, RequestOptions requestOptions) {
        return this.client.uploadSimpleWithResponse(contentType, body, requestOptions).block();
    }

    /**
     * multiple data types map to multiple content types using `@overload`.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * DataModelBase
     * }</pre>
     *
     * @param contentType The contentType parameter. Allowed values: "text/plain", "application/json",
     *     "application/octet-stream", "image/jpeg", "image/png".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadWithResponse(String contentType, BinaryData data, RequestOptions requestOptions) {
        return this.client.uploadWithResponse(contentType, data, requestOptions).block();
    }

    /**
     * The uploadString operation.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadStringWithResponse(BinaryData data, RequestOptions requestOptions) {
        return this.client.uploadStringWithResponse(data, requestOptions).block();
    }

    /**
     * The uploadBytes operation.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * byte[]
     * }</pre>
     *
     * @param contentType The contentType parameter. Allowed values: "application/octet-stream", "image/jpeg",
     *     "image/png".
     * @param data The data parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadBytesWithResponse(String contentType, BinaryData data, RequestOptions requestOptions) {
        return this.client.uploadBytesWithResponse(contentType, data, requestOptions).block();
    }

    /**
     * one data type maps to multiple content types.
     *
     * @param contentType The contentType parameter.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void uploadSimple(ContentType contentType, byte[] body) {
        // Generated convenience method for uploadSimpleWithResponse
        RequestOptions requestOptions = new RequestOptions();
        uploadSimpleWithResponse(contentType.toString(), BinaryData.fromObject(body), requestOptions).getValue();
    }

    /**
     * multiple data types map to multiple content types using `@overload`.
     *
     * @param contentType The contentType parameter.
     * @param data The data parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void upload(ContentType contentType, DataModelBase data) {
        // Generated convenience method for uploadWithResponse
        RequestOptions requestOptions = new RequestOptions();
        uploadWithResponse(contentType.toString(), BinaryData.fromObject(data), requestOptions).getValue();
    }

    /**
     * The uploadString operation.
     *
     * @param data The data parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void uploadString(String data) {
        // Generated convenience method for uploadStringWithResponse
        RequestOptions requestOptions = new RequestOptions();
        uploadStringWithResponse(BinaryData.fromObject(data), requestOptions).getValue();
    }

    /**
     * The uploadBytes operation.
     *
     * @param contentType The contentType parameter.
     * @param data The data parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void uploadBytes(ContentType contentType, byte[] data) {
        // Generated convenience method for uploadBytesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        uploadBytesWithResponse(contentType.toString(), BinaryData.fromObject(data), requestOptions).getValue();
    }
}
