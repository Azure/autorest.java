// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.cadl.odata;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.util.BinaryData;
import com.cadl.odata.implementation.OdataClientImpl;
import com.cadl.odata.models.Resource;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/** Initializes a new instance of the asynchronous OdataClient type. */
@ServiceClient(builder = OdataClientBuilder.class, isAsync = true)
public final class OdataAsyncClient {
    @Generated private final OdataClientImpl serviceClient;

    /**
     * Initializes an instance of OdataAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    OdataAsyncClient(OdataClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The list operation.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter parameter</td></tr>
     *     <tr><td>orderby</td><td>String</td><td>No</td><td>The orderBy parameter</td></tr>
     *     <tr><td>skip</td><td>Integer</td><td>No</td><td>The skip parameter</td></tr>
     *     <tr><td>top</td><td>Integer</td><td>No</td><td>The top parameter</td></tr>
     *     <tr><td>maxpagesize</td><td>Integer</td><td>No</td><td>The maxPageSize parameter</td></tr>
     *     <tr><td>select</td><td>List&lt;String&gt;</td><td>No</td><td>The select parameter. In the form of "," separated string.</td></tr>
     *     <tr><td>expand</td><td>List&lt;String&gt;</td><td>No</td><td>The expand parameter. In the form of "," separated string.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     name: String (Required)
     *     type: String (Required)
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of Resource items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> list(RequestOptions requestOptions) {
        return this.serviceClient.listAsync(requestOptions);
    }

    /**
     * The list operation.
     *
     * @param filter The filter parameter.
     * @param orderBy The orderBy parameter.
     * @param skip The skip parameter.
     * @param top The top parameter.
     * @param maxPageSize The maxPageSize parameter.
     * @param select The select parameter.
     * @param expand The expand parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Resource items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Resource> list(
            String filter,
            String orderBy,
            Integer skip,
            Integer top,
            Integer maxPageSize,
            List<String> select,
            List<String> expand) {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        if (filter != null) {
            requestOptions.addQueryParam("filter", filter);
        }
        if (orderBy != null) {
            requestOptions.addQueryParam("orderby", orderBy);
        }
        if (skip != null) {
            requestOptions.addQueryParam("skip", String.valueOf(skip));
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top));
        }
        if (maxPageSize != null) {
            requestOptions.addQueryParam("maxpagesize", String.valueOf(maxPageSize));
        }
        if (select != null) {
            requestOptions.addQueryParam(
                    "select",
                    select.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")));
        }
        if (expand != null) {
            requestOptions.addQueryParam(
                    "expand",
                    expand.stream()
                            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                            .collect(Collectors.joining(",")));
        }
        return list(requestOptions).mapPage(protocolMethodData -> protocolMethodData.toObject(Resource.class));
    }

    /**
     * The list operation.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of Resource items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Resource> list() {
        // Generated convenience method for list
        RequestOptions requestOptions = new RequestOptions();
        return list(requestOptions).mapPage(protocolMethodData -> protocolMethodData.toObject(Resource.class));
    }
}
