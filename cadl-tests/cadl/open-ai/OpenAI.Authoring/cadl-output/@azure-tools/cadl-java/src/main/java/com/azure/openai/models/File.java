// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.openai.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A file is a document usable for training and validation. It can also be a service generated document with result
 * details.
 */
@Immutable
public final class File {
    /*
     * Defines the type of an object.
     */
    @JsonProperty(value = "object", access = JsonProperty.Access.WRITE_ONLY)
    private TypeDiscriminator object;

    /*
     * The state of a job or item.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private State status;

    /*
     * A timestamp when this job or item was created (in unix epochs).
     */
    @JsonProperty(value = "created_at", access = JsonProperty.Access.WRITE_ONLY)
    private Integer createdAt;

    /*
     * A timestamp when this job or item was modified last (in unix epochs).
     */
    @JsonProperty(value = "updated_at", access = JsonProperty.Access.WRITE_ONLY)
    private Integer updatedAt;

    /*
     * The identity of this item.
     */
    @JsonProperty(value = "id", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private String id;

    /*
     * The size of this file when available (can be null). File sizes larger than
     * 2^53-1 are not supported to ensure compatibility
     * with JavaScript integers.
     */
    @JsonProperty(value = "bytes", access = JsonProperty.Access.WRITE_ONLY)
    private Integer bytes;

    /*
     * The intended purpose of the uploaded documents. Use "fine-tune" for
     * fine-tuning. This allows us to validate the format of the uploaded file.
     */
    @JsonProperty(value = "purpose", required = true)
    private Purpose purpose;

    /*
     * The name of the file.
     */
    @JsonProperty(value = "filename", required = true)
    private String filename;

    /**
     * Creates an instance of File class.
     *
     * @param purpose the purpose value to set.
     * @param filename the filename value to set.
     */
    @JsonCreator
    private File(
            @JsonProperty(value = "purpose", required = true) Purpose purpose,
            @JsonProperty(value = "filename", required = true) String filename) {
        this.purpose = purpose;
        this.filename = filename;
    }

    /**
     * Get the object property: Defines the type of an object.
     *
     * @return the object value.
     */
    public TypeDiscriminator getObject() {
        return this.object;
    }

    /**
     * Get the status property: The state of a job or item.
     *
     * @return the status value.
     */
    public State getStatus() {
        return this.status;
    }

    /**
     * Get the createdAt property: A timestamp when this job or item was created (in unix epochs).
     *
     * @return the createdAt value.
     */
    public Integer getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the updatedAt property: A timestamp when this job or item was modified last (in unix epochs).
     *
     * @return the updatedAt value.
     */
    public Integer getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Get the id property: The identity of this item.
     *
     * @return the id value.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Get the bytes property: The size of this file when available (can be null). File sizes larger than 2^53-1 are not
     * supported to ensure compatibility with JavaScript integers.
     *
     * @return the bytes value.
     */
    public Integer getBytes() {
        return this.bytes;
    }

    /**
     * Get the purpose property: The intended purpose of the uploaded documents. Use "fine-tune" for fine-tuning. This
     * allows us to validate the format of the uploaded file.
     *
     * @return the purpose value.
     */
    public Purpose getPurpose() {
        return this.purpose;
    }

    /**
     * Get the filename property: The name of the file.
     *
     * @return the filename value.
     */
    public String getFilename() {
        return this.filename;
    }
}
