// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.openai.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Defines a document to import from an external content url to be usable with Azure OpenAI. */
@Immutable
public final class FileImport {
    /*
     * The intended purpose of the uploaded documents. Use "fine-tune" for
     * fine-tuning. This allows us to validate the format of the uploaded file.
     */
    @JsonProperty(value = "purpose", required = true)
    private Purpose purpose;

    /*
     * The name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file
     * to be uploaded.
     * If the `purpose` is set to "fine-tune", each line is a JSON
     * record with "prompt" and "completion" fields representing your training
     * examples.
     */
    @JsonProperty(value = "filename", required = true)
    private String filename;

    /*
     * The url to download the document from (can be SAS url of a blob or any other
     * external url accessible with a GET request).
     */
    @JsonProperty(value = "content_url", required = true)
    private String contentUrl;

    /**
     * Creates an instance of FileImport class.
     *
     * @param purpose the purpose value to set.
     * @param filename the filename value to set.
     * @param contentUrl the contentUrl value to set.
     */
    @JsonCreator
    public FileImport(
            @JsonProperty(value = "purpose", required = true) Purpose purpose,
            @JsonProperty(value = "filename", required = true) String filename,
            @JsonProperty(value = "content_url", required = true) String contentUrl) {
        this.purpose = purpose;
        this.filename = filename;
        this.contentUrl = contentUrl;
    }

    /**
     * Get the purpose property: The intended purpose of the uploaded documents. Use "fine-tune" for fine-tuning. This
     * allows us to validate the format of the uploaded file.
     *
     * @return the purpose value.
     */
    public Purpose getPurpose() {
        return this.purpose;
    }

    /**
     * Get the filename property: The name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be
     * uploaded. If the `purpose` is set to "fine-tune", each line is a JSON record with "prompt" and "completion"
     * fields representing your training examples.
     *
     * @return the filename value.
     */
    public String getFilename() {
        return this.filename;
    }

    /**
     * Get the contentUrl property: The url to download the document from (can be SAS url of a blob or any other
     * external url accessible with a GET request).
     *
     * @return the contentUrl value.
     */
    public String getContentUrl() {
        return this.contentUrl;
    }
}
