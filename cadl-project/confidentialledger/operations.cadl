import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";

namespace Azure.Core.Operations;

using Cadl.Http;
using Cadl.Rest;
using Azure.Core;

// Key Parameter Types

@copyResourceKeyParameters
model ItemKeysOf<TResource> {}

@copyResourceKeyParameters("parent")
model CollectionKeysOf<TResource> {}

// Response Types

@doc("The error object.")
model Error {
  @doc("One of a server-defined set of error codes.")
  code: string;

  @doc("A human-readable representation of the error.")
  message: string;

  @doc("The target of the error.")
  target?: string;

  @doc("An array of details about specific errors that led to this reported error.")
  details: Error;

  @doc("An object containing more specific information than the current object about the error.")
  innererror?: InnerError;
}

@doc("An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.")
model InnerError {
  @doc("One of a server-defined set of error codes.")
  code: string;

  @doc("Inner error.")
  innererror?: InnerError;
}

@error
@doc("A response containing error details.")
model ErrorResponse {
  @doc("The error object.")
  error: Error;
}

@doc("A collection of {name} instances.", TResource)
@friendlyName("{name}Collection", TResource)
model ResourceCollection<TResource> is Page<TResource> {}

// Success Response Types

@doc("Resource create operation completed successfully.")
model ResourceCreatedResponse<T> {
  ...CreatedResponse;
  @body body: T;
}

// Standard Resource Lifecycle Operations

@autoRoute
@doc("Get a {name}", TResource)
@readsResource(TResource)
op ResourceRead<TResource>(
  ...ItemKeysOf<TResource>,
  ...ApiVersionParameter
): OkResponse<TResource> | ErrorResponse;

@friendlyName("{name}Create", TResource)
model ResourceCreateOrReplaceModel<TResource> is UpdateableProperties<TResource> {}

@autoRoute
@doc("Creates or replaces a {name}", TResource)
@createsOrUpdatesResource(TResource) // TODO: Do we need a `createsOrReplacesResource` decorator?
op ResourceCreateOrReplace<TResource>(
  ...ItemKeysOf<TResource>,
  @body properties: ResourceCreateOrReplaceModel<TResource>,
  ...ApiVersionParameter
): OkResponse<TResource> | ResourceCreatedResponse<TResource> | ErrorResponse;

@autoRoute
@doc("Creates or replaces a {name} asynchronously", TResource)
@createsOrUpdatesResource(TResource) // TODO: Do we need a `createsOrReplacesResource` decorator?
op LongRunningResourceCreateOrReplace<TResource>(
  ...ItemKeysOf<TResource>,
  @body properties: ResourceCreateOrReplaceModel<TResource>,
  ...ApiVersionParameter
): OkResponse<TResource> | LongRunningAcceptedResponse | ErrorResponse;

@friendlyName("{name}Update", TResource)
model ResourceCreateOrUpdateModel<TResource> is OptionalProperties<UpdateableProperties<TResource>> {}

@autoRoute
@doc("Creates or updates a {name}", TResource)
@createsOrUpdatesResource(TResource)
op ResourceCreateOrUpdate<TResource>(
  @header "content-type": "application/merge-patch+json",
  ...ItemKeysOf<TResource>,
  @body properties: ResourceCreateOrUpdateModel<TResource>,
  ...ApiVersionParameter
): OkResponse<TResource> | ResourceCreatedResponse<TResource> | ErrorResponse;

@autoRoute
@doc("Creates or updates a {name} asynchronously", TResource)
@createsOrUpdatesResource(TResource)
op LongRunningResourceCreateOrUpdate<TResource>(
  @header "content-type": "application/merge-patch+json",
  ...ItemKeysOf<TResource>,
  @body properties: ResourceCreateOrUpdateModel<TResource>,
  ...ApiVersionParameter
): OkResponse<TResource> | LongRunningAcceptedResponse | ErrorResponse;

@delete
@autoRoute
@doc("Delete a {name}", TResource)
@deletesResource(TResource)
op ResourceDelete<TResource>(
  ...ItemKeysOf<TResource>,
  ...ApiVersionParameter
): NoContentResponse | ErrorResponse;

@delete
@autoRoute
@doc("Delete a {name} asynchronously.", TResource)
@deletesResource(TResource)
op LongRunningResourceDelete<TResource>(
  ...ItemKeysOf<TResource>,
  ...ApiVersionParameter
): LongRunningAcceptedResponse | ErrorResponse;

@autoRoute
@doc("List {name} resources", TResource)
@listsResource(TResource)
op ResourceList<TResource, TParams = {}>(
  ...CollectionKeysOf<TResource>,
  ...TParams,
  ...ApiVersionParameter
): OkResponse<ResourceCollection<TResource>> | ErrorResponse;

@autoRoute
@doc("List {name} resources", TResource)
@listsResource(TResource)
op NonPagedResourceList<TResource, TParams = {}>(
  ...CollectionKeysOf<TResource>,
  ...TParams,
  ...ApiVersionParameter
): OkResponse<TResource[]> | ErrorResponse;

@action
@autoRoute
@segmentSeparator(":")
@doc("Runs a custom action on {name}", TResource)
op ResourceAction<TResource, TResponse, TParams = {}>(
  ...ItemKeysOf<TResource>,
  ...TParams,
  ...ApiVersionParameter
): TResponse | ErrorResponse;
