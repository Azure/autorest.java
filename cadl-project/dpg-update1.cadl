import "@cadl-lang/rest";
import "@cadl-lang/versioning";

using Cadl.Versioning;

@versioned(Versions)
@serviceTitle("DPGClient")
@serviceVersion("1.1.0")
@server("http://localhost:3000", "Testserver endpoint")
@doc("DPG Swagger, this is the initial swagger a service could do")
@Cadl.Rest.produces("application/json")
@Cadl.Rest.consumes("application/json")
namespace Cadl.Testserver;
using Cadl.Http;

enum Versions {
  v10: "1.0.0",
  v11: "1.1.0",
}

model PostInput {
  url: string;
}

@doc("Answer from service")
model any {
  @statusCode statusCode: 200;
  @body body: {};
}

@route("/serviceDriven")
interface params {
  @route("/parameters")
  @doc("Head request, no params.\n Initially has no query parameters. After evolution, a new optional query parameter is added")
  @head
  headNoParams(
    @added(Versions.v11)
    @doc("I'm a new input optional parameter")
    @query
    new_parameter?: string
  ): any;

  @route("/parameters")
  @doc("Get true Boolean value on path.\n Initially only has one required Query Parameter. After evolution, a new optional query parameter is added")
  @get
  getRequired(
    @doc("I am a required parameter")
    @query
    parameter: string,

    @added(Versions.v11)
    @doc("I'm a new input optional parameter")
    @query
    new_parameter?: string
  ): any;

  @route("/parameters")
  @doc("Initially has one required query parameter and one optional query parameter.  After evolution, a new optional query parameter is added")
  @put
  putRequiredOptional(
    @doc("I am a required parameter")
    @query
    requiredParam: string,

    @doc("I am an optional parameter")
    @query
    optionalParam?: string,

    @added(Versions.v11)
    @doc("I'm a new input optional parameter")
    @query
    new_parameter?: string
  ): any;

  // In the updated version, I can take "image/jpeg" as input as well
  @route("/parameters")
  @doc("POST a JSON or a JPEG")
  @post
  postParameters(
    @doc("I am a body parameter. My only valid JSON entry is { url: \"http://example.org/myimage.jpeg\" }")
    @body
    parameter: PostInput
  ): any;

  @added(Versions.v11)
  @route("/parameters")
  @doc("Delete something.\n Initially the path exists but there is no delete method. After evolution this is a new method in a known path")
  @delete
  deleteParameters(): any;

  @route("/moreParameters")
  @doc("Get true Boolean value on path.\n Initially has one optional query parameter. After evolution, a new optional query parameter is added")
  @get
  getOptional(
    @doc("I am an optional parameter")
    @query
    optionalParam?: string,

    @added(Versions.v11)
    @doc("I'm a new input optional parameter")
    @query
    new_parameter?: string
  ): any;

  @added(Versions.v11)
  @route("/newPath")
  @doc("I'm a new operation.\n Initiallty neither path or method exist for this operation. After evolution, this is a new method in a new path")
  @get
  getNewOperation(): any;
}
