// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.ReturnType;
import com.generic.core.annotation.ServiceClient;
import com.generic.core.annotation.ServiceMethod;
import com.generic.core.exception.ClientAuthenticationException;
import com.generic.core.exception.HttpResponseException;
import com.generic.core.exception.ResourceModifiedException;
import com.generic.core.exception.ResourceNotFoundException;
import com.generic.core.http.Response;
import com.generic.core.models.BinaryData;
import com.generic.core.models.RequestOptions;
import com.openai.implementation.OpenAIClientImpl;
import com.openai.models.CreateChatCompletionRequest;
import com.openai.models.CreateChatCompletionResponse;
import com.openai.models.CreateCompletionRequest;
import com.openai.models.CreateCompletionResponse;
import com.openai.models.CreateEditRequest;
import com.openai.models.CreateEditResponse;
import com.openai.models.CreateEmbeddingRequest;
import com.openai.models.CreateEmbeddingResponse;
import com.openai.models.CreateFineTuneRequest;
import com.openai.models.CreateFineTuningJobRequest;
import com.openai.models.CreateImageRequest;
import com.openai.models.CreateModerationRequest;
import com.openai.models.CreateModerationResponse;
import com.openai.models.DeleteFileResponse;
import com.openai.models.DeleteModelResponse;
import com.openai.models.FineTune;
import com.openai.models.FineTuningJob;
import com.openai.models.ImagesResponse;
import com.openai.models.ListFilesResponse;
import com.openai.models.ListFineTuneEventsResponse;
import com.openai.models.ListFineTunesResponse;
import com.openai.models.ListFineTuningJobEventsResponse;
import com.openai.models.ListModelsResponse;
import com.openai.models.ListPaginatedFineTuningJobsResponse;
import com.openai.models.Model;
import com.openai.models.OpenAIFile;

/**
 * Initializes a new instance of the synchronous OpenAIClient type.
 */
@ServiceClient(builder = OpenAIClientBuilder.class)
public final class OpenAIClient {
    @Generated
    private final OpenAIClientImpl serviceClient;

    /**
     * Initializes an instance of OpenAIClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    OpenAIClient(OpenAIClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Transcribes audio into the input language.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     file: byte[] (Required)
     *     model: String(whisper-1) (Required)
     *     prompt: String (Optional)
     *     response_format: String(json/text/srt/verbose_json/vtt) (Optional)
     *     temperature: Double (Optional)
     *     language: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     text: String (Required)
     * }
     * }</pre>
     * 
     * @param audio The audio parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createTranscriptionWithResponse(BinaryData audio, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createTranscription' is 'multipart/form-data'
        return this.serviceClient.createTranscriptionWithResponse(audio, requestOptions);
    }

    /**
     * Transcribes audio into the input language.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     file: byte[] (Required)
     *     model: String(whisper-1) (Required)
     *     prompt: String (Optional)
     *     response_format: String(json/text/srt/verbose_json/vtt) (Optional)
     *     temperature: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     text: String (Required)
     * }
     * }</pre>
     * 
     * @param audio The audio parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createTranslationWithResponse(BinaryData audio, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createTranslation' is 'multipart/form-data'
        return this.serviceClient.createTranslationWithResponse(audio, requestOptions);
    }

    /**
     * The createChatCompletion operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String(gpt4/gpt-4-0314/gpt-4-0613/gpt-4-32k/gpt-4-32k-0314/gpt-4-32k-0613/gpt-3.5-turbo/gpt-3.5-turbo-16k/gpt-3.5-turbo-0301/gpt-3.5-turbo-0613/gpt-3.5-turbo-16k-0613) (Required)
     *     messages (Required): [
     *          (Required){
     *             role: String(system/user/assistant/function) (Required)
     *             content: String (Required)
     *             name: String (Optional)
     *             function_call (Optional): {
     *                 name: String (Required)
     *                 arguments: String (Required)
     *             }
     *         }
     *     ]
     *     functions (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             description: String (Optional)
     *             parameters (Required): {
     *                 String: Object (Required)
     *             }
     *         }
     *     ]
     *     function_call: BinaryData (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     n: Long (Optional)
     *     max_tokens: Long (Optional)
     *     stop: BinaryData (Optional)
     *     presence_penalty: Double (Optional)
     *     frequency_penalty: Double (Optional)
     *     logit_bias (Optional): {
     *         String: long (Optional)
     *     }
     *     user: String (Optional)
     *     stream: Boolean (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created: long (Required)
     *     model: String (Required)
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             message (Required): {
     *                 role: String(system/user/assistant/function) (Required)
     *                 content: String (Required)
     *                 function_call (Optional): {
     *                     name: String (Required)
     *                     arguments: String (Required)
     *                 }
     *             }
     *             finish_reason: String(stop/length/function_call/content_filter) (Required)
     *         }
     *     ]
     *     usage (Optional): {
     *         prompt_tokens: long (Required)
     *         completion_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param createChatCompletionRequest The createChatCompletionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return represents a chat completion response returned by model, based on the provided input.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createChatCompletionWithResponse(BinaryData createChatCompletionRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createChatCompletionWithResponse(createChatCompletionRequest, requestOptions);
    }

    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the
     * fine-tuned models once complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     training_file: String (Required)
     *     validation_file: String (Optional)
     *     model: String(babbage-002/davinci-002/gpt-3.5-turbo) (Required)
     *     hyperparameters (Optional): {
     *         n_epochs: BinaryData (Optional)
     *     }
     *     suffix: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     finished_at: OffsetDateTime (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/pending/running/succeeded/failed/cancelled) (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Optional)
     *     }
     *     training_file: String (Required)
     *     validation_file: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     trained_tokens: Long (Required)
     *     error (Required): {
     *         message: String (Optional)
     *         code: String (Optional)
     *         param: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param job The job parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createFineTuningJobWithResponse(BinaryData job, RequestOptions requestOptions) {
        return this.serviceClient.createFineTuningJobWithResponse(job, requestOptions);
    }

    /**
     * The listPaginatedFineTuningJobs operation.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Identifier for the last job from the previous pagination request.</td>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Long</td>
     * <td>No</td>
     * <td>Number of fine-tuning jobs to retrieve.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             finished_at: OffsetDateTime (Required)
     *             model: String (Required)
     *             fine_tuned_model: String (Required)
     *             organization_id: String (Required)
     *             status: String(created/pending/running/succeeded/failed/cancelled) (Required)
     *             hyperparameters (Required): {
     *                 n_epochs: BinaryData (Optional)
     *             }
     *             training_file: String (Required)
     *             validation_file: String (Required)
     *             result_files (Required): [
     *                 String (Required)
     *             ]
     *             trained_tokens: Long (Required)
     *             error (Required): {
     *                 message: String (Optional)
     *                 code: String (Optional)
     *                 param: String (Optional)
     *             }
     *         }
     *     ]
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listPaginatedFineTuningJobsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listPaginatedFineTuningJobsWithResponse(requestOptions);
    }

    /**
     * Get info about a fine-tuning job.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     finished_at: OffsetDateTime (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/pending/running/succeeded/failed/cancelled) (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Optional)
     *     }
     *     training_file: String (Required)
     *     validation_file: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     trained_tokens: Long (Required)
     *     error (Required): {
     *         message: String (Optional)
     *         code: String (Optional)
     *         param: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param fineTuningJobId A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveFineTuningJobWithResponse(String fineTuningJobId,
        RequestOptions requestOptions) {
        return this.serviceClient.retrieveFineTuningJobWithResponse(fineTuningJobId, requestOptions);
    }

    /**
     * Get status updates for a fine-tuning job.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Identifier for the last event from the previous pagination request.</td>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>Number of events to retrieve.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String(info/warn/error) (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFineTuningEventsWithResponse(String fineTuningJobId,
        RequestOptions requestOptions) {
        return this.serviceClient.listFineTuningEventsWithResponse(fineTuningJobId, requestOptions);
    }

    /**
     * Immediately cancel a fine-tune job.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     finished_at: OffsetDateTime (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/pending/running/succeeded/failed/cancelled) (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Optional)
     *     }
     *     training_file: String (Required)
     *     validation_file: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     trained_tokens: Long (Required)
     *     error (Required): {
     *         message: String (Optional)
     *         code: String (Optional)
     *         param: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelFineTuningJobWithResponse(String fineTuningJobId, RequestOptions requestOptions) {
        return this.serviceClient.cancelFineTuningJobWithResponse(fineTuningJobId, requestOptions);
    }

    /**
     * The createCompletion operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String(babbage-002/davinci-002/text-davinci-003/text-davinci-002/text-davinci-001/code-davinci-002/text-curie-001/text-babbage-001/text-ada-001) (Required)
     *     prompt: BinaryData (Required)
     *     suffix: String (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     n: Long (Optional)
     *     max_tokens: Long (Optional)
     *     stop: BinaryData (Optional)
     *     presence_penalty: Double (Optional)
     *     frequency_penalty: Double (Optional)
     *     logit_bias (Optional): {
     *         String: long (Optional)
     *     }
     *     user: String (Optional)
     *     stream: Boolean (Optional)
     *     logprobs: Long (Optional)
     *     echo: Boolean (Optional)
     *     best_of: Long (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created: long (Required)
     *     model: String (Required)
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             text: String (Required)
     *             logprobs (Required): {
     *                 tokens (Required): [
     *                     String (Required)
     *                 ]
     *                 token_logprobs (Required): [
     *                     double (Required)
     *                 ]
     *                 top_logprobs (Required): [
     *                      (Required){
     *                         String: long (Required)
     *                     }
     *                 ]
     *                 text_offset (Required): [
     *                     long (Required)
     *                 ]
     *             }
     *             finish_reason: String(stop/length/content_filter) (Required)
     *         }
     *     ]
     *     usage (Optional): {
     *         prompt_tokens: long (Required)
     *         completion_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param createCompletionRequest The createCompletionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return represents a completion response from the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCompletionWithResponse(BinaryData createCompletionRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createCompletionWithResponse(createCompletionRequest, requestOptions);
    }

    /**
     * The createEdit operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String(text-davinci-edit-001/code-davinci-edit-001) (Required)
     *     input: String (Optional)
     *     instruction: String (Required)
     *     n: Long (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     created: long (Required)
     *     choices (Required): [
     *          (Required){
     *             text: String (Required)
     *             index: long (Required)
     *             finish_reason: String(stop/length) (Required)
     *         }
     *     ]
     *     usage (Required): {
     *         prompt_tokens: long (Required)
     *         completion_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param edit The edit parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createEditWithResponse(BinaryData edit, RequestOptions requestOptions) {
        return this.serviceClient.createEditWithResponse(edit, requestOptions);
    }

    /**
     * Creates an embedding vector representing the input text.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String(text-embedding-ada-002) (Required)
     *     input: BinaryData (Required)
     *     user: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     model: String (Required)
     *     data (Required): [
     *          (Required){
     *             index: long (Required)
     *             object: String (Required)
     *             embedding (Required): [
     *                 double (Required)
     *             ]
     *         }
     *     ]
     *     usage (Required): {
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param embedding The embedding parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createEmbeddingWithResponse(BinaryData embedding, RequestOptions requestOptions) {
        return this.serviceClient.createEmbeddingWithResponse(embedding, requestOptions);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             bytes: long (Required)
     *             createdAt: long (Required)
     *             filename: String (Required)
     *             purpose: String (Required)
     *             status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFilesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listFilesWithResponse(requestOptions);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     file: byte[] (Required)
     *     purpose: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     bytes: long (Required)
     *     createdAt: long (Required)
     *     filename: String (Required)
     *     purpose: String (Required)
     *     status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *     status_details: String (Optional)
     * }
     * }</pre>
     * 
     * @param file The file parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createFileWithResponse(BinaryData file, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation 'createFile' is
        // 'multipart/form-data'
        return this.serviceClient.createFileWithResponse(file, requestOptions);
    }

    /**
     * Returns information about a specific file.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     bytes: long (Required)
     *     createdAt: long (Required)
     *     filename: String (Required)
     *     purpose: String (Required)
     *     status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *     status_details: String (Optional)
     * }
     * }</pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.retrieveFileWithResponse(fileId, requestOptions);
    }

    /**
     * Delete a file.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     deleted: boolean (Required)
     * }
     * }</pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.deleteFileWithResponse(fileId, requestOptions);
    }

    /**
     * Returns the contents of the specified file.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return a sequence of textual characters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadFileWithResponse(String fileId, RequestOptions requestOptions) {
        return this.serviceClient.downloadFileWithResponse(fileId, requestOptions);
    }

    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once
     * complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning).
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     training_file: String (Required)
     *     validation_file: String (Optional)
     *     model: String(ada/babbage/curie/davinci) (Optional)
     *     n_epochs: Long (Optional)
     *     batch_size: Long (Optional)
     *     learning_rate_multiplier: Double (Optional)
     *     prompt_loss_rate: Double (Optional)
     *     compute_classification_metrics: Boolean (Optional)
     *     classification_n_classes: Long (Optional)
     *     classification_positive_class: String (Optional)
     *     classification_betas (Optional): [
     *         double (Optional)
     *     ]
     *     suffix: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/running/succeeded/failed/cancelled) (Required)
     *     hyperparams (Required): {
     *         n_epochs: long (Required)
     *         batch_size: long (Required)
     *         prompt_loss_weight: double (Required)
     *         learning_rate_multiplier: double (Required)
     *         compute_classification_metrics: Boolean (Optional)
     *         classification_positive_class: String (Optional)
     *         classification_n_classes: Long (Optional)
     *     }
     *     training_files (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             bytes: long (Required)
     *             createdAt: long (Required)
     *             filename: String (Required)
     *             purpose: String (Required)
     *             status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     *     validation_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     result_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     events (Optional): [
     *          (Optional){
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTune The fineTune parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createFineTuneWithResponse(BinaryData fineTune, RequestOptions requestOptions) {
        return this.serviceClient.createFineTuneWithResponse(fineTune, requestOptions);
    }

    /**
     * List your organization's fine-tuning jobs.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             updated_at: long (Required)
     *             model: String (Required)
     *             fine_tuned_model: String (Required)
     *             organization_id: String (Required)
     *             status: String(created/running/succeeded/failed/cancelled) (Required)
     *             hyperparams (Required): {
     *                 n_epochs: long (Required)
     *                 batch_size: long (Required)
     *                 prompt_loss_weight: double (Required)
     *                 learning_rate_multiplier: double (Required)
     *                 compute_classification_metrics: Boolean (Optional)
     *                 classification_positive_class: String (Optional)
     *                 classification_n_classes: Long (Optional)
     *             }
     *             training_files (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     object: String (Required)
     *                     bytes: long (Required)
     *                     createdAt: long (Required)
     *                     filename: String (Required)
     *                     purpose: String (Required)
     *                     status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *                     status_details: String (Optional)
     *                 }
     *             ]
     *             validation_files (Required): [
     *                 (recursive schema, see above)
     *             ]
     *             result_files (Required): [
     *                 (recursive schema, see above)
     *             ]
     *             events (Optional): [
     *                  (Optional){
     *                     object: String (Required)
     *                     created_at: long (Required)
     *                     level: String (Required)
     *                     message: String (Required)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFineTunesWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listFineTunesWithResponse(requestOptions);
    }

    /**
     * Gets info about the fine-tune job.
     * 
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/running/succeeded/failed/cancelled) (Required)
     *     hyperparams (Required): {
     *         n_epochs: long (Required)
     *         batch_size: long (Required)
     *         prompt_loss_weight: double (Required)
     *         learning_rate_multiplier: double (Required)
     *         compute_classification_metrics: Boolean (Optional)
     *         classification_positive_class: String (Optional)
     *         classification_n_classes: Long (Optional)
     *     }
     *     training_files (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             bytes: long (Required)
     *             createdAt: long (Required)
     *             filename: String (Required)
     *             purpose: String (Required)
     *             status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     *     validation_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     result_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     events (Optional): [
     *          (Optional){
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTuneId The ID of the fine-tune job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveFineTuneWithResponse(String fineTuneId, RequestOptions requestOptions) {
        return this.serviceClient.retrieveFineTuneWithResponse(fineTuneId, requestOptions);
    }

    /**
     * Get fine-grained status updates for a fine-tune job.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>stream</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether to stream events for the fine-tune job. If set to true, events will be sent as
     * data-only
     * [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available. The stream will terminate with a `data: [DONE]` message when the
     * job is finished (succeeded, cancelled, or failed).
     * 
     * If set to false, only events generated so far will be returned.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTuneId The ID of the fine-tune job to get events for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFineTuneEventsWithResponse(String fineTuneId, RequestOptions requestOptions) {
        return this.serviceClient.listFineTuneEventsWithResponse(fineTuneId, requestOptions);
    }

    /**
     * Immediately cancel a fine-tune job.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/running/succeeded/failed/cancelled) (Required)
     *     hyperparams (Required): {
     *         n_epochs: long (Required)
     *         batch_size: long (Required)
     *         prompt_loss_weight: double (Required)
     *         learning_rate_multiplier: double (Required)
     *         compute_classification_metrics: Boolean (Optional)
     *         classification_positive_class: String (Optional)
     *         classification_n_classes: Long (Optional)
     *     }
     *     training_files (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             bytes: long (Required)
     *             createdAt: long (Required)
     *             filename: String (Required)
     *             purpose: String (Required)
     *             status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     *     validation_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     result_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     events (Optional): [
     *          (Optional){
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTuneId The ID of the fine-tune job to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelFineTuneWithResponse(String fineTuneId, RequestOptions requestOptions) {
        return this.serviceClient.cancelFineTuneWithResponse(fineTuneId, requestOptions);
    }

    /**
     * Lists the currently available models, and provides basic information about each one such as the
     * owner and availability.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created: long (Required)
     *             owned_by: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listModelsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.listModelsWithResponse(requestOptions);
    }

    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and
     * permissioning.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created: long (Required)
     *     owned_by: String (Required)
     * }
     * }</pre>
     * 
     * @param model The ID of the model to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return describes an OpenAI model offering that can be used with the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveWithResponse(String model, RequestOptions requestOptions) {
        return this.serviceClient.retrieveWithResponse(model, requestOptions);
    }

    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     deleted: boolean (Required)
     * }
     * }</pre>
     * 
     * @param model The model to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String model, RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponse(model, requestOptions);
    }

    /**
     * Creates an image given a prompt.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     prompt: String (Required)
     *     n: Long (Optional)
     *     size: String(256x256/512x512/1024x1024) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             url: String (Optional)
     *             b64_json: byte[] (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createImageWithResponse(BinaryData image, RequestOptions requestOptions) {
        return this.serviceClient.createImageWithResponse(image, requestOptions);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     prompt: String (Required)
     *     image: byte[] (Required)
     *     mask: byte[] (Optional)
     *     n: Long (Optional)
     *     size: String(256x256/512x512/1024x1024) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             url: String (Optional)
     *             b64_json: byte[] (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createImageEditWithResponse(BinaryData image, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createImageEdit' is 'multipart/form-data'
        return this.serviceClient.createImageEditWithResponse(image, requestOptions);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     image: byte[] (Required)
     *     n: Long (Optional)
     *     size: String(256x256/512x512/1024x1024) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             url: String (Optional)
     *             b64_json: byte[] (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createImageVariationWithResponse(BinaryData image, RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createImageVariation' is 'multipart/form-data'
        return this.serviceClient.createImageVariationWithResponse(image, requestOptions);
    }

    /**
     * Classifies if text violates OpenAI's Content Policy.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     input: BinaryData (Required)
     *     model: String(text-moderation-latest/text-moderation-stable) (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     model: String (Required)
     *     results (Required): [
     *          (Required){
     *             flagged: boolean (Required)
     *             categories (Required): {
     *                 hate: boolean (Required)
     *                 hate/threatening: boolean (Required)
     *                 harassment: boolean (Required)
     *                 harassment/threatening: boolean (Required)
     *                 self-harm: boolean (Required)
     *                 self-harm/intent: boolean (Required)
     *                 self-harm/instructive: boolean (Required)
     *                 sexual: boolean (Required)
     *                 sexual/minors: boolean (Required)
     *                 violence: boolean (Required)
     *                 violence/graphic: boolean (Required)
     *             }
     *             category_scores (Required): {
     *                 hate: double (Required)
     *                 hate/threatening: double (Required)
     *                 harassment: double (Required)
     *                 harassment/threatening: double (Required)
     *                 self-harm: double (Required)
     *                 self-harm/intent: double (Required)
     *                 self-harm/instructive: double (Required)
     *                 sexual: double (Required)
     *                 sexual/minors: double (Required)
     *                 violence: double (Required)
     *                 violence/graphic: double (Required)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param content The content parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createModerationWithResponse(BinaryData content, RequestOptions requestOptions) {
        return this.serviceClient.createModerationWithResponse(content, requestOptions);
    }

    /**
     * The createChatCompletion operation.
     * 
     * @param createChatCompletionRequest The createChatCompletionRequest parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a chat completion response returned by model, based on the provided input.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateChatCompletionResponse createChatCompletion(CreateChatCompletionRequest createChatCompletionRequest) {
        // Generated convenience method for createChatCompletionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createChatCompletionWithResponse(BinaryData.fromObject(createChatCompletionRequest), requestOptions)
            .getValue().toObject(CreateChatCompletionResponse.class);
    }

    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the
     * fine-tuned models once complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * 
     * @param job The job parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FineTuningJob createFineTuningJob(CreateFineTuningJobRequest job) {
        // Generated convenience method for createFineTuningJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createFineTuningJobWithResponse(BinaryData.fromObject(job), requestOptions).getValue()
            .toObject(FineTuningJob.class);
    }

    /**
     * The listPaginatedFineTuningJobs operation.
     * 
     * @param after Identifier for the last job from the previous pagination request.
     * @param limit Number of fine-tuning jobs to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListPaginatedFineTuningJobsResponse listPaginatedFineTuningJobs(String after, Long limit) {
        // Generated convenience method for listPaginatedFineTuningJobsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        return listPaginatedFineTuningJobsWithResponse(requestOptions).getValue()
            .toObject(ListPaginatedFineTuningJobsResponse.class);
    }

    /**
     * The listPaginatedFineTuningJobs operation.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListPaginatedFineTuningJobsResponse listPaginatedFineTuningJobs() {
        // Generated convenience method for listPaginatedFineTuningJobsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listPaginatedFineTuningJobsWithResponse(requestOptions).getValue()
            .toObject(ListPaginatedFineTuningJobsResponse.class);
    }

    /**
     * Get info about a fine-tuning job.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * 
     * @param fineTuningJobId A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FineTuningJob retrieveFineTuningJob(String fineTuningJobId) {
        // Generated convenience method for retrieveFineTuningJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveFineTuningJobWithResponse(fineTuningJobId, requestOptions).getValue()
            .toObject(FineTuningJob.class);
    }

    /**
     * Get status updates for a fine-tuning job.
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for.
     * @param after Identifier for the last event from the previous pagination request.
     * @param limit Number of events to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListFineTuningJobEventsResponse listFineTuningEvents(String fineTuningJobId, String after, Integer limit) {
        // Generated convenience method for listFineTuningEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (after != null) {
            requestOptions.addQueryParam("after", after);
        }
        if (limit != null) {
            requestOptions.addQueryParam("limit", String.valueOf(limit));
        }
        return listFineTuningEventsWithResponse(fineTuningJobId, requestOptions).getValue()
            .toObject(ListFineTuningJobEventsResponse.class);
    }

    /**
     * Get status updates for a fine-tuning job.
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListFineTuningJobEventsResponse listFineTuningEvents(String fineTuningJobId) {
        // Generated convenience method for listFineTuningEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFineTuningEventsWithResponse(fineTuningJobId, requestOptions).getValue()
            .toObject(ListFineTuningJobEventsResponse.class);
    }

    /**
     * Immediately cancel a fine-tune job.
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FineTuningJob cancelFineTuningJob(String fineTuningJobId) {
        // Generated convenience method for cancelFineTuningJobWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelFineTuningJobWithResponse(fineTuningJobId, requestOptions).getValue()
            .toObject(FineTuningJob.class);
    }

    /**
     * The createCompletion operation.
     * 
     * @param createCompletionRequest The createCompletionRequest parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a completion response from the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateCompletionResponse createCompletion(CreateCompletionRequest createCompletionRequest) {
        // Generated convenience method for createCompletionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createCompletionWithResponse(BinaryData.fromObject(createCompletionRequest), requestOptions).getValue()
            .toObject(CreateCompletionResponse.class);
    }

    /**
     * The createEdit operation.
     * 
     * @param edit The edit parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateEditResponse createEdit(CreateEditRequest edit) {
        // Generated convenience method for createEditWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createEditWithResponse(BinaryData.fromObject(edit), requestOptions).getValue()
            .toObject(CreateEditResponse.class);
    }

    /**
     * Creates an embedding vector representing the input text.
     * 
     * @param embedding The embedding parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateEmbeddingResponse createEmbedding(CreateEmbeddingRequest embedding) {
        // Generated convenience method for createEmbeddingWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createEmbeddingWithResponse(BinaryData.fromObject(embedding), requestOptions).getValue()
            .toObject(CreateEmbeddingResponse.class);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListFilesResponse listFiles() {
        // Generated convenience method for listFilesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFilesWithResponse(requestOptions).getValue().toObject(ListFilesResponse.class);
    }

    /**
     * Returns information about a specific file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OpenAIFile retrieveFile(String fileId) {
        // Generated convenience method for retrieveFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveFileWithResponse(fileId, requestOptions).getValue().toObject(OpenAIFile.class);
    }

    /**
     * Delete a file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeleteFileResponse deleteFile(String fileId) {
        // Generated convenience method for deleteFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteFileWithResponse(fileId, requestOptions).getValue().toObject(DeleteFileResponse.class);
    }

    /**
     * Returns the contents of the specified file.
     * 
     * @param fileId The ID of the file to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a sequence of textual characters.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String downloadFile(String fileId) {
        // Generated convenience method for downloadFileWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return downloadFileWithResponse(fileId, requestOptions).getValue().toObject(String.class);
    }

    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once
     * complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning).
     * 
     * @param fineTune The fineTune parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FineTune createFineTune(CreateFineTuneRequest fineTune) {
        // Generated convenience method for createFineTuneWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createFineTuneWithResponse(BinaryData.fromObject(fineTune), requestOptions).getValue()
            .toObject(FineTune.class);
    }

    /**
     * List your organization's fine-tuning jobs.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListFineTunesResponse listFineTunes() {
        // Generated convenience method for listFineTunesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFineTunesWithResponse(requestOptions).getValue().toObject(ListFineTunesResponse.class);
    }

    /**
     * Gets info about the fine-tune job.
     * 
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning).
     * 
     * @param fineTuneId The ID of the fine-tune job.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FineTune retrieveFineTune(String fineTuneId) {
        // Generated convenience method for retrieveFineTuneWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveFineTuneWithResponse(fineTuneId, requestOptions).getValue().toObject(FineTune.class);
    }

    /**
     * Get fine-grained status updates for a fine-tune job.
     * 
     * @param fineTuneId The ID of the fine-tune job to get events for.
     * @param stream Whether to stream events for the fine-tune job. If set to true, events will be sent as
     * data-only
     * [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available. The stream will terminate with a `data: [DONE]` message when the
     * job is finished (succeeded, cancelled, or failed).
     * 
     * If set to false, only events generated so far will be returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListFineTuneEventsResponse listFineTuneEvents(String fineTuneId, Boolean stream) {
        // Generated convenience method for listFineTuneEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (stream != null) {
            requestOptions.addQueryParam("stream", String.valueOf(stream));
        }
        return listFineTuneEventsWithResponse(fineTuneId, requestOptions).getValue()
            .toObject(ListFineTuneEventsResponse.class);
    }

    /**
     * Get fine-grained status updates for a fine-tune job.
     * 
     * @param fineTuneId The ID of the fine-tune job to get events for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListFineTuneEventsResponse listFineTuneEvents(String fineTuneId) {
        // Generated convenience method for listFineTuneEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listFineTuneEventsWithResponse(fineTuneId, requestOptions).getValue()
            .toObject(ListFineTuneEventsResponse.class);
    }

    /**
     * Immediately cancel a fine-tune job.
     * 
     * @param fineTuneId The ID of the fine-tune job to cancel.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FineTune cancelFineTune(String fineTuneId) {
        // Generated convenience method for cancelFineTuneWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return cancelFineTuneWithResponse(fineTuneId, requestOptions).getValue().toObject(FineTune.class);
    }

    /**
     * Lists the currently available models, and provides basic information about each one such as the
     * owner and availability.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListModelsResponse listModels() {
        // Generated convenience method for listModelsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return listModelsWithResponse(requestOptions).getValue().toObject(ListModelsResponse.class);
    }

    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and
     * permissioning.
     * 
     * @param model The ID of the model to use for this request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes an OpenAI model offering that can be used with the API.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Model retrieve(String model) {
        // Generated convenience method for retrieveWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return retrieveWithResponse(model, requestOptions).getValue().toObject(Model.class);
    }

    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
     * 
     * @param model The model to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeleteModelResponse delete(String model) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(model, requestOptions).getValue().toObject(DeleteModelResponse.class);
    }

    /**
     * Creates an image given a prompt.
     * 
     * @param image The image parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ImagesResponse createImage(CreateImageRequest image) {
        // Generated convenience method for createImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createImageWithResponse(BinaryData.fromObject(image), requestOptions).getValue()
            .toObject(ImagesResponse.class);
    }

    /**
     * Classifies if text violates OpenAI's Content Policy.
     * 
     * @param content The content parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateModerationResponse createModeration(CreateModerationRequest content) {
        // Generated convenience method for createModerationWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createModerationWithResponse(BinaryData.fromObject(content), requestOptions).getValue()
            .toObject(CreateModerationResponse.class);
    }
}
