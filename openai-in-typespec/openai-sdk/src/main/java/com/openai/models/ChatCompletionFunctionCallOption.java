// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The ChatCompletionFunctionCallOption model.
 */
@Immutable
public final class ChatCompletionFunctionCallOption implements JsonSerializable<ChatCompletionFunctionCallOption> {
    /*
     * The name of the function to call.
     */
    @Generated
    private final String name;

    /**
     * Creates an instance of ChatCompletionFunctionCallOption class.
     * 
     * @param name the name value to set.
     */
    @Generated
    public ChatCompletionFunctionCallOption(String name) {
        this.name = name;
    }

    /**
     * Get the name property: The name of the function to call.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionFunctionCallOption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionFunctionCallOption if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionFunctionCallOption.
     */
    public static ChatCompletionFunctionCallOption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound) {
                ChatCompletionFunctionCallOption deserializedChatCompletionFunctionCallOption
                    = new ChatCompletionFunctionCallOption(name);

                return deserializedChatCompletionFunctionCallOption;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
