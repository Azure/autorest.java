// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;

/** Represents the url or the content of an image generated by the OpenAI API. */
@Immutable
public final class Image implements JsonSerializable<Image> {
    /*
     * The URL of the generated image, if `response_format` is `url` (default).
     */
    @Generated private String url;

    /*
     * The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     */
    @Generated private byte[] b64Json;

    /** Creates an instance of Image class. */
    @Generated
    private Image() {}

    /**
     * Get the url property: The URL of the generated image, if `response_format` is `url` (default).
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the b64Json property: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
     *
     * @return the b64Json value.
     */
    @Generated
    public byte[] getB64Json() {
        return this.b64Json;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeBinaryField("b64_json", this.b64Json);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Image from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of Image if the JsonReader was pointing to an instance of it, or null if it was pointing to
     *     JSON null.
     * @throws IOException If an error occurs while reading the Image.
     */
    public static Image fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    Image deserializedImage = new Image();
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("url".equals(fieldName)) {
                            deserializedImage.url = reader.getString();
                        } else if ("b64_json".equals(fieldName)) {
                            deserializedImage.b64Json = reader.getBinary();
                        } else {
                            reader.skipChildren();
                        }
                    }

                    return deserializedImage;
                });
    }
}
