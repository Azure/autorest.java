// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The CreateModerationResponseCategories model.
 */
@Immutable
public final class CreateModerationResponseCategories implements JsonSerializable<CreateModerationResponseCategories> {
    /*
     * Content that expresses, incites, or promotes hate based on race, gender, ethnicity,
     * religion, nationality, sexual orientation, disability status, or caste. Hateful content
     * aimed at non-protected groups (e.g., chess players) is harrassment.
     */
    @Generated
    private final boolean hate;

    /*
     * Hateful content that also includes violence or serious harm towards the targeted group
     * based on race, gender, ethnicity, religion, nationality, sexual orientation, disability
     * status, or caste.
     */
    @Generated
    private final boolean hateThreatening;

    /*
     * Content that expresses, incites, or promotes harassing language towards any target.
     */
    @Generated
    private final boolean harassment;

    /*
     * Harassment content that also includes violence or serious harm towards any target.
     */
    @Generated
    private final boolean harassmentThreatening;

    /*
     * Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting,
     * and eating disorders.
     */
    @Generated
    private final boolean selfHarm;

    /*
     * Content where the speaker expresses that they are engaging or intend to engage in acts of
     * self-harm, such as suicide, cutting, and eating disorders.
     */
    @Generated
    private final boolean selfHarmIntent;

    /*
     * Content that encourages performing acts of self-harm, such as suicide, cutting, and eating
     * disorders, or that gives instructions or advice on how to commit such acts.
     */
    @Generated
    private final boolean selfHarmInstructive;

    /*
     * Content meant to arouse sexual excitement, such as the description of sexual activity, or
     * that promotes sexual services (excluding sex education and wellness).
     */
    @Generated
    private final boolean sexual;

    /*
     * Sexual content that includes an individual who is under 18 years old.
     */
    @Generated
    private final boolean sexualMinors;

    /*
     * Content that depicts death, violence, or physical injury.
     */
    @Generated
    private final boolean violence;

    /*
     * Content that depicts death, violence, or physical injury in graphic detail.
     */
    @Generated
    private final boolean violenceGraphic;

    /**
     * Creates an instance of CreateModerationResponseCategories class.
     * 
     * @param hate the hate value to set.
     * @param hateThreatening the hateThreatening value to set.
     * @param harassment the harassment value to set.
     * @param harassmentThreatening the harassmentThreatening value to set.
     * @param selfHarm the selfHarm value to set.
     * @param selfHarmIntent the selfHarmIntent value to set.
     * @param selfHarmInstructive the selfHarmInstructive value to set.
     * @param sexual the sexual value to set.
     * @param sexualMinors the sexualMinors value to set.
     * @param violence the violence value to set.
     * @param violenceGraphic the violenceGraphic value to set.
     */
    @Generated
    private CreateModerationResponseCategories(boolean hate, boolean hateThreatening, boolean harassment,
        boolean harassmentThreatening, boolean selfHarm, boolean selfHarmIntent, boolean selfHarmInstructive,
        boolean sexual, boolean sexualMinors, boolean violence, boolean violenceGraphic) {
        this.hate = hate;
        this.hateThreatening = hateThreatening;
        this.harassment = harassment;
        this.harassmentThreatening = harassmentThreatening;
        this.selfHarm = selfHarm;
        this.selfHarmIntent = selfHarmIntent;
        this.selfHarmInstructive = selfHarmInstructive;
        this.sexual = sexual;
        this.sexualMinors = sexualMinors;
        this.violence = violence;
        this.violenceGraphic = violenceGraphic;
    }

    /**
     * Get the hate property: Content that expresses, incites, or promotes hate based on race, gender, ethnicity,
     * religion, nationality, sexual orientation, disability status, or caste. Hateful content
     * aimed at non-protected groups (e.g., chess players) is harrassment.
     * 
     * @return the hate value.
     */
    @Generated
    public boolean isHate() {
        return this.hate;
    }

    /**
     * Get the hateThreatening property: Hateful content that also includes violence or serious harm towards the
     * targeted group
     * based on race, gender, ethnicity, religion, nationality, sexual orientation, disability
     * status, or caste.
     * 
     * @return the hateThreatening value.
     */
    @Generated
    public boolean isHateThreatening() {
        return this.hateThreatening;
    }

    /**
     * Get the harassment property: Content that expresses, incites, or promotes harassing language towards any target.
     * 
     * @return the harassment value.
     */
    @Generated
    public boolean isHarassment() {
        return this.harassment;
    }

    /**
     * Get the harassmentThreatening property: Harassment content that also includes violence or serious harm towards
     * any target.
     * 
     * @return the harassmentThreatening value.
     */
    @Generated
    public boolean isHarassmentThreatening() {
        return this.harassmentThreatening;
    }

    /**
     * Get the selfHarm property: Content that promotes, encourages, or depicts acts of self-harm, such as suicide,
     * cutting,
     * and eating disorders.
     * 
     * @return the selfHarm value.
     */
    @Generated
    public boolean isSelfHarm() {
        return this.selfHarm;
    }

    /**
     * Get the selfHarmIntent property: Content where the speaker expresses that they are engaging or intend to engage
     * in acts of
     * self-harm, such as suicide, cutting, and eating disorders.
     * 
     * @return the selfHarmIntent value.
     */
    @Generated
    public boolean isSelfHarmIntent() {
        return this.selfHarmIntent;
    }

    /**
     * Get the selfHarmInstructive property: Content that encourages performing acts of self-harm, such as suicide,
     * cutting, and eating
     * disorders, or that gives instructions or advice on how to commit such acts.
     * 
     * @return the selfHarmInstructive value.
     */
    @Generated
    public boolean isSelfHarmInstructive() {
        return this.selfHarmInstructive;
    }

    /**
     * Get the sexual property: Content meant to arouse sexual excitement, such as the description of sexual activity,
     * or
     * that promotes sexual services (excluding sex education and wellness).
     * 
     * @return the sexual value.
     */
    @Generated
    public boolean isSexual() {
        return this.sexual;
    }

    /**
     * Get the sexualMinors property: Sexual content that includes an individual who is under 18 years old.
     * 
     * @return the sexualMinors value.
     */
    @Generated
    public boolean isSexualMinors() {
        return this.sexualMinors;
    }

    /**
     * Get the violence property: Content that depicts death, violence, or physical injury.
     * 
     * @return the violence value.
     */
    @Generated
    public boolean isViolence() {
        return this.violence;
    }

    /**
     * Get the violenceGraphic property: Content that depicts death, violence, or physical injury in graphic detail.
     * 
     * @return the violenceGraphic value.
     */
    @Generated
    public boolean isViolenceGraphic() {
        return this.violenceGraphic;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("hate", this.hate);
        jsonWriter.writeBooleanField("hate/threatening", this.hateThreatening);
        jsonWriter.writeBooleanField("harassment", this.harassment);
        jsonWriter.writeBooleanField("harassment/threatening", this.harassmentThreatening);
        jsonWriter.writeBooleanField("self-harm", this.selfHarm);
        jsonWriter.writeBooleanField("self-harm/intent", this.selfHarmIntent);
        jsonWriter.writeBooleanField("self-harm/instructive", this.selfHarmInstructive);
        jsonWriter.writeBooleanField("sexual", this.sexual);
        jsonWriter.writeBooleanField("sexual/minors", this.sexualMinors);
        jsonWriter.writeBooleanField("violence", this.violence);
        jsonWriter.writeBooleanField("violence/graphic", this.violenceGraphic);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateModerationResponseCategories from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateModerationResponseCategories if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateModerationResponseCategories.
     */
    public static CreateModerationResponseCategories fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean hateFound = false;
            boolean hate = false;
            boolean hateThreateningFound = false;
            boolean hateThreatening = false;
            boolean harassmentFound = false;
            boolean harassment = false;
            boolean harassmentThreateningFound = false;
            boolean harassmentThreatening = false;
            boolean selfHarmFound = false;
            boolean selfHarm = false;
            boolean selfHarmIntentFound = false;
            boolean selfHarmIntent = false;
            boolean selfHarmInstructiveFound = false;
            boolean selfHarmInstructive = false;
            boolean sexualFound = false;
            boolean sexual = false;
            boolean sexualMinorsFound = false;
            boolean sexualMinors = false;
            boolean violenceFound = false;
            boolean violence = false;
            boolean violenceGraphicFound = false;
            boolean violenceGraphic = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hate".equals(fieldName)) {
                    hate = reader.getBoolean();
                    hateFound = true;
                } else if ("hate/threatening".equals(fieldName)) {
                    hateThreatening = reader.getBoolean();
                    hateThreateningFound = true;
                } else if ("harassment".equals(fieldName)) {
                    harassment = reader.getBoolean();
                    harassmentFound = true;
                } else if ("harassment/threatening".equals(fieldName)) {
                    harassmentThreatening = reader.getBoolean();
                    harassmentThreateningFound = true;
                } else if ("self-harm".equals(fieldName)) {
                    selfHarm = reader.getBoolean();
                    selfHarmFound = true;
                } else if ("self-harm/intent".equals(fieldName)) {
                    selfHarmIntent = reader.getBoolean();
                    selfHarmIntentFound = true;
                } else if ("self-harm/instructive".equals(fieldName)) {
                    selfHarmInstructive = reader.getBoolean();
                    selfHarmInstructiveFound = true;
                } else if ("sexual".equals(fieldName)) {
                    sexual = reader.getBoolean();
                    sexualFound = true;
                } else if ("sexual/minors".equals(fieldName)) {
                    sexualMinors = reader.getBoolean();
                    sexualMinorsFound = true;
                } else if ("violence".equals(fieldName)) {
                    violence = reader.getBoolean();
                    violenceFound = true;
                } else if ("violence/graphic".equals(fieldName)) {
                    violenceGraphic = reader.getBoolean();
                    violenceGraphicFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (hateFound && hateThreateningFound && harassmentFound && harassmentThreateningFound && selfHarmFound
                && selfHarmIntentFound && selfHarmInstructiveFound && sexualFound && sexualMinorsFound && violenceFound
                && violenceGraphicFound) {
                CreateModerationResponseCategories deserializedCreateModerationResponseCategories
                    = new CreateModerationResponseCategories(hate, hateThreatening, harassment, harassmentThreatening,
                        selfHarm, selfHarmIntent, selfHarmInstructive, sexual, sexualMinors, violence, violenceGraphic);

                return deserializedCreateModerationResponseCategories;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!hateFound) {
                missingProperties.add("hate");
            }
            if (!hateThreateningFound) {
                missingProperties.add("hate/threatening");
            }
            if (!harassmentFound) {
                missingProperties.add("harassment");
            }
            if (!harassmentThreateningFound) {
                missingProperties.add("harassment/threatening");
            }
            if (!selfHarmFound) {
                missingProperties.add("self-harm");
            }
            if (!selfHarmIntentFound) {
                missingProperties.add("self-harm/intent");
            }
            if (!selfHarmInstructiveFound) {
                missingProperties.add("self-harm/instructive");
            }
            if (!sexualFound) {
                missingProperties.add("sexual");
            }
            if (!sexualMinorsFound) {
                missingProperties.add("sexual/minors");
            }
            if (!violenceFound) {
                missingProperties.add("violence");
            }
            if (!violenceGraphicFound) {
                missingProperties.add("violence/graphic");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
