// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Fluent;
import com.generic.core.annotation.Generated;
import com.generic.core.models.BinaryData;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The CreateEmbeddingRequest model.
 */
@Fluent
public final class CreateEmbeddingRequest implements JsonSerializable<CreateEmbeddingRequest> {
    /*
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your
     * available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     */
    @Generated
    private final CreateEmbeddingRequestModel model;

    /*
     * Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a
     * single request, pass an array of strings or array of token arrays. Each input must not exceed
     * the max input tokens for the model (8191 tokens for `text-embedding-ada-002`) and cannot be an empty string.
     * [Example Python
     * code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)
     * for counting tokens.
     */
    @Generated
    private final BinaryData input;

    /*
     * The user property.
     */
    @Generated
    private String user;

    /**
     * Creates an instance of CreateEmbeddingRequest class.
     * 
     * @param model the model value to set.
     * @param input the input value to set.
     */
    @Generated
    public CreateEmbeddingRequest(CreateEmbeddingRequestModel model, BinaryData input) {
        this.model = model;
        this.input = input;
    }

    /**
     * Get the model property: ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
     * API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of
     * them.
     * 
     * @return the model value.
     */
    @Generated
    public CreateEmbeddingRequestModel getModel() {
        return this.model;
    }

    /**
     * Get the input property: Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in
     * a
     * single request, pass an array of strings or array of token arrays. Each input must not exceed
     * the max input tokens for the model (8191 tokens for `text-embedding-ada-002`) and cannot be an empty string.
     * [Example Python
     * code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)
     * for counting tokens.
     * 
     * @return the input value.
     */
    @Generated
    public BinaryData getInput() {
        return this.input;
    }

    /**
     * Get the user property: The user property.
     * 
     * @return the user value.
     */
    @Generated
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: The user property.
     * 
     * @param user the user value to set.
     * @return the CreateEmbeddingRequest object itself.
     */
    @Generated
    public CreateEmbeddingRequest setUser(String user) {
        this.user = user;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model", Objects.toString(this.model, null));
        jsonWriter.writeUntypedField("input", this.input.toObject(Object.class));
        jsonWriter.writeStringField("user", this.user);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateEmbeddingRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateEmbeddingRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateEmbeddingRequest.
     */
    public static CreateEmbeddingRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean modelFound = false;
            CreateEmbeddingRequestModel model = null;
            boolean inputFound = false;
            BinaryData input = null;
            String user = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    model = CreateEmbeddingRequestModel.fromString(reader.getString());
                    modelFound = true;
                } else if ("input".equals(fieldName)) {
                    input = BinaryData.fromObject(reader.readUntyped());
                    inputFound = true;
                } else if ("user".equals(fieldName)) {
                    user = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (modelFound && inputFound) {
                CreateEmbeddingRequest deserializedCreateEmbeddingRequest = new CreateEmbeddingRequest(model, input);
                deserializedCreateEmbeddingRequest.user = user;

                return deserializedCreateEmbeddingRequest;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!modelFound) {
                missingProperties.add("model");
            }
            if (!inputFound) {
                missingProperties.add("input");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
