// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Fluent;
import com.generic.core.annotation.Generated;
import com.generic.core.models.BinaryData;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * The CreateCompletionRequest model.
 */
@Fluent
public final class CreateCompletionRequest implements JsonSerializable<CreateCompletionRequest> {
    /*
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to
     * see all of your available models, or see our [Model overview](/docs/models/overview) for
     * descriptions of them.
     */
    @Generated
    private final CreateCompletionRequestModel model;

    /*
     * The prompt(s) to generate completions for, encoded as a string, array of strings, array of
     * tokens, or array of token arrays.
     * 
     * Note that <|endoftext|> is the document separator that the model sees during training, so if a
     * prompt is not specified the model will generate as if from the beginning of a new document.
     */
    @Generated
    private final BinaryData prompt;

    /*
     * The suffix that comes after a completion of inserted text.
     */
    @Generated
    private String suffix;

    /*
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
     * more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     */
    @Generated
    private Double temperature;

    /*
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers
     * the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising
     * the top 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     */
    @Generated
    private Double topP;

    /*
     * How many completions to generate for each prompt.
     * **Note:** Because this parameter generates many completions, it can quickly consume your token
     * quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     */
    @Generated
    private Long n;

    /*
     * The maximum number of [tokens](/tokenizer) to generate in the completion.
     * 
     * The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
     * [Example Python
     * code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)
     * for counting tokens.
     */
    @Generated
    private Long maxTokens;

    /*
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    @Generated
    private BinaryData stop;

    /*
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear
     * in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
     */
    @Generated
    private Double presencePenalty;

    /*
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing
     * frequency in the text so far, decreasing the model's likelihood to repeat the same line
     * verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
     */
    @Generated
    private Double frequencyPenalty;

    /*
     * Modify the likelihood of specified tokens appearing in the completion.
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an
     * associated bias value from -100 to 100. Mathematically, the bias is added to the logits
     * generated by the model prior to sampling. The exact effect will vary per model, but values
     * between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100
     * should result in a ban or exclusive selection of the relevant token.
     */
    @Generated
    private Map<String, Long> logitBias;

    /*
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect
     * abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     */
    @Generated
    private String user;

    /*
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only
     * [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#
     * Event_stream_format)
     * as they become available, with the stream terminated by a `data: [DONE]` message.
     * [Example Python
     * code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
     */
    @Generated
    private Boolean stream;

    /*
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens.
     * For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The
     * API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1`
     * elements in the response.
     * 
     * The maximum value for `logprobs` is 5.
     */
    @Generated
    private Long logprobs;

    /*
     * Echo back the prompt in addition to the completion
     */
    @Generated
    private Boolean echo;

    /*
     * Generates `best_of` completions server-side and returns the "best" (the one with the highest
     * log probability per token). Results cannot be streamed.
     * 
     * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies
     * how many to return â€“ `best_of` must be greater than `n`.
     * 
     * **Note:** Because this parameter generates many completions, it can quickly consume your token
     * quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     */
    @Generated
    private Long bestOf;

    /**
     * Creates an instance of CreateCompletionRequest class.
     * 
     * @param model the model value to set.
     * @param prompt the prompt value to set.
     */
    @Generated
    public CreateCompletionRequest(CreateCompletionRequestModel model, BinaryData prompt) {
        this.model = model;
        this.prompt = prompt;
    }

    /**
     * Get the model property: ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
     * API to
     * see all of your available models, or see our [Model overview](/docs/models/overview) for
     * descriptions of them.
     * 
     * @return the model value.
     */
    @Generated
    public CreateCompletionRequestModel getModel() {
        return this.model;
    }

    /**
     * Get the prompt property: The prompt(s) to generate completions for, encoded as a string, array of strings, array
     * of
     * tokens, or array of token arrays.
     * 
     * Note that &lt;|endoftext|&gt; is the document separator that the model sees during training, so if a
     * prompt is not specified the model will generate as if from the beginning of a new document.
     * 
     * @return the prompt value.
     */
    @Generated
    public BinaryData getPrompt() {
        return this.prompt;
    }

    /**
     * Get the suffix property: The suffix that comes after a completion of inserted text.
     * 
     * @return the suffix value.
     */
    @Generated
    public String getSuffix() {
        return this.suffix;
    }

    /**
     * Set the suffix property: The suffix that comes after a completion of inserted text.
     * 
     * @param suffix the suffix value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setSuffix(String suffix) {
        this.suffix = suffix;
        return this;
    }

    /**
     * Get the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
     * make the output
     * more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @return the temperature value.
     */
    @Generated
    public Double getTemperature() {
        return this.temperature;
    }

    /**
     * Set the temperature property: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
     * make the output
     * more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     * @param temperature the temperature value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }

    /**
     * Get the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers
     * the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising
     * the top 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @return the topP value.
     */
    @Generated
    public Double getTopP() {
        return this.topP;
    }

    /**
     * Set the topP property: An alternative to sampling with temperature, called nucleus sampling, where the model
     * considers
     * the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising
     * the top 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     * @param topP the topP value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setTopP(Double topP) {
        this.topP = topP;
        return this;
    }

    /**
     * Get the n property: How many completions to generate for each prompt.
     * **Note:** Because this parameter generates many completions, it can quickly consume your token
     * quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     * 
     * @return the n value.
     */
    @Generated
    public Long getN() {
        return this.n;
    }

    /**
     * Set the n property: How many completions to generate for each prompt.
     * **Note:** Because this parameter generates many completions, it can quickly consume your token
     * quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     * 
     * @param n the n value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setN(Long n) {
        this.n = n;
        return this;
    }

    /**
     * Get the maxTokens property: The maximum number of [tokens](/tokenizer) to generate in the completion.
     * 
     * The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
     * [Example Python
     * code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)
     * for counting tokens.
     * 
     * @return the maxTokens value.
     */
    @Generated
    public Long getMaxTokens() {
        return this.maxTokens;
    }

    /**
     * Set the maxTokens property: The maximum number of [tokens](/tokenizer) to generate in the completion.
     * 
     * The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
     * [Example Python
     * code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb)
     * for counting tokens.
     * 
     * @param maxTokens the maxTokens value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setMaxTokens(Long maxTokens) {
        this.maxTokens = maxTokens;
        return this;
    }

    /**
     * Get the stop property: Up to 4 sequences where the API will stop generating further tokens.
     * 
     * @return the stop value.
     */
    @Generated
    public BinaryData getStop() {
        return this.stop;
    }

    /**
     * Set the stop property: Up to 4 sequences where the API will stop generating further tokens.
     * 
     * @param stop the stop value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setStop(BinaryData stop) {
        this.stop = stop;
        return this;
    }

    /**
     * Get the presencePenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear
     * in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details).
     * 
     * @return the presencePenalty value.
     */
    @Generated
    public Double getPresencePenalty() {
        return this.presencePenalty;
    }

    /**
     * Set the presencePenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * whether they appear
     * in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details).
     * 
     * @param presencePenalty the presencePenalty value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setPresencePenalty(Double presencePenalty) {
        this.presencePenalty = presencePenalty;
        return this;
    }

    /**
     * Get the frequencyPenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing
     * frequency in the text so far, decreasing the model's likelihood to repeat the same line
     * verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details).
     * 
     * @return the frequencyPenalty value.
     */
    @Generated
    public Double getFrequencyPenalty() {
        return this.frequencyPenalty;
    }

    /**
     * Set the frequencyPenalty property: Number between -2.0 and 2.0. Positive values penalize new tokens based on
     * their existing
     * frequency in the text so far, decreasing the model's likelihood to repeat the same line
     * verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details).
     * 
     * @param frequencyPenalty the frequencyPenalty value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setFrequencyPenalty(Double frequencyPenalty) {
        this.frequencyPenalty = frequencyPenalty;
        return this;
    }

    /**
     * Get the logitBias property: Modify the likelihood of specified tokens appearing in the completion.
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an
     * associated bias value from -100 to 100. Mathematically, the bias is added to the logits
     * generated by the model prior to sampling. The exact effect will vary per model, but values
     * between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100
     * should result in a ban or exclusive selection of the relevant token.
     * 
     * @return the logitBias value.
     */
    @Generated
    public Map<String, Long> getLogitBias() {
        return this.logitBias;
    }

    /**
     * Set the logitBias property: Modify the likelihood of specified tokens appearing in the completion.
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an
     * associated bias value from -100 to 100. Mathematically, the bias is added to the logits
     * generated by the model prior to sampling. The exact effect will vary per model, but values
     * between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100
     * should result in a ban or exclusive selection of the relevant token.
     * 
     * @param logitBias the logitBias value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setLogitBias(Map<String, Long> logitBias) {
        this.logitBias = logitBias;
        return this;
    }

    /**
     * Get the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect
     * abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @return the user value.
     */
    @Generated
    public String getUser() {
        return this.user;
    }

    /**
     * Set the user property: A unique identifier representing your end-user, which can help OpenAI to monitor and
     * detect
     * abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     * @param user the user value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Get the stream property: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as
     * data-only
     * [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available, with the stream terminated by a `data: [DONE]` message.
     * [Example Python
     * code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
     * 
     * @return the stream value.
     */
    @Generated
    public Boolean isStream() {
        return this.stream;
    }

    /**
     * Set the stream property: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as
     * data-only
     * [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available, with the stream terminated by a `data: [DONE]` message.
     * [Example Python
     * code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb).
     * 
     * @param stream the stream value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setStream(Boolean stream) {
        this.stream = stream;
        return this;
    }

    /**
     * Get the logprobs property: Include the log probabilities on the `logprobs` most likely tokens, as well the
     * chosen tokens.
     * For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The
     * API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1`
     * elements in the response.
     * 
     * The maximum value for `logprobs` is 5.
     * 
     * @return the logprobs value.
     */
    @Generated
    public Long getLogprobs() {
        return this.logprobs;
    }

    /**
     * Set the logprobs property: Include the log probabilities on the `logprobs` most likely tokens, as well the
     * chosen tokens.
     * For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The
     * API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1`
     * elements in the response.
     * 
     * The maximum value for `logprobs` is 5.
     * 
     * @param logprobs the logprobs value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setLogprobs(Long logprobs) {
        this.logprobs = logprobs;
        return this;
    }

    /**
     * Get the echo property: Echo back the prompt in addition to the completion.
     * 
     * @return the echo value.
     */
    @Generated
    public Boolean isEcho() {
        return this.echo;
    }

    /**
     * Set the echo property: Echo back the prompt in addition to the completion.
     * 
     * @param echo the echo value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setEcho(Boolean echo) {
        this.echo = echo;
        return this;
    }

    /**
     * Get the bestOf property: Generates `best_of` completions server-side and returns the "best" (the one with the
     * highest
     * log probability per token). Results cannot be streamed.
     * 
     * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies
     * how many to return â€“ `best_of` must be greater than `n`.
     * 
     * **Note:** Because this parameter generates many completions, it can quickly consume your token
     * quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     * 
     * @return the bestOf value.
     */
    @Generated
    public Long getBestOf() {
        return this.bestOf;
    }

    /**
     * Set the bestOf property: Generates `best_of` completions server-side and returns the "best" (the one with the
     * highest
     * log probability per token). Results cannot be streamed.
     * 
     * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies
     * how many to return â€“ `best_of` must be greater than `n`.
     * 
     * **Note:** Because this parameter generates many completions, it can quickly consume your token
     * quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     * 
     * @param bestOf the bestOf value to set.
     * @return the CreateCompletionRequest object itself.
     */
    @Generated
    public CreateCompletionRequest setBestOf(Long bestOf) {
        this.bestOf = bestOf;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model", Objects.toString(this.model, null));
        jsonWriter.writeUntypedField("prompt", this.prompt.toObject(Object.class));
        jsonWriter.writeStringField("suffix", this.suffix);
        jsonWriter.writeNumberField("temperature", this.temperature);
        jsonWriter.writeNumberField("top_p", this.topP);
        jsonWriter.writeNumberField("n", this.n);
        jsonWriter.writeNumberField("max_tokens", this.maxTokens);
        jsonWriter.writeUntypedField("stop", this.stop.toObject(Object.class));
        jsonWriter.writeNumberField("presence_penalty", this.presencePenalty);
        jsonWriter.writeNumberField("frequency_penalty", this.frequencyPenalty);
        jsonWriter.writeMapField("logit_bias", this.logitBias, (writer, element) -> writer.writeLong(element));
        jsonWriter.writeStringField("user", this.user);
        jsonWriter.writeBooleanField("stream", this.stream);
        jsonWriter.writeNumberField("logprobs", this.logprobs);
        jsonWriter.writeBooleanField("echo", this.echo);
        jsonWriter.writeNumberField("best_of", this.bestOf);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateCompletionRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateCompletionRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateCompletionRequest.
     */
    public static CreateCompletionRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean modelFound = false;
            CreateCompletionRequestModel model = null;
            boolean promptFound = false;
            BinaryData prompt = null;
            String suffix = null;
            Double temperature = null;
            Double topP = null;
            Long n = null;
            Long maxTokens = null;
            BinaryData stop = null;
            Double presencePenalty = null;
            Double frequencyPenalty = null;
            Map<String, Long> logitBias = null;
            String user = null;
            Boolean stream = null;
            Long logprobs = null;
            Boolean echo = null;
            Long bestOf = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    model = CreateCompletionRequestModel.fromString(reader.getString());
                    modelFound = true;
                } else if ("prompt".equals(fieldName)) {
                    prompt = BinaryData.fromObject(reader.readUntyped());
                    promptFound = true;
                } else if ("suffix".equals(fieldName)) {
                    suffix = reader.getString();
                } else if ("temperature".equals(fieldName)) {
                    temperature = reader.getNullable(JsonReader::getDouble);
                } else if ("top_p".equals(fieldName)) {
                    topP = reader.getNullable(JsonReader::getDouble);
                } else if ("n".equals(fieldName)) {
                    n = reader.getNullable(JsonReader::getLong);
                } else if ("max_tokens".equals(fieldName)) {
                    maxTokens = reader.getNullable(JsonReader::getLong);
                } else if ("stop".equals(fieldName)) {
                    stop = BinaryData.fromObject(reader.readUntyped());
                } else if ("presence_penalty".equals(fieldName)) {
                    presencePenalty = reader.getNullable(JsonReader::getDouble);
                } else if ("frequency_penalty".equals(fieldName)) {
                    frequencyPenalty = reader.getNullable(JsonReader::getDouble);
                } else if ("logit_bias".equals(fieldName)) {
                    logitBias = reader.readMap(reader1 -> reader1.getLong());
                } else if ("user".equals(fieldName)) {
                    user = reader.getString();
                } else if ("stream".equals(fieldName)) {
                    stream = reader.getNullable(JsonReader::getBoolean);
                } else if ("logprobs".equals(fieldName)) {
                    logprobs = reader.getNullable(JsonReader::getLong);
                } else if ("echo".equals(fieldName)) {
                    echo = reader.getNullable(JsonReader::getBoolean);
                } else if ("best_of".equals(fieldName)) {
                    bestOf = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }
            if (modelFound && promptFound) {
                CreateCompletionRequest deserializedCreateCompletionRequest
                    = new CreateCompletionRequest(model, prompt);
                deserializedCreateCompletionRequest.suffix = suffix;
                deserializedCreateCompletionRequest.temperature = temperature;
                deserializedCreateCompletionRequest.topP = topP;
                deserializedCreateCompletionRequest.n = n;
                deserializedCreateCompletionRequest.maxTokens = maxTokens;
                deserializedCreateCompletionRequest.stop = stop;
                deserializedCreateCompletionRequest.presencePenalty = presencePenalty;
                deserializedCreateCompletionRequest.frequencyPenalty = frequencyPenalty;
                deserializedCreateCompletionRequest.logitBias = logitBias;
                deserializedCreateCompletionRequest.user = user;
                deserializedCreateCompletionRequest.stream = stream;
                deserializedCreateCompletionRequest.logprobs = logprobs;
                deserializedCreateCompletionRequest.echo = echo;
                deserializedCreateCompletionRequest.bestOf = bestOf;

                return deserializedCreateCompletionRequest;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!modelFound) {
                missingProperties.add("model");
            }
            if (!promptFound) {
                missingProperties.add("prompt");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
