// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The ChatCompletionResponseMessage model.
 */
@Immutable
public final class ChatCompletionResponseMessage implements JsonSerializable<ChatCompletionResponseMessage> {
    /*
     * The role of the author of this message.
     */
    @Generated
    private final ChatCompletionResponseMessageRole role;

    /*
     * The contents of the message.
     */
    @Generated
    private final String content;

    /*
     * The name and arguments of a function that should be called, as generated by the model.
     */
    @Generated
    private ChatCompletionResponseMessageFunctionCall functionCall;

    /**
     * Creates an instance of ChatCompletionResponseMessage class.
     * 
     * @param role the role value to set.
     * @param content the content value to set.
     */
    @Generated
    private ChatCompletionResponseMessage(ChatCompletionResponseMessageRole role, String content) {
        this.role = role;
        this.content = content;
    }

    /**
     * Get the role property: The role of the author of this message.
     * 
     * @return the role value.
     */
    @Generated
    public ChatCompletionResponseMessageRole getRole() {
        return this.role;
    }

    /**
     * Get the content property: The contents of the message.
     * 
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * Get the functionCall property: The name and arguments of a function that should be called, as generated by the
     * model.
     * 
     * @return the functionCall value.
     */
    @Generated
    public ChatCompletionResponseMessageFunctionCall getFunctionCall() {
        return this.functionCall;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", Objects.toString(this.role, null));
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeJsonField("function_call", this.functionCall);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionResponseMessage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionResponseMessage if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionResponseMessage.
     */
    public static ChatCompletionResponseMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean roleFound = false;
            ChatCompletionResponseMessageRole role = null;
            boolean contentFound = false;
            String content = null;
            ChatCompletionResponseMessageFunctionCall functionCall = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    role = ChatCompletionResponseMessageRole.fromString(reader.getString());
                    roleFound = true;
                } else if ("content".equals(fieldName)) {
                    content = reader.getString();
                    contentFound = true;
                } else if ("function_call".equals(fieldName)) {
                    functionCall = ChatCompletionResponseMessageFunctionCall.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (roleFound && contentFound) {
                ChatCompletionResponseMessage deserializedChatCompletionResponseMessage
                    = new ChatCompletionResponseMessage(role, content);
                deserializedChatCompletionResponseMessage.functionCall = functionCall;

                return deserializedChatCompletionResponseMessage;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!roleFound) {
                missingProperties.add("role");
            }
            if (!contentFound) {
                missingProperties.add("content");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
