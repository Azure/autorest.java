// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;

/**
 * The FineTuningJobError model.
 */
@Immutable
public final class FineTuningJobError implements JsonSerializable<FineTuningJobError> {
    /*
     * A human-readable error message.
     */
    @Generated
    private String message;

    /*
     * A machine-readable error code.
     */
    @Generated
    private String code;

    /*
     * The parameter that was invalid, usually `training_file` or `validation_file`. This field
     * will be null if the failure was not parameter-specific.
     */
    @Generated
    private String param;

    /**
     * Creates an instance of FineTuningJobError class.
     */
    @Generated
    private FineTuningJobError() {
    }

    /**
     * Get the message property: A human-readable error message.
     * 
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the code property: A machine-readable error code.
     * 
     * @return the code value.
     */
    @Generated
    public String getCode() {
        return this.code;
    }

    /**
     * Get the param property: The parameter that was invalid, usually `training_file` or `validation_file`. This field
     * will be null if the failure was not parameter-specific.
     * 
     * @return the param value.
     */
    @Generated
    public String getParam() {
        return this.param;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("param", this.param);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FineTuningJobError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FineTuningJobError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FineTuningJobError.
     */
    public static FineTuningJobError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FineTuningJobError deserializedFineTuningJobError = new FineTuningJobError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("message".equals(fieldName)) {
                    deserializedFineTuningJobError.message = reader.getString();
                } else if ("code".equals(fieldName)) {
                    deserializedFineTuningJobError.code = reader.getString();
                } else if ("param".equals(fieldName)) {
                    deserializedFineTuningJobError.param = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFineTuningJobError;
        });
    }
}
