// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Fluent;
import com.generic.core.annotation.Generated;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The ChatCompletionRequestMessage model.
 */
@Fluent
public final class ChatCompletionRequestMessage implements JsonSerializable<ChatCompletionRequestMessage> {
    /*
     * The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
     */
    @Generated
    private final ChatCompletionRequestMessageRole role;

    /*
     * The contents of the message. `content` is required for all messages, and may be null for
     * assistant messages with function calls.
     */
    @Generated
    private final String content;

    /*
     * The name of the author of this message. `name` is required if role is `function`, and it
     * should be the name of the function whose response is in the `content`. May contain a-z,
     * A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     */
    @Generated
    private String name;

    /*
     * The name and arguments of a function that should be called, as generated by the model.
     */
    @Generated
    private ChatCompletionRequestMessageFunctionCall functionCall;

    /**
     * Creates an instance of ChatCompletionRequestMessage class.
     * 
     * @param role the role value to set.
     * @param content the content value to set.
     */
    @Generated
    public ChatCompletionRequestMessage(ChatCompletionRequestMessageRole role, String content) {
        this.role = role;
        this.content = content;
    }

    /**
     * Get the role property: The role of the messages author. One of `system`, `user`, `assistant`, or `function`.
     * 
     * @return the role value.
     */
    @Generated
    public ChatCompletionRequestMessageRole getRole() {
        return this.role;
    }

    /**
     * Get the content property: The contents of the message. `content` is required for all messages, and may be null
     * for
     * assistant messages with function calls.
     * 
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * Get the name property: The name of the author of this message. `name` is required if role is `function`, and it
     * should be the name of the function whose response is in the `content`. May contain a-z,
     * A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the author of this message. `name` is required if role is `function`, and it
     * should be the name of the function whose response is in the `content`. May contain a-z,
     * A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     * 
     * @param name the name value to set.
     * @return the ChatCompletionRequestMessage object itself.
     */
    @Generated
    public ChatCompletionRequestMessage setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the functionCall property: The name and arguments of a function that should be called, as generated by the
     * model.
     * 
     * @return the functionCall value.
     */
    @Generated
    public ChatCompletionRequestMessageFunctionCall getFunctionCall() {
        return this.functionCall;
    }

    /**
     * Set the functionCall property: The name and arguments of a function that should be called, as generated by the
     * model.
     * 
     * @param functionCall the functionCall value to set.
     * @return the ChatCompletionRequestMessage object itself.
     */
    @Generated
    public ChatCompletionRequestMessage setFunctionCall(ChatCompletionRequestMessageFunctionCall functionCall) {
        this.functionCall = functionCall;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", Objects.toString(this.role, null));
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("function_call", this.functionCall);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionRequestMessage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionRequestMessage if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionRequestMessage.
     */
    public static ChatCompletionRequestMessage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean roleFound = false;
            ChatCompletionRequestMessageRole role = null;
            boolean contentFound = false;
            String content = null;
            String name = null;
            ChatCompletionRequestMessageFunctionCall functionCall = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    role = ChatCompletionRequestMessageRole.fromString(reader.getString());
                    roleFound = true;
                } else if ("content".equals(fieldName)) {
                    content = reader.getString();
                    contentFound = true;
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("function_call".equals(fieldName)) {
                    functionCall = ChatCompletionRequestMessageFunctionCall.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (roleFound && contentFound) {
                ChatCompletionRequestMessage deserializedChatCompletionRequestMessage
                    = new ChatCompletionRequestMessage(role, content);
                deserializedChatCompletionRequestMessage.name = name;
                deserializedChatCompletionRequestMessage.functionCall = functionCall;

                return deserializedChatCompletionRequestMessage;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!roleFound) {
                missingProperties.add("role");
            }
            if (!contentFound) {
                missingProperties.add("content");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
