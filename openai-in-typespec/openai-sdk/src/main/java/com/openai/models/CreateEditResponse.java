// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.List;

/**
 * The CreateEditResponse model.
 */
@Immutable
public final class CreateEditResponse implements JsonSerializable<CreateEditResponse> {
    /*
     * The object type, which is always `edit`.
     */
    @Generated
    private final String object = "edit";

    /*
     * The Unix timestamp (in seconds) of when the edit was created.
     */
    @Generated
    private final long created;

    /*
     * description: A list of edit choices. Can be more than one if `n` is greater than 1.
     */
    @Generated
    private final List<CreateEditResponseChoices> choices;

    /*
     * The usage property.
     */
    @Generated
    private final CompletionUsage usage;

    /**
     * Creates an instance of CreateEditResponse class.
     * 
     * @param created the created value to set.
     * @param choices the choices value to set.
     * @param usage the usage value to set.
     */
    @Generated
    private CreateEditResponse(OffsetDateTime created, List<CreateEditResponseChoices> choices, CompletionUsage usage) {
        this.created = created.toEpochSecond();
        this.choices = choices;
        this.usage = usage;
    }

    /**
     * Get the object property: The object type, which is always `edit`.
     * 
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the created property: The Unix timestamp (in seconds) of when the edit was created.
     * 
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.created), ZoneOffset.UTC);
    }

    /**
     * Get the choices property: description: A list of edit choices. Can be more than one if `n` is greater than 1.
     * 
     * @return the choices value.
     */
    @Generated
    public List<CreateEditResponseChoices> getChoices() {
        return this.choices;
    }

    /**
     * Get the usage property: The usage property.
     * 
     * @return the usage value.
     */
    @Generated
    public CompletionUsage getUsage() {
        return this.usage;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeLongField("created", this.created);
        jsonWriter.writeArrayField("choices", this.choices, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("usage", this.usage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateEditResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateEditResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateEditResponse.
     */
    public static CreateEditResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean objectFound = false;
            String object = null;
            boolean createdFound = false;
            OffsetDateTime created = null;
            boolean choicesFound = false;
            List<CreateEditResponseChoices> choices = null;
            boolean usageFound = false;
            CompletionUsage usage = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("object".equals(fieldName)) {
                    object = reader.getString();
                    objectFound = true;
                } else if ("created".equals(fieldName)) {
                    created = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                    createdFound = true;
                } else if ("choices".equals(fieldName)) {
                    choices = reader.readArray(reader1 -> CreateEditResponseChoices.fromJson(reader1));
                    choicesFound = true;
                } else if ("usage".equals(fieldName)) {
                    usage = CompletionUsage.fromJson(reader);
                    usageFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (objectFound && createdFound && choicesFound && usageFound) {
                CreateEditResponse deserializedCreateEditResponse = new CreateEditResponse(created, choices, usage);

                return deserializedCreateEditResponse;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!objectFound) {
                missingProperties.add("object");
            }
            if (!createdFound) {
                missingProperties.add("created");
            }
            if (!choicesFound) {
                missingProperties.add("choices");
            }
            if (!usageFound) {
                missingProperties.add("usage");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
