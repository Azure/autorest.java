// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Fluent;
import com.generic.core.annotation.Generated;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * The ChatCompletionFunctions model.
 */
@Fluent
public final class ChatCompletionFunctions implements JsonSerializable<ChatCompletionFunctions> {
    /*
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and
     * dashes, with a maximum length of 64.
     */
    @Generated
    private final String name;

    /*
     * A description of what the function does, used by the model to choose when and how to call the
     * function.
     */
    @Generated
    private String description;

    /*
     * The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](/docs/guides/gpt/function-calling) for examples, and the
     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation
     * about the format.\n\nTo describe a function that accepts no parameters, provide the value
     * `{\"type\": \"object\", \"properties\": {}}`.
     */
    @Generated
    private final Map<String, Object> parameters;

    /**
     * Creates an instance of ChatCompletionFunctions class.
     * 
     * @param name the name value to set.
     * @param parameters the parameters value to set.
     */
    @Generated
    public ChatCompletionFunctions(String name, Map<String, Object> parameters) {
        this.name = name;
        this.parameters = parameters;
    }

    /**
     * Get the name property: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and
     * dashes, with a maximum length of 64.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: A description of what the function does, used by the model to choose when and how
     * to call the
     * function.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: A description of what the function does, used by the model to choose when and how
     * to call the
     * function.
     * 
     * @param description the description value to set.
     * @return the ChatCompletionFunctions object itself.
     */
    @Generated
    public ChatCompletionFunctions setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the parameters property: The parameters the functions accepts, described as a JSON Schema object. See the
     * [guide](/docs/guides/gpt/function-calling) for examples, and the
     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation
     * about the format.\n\nTo describe a function that accepts no parameters, provide the value
     * `{\"type\": \"object\", \"properties\": {}}`.
     * 
     * @return the parameters value.
     */
    @Generated
    public Map<String, Object> getParameters() {
        return this.parameters;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeUntyped(element));
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChatCompletionFunctions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChatCompletionFunctions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ChatCompletionFunctions.
     */
    public static ChatCompletionFunctions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean parametersFound = false;
            Map<String, Object> parameters = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("parameters".equals(fieldName)) {
                    parameters = reader.readMap(reader1 -> reader1.readUntyped());
                    parametersFound = true;
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && parametersFound) {
                ChatCompletionFunctions deserializedChatCompletionFunctions
                    = new ChatCompletionFunctions(name, parameters);
                deserializedChatCompletionFunctions.description = description;

                return deserializedChatCompletionFunctions;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!parametersFound) {
                missingProperties.add("parameters");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
