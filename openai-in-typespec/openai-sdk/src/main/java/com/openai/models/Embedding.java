// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents an embedding vector returned by embedding endpoint.
 */
@Immutable
public final class Embedding implements JsonSerializable<Embedding> {
    /*
     * The index of the embedding in the list of embeddings.
     */
    @Generated
    private final long index;

    /*
     * The object type, which is always "embedding".
     */
    @Generated
    private final String object = "embedding";

    /*
     * The embedding vector, which is a list of floats. The length of vector depends on the model as\
     * listed in the [embedding guide](/docs/guides/embeddings).
     */
    @Generated
    private final List<Double> embedding;

    /**
     * Creates an instance of Embedding class.
     * 
     * @param index the index value to set.
     * @param embedding the embedding value to set.
     */
    @Generated
    private Embedding(long index, List<Double> embedding) {
        this.index = index;
        this.embedding = embedding;
    }

    /**
     * Get the index property: The index of the embedding in the list of embeddings.
     * 
     * @return the index value.
     */
    @Generated
    public long getIndex() {
        return this.index;
    }

    /**
     * Get the object property: The object type, which is always "embedding".
     * 
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the embedding property: The embedding vector, which is a list of floats. The length of vector depends on the
     * model as\
     * listed in the [embedding guide](/docs/guides/embeddings).
     * 
     * @return the embedding value.
     */
    @Generated
    public List<Double> getEmbedding() {
        return this.embedding;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("index", this.index);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeArrayField("embedding", this.embedding, (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Embedding from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Embedding if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Embedding.
     */
    public static Embedding fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean indexFound = false;
            long index = 0L;
            boolean objectFound = false;
            String object = null;
            boolean embeddingFound = false;
            List<Double> embedding = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("index".equals(fieldName)) {
                    index = reader.getLong();
                    indexFound = true;
                } else if ("object".equals(fieldName)) {
                    object = reader.getString();
                    objectFound = true;
                } else if ("embedding".equals(fieldName)) {
                    embedding = reader.readArray(reader1 -> reader1.getDouble());
                    embeddingFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (indexFound && objectFound && embeddingFound) {
                Embedding deserializedEmbedding = new Embedding(index, embedding);

                return deserializedEmbedding;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!indexFound) {
                missingProperties.add("index");
            }
            if (!objectFound) {
                missingProperties.add("object");
            }
            if (!embeddingFound) {
                missingProperties.add("embedding");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
