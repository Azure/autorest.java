// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.List;

/** The ImagesResponse model. */
@Immutable
public final class ImagesResponse implements JsonSerializable<ImagesResponse> {
    /*
     * The created property.
     */
    @Generated private final long created;

    /*
     * The data property.
     */
    @Generated private final List<Image> data;

    /**
     * Creates an instance of ImagesResponse class.
     *
     * @param created the created value to set.
     * @param data the data value to set.
     */
    @Generated
    private ImagesResponse(OffsetDateTime created, List<Image> data) {
        this.created = created.toEpochSecond();
        this.data = data;
    }

    /**
     * Get the created property: The created property.
     *
     * @return the created value.
     */
    @Generated
    public OffsetDateTime getCreated() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.created), ZoneOffset.UTC);
    }

    /**
     * Get the data property: The data property.
     *
     * @return the data value.
     */
    @Generated
    public List<Image> getData() {
        return this.data;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("created", this.created);
        jsonWriter.writeArrayField("data", this.data, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImagesResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImagesResponse if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImagesResponse.
     */
    public static ImagesResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    boolean createdFound = false;
                    OffsetDateTime created = null;
                    boolean dataFound = false;
                    List<Image> data = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("created".equals(fieldName)) {
                            created = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                            createdFound = true;
                        } else if ("data".equals(fieldName)) {
                            data = reader.readArray(reader1 -> Image.fromJson(reader1));
                            dataFound = true;
                        } else {
                            reader.skipChildren();
                        }
                    }
                    if (createdFound && dataFound) {
                        ImagesResponse deserializedImagesResponse = new ImagesResponse(created, data);

                        return deserializedImagesResponse;
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!createdFound) {
                        missingProperties.add("created");
                    }
                    if (!dataFound) {
                        missingProperties.add("data");
                    }

                    throw new IllegalStateException(
                            "Missing required property/properties: " + String.join(", ", missingProperties));
                });
    }
}
