// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The CreateChatCompletionResponseChoices model.
 */
@Immutable
public final class CreateChatCompletionResponseChoices
    implements JsonSerializable<CreateChatCompletionResponseChoices> {
    /*
     * The index of the choice in the list of choices.
     */
    @Generated
    private final long index;

    /*
     * The message property.
     */
    @Generated
    private final ChatCompletionResponseMessage message;

    /*
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a
     * natural stop point or a provided stop sequence, `length` if the maximum number of tokens
     * specified in the request was reached, `content_filter` if the content was omitted due to
     * a flag from our content filters, or `function_call` if the model called a function.
     */
    @Generated
    private final CreateChatCompletionResponseFinishReason finishReason;

    /**
     * Creates an instance of CreateChatCompletionResponseChoices class.
     * 
     * @param index the index value to set.
     * @param message the message value to set.
     * @param finishReason the finishReason value to set.
     */
    @Generated
    private CreateChatCompletionResponseChoices(long index, ChatCompletionResponseMessage message,
        CreateChatCompletionResponseFinishReason finishReason) {
        this.index = index;
        this.message = message;
        this.finishReason = finishReason;
    }

    /**
     * Get the index property: The index of the choice in the list of choices.
     * 
     * @return the index value.
     */
    @Generated
    public long getIndex() {
        return this.index;
    }

    /**
     * Get the message property: The message property.
     * 
     * @return the message value.
     */
    @Generated
    public ChatCompletionResponseMessage getMessage() {
        return this.message;
    }

    /**
     * Get the finishReason property: The reason the model stopped generating tokens. This will be `stop` if the model
     * hit a
     * natural stop point or a provided stop sequence, `length` if the maximum number of tokens
     * specified in the request was reached, `content_filter` if the content was omitted due to
     * a flag from our content filters, or `function_call` if the model called a function.
     * 
     * @return the finishReason value.
     */
    @Generated
    public CreateChatCompletionResponseFinishReason getFinishReason() {
        return this.finishReason;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("index", this.index);
        jsonWriter.writeJsonField("message", this.message);
        jsonWriter.writeStringField("finish_reason", Objects.toString(this.finishReason, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateChatCompletionResponseChoices from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateChatCompletionResponseChoices if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateChatCompletionResponseChoices.
     */
    public static CreateChatCompletionResponseChoices fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean indexFound = false;
            long index = 0L;
            boolean messageFound = false;
            ChatCompletionResponseMessage message = null;
            boolean finishReasonFound = false;
            CreateChatCompletionResponseFinishReason finishReason = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("index".equals(fieldName)) {
                    index = reader.getLong();
                    indexFound = true;
                } else if ("message".equals(fieldName)) {
                    message = ChatCompletionResponseMessage.fromJson(reader);
                    messageFound = true;
                } else if ("finish_reason".equals(fieldName)) {
                    finishReason = CreateChatCompletionResponseFinishReason.fromString(reader.getString());
                    finishReasonFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (indexFound && messageFound && finishReasonFound) {
                CreateChatCompletionResponseChoices deserializedCreateChatCompletionResponseChoices
                    = new CreateChatCompletionResponseChoices(index, message, finishReason);

                return deserializedCreateChatCompletionResponseChoices;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!indexFound) {
                missingProperties.add("index");
            }
            if (!messageFound) {
                missingProperties.add("message");
            }
            if (!finishReasonFound) {
                missingProperties.add("finish_reason");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
