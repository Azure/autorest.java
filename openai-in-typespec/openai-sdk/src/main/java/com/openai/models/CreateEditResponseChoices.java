// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** The CreateEditResponseChoices model. */
@Immutable
public final class CreateEditResponseChoices implements JsonSerializable<CreateEditResponseChoices> {
    /*
     * The edited result.
     */
    @Generated private final String text;

    /*
     * The index of the choice in the list of choices.
     */
    @Generated private final long index;

    /*
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a
     * natural stop point or a provided stop sequence, or `length` if the maximum number of tokens
     * specified in the request was reached.
     */
    @Generated private final CreateEditResponseFinishReason finishReason;

    /**
     * Creates an instance of CreateEditResponseChoices class.
     *
     * @param text the text value to set.
     * @param index the index value to set.
     * @param finishReason the finishReason value to set.
     */
    @Generated
    private CreateEditResponseChoices(String text, long index, CreateEditResponseFinishReason finishReason) {
        this.text = text;
        this.index = index;
        this.finishReason = finishReason;
    }

    /**
     * Get the text property: The edited result.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the index property: The index of the choice in the list of choices.
     *
     * @return the index value.
     */
    @Generated
    public long getIndex() {
        return this.index;
    }

    /**
     * Get the finishReason property: The reason the model stopped generating tokens. This will be `stop` if the model
     * hit a natural stop point or a provided stop sequence, or `length` if the maximum number of tokens specified in
     * the request was reached.
     *
     * @return the finishReason value.
     */
    @Generated
    public CreateEditResponseFinishReason getFinishReason() {
        return this.finishReason;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeLongField("index", this.index);
        jsonWriter.writeStringField("finish_reason", Objects.toString(this.finishReason, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateEditResponseChoices from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateEditResponseChoices if the JsonReader was pointing to an instance of it, or null if
     *     it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateEditResponseChoices.
     */
    public static CreateEditResponseChoices fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    boolean textFound = false;
                    String text = null;
                    boolean indexFound = false;
                    long index = 0L;
                    boolean finishReasonFound = false;
                    CreateEditResponseFinishReason finishReason = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("text".equals(fieldName)) {
                            text = reader.getString();
                            textFound = true;
                        } else if ("index".equals(fieldName)) {
                            index = reader.getLong();
                            indexFound = true;
                        } else if ("finish_reason".equals(fieldName)) {
                            finishReason = CreateEditResponseFinishReason.fromString(reader.getString());
                            finishReasonFound = true;
                        } else {
                            reader.skipChildren();
                        }
                    }
                    if (textFound && indexFound && finishReasonFound) {
                        CreateEditResponseChoices deserializedCreateEditResponseChoices =
                                new CreateEditResponseChoices(text, index, finishReason);

                        return deserializedCreateEditResponseChoices;
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!textFound) {
                        missingProperties.add("text");
                    }
                    if (!indexFound) {
                        missingProperties.add("index");
                    }
                    if (!finishReasonFound) {
                        missingProperties.add("finish_reason");
                    }

                    throw new IllegalStateException(
                            "Missing required property/properties: " + String.join(", ", missingProperties));
                });
    }
}
