// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The CreateCompletionResponseChoices model.
 */
@Immutable
public final class CreateCompletionResponseChoices implements JsonSerializable<CreateCompletionResponseChoices> {
    /*
     * The index property.
     */
    @Generated
    private final long index;

    /*
     * The text property.
     */
    @Generated
    private final String text;

    /*
     * The logprobs property.
     */
    @Generated
    private final CreateCompletionResponseLogprobs logprobs;

    /*
     * The reason the model stopped generating tokens. This will be `stop` if the model hit a
     * natural stop point or a provided stop sequence, or `content_filter` if content was omitted
     * due to a flag from our content filters, `length` if the maximum number of tokens specified
     * in the request was reached, or `content_filter` if content was omitted due to a flag from our
     * content filters.
     */
    @Generated
    private final CreateCompletionResponseFinishReason finishReason;

    /**
     * Creates an instance of CreateCompletionResponseChoices class.
     * 
     * @param index the index value to set.
     * @param text the text value to set.
     * @param logprobs the logprobs value to set.
     * @param finishReason the finishReason value to set.
     */
    @Generated
    private CreateCompletionResponseChoices(long index, String text, CreateCompletionResponseLogprobs logprobs,
        CreateCompletionResponseFinishReason finishReason) {
        this.index = index;
        this.text = text;
        this.logprobs = logprobs;
        this.finishReason = finishReason;
    }

    /**
     * Get the index property: The index property.
     * 
     * @return the index value.
     */
    @Generated
    public long getIndex() {
        return this.index;
    }

    /**
     * Get the text property: The text property.
     * 
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the logprobs property: The logprobs property.
     * 
     * @return the logprobs value.
     */
    @Generated
    public CreateCompletionResponseLogprobs getLogprobs() {
        return this.logprobs;
    }

    /**
     * Get the finishReason property: The reason the model stopped generating tokens. This will be `stop` if the model
     * hit a
     * natural stop point or a provided stop sequence, or `content_filter` if content was omitted
     * due to a flag from our content filters, `length` if the maximum number of tokens specified
     * in the request was reached, or `content_filter` if content was omitted due to a flag from our
     * content filters.
     * 
     * @return the finishReason value.
     */
    @Generated
    public CreateCompletionResponseFinishReason getFinishReason() {
        return this.finishReason;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("index", this.index);
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeJsonField("logprobs", this.logprobs);
        jsonWriter.writeStringField("finish_reason", Objects.toString(this.finishReason, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateCompletionResponseChoices from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateCompletionResponseChoices if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateCompletionResponseChoices.
     */
    public static CreateCompletionResponseChoices fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean indexFound = false;
            long index = 0L;
            boolean textFound = false;
            String text = null;
            boolean logprobsFound = false;
            CreateCompletionResponseLogprobs logprobs = null;
            boolean finishReasonFound = false;
            CreateCompletionResponseFinishReason finishReason = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("index".equals(fieldName)) {
                    index = reader.getLong();
                    indexFound = true;
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                    textFound = true;
                } else if ("logprobs".equals(fieldName)) {
                    logprobs = CreateCompletionResponseLogprobs.fromJson(reader);
                    logprobsFound = true;
                } else if ("finish_reason".equals(fieldName)) {
                    finishReason = CreateCompletionResponseFinishReason.fromString(reader.getString());
                    finishReasonFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (indexFound && textFound && logprobsFound && finishReasonFound) {
                CreateCompletionResponseChoices deserializedCreateCompletionResponseChoices
                    = new CreateCompletionResponseChoices(index, text, logprobs, finishReason);

                return deserializedCreateCompletionResponseChoices;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!indexFound) {
                missingProperties.add("index");
            }
            if (!textFound) {
                missingProperties.add("text");
            }
            if (!logprobsFound) {
                missingProperties.add("logprobs");
            }
            if (!finishReasonFound) {
                missingProperties.add("finish_reason");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
