// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The `FineTune` object represents a legacy fine-tune job that has been created through the API.
 */
@Immutable
public final class FineTune implements JsonSerializable<FineTune> {
    /*
     * The object identifier, which can be referenced in the API endpoints.
     */
    @Generated
    private final String id;

    /*
     * The object type, which is always "fine-tune".
     */
    @Generated
    private final String object = "fine-tune";

    /*
     * The Unix timestamp (in seconds) for when the fine-tuning job was created.
     */
    @Generated
    private final long createdAt;

    /*
     * The Unix timestamp (in seconds) for when the fine-tuning job was last updated.
     */
    @Generated
    private final long updatedAt;

    /*
     * The base model that is being fine-tuned.
     */
    @Generated
    private final String model;

    /*
     * The name of the fine-tuned model that is being created.
     */
    @Generated
    private final String fineTunedModel;

    /*
     * The organization that owns the fine-tuning job.
     */
    @Generated
    private final String organizationId;

    /*
     * The current status of the fine-tuning job, which can be either `created`, `running`,
     * `succeeded`, `failed`, or `cancelled`.
     */
    @Generated
    private final FineTuneStatus status;

    /*
     * The hyperparameters used for the fine-tuning job. See the
     * [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.
     */
    @Generated
    private final FineTuneHyperparams hyperparams;

    /*
     * The list of files used for training.
     */
    @Generated
    private final List<OpenAIFile> trainingFiles;

    /*
     * The list of files used for validation.
     */
    @Generated
    private final List<OpenAIFile> validationFiles;

    /*
     * The compiled results files for the fine-tuning job.
     */
    @Generated
    private final List<OpenAIFile> resultFiles;

    /*
     * The list of events that have been observed in the lifecycle of the FineTune job.
     */
    @Generated
    private List<FineTuneEvent> events;

    /**
     * Creates an instance of FineTune class.
     * 
     * @param id the id value to set.
     * @param createdAt the createdAt value to set.
     * @param updatedAt the updatedAt value to set.
     * @param model the model value to set.
     * @param fineTunedModel the fineTunedModel value to set.
     * @param organizationId the organizationId value to set.
     * @param status the status value to set.
     * @param hyperparams the hyperparams value to set.
     * @param trainingFiles the trainingFiles value to set.
     * @param validationFiles the validationFiles value to set.
     * @param resultFiles the resultFiles value to set.
     */
    @Generated
    private FineTune(String id, OffsetDateTime createdAt, OffsetDateTime updatedAt, String model, String fineTunedModel,
        String organizationId, FineTuneStatus status, FineTuneHyperparams hyperparams, List<OpenAIFile> trainingFiles,
        List<OpenAIFile> validationFiles, List<OpenAIFile> resultFiles) {
        this.id = id;
        this.createdAt = createdAt.toEpochSecond();
        this.updatedAt = updatedAt.toEpochSecond();
        this.model = model;
        this.fineTunedModel = fineTunedModel;
        this.organizationId = organizationId;
        this.status = status;
        this.hyperparams = hyperparams;
        this.trainingFiles = trainingFiles;
        this.validationFiles = validationFiles;
        this.resultFiles = resultFiles;
    }

    /**
     * Get the id property: The object identifier, which can be referenced in the API endpoints.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object type, which is always "fine-tune".
     * 
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the createdAt property: The Unix timestamp (in seconds) for when the fine-tuning job was created.
     * 
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.createdAt), ZoneOffset.UTC);
    }

    /**
     * Get the updatedAt property: The Unix timestamp (in seconds) for when the fine-tuning job was last updated.
     * 
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.updatedAt), ZoneOffset.UTC);
    }

    /**
     * Get the model property: The base model that is being fine-tuned.
     * 
     * @return the model value.
     */
    @Generated
    public String getModel() {
        return this.model;
    }

    /**
     * Get the fineTunedModel property: The name of the fine-tuned model that is being created.
     * 
     * @return the fineTunedModel value.
     */
    @Generated
    public String getFineTunedModel() {
        return this.fineTunedModel;
    }

    /**
     * Get the organizationId property: The organization that owns the fine-tuning job.
     * 
     * @return the organizationId value.
     */
    @Generated
    public String getOrganizationId() {
        return this.organizationId;
    }

    /**
     * Get the status property: The current status of the fine-tuning job, which can be either `created`, `running`,
     * `succeeded`, `failed`, or `cancelled`.
     * 
     * @return the status value.
     */
    @Generated
    public FineTuneStatus getStatus() {
        return this.status;
    }

    /**
     * Get the hyperparams property: The hyperparameters used for the fine-tuning job. See the
     * [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.
     * 
     * @return the hyperparams value.
     */
    @Generated
    public FineTuneHyperparams getHyperparams() {
        return this.hyperparams;
    }

    /**
     * Get the trainingFiles property: The list of files used for training.
     * 
     * @return the trainingFiles value.
     */
    @Generated
    public List<OpenAIFile> getTrainingFiles() {
        return this.trainingFiles;
    }

    /**
     * Get the validationFiles property: The list of files used for validation.
     * 
     * @return the validationFiles value.
     */
    @Generated
    public List<OpenAIFile> getValidationFiles() {
        return this.validationFiles;
    }

    /**
     * Get the resultFiles property: The compiled results files for the fine-tuning job.
     * 
     * @return the resultFiles value.
     */
    @Generated
    public List<OpenAIFile> getResultFiles() {
        return this.resultFiles;
    }

    /**
     * Get the events property: The list of events that have been observed in the lifecycle of the FineTune job.
     * 
     * @return the events value.
     */
    @Generated
    public List<FineTuneEvent> getEvents() {
        return this.events;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeLongField("created_at", this.createdAt);
        jsonWriter.writeLongField("updated_at", this.updatedAt);
        jsonWriter.writeStringField("model", this.model);
        jsonWriter.writeStringField("fine_tuned_model", this.fineTunedModel);
        jsonWriter.writeStringField("organization_id", this.organizationId);
        jsonWriter.writeStringField("status", Objects.toString(this.status, null));
        jsonWriter.writeJsonField("hyperparams", this.hyperparams);
        jsonWriter.writeArrayField("training_files", this.trainingFiles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("validation_files", this.validationFiles,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("result_files", this.resultFiles, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("events", this.events, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FineTune from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FineTune if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FineTune.
     */
    public static FineTune fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean idFound = false;
            String id = null;
            boolean objectFound = false;
            String object = null;
            boolean createdAtFound = false;
            OffsetDateTime createdAt = null;
            boolean updatedAtFound = false;
            OffsetDateTime updatedAt = null;
            boolean modelFound = false;
            String model = null;
            boolean fineTunedModelFound = false;
            String fineTunedModel = null;
            boolean organizationIdFound = false;
            String organizationId = null;
            boolean statusFound = false;
            FineTuneStatus status = null;
            boolean hyperparamsFound = false;
            FineTuneHyperparams hyperparams = null;
            boolean trainingFilesFound = false;
            List<OpenAIFile> trainingFiles = null;
            boolean validationFilesFound = false;
            List<OpenAIFile> validationFiles = null;
            boolean resultFilesFound = false;
            List<OpenAIFile> resultFiles = null;
            List<FineTuneEvent> events = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                    idFound = true;
                } else if ("object".equals(fieldName)) {
                    object = reader.getString();
                    objectFound = true;
                } else if ("created_at".equals(fieldName)) {
                    createdAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                    createdAtFound = true;
                } else if ("updated_at".equals(fieldName)) {
                    updatedAt = OffsetDateTime.ofInstant(Instant.ofEpochSecond(reader.getLong()), ZoneOffset.UTC);
                    updatedAtFound = true;
                } else if ("model".equals(fieldName)) {
                    model = reader.getString();
                    modelFound = true;
                } else if ("fine_tuned_model".equals(fieldName)) {
                    fineTunedModel = reader.getString();
                    fineTunedModelFound = true;
                } else if ("organization_id".equals(fieldName)) {
                    organizationId = reader.getString();
                    organizationIdFound = true;
                } else if ("status".equals(fieldName)) {
                    status = FineTuneStatus.fromString(reader.getString());
                    statusFound = true;
                } else if ("hyperparams".equals(fieldName)) {
                    hyperparams = FineTuneHyperparams.fromJson(reader);
                    hyperparamsFound = true;
                } else if ("training_files".equals(fieldName)) {
                    trainingFiles = reader.readArray(reader1 -> OpenAIFile.fromJson(reader1));
                    trainingFilesFound = true;
                } else if ("validation_files".equals(fieldName)) {
                    validationFiles = reader.readArray(reader1 -> OpenAIFile.fromJson(reader1));
                    validationFilesFound = true;
                } else if ("result_files".equals(fieldName)) {
                    resultFiles = reader.readArray(reader1 -> OpenAIFile.fromJson(reader1));
                    resultFilesFound = true;
                } else if ("events".equals(fieldName)) {
                    events = reader.readArray(reader1 -> FineTuneEvent.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            if (idFound && objectFound && createdAtFound && updatedAtFound && modelFound && fineTunedModelFound
                && organizationIdFound && statusFound && hyperparamsFound && trainingFilesFound && validationFilesFound
                && resultFilesFound) {
                FineTune deserializedFineTune = new FineTune(id, createdAt, updatedAt, model, fineTunedModel,
                    organizationId, status, hyperparams, trainingFiles, validationFiles, resultFiles);
                deserializedFineTune.events = events;

                return deserializedFineTune;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!idFound) {
                missingProperties.add("id");
            }
            if (!objectFound) {
                missingProperties.add("object");
            }
            if (!createdAtFound) {
                missingProperties.add("created_at");
            }
            if (!updatedAtFound) {
                missingProperties.add("updated_at");
            }
            if (!modelFound) {
                missingProperties.add("model");
            }
            if (!fineTunedModelFound) {
                missingProperties.add("fine_tuned_model");
            }
            if (!organizationIdFound) {
                missingProperties.add("organization_id");
            }
            if (!statusFound) {
                missingProperties.add("status");
            }
            if (!hyperparamsFound) {
                missingProperties.add("hyperparams");
            }
            if (!trainingFilesFound) {
                missingProperties.add("training_files");
            }
            if (!validationFilesFound) {
                missingProperties.add("validation_files");
            }
            if (!resultFilesFound) {
                missingProperties.add("result_files");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
