// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * The CreateCompletionResponseLogprobs model.
 */
@Immutable
public final class CreateCompletionResponseLogprobs implements JsonSerializable<CreateCompletionResponseLogprobs> {
    /*
     * The tokens property.
     */
    @Generated
    private final List<String> tokens;

    /*
     * The token_logprobs property.
     */
    @Generated
    private final List<Double> tokenLogprobs;

    /*
     * The top_logprobs property.
     */
    @Generated
    private final List<Map<String, Long>> topLogprobs;

    /*
     * The text_offset property.
     */
    @Generated
    private final List<Long> textOffset;

    /**
     * Creates an instance of CreateCompletionResponseLogprobs class.
     * 
     * @param tokens the tokens value to set.
     * @param tokenLogprobs the tokenLogprobs value to set.
     * @param topLogprobs the topLogprobs value to set.
     * @param textOffset the textOffset value to set.
     */
    @Generated
    private CreateCompletionResponseLogprobs(List<String> tokens, List<Double> tokenLogprobs,
        List<Map<String, Long>> topLogprobs, List<Long> textOffset) {
        this.tokens = tokens;
        this.tokenLogprobs = tokenLogprobs;
        this.topLogprobs = topLogprobs;
        this.textOffset = textOffset;
    }

    /**
     * Get the tokens property: The tokens property.
     * 
     * @return the tokens value.
     */
    @Generated
    public List<String> getTokens() {
        return this.tokens;
    }

    /**
     * Get the tokenLogprobs property: The token_logprobs property.
     * 
     * @return the tokenLogprobs value.
     */
    @Generated
    public List<Double> getTokenLogprobs() {
        return this.tokenLogprobs;
    }

    /**
     * Get the topLogprobs property: The top_logprobs property.
     * 
     * @return the topLogprobs value.
     */
    @Generated
    public List<Map<String, Long>> getTopLogprobs() {
        return this.topLogprobs;
    }

    /**
     * Get the textOffset property: The text_offset property.
     * 
     * @return the textOffset value.
     */
    @Generated
    public List<Long> getTextOffset() {
        return this.textOffset;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("tokens", this.tokens, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("token_logprobs", this.tokenLogprobs,
            (writer, element) -> writer.writeDouble(element));
        jsonWriter.writeArrayField("top_logprobs", this.topLogprobs,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1.writeLong(element1)));
        jsonWriter.writeArrayField("text_offset", this.textOffset, (writer, element) -> writer.writeLong(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateCompletionResponseLogprobs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateCompletionResponseLogprobs if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateCompletionResponseLogprobs.
     */
    public static CreateCompletionResponseLogprobs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean tokensFound = false;
            List<String> tokens = null;
            boolean tokenLogprobsFound = false;
            List<Double> tokenLogprobs = null;
            boolean topLogprobsFound = false;
            List<Map<String, Long>> topLogprobs = null;
            boolean textOffsetFound = false;
            List<Long> textOffset = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tokens".equals(fieldName)) {
                    tokens = reader.readArray(reader1 -> reader1.getString());
                    tokensFound = true;
                } else if ("token_logprobs".equals(fieldName)) {
                    tokenLogprobs = reader.readArray(reader1 -> reader1.getDouble());
                    tokenLogprobsFound = true;
                } else if ("top_logprobs".equals(fieldName)) {
                    topLogprobs = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2.getLong()));
                    topLogprobsFound = true;
                } else if ("text_offset".equals(fieldName)) {
                    textOffset = reader.readArray(reader1 -> reader1.getLong());
                    textOffsetFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (tokensFound && tokenLogprobsFound && topLogprobsFound && textOffsetFound) {
                CreateCompletionResponseLogprobs deserializedCreateCompletionResponseLogprobs
                    = new CreateCompletionResponseLogprobs(tokens, tokenLogprobs, topLogprobs, textOffset);

                return deserializedCreateCompletionResponseLogprobs;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!tokensFound) {
                missingProperties.add("tokens");
            }
            if (!tokenLogprobsFound) {
                missingProperties.add("token_logprobs");
            }
            if (!topLogprobsFound) {
                missingProperties.add("top_logprobs");
            }
            if (!textOffsetFound) {
                missingProperties.add("text_offset");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
