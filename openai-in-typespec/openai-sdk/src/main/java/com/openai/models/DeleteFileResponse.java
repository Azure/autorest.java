// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.models;

import com.generic.core.annotation.Generated;
import com.generic.core.annotation.Immutable;
import com.generic.json.JsonReader;
import com.generic.json.JsonSerializable;
import com.generic.json.JsonToken;
import com.generic.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/** The DeleteFileResponse model. */
@Immutable
public final class DeleteFileResponse implements JsonSerializable<DeleteFileResponse> {
    /*
     * The id property.
     */
    @Generated private final String id;

    /*
     * The object property.
     */
    @Generated private final String object;

    /*
     * The deleted property.
     */
    @Generated private final boolean deleted;

    /**
     * Creates an instance of DeleteFileResponse class.
     *
     * @param id the id value to set.
     * @param object the object value to set.
     * @param deleted the deleted value to set.
     */
    @Generated
    private DeleteFileResponse(String id, String object, boolean deleted) {
        this.id = id;
        this.object = object;
        this.deleted = deleted;
    }

    /**
     * Get the id property: The id property.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the object property: The object property.
     *
     * @return the object value.
     */
    @Generated
    public String getObject() {
        return this.object;
    }

    /**
     * Get the deleted property: The deleted property.
     *
     * @return the deleted value.
     */
    @Generated
    public boolean isDeleted() {
        return this.deleted;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("object", this.object);
        jsonWriter.writeBooleanField("deleted", this.deleted);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeleteFileResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeleteFileResponse if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeleteFileResponse.
     */
    public static DeleteFileResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    boolean idFound = false;
                    String id = null;
                    boolean objectFound = false;
                    String object = null;
                    boolean deletedFound = false;
                    boolean deleted = false;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("id".equals(fieldName)) {
                            id = reader.getString();
                            idFound = true;
                        } else if ("object".equals(fieldName)) {
                            object = reader.getString();
                            objectFound = true;
                        } else if ("deleted".equals(fieldName)) {
                            deleted = reader.getBoolean();
                            deletedFound = true;
                        } else {
                            reader.skipChildren();
                        }
                    }
                    if (idFound && objectFound && deletedFound) {
                        DeleteFileResponse deserializedDeleteFileResponse = new DeleteFileResponse(id, object, deleted);

                        return deserializedDeleteFileResponse;
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!idFound) {
                        missingProperties.add("id");
                    }
                    if (!objectFound) {
                        missingProperties.add("object");
                    }
                    if (!deletedFound) {
                        missingProperties.add("deleted");
                    }

                    throw new IllegalStateException(
                            "Missing required property/properties: " + String.join(", ", missingProperties));
                });
    }
}
