// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.openai.implementation;

import com.generic.core.annotation.BodyParam;
import com.generic.core.annotation.Delete;
import com.generic.core.annotation.ExpectedResponses;
import com.generic.core.annotation.Get;
import com.generic.core.annotation.HeaderParam;
import com.generic.core.annotation.Host;
import com.generic.core.annotation.PathParam;
import com.generic.core.annotation.Post;
import com.generic.core.annotation.ReturnType;
import com.generic.core.annotation.ServiceInterface;
import com.generic.core.annotation.ServiceMethod;
import com.generic.core.annotation.UnexpectedResponseExceptionType;
import com.generic.core.exception.ClientAuthenticationException;
import com.generic.core.exception.HttpResponseException;
import com.generic.core.exception.ResourceModifiedException;
import com.generic.core.exception.ResourceNotFoundException;
import com.generic.core.http.Response;
import com.generic.core.http.RestProxy;
import com.generic.core.http.pipeline.HttpPipeline;
import com.generic.core.models.BinaryData;
import com.generic.core.models.Context;
import com.generic.core.models.RequestOptions;

/**
 * Initializes a new instance of the OpenAIClient type.
 */
public final class OpenAIClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OpenAIClientService service;

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of OpenAIClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public OpenAIClientImpl(HttpPipeline httpPipeline) {
        this.httpPipeline = httpPipeline;
        this.service = RestProxy.create(OpenAIClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for OpenAIClient to be used by the proxy service to perform REST calls.
     */
    @Host("https://api.openai.com/v1")
    @ServiceInterface(name = "OpenAIClient")
    public interface OpenAIClientService {
        // @Multipart not supported by RestProxy
        @Post("/audio/transcriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createTranscriptionSync(@HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("multipart/form-data") BinaryData audio,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/audio/translations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createTranslationSync(@HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("multipart/form-data") BinaryData audio,
            RequestOptions requestOptions, Context context);

        @Post("/chat/completions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createChatCompletionSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData createChatCompletionRequest, RequestOptions requestOptions,
            Context context);

        @Post("/fine_tuning/jobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createFineTuningJobSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData job, RequestOptions requestOptions, Context context);

        @Get("/fine_tuning/jobs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listPaginatedFineTuningJobsSync(@HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/fine_tuning/jobs/{fine_tuning_job_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveFineTuningJobSync(@PathParam("fine_tuning_job_id") String fineTuningJobId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/fine_tuning/jobs/{fine_tuning_job_id}/events")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFineTuningEventsSync(@PathParam("fine_tuning_job_id") String fineTuningJobId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/fine_tuning/jobs/{fine_tuning_job_id}/cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> cancelFineTuningJobSync(@PathParam("fine_tuning_job_id") String fineTuningJobId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/completions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createCompletionSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData createCompletionRequest, RequestOptions requestOptions,
            Context context);

        @Post("/edits")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createEditSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData edit, RequestOptions requestOptions, Context context);

        @Post("/embeddings")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createEmbeddingSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData embedding, RequestOptions requestOptions, Context context);

        @Get("/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFilesSync(@HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        // @Multipart not supported by RestProxy
        @Post("/files")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createFileSync(@HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("multipart/form-data") BinaryData file,
            RequestOptions requestOptions, Context context);

        @Post("/files/files/{file_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveFileSync(@PathParam("file_id") String fileId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/files/files/{file_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteFileSync(@PathParam("file_id") String fileId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/files/files/{file_id}/content")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> downloadFileSync(@PathParam("file_id") String fileId, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/fine-tunes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createFineTuneSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData fineTune, RequestOptions requestOptions, Context context);

        @Get("/fine-tunes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFineTunesSync(@HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/fine-tunes/{fine_tune_id}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveFineTuneSync(@PathParam("fine_tune_id") String fineTuneId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/fine-tunes/{fine_tune_id}/events")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listFineTuneEventsSync(@PathParam("fine_tune_id") String fineTuneId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/fine-tunes/{fine_tune_id}/cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> cancelFineTuneSync(@PathParam("fine_tune_id") String fineTuneId,
            @HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/models")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listModelsSync(@HeaderParam("accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("/models/{model}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> retrieveSync(@PathParam("model") String model, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/models/{model}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> deleteSync(@PathParam("model") String model, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/images/generations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createImageSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData image, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/images/edits")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createImageEditSync(@HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("multipart/form-data") BinaryData image,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/images/variations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createImageVariationSync(@HeaderParam("content-type") String contentType,
            @HeaderParam("accept") String accept, @BodyParam("multipart/form-data") BinaryData image,
            RequestOptions requestOptions, Context context);

        @Post("/moderations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createModerationSync(@HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData content, RequestOptions requestOptions, Context context);
    }

    /**
     * Transcribes audio into the input language.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     file: byte[] (Required)
     *     model: String(whisper-1) (Required)
     *     prompt: String (Optional)
     *     response_format: String(json/text/srt/verbose_json/vtt) (Optional)
     *     temperature: Double (Optional)
     *     language: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     text: String (Required)
     * }
     * }</pre>
     * 
     * @param audio The audio parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTranscriptionWithResponse(BinaryData audio, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createTranscriptionSync(contentType, accept, audio, requestOptions, Context.NONE);
    }

    /**
     * Transcribes audio into the input language.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     file: byte[] (Required)
     *     model: String(whisper-1) (Required)
     *     prompt: String (Optional)
     *     response_format: String(json/text/srt/verbose_json/vtt) (Optional)
     *     temperature: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     text: String (Required)
     * }
     * }</pre>
     * 
     * @param audio The audio parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createTranslationWithResponse(BinaryData audio, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createTranslationSync(contentType, accept, audio, requestOptions, Context.NONE);
    }

    /**
     * The createChatCompletion operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String(gpt4/gpt-4-0314/gpt-4-0613/gpt-4-32k/gpt-4-32k-0314/gpt-4-32k-0613/gpt-3.5-turbo/gpt-3.5-turbo-16k/gpt-3.5-turbo-0301/gpt-3.5-turbo-0613/gpt-3.5-turbo-16k-0613) (Required)
     *     messages (Required): [
     *          (Required){
     *             role: String(system/user/assistant/function) (Required)
     *             content: String (Required)
     *             name: String (Optional)
     *             function_call (Optional): {
     *                 name: String (Required)
     *                 arguments: String (Required)
     *             }
     *         }
     *     ]
     *     functions (Optional): [
     *          (Optional){
     *             name: String (Required)
     *             description: String (Optional)
     *             parameters (Required): {
     *                 String: Object (Required)
     *             }
     *         }
     *     ]
     *     function_call: BinaryData (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     n: Long (Optional)
     *     max_tokens: Long (Optional)
     *     stop: BinaryData (Optional)
     *     presence_penalty: Double (Optional)
     *     frequency_penalty: Double (Optional)
     *     logit_bias (Optional): {
     *         String: long (Optional)
     *     }
     *     user: String (Optional)
     *     stream: Boolean (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created: long (Required)
     *     model: String (Required)
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             message (Required): {
     *                 role: String(system/user/assistant/function) (Required)
     *                 content: String (Required)
     *                 function_call (Optional): {
     *                     name: String (Required)
     *                     arguments: String (Required)
     *                 }
     *             }
     *             finish_reason: String(stop/length/function_call/content_filter) (Required)
     *         }
     *     ]
     *     usage (Optional): {
     *         prompt_tokens: long (Required)
     *         completion_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param createChatCompletionRequest The createChatCompletionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return represents a chat completion response returned by model, based on the provided input.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createChatCompletionWithResponse(BinaryData createChatCompletionRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createChatCompletionSync(accept, createChatCompletionRequest, requestOptions, Context.NONE);
    }

    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the
     * fine-tuned models once complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     training_file: String (Required)
     *     validation_file: String (Optional)
     *     model: String(babbage-002/davinci-002/gpt-3.5-turbo) (Required)
     *     hyperparameters (Optional): {
     *         n_epochs: BinaryData (Optional)
     *     }
     *     suffix: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     finished_at: OffsetDateTime (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/pending/running/succeeded/failed/cancelled) (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Optional)
     *     }
     *     training_file: String (Required)
     *     validation_file: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     trained_tokens: Long (Required)
     *     error (Required): {
     *         message: String (Optional)
     *         code: String (Optional)
     *         param: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param job The job parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createFineTuningJobWithResponse(BinaryData job, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createFineTuningJobSync(accept, job, requestOptions, Context.NONE);
    }

    /**
     * The listPaginatedFineTuningJobs operation.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Identifier for the last job from the previous pagination request.</td>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Long</td>
     * <td>No</td>
     * <td>Number of fine-tuning jobs to retrieve.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             finished_at: OffsetDateTime (Required)
     *             model: String (Required)
     *             fine_tuned_model: String (Required)
     *             organization_id: String (Required)
     *             status: String(created/pending/running/succeeded/failed/cancelled) (Required)
     *             hyperparameters (Required): {
     *                 n_epochs: BinaryData (Optional)
     *             }
     *             training_file: String (Required)
     *             validation_file: String (Required)
     *             result_files (Required): [
     *                 String (Required)
     *             ]
     *             trained_tokens: Long (Required)
     *             error (Required): {
     *                 message: String (Optional)
     *                 code: String (Optional)
     *                 param: String (Optional)
     *             }
     *         }
     *     ]
     *     has_more: boolean (Required)
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listPaginatedFineTuningJobsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listPaginatedFineTuningJobsSync(accept, requestOptions, Context.NONE);
    }

    /**
     * Get info about a fine-tuning job.
     * 
     * [Learn more about fine-tuning](/docs/guides/fine-tuning).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     finished_at: OffsetDateTime (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/pending/running/succeeded/failed/cancelled) (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Optional)
     *     }
     *     training_file: String (Required)
     *     validation_file: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     trained_tokens: Long (Required)
     *     error (Required): {
     *         message: String (Optional)
     *         code: String (Optional)
     *         param: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param fineTuningJobId A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveFineTuningJobWithResponse(String fineTuningJobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveFineTuningJobSync(fineTuningJobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get status updates for a fine-tuning job.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>after</td>
     * <td>String</td>
     * <td>No</td>
     * <td>Identifier for the last event from the previous pagination request.</td>
     * </tr>
     * <tr>
     * <td>limit</td>
     * <td>Integer</td>
     * <td>No</td>
     * <td>Number of events to retrieve.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String(info/warn/error) (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to get events for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFineTuningEventsWithResponse(String fineTuningJobId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listFineTuningEventsSync(fineTuningJobId, accept, requestOptions, Context.NONE);
    }

    /**
     * Immediately cancel a fine-tune job.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     finished_at: OffsetDateTime (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/pending/running/succeeded/failed/cancelled) (Required)
     *     hyperparameters (Required): {
     *         n_epochs: BinaryData (Optional)
     *     }
     *     training_file: String (Required)
     *     validation_file: String (Required)
     *     result_files (Required): [
     *         String (Required)
     *     ]
     *     trained_tokens: Long (Required)
     *     error (Required): {
     *         message: String (Optional)
     *         code: String (Optional)
     *         param: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param fineTuningJobId The ID of the fine-tuning job to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelFineTuningJobWithResponse(String fineTuningJobId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelFineTuningJobSync(fineTuningJobId, accept, requestOptions, Context.NONE);
    }

    /**
     * The createCompletion operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String(babbage-002/davinci-002/text-davinci-003/text-davinci-002/text-davinci-001/code-davinci-002/text-curie-001/text-babbage-001/text-ada-001) (Required)
     *     prompt: BinaryData (Required)
     *     suffix: String (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     *     n: Long (Optional)
     *     max_tokens: Long (Optional)
     *     stop: BinaryData (Optional)
     *     presence_penalty: Double (Optional)
     *     frequency_penalty: Double (Optional)
     *     logit_bias (Optional): {
     *         String: long (Optional)
     *     }
     *     user: String (Optional)
     *     stream: Boolean (Optional)
     *     logprobs: Long (Optional)
     *     echo: Boolean (Optional)
     *     best_of: Long (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created: long (Required)
     *     model: String (Required)
     *     choices (Required): [
     *          (Required){
     *             index: long (Required)
     *             text: String (Required)
     *             logprobs (Required): {
     *                 tokens (Required): [
     *                     String (Required)
     *                 ]
     *                 token_logprobs (Required): [
     *                     double (Required)
     *                 ]
     *                 top_logprobs (Required): [
     *                      (Required){
     *                         String: long (Required)
     *                     }
     *                 ]
     *                 text_offset (Required): [
     *                     long (Required)
     *                 ]
     *             }
     *             finish_reason: String(stop/length/content_filter) (Required)
     *         }
     *     ]
     *     usage (Optional): {
     *         prompt_tokens: long (Required)
     *         completion_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param createCompletionRequest The createCompletionRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return represents a completion response from the API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createCompletionWithResponse(BinaryData createCompletionRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createCompletionSync(accept, createCompletionRequest, requestOptions, Context.NONE);
    }

    /**
     * The createEdit operation.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String(text-davinci-edit-001/code-davinci-edit-001) (Required)
     *     input: String (Optional)
     *     instruction: String (Required)
     *     n: Long (Optional)
     *     temperature: Double (Optional)
     *     top_p: Double (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     created: long (Required)
     *     choices (Required): [
     *          (Required){
     *             text: String (Required)
     *             index: long (Required)
     *             finish_reason: String(stop/length) (Required)
     *         }
     *     ]
     *     usage (Required): {
     *         prompt_tokens: long (Required)
     *         completion_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param edit The edit parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createEditWithResponse(BinaryData edit, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createEditSync(accept, edit, requestOptions, Context.NONE);
    }

    /**
     * Creates an embedding vector representing the input text.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     model: String(text-embedding-ada-002) (Required)
     *     input: BinaryData (Required)
     *     user: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     model: String (Required)
     *     data (Required): [
     *          (Required){
     *             index: long (Required)
     *             object: String (Required)
     *             embedding (Required): [
     *                 double (Required)
     *             ]
     *         }
     *     ]
     *     usage (Required): {
     *         prompt_tokens: long (Required)
     *         total_tokens: long (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param embedding The embedding parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createEmbeddingWithResponse(BinaryData embedding, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createEmbeddingSync(accept, embedding, requestOptions, Context.NONE);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             bytes: long (Required)
     *             createdAt: long (Required)
     *             filename: String (Required)
     *             purpose: String (Required)
     *             status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFilesWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listFilesSync(accept, requestOptions, Context.NONE);
    }

    /**
     * Returns a list of files that belong to the user's organization.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     file: byte[] (Required)
     *     purpose: String (Required)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     bytes: long (Required)
     *     createdAt: long (Required)
     *     filename: String (Required)
     *     purpose: String (Required)
     *     status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *     status_details: String (Optional)
     * }
     * }</pre>
     * 
     * @param file The file parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createFileWithResponse(BinaryData file, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createFileSync(contentType, accept, file, requestOptions, Context.NONE);
    }

    /**
     * Returns information about a specific file.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     bytes: long (Required)
     *     createdAt: long (Required)
     *     filename: String (Required)
     *     purpose: String (Required)
     *     status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *     status_details: String (Optional)
     * }
     * }</pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `File` object represents a document that has been uploaded to OpenAI.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveFileSync(fileId, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete a file.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     deleted: boolean (Required)
     * }
     * }</pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteFileSync(fileId, accept, requestOptions, Context.NONE);
    }

    /**
     * Returns the contents of the specified file.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * String
     * }</pre>
     * 
     * @param fileId The ID of the file to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return a sequence of textual characters.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> downloadFileWithResponse(String fileId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.downloadFileSync(fileId, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     * 
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once
     * complete.
     * 
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning).
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     training_file: String (Required)
     *     validation_file: String (Optional)
     *     model: String(ada/babbage/curie/davinci) (Optional)
     *     n_epochs: Long (Optional)
     *     batch_size: Long (Optional)
     *     learning_rate_multiplier: Double (Optional)
     *     prompt_loss_rate: Double (Optional)
     *     compute_classification_metrics: Boolean (Optional)
     *     classification_n_classes: Long (Optional)
     *     classification_positive_class: String (Optional)
     *     classification_betas (Optional): [
     *         double (Optional)
     *     ]
     *     suffix: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/running/succeeded/failed/cancelled) (Required)
     *     hyperparams (Required): {
     *         n_epochs: long (Required)
     *         batch_size: long (Required)
     *         prompt_loss_weight: double (Required)
     *         learning_rate_multiplier: double (Required)
     *         compute_classification_metrics: Boolean (Optional)
     *         classification_positive_class: String (Optional)
     *         classification_n_classes: Long (Optional)
     *     }
     *     training_files (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             bytes: long (Required)
     *             createdAt: long (Required)
     *             filename: String (Required)
     *             purpose: String (Required)
     *             status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     *     validation_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     result_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     events (Optional): [
     *          (Optional){
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTune The fineTune parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createFineTuneWithResponse(BinaryData fineTune, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createFineTuneSync(accept, fineTune, requestOptions, Context.NONE);
    }

    /**
     * List your organization's fine-tuning jobs.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created_at: long (Required)
     *             updated_at: long (Required)
     *             model: String (Required)
     *             fine_tuned_model: String (Required)
     *             organization_id: String (Required)
     *             status: String(created/running/succeeded/failed/cancelled) (Required)
     *             hyperparams (Required): {
     *                 n_epochs: long (Required)
     *                 batch_size: long (Required)
     *                 prompt_loss_weight: double (Required)
     *                 learning_rate_multiplier: double (Required)
     *                 compute_classification_metrics: Boolean (Optional)
     *                 classification_positive_class: String (Optional)
     *                 classification_n_classes: Long (Optional)
     *             }
     *             training_files (Required): [
     *                  (Required){
     *                     id: String (Required)
     *                     object: String (Required)
     *                     bytes: long (Required)
     *                     createdAt: long (Required)
     *                     filename: String (Required)
     *                     purpose: String (Required)
     *                     status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *                     status_details: String (Optional)
     *                 }
     *             ]
     *             validation_files (Required): [
     *                 (recursive schema, see above)
     *             ]
     *             result_files (Required): [
     *                 (recursive schema, see above)
     *             ]
     *             events (Optional): [
     *                  (Optional){
     *                     object: String (Required)
     *                     created_at: long (Required)
     *                     level: String (Required)
     *                     message: String (Required)
     *                 }
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFineTunesWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listFineTunesSync(accept, requestOptions, Context.NONE);
    }

    /**
     * Gets info about the fine-tune job.
     * 
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning).
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/running/succeeded/failed/cancelled) (Required)
     *     hyperparams (Required): {
     *         n_epochs: long (Required)
     *         batch_size: long (Required)
     *         prompt_loss_weight: double (Required)
     *         learning_rate_multiplier: double (Required)
     *         compute_classification_metrics: Boolean (Optional)
     *         classification_positive_class: String (Optional)
     *         classification_n_classes: Long (Optional)
     *     }
     *     training_files (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             bytes: long (Required)
     *             createdAt: long (Required)
     *             filename: String (Required)
     *             purpose: String (Required)
     *             status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     *     validation_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     result_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     events (Optional): [
     *          (Optional){
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTuneId The ID of the fine-tune job.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveFineTuneWithResponse(String fineTuneId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveFineTuneSync(fineTuneId, accept, requestOptions, Context.NONE);
    }

    /**
     * Get fine-grained status updates for a fine-tune job.
     * <p>
     * <strong>Query Parameters</strong>
     * </p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr>
     * <th>Name</th>
     * <th>Type</th>
     * <th>Required</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>stream</td>
     * <td>Boolean</td>
     * <td>No</td>
     * <td>Whether to stream events for the fine-tune job. If set to true, events will be sent as
     * data-only
     * [server-sent
     * events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
     * as they become available. The stream will terminate with a `data: [DONE]` message when the
     * job is finished (succeeded, cancelled, or failed).
     * 
     * If set to false, only events generated so far will be returned.</td>
     * </tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTuneId The ID of the fine-tune job to get events for.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listFineTuneEventsWithResponse(String fineTuneId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listFineTuneEventsSync(fineTuneId, accept, requestOptions, Context.NONE);
    }

    /**
     * Immediately cancel a fine-tune job.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created_at: long (Required)
     *     updated_at: long (Required)
     *     model: String (Required)
     *     fine_tuned_model: String (Required)
     *     organization_id: String (Required)
     *     status: String(created/running/succeeded/failed/cancelled) (Required)
     *     hyperparams (Required): {
     *         n_epochs: long (Required)
     *         batch_size: long (Required)
     *         prompt_loss_weight: double (Required)
     *         learning_rate_multiplier: double (Required)
     *         compute_classification_metrics: Boolean (Optional)
     *         classification_positive_class: String (Optional)
     *         classification_n_classes: Long (Optional)
     *     }
     *     training_files (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             bytes: long (Required)
     *             createdAt: long (Required)
     *             filename: String (Required)
     *             purpose: String (Required)
     *             status: String(uploaded/processed/pending/error/deleting/deleted) (Required)
     *             status_details: String (Optional)
     *         }
     *     ]
     *     validation_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     result_files (Required): [
     *         (recursive schema, see above)
     *     ]
     *     events (Optional): [
     *          (Optional){
     *             object: String (Required)
     *             created_at: long (Required)
     *             level: String (Required)
     *             message: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param fineTuneId The ID of the fine-tune job to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> cancelFineTuneWithResponse(String fineTuneId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.cancelFineTuneSync(fineTuneId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists the currently available models, and provides basic information about each one such as the
     * owner and availability.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     object: String (Required)
     *     data (Required): [
     *          (Required){
     *             id: String (Required)
     *             object: String (Required)
     *             created: long (Required)
     *             owned_by: String (Required)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listModelsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listModelsSync(accept, requestOptions, Context.NONE);
    }

    /**
     * Retrieves a model instance, providing basic information about the model such as the owner and
     * permissioning.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     created: long (Required)
     *     owned_by: String (Required)
     * }
     * }</pre>
     * 
     * @param model The ID of the model to use for this request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return describes an OpenAI model offering that can be used with the API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> retrieveWithResponse(String model, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.retrieveSync(model, accept, requestOptions, Context.NONE);
    }

    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     object: String (Required)
     *     deleted: boolean (Required)
     * }
     * }</pre>
     * 
     * @param model The model to delete.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> deleteWithResponse(String model, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteSync(model, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates an image given a prompt.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     prompt: String (Required)
     *     n: Long (Optional)
     *     size: String(256x256/512x512/1024x1024) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             url: String (Optional)
     *             b64_json: byte[] (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createImageWithResponse(BinaryData image, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createImageSync(accept, image, requestOptions, Context.NONE);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     prompt: String (Required)
     *     image: byte[] (Required)
     *     mask: byte[] (Optional)
     *     n: Long (Optional)
     *     size: String(256x256/512x512/1024x1024) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             url: String (Optional)
     *             b64_json: byte[] (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createImageEditWithResponse(BinaryData image, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createImageEditSync(contentType, accept, image, requestOptions, Context.NONE);
    }

    /**
     * Creates an edited or extended image given an original image and a prompt.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     image: byte[] (Required)
     *     n: Long (Optional)
     *     size: String(256x256/512x512/1024x1024) (Optional)
     *     response_format: String(url/b64_json) (Optional)
     *     user: String (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     created: long (Required)
     *     data (Required): [
     *          (Required){
     *             url: String (Optional)
     *             b64_json: byte[] (Optional)
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param image The image parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createImageVariationWithResponse(BinaryData image, RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createImageVariationSync(contentType, accept, image, requestOptions, Context.NONE);
    }

    /**
     * Classifies if text violates OpenAI's Content Policy.
     * <p>
     * <strong>Request Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     input: BinaryData (Required)
     *     model: String(text-moderation-latest/text-moderation-stable) (Optional)
     * }
     * }</pre>
     * <p>
     * <strong>Response Body Schema</strong>
     * </p>
     * <pre>{@code
     * {
     *     id: String (Required)
     *     model: String (Required)
     *     results (Required): [
     *          (Required){
     *             flagged: boolean (Required)
     *             categories (Required): {
     *                 hate: boolean (Required)
     *                 hate/threatening: boolean (Required)
     *                 harassment: boolean (Required)
     *                 harassment/threatening: boolean (Required)
     *                 self-harm: boolean (Required)
     *                 self-harm/intent: boolean (Required)
     *                 self-harm/instructive: boolean (Required)
     *                 sexual: boolean (Required)
     *                 sexual/minors: boolean (Required)
     *                 violence: boolean (Required)
     *                 violence/graphic: boolean (Required)
     *             }
     *             category_scores (Required): {
     *                 hate: double (Required)
     *                 hate/threatening: double (Required)
     *                 harassment: double (Required)
     *                 harassment/threatening: double (Required)
     *                 self-harm: double (Required)
     *                 self-harm/intent: double (Required)
     *                 self-harm/instructive: double (Required)
     *                 sexual: double (Required)
     *                 sexual/minors: double (Required)
     *                 violence: double (Required)
     *                 violence/graphic: double (Required)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param content The content parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createModerationWithResponse(BinaryData content, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.createModerationSync(accept, content, requestOptions, Context.NONE);
    }
}
