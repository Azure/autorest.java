// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.bodycomplex;

import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import fixtures.bodycomplex.implementation.AutoRestComplexTestServiceImpl;

/** A builder for creating a new instance of the AutoRestComplexTestService type. */
@ServiceClientBuilder(
    serviceClients = {
      BasicClient.class,
      PrimitiveClient.class,
      ArrayClient.class,
      DictionaryClient.class,
      InheritanceClient.class,
      PolymorphismClient.class,
      PolymorphicrecursiveClient.class,
      ReadonlypropertyClient.class,
      FlattencomplexClient.class,
      BasicAsyncClient.class,
      PrimitiveAsyncClient.class,
      ArrayAsyncClient.class,
      DictionaryAsyncClient.class,
      InheritanceAsyncClient.class,
      PolymorphismAsyncClient.class,
      PolymorphicrecursiveAsyncClient.class,
      ReadonlypropertyAsyncClient.class,
      FlattencomplexAsyncClient.class
    })
public final class AutoRestComplexTestServiceBuilder {
  /*
   * server parameter
   */
  private String host;

  /**
   * Sets server parameter.
   *
   * @param host the host value.
   * @return the AutoRestComplexTestServiceBuilder.
   */
  public AutoRestComplexTestServiceBuilder host(String host) {
    this.host = host;
    return this;
  }

  /*
   * The HTTP pipeline to send requests through
   */
  private HttpPipeline pipeline;

  /**
   * Sets The HTTP pipeline to send requests through.
   *
   * @param pipeline the pipeline value.
   * @return the AutoRestComplexTestServiceBuilder.
   */
  public AutoRestComplexTestServiceBuilder pipeline(HttpPipeline pipeline) {
    this.pipeline = pipeline;
    return this;
  }

  /*
   * The serializer to serialize an object into a string
   */
  private SerializerAdapter serializerAdapter;

  /**
   * Sets The serializer to serialize an object into a string.
   *
   * @param serializerAdapter the serializerAdapter value.
   * @return the AutoRestComplexTestServiceBuilder.
   */
  public AutoRestComplexTestServiceBuilder serializerAdapter(SerializerAdapter serializerAdapter) {
    this.serializerAdapter = serializerAdapter;
    return this;
  }

  /**
   * Builds an instance of AutoRestComplexTestServiceImpl with the provided parameters.
   *
   * @return an instance of AutoRestComplexTestServiceImpl.
   */
  private AutoRestComplexTestServiceImpl buildInnerClient() {
    if (host == null) {
      this.host = "http://localhost:3000";
    }
    if (pipeline == null) {
      this.pipeline =
          new HttpPipelineBuilder()
              .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
              .build();
    }
    if (serializerAdapter == null) {
      this.serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();
    }
    AutoRestComplexTestServiceImpl client =
        new AutoRestComplexTestServiceImpl(pipeline, serializerAdapter, host);
    return client;
  }

  /**
   * Builds an instance of BasicAsyncClient async client.
   *
   * @return an instance of BasicAsyncClient.
   */
  public BasicAsyncClient buildBasicAsyncClient() {
    return new BasicAsyncClient(buildInnerClient().getBasics());
  }

  /**
   * Builds an instance of PrimitiveAsyncClient async client.
   *
   * @return an instance of PrimitiveAsyncClient.
   */
  public PrimitiveAsyncClient buildPrimitiveAsyncClient() {
    return new PrimitiveAsyncClient(buildInnerClient().getPrimitives());
  }

  /**
   * Builds an instance of ArrayAsyncClient async client.
   *
   * @return an instance of ArrayAsyncClient.
   */
  public ArrayAsyncClient buildArrayAsyncClient() {
    return new ArrayAsyncClient(buildInnerClient().getArrays());
  }

  /**
   * Builds an instance of DictionaryAsyncClient async client.
   *
   * @return an instance of DictionaryAsyncClient.
   */
  public DictionaryAsyncClient buildDictionaryAsyncClient() {
    return new DictionaryAsyncClient(buildInnerClient().getDictionaries());
  }

  /**
   * Builds an instance of InheritanceAsyncClient async client.
   *
   * @return an instance of InheritanceAsyncClient.
   */
  public InheritanceAsyncClient buildInheritanceAsyncClient() {
    return new InheritanceAsyncClient(buildInnerClient().getInheritances());
  }

  /**
   * Builds an instance of PolymorphismAsyncClient async client.
   *
   * @return an instance of PolymorphismAsyncClient.
   */
  public PolymorphismAsyncClient buildPolymorphismAsyncClient() {
    return new PolymorphismAsyncClient(buildInnerClient().getPolymorphisms());
  }

  /**
   * Builds an instance of PolymorphicrecursiveAsyncClient async client.
   *
   * @return an instance of PolymorphicrecursiveAsyncClient.
   */
  public PolymorphicrecursiveAsyncClient buildPolymorphicrecursiveAsyncClient() {
    return new PolymorphicrecursiveAsyncClient(buildInnerClient().getPolymorphicrecursives());
  }

  /**
   * Builds an instance of ReadonlypropertyAsyncClient async client.
   *
   * @return an instance of ReadonlypropertyAsyncClient.
   */
  public ReadonlypropertyAsyncClient buildReadonlypropertyAsyncClient() {
    return new ReadonlypropertyAsyncClient(buildInnerClient().getReadonlyproperties());
  }

  /**
   * Builds an instance of FlattencomplexAsyncClient async client.
   *
   * @return an instance of FlattencomplexAsyncClient.
   */
  public FlattencomplexAsyncClient buildFlattencomplexAsyncClient() {
    return new FlattencomplexAsyncClient(buildInnerClient().getFlattencomplexes());
  }

  /**
   * Builds an instance of BasicClient sync client.
   *
   * @return an instance of BasicClient.
   */
  public BasicClient buildBasicClient() {
    return new BasicClient(buildInnerClient().getBasics());
  }

  /**
   * Builds an instance of PrimitiveClient sync client.
   *
   * @return an instance of PrimitiveClient.
   */
  public PrimitiveClient buildPrimitiveClient() {
    return new PrimitiveClient(buildInnerClient().getPrimitives());
  }

  /**
   * Builds an instance of ArrayClient sync client.
   *
   * @return an instance of ArrayClient.
   */
  public ArrayClient buildArrayClient() {
    return new ArrayClient(buildInnerClient().getArrays());
  }

  /**
   * Builds an instance of DictionaryClient sync client.
   *
   * @return an instance of DictionaryClient.
   */
  public DictionaryClient buildDictionaryClient() {
    return new DictionaryClient(buildInnerClient().getDictionaries());
  }

  /**
   * Builds an instance of InheritanceClient sync client.
   *
   * @return an instance of InheritanceClient.
   */
  public InheritanceClient buildInheritanceClient() {
    return new InheritanceClient(buildInnerClient().getInheritances());
  }

  /**
   * Builds an instance of PolymorphismClient sync client.
   *
   * @return an instance of PolymorphismClient.
   */
  public PolymorphismClient buildPolymorphismClient() {
    return new PolymorphismClient(buildInnerClient().getPolymorphisms());
  }

  /**
   * Builds an instance of PolymorphicrecursiveClient sync client.
   *
   * @return an instance of PolymorphicrecursiveClient.
   */
  public PolymorphicrecursiveClient buildPolymorphicrecursiveClient() {
    return new PolymorphicrecursiveClient(buildInnerClient().getPolymorphicrecursives());
  }

  /**
   * Builds an instance of ReadonlypropertyClient sync client.
   *
   * @return an instance of ReadonlypropertyClient.
   */
  public ReadonlypropertyClient buildReadonlypropertyClient() {
    return new ReadonlypropertyClient(buildInnerClient().getReadonlyproperties());
  }

  /**
   * Builds an instance of FlattencomplexClient sync client.
   *
   * @return an instance of FlattencomplexClient.
   */
  public FlattencomplexClient buildFlattencomplexClient() {
    return new FlattencomplexClient(buildInnerClient().getFlattencomplexes());
  }
}
