// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package com.azure.autorest.extension.base.plugin;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import org.slf4j.Logger;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Collectors;

/**
 * Settings that are used by the Java AutoRest Generator.
 */
public class JavaSettings {
    private static final String VERSION = "4.0.0";

    private static JavaSettings instance;

    private static NewPlugin host;

    private static String header;

    private static final Map<String, Object> SIMPLE_JAVA_SETTINGS = new HashMap<>();

    private static Logger logger;
    private final boolean useKeyCredential;
    private final boolean branded;
    private boolean noCustomHeaders;

    static void setHeader(String value) {
        if ("MICROSOFT_MIT".equals(value)) {
            header = MICROSOFT_MIT_LICENSE_HEADER + "\n" + String.format(DEFAULT_CODE_GENERATION_HEADER, VERSION);
        } else if ("MICROSOFT_APACHE".equals(value)) {
            header = MICROSOFT_APACHE_LICENSE_HEADER + "\n" + String.format(DEFAULT_CODE_GENERATION_HEADER, VERSION);
        } else if ("MICROSOFT_MIT_NO_VERSION".equals(value)) {
            header = MICROSOFT_MIT_LICENSE_HEADER + "\n" + DEFAULT_CODE_GENERATION_HEADER_WITHOUT_VERSION;
        } else if ("MICROSOFT_MIT_SMALL_NO_VERSION".equals(value)) {
            header = MICROSOFT_MIT_SMALL_LICENSE_HEADER + "\n" + DEFAULT_CODE_GENERATION_HEADER_WITHOUT_VERSION;
        } else if ("MICROSOFT_APACHE_NO_VERSION".equals(value)) {
            header = MICROSOFT_APACHE_LICENSE_HEADER + "\n" + DEFAULT_CODE_GENERATION_HEADER_WITHOUT_VERSION;
        } else if ("MICROSOFT_MIT_NO_CODEGEN".equals(value)) {
            header = MICROSOFT_MIT_LICENSE_HEADER + "\n" + "Code generated by Microsoft (R) AutoRest Code Generator.";
        } else if ("NONE".equals(value)) {
            header = "";
        } else if ("MICROSOFT_MIT_SMALL".equals(value)) {
            header = MICROSOFT_MIT_SMALL_LICENSE_HEADER + "Code generated by Microsoft (R) AutoRest Code Generator.";
        } else if ("MICROSOFT_MIT_SMALL_TYPESPEC".equals(value)) {
            header = MICROSOFT_MIT_SMALL_LICENSE_HEADER + "Code generated by Microsoft (R) TypeSpec Code Generator.";
        } else if ("SMALL_TYPESPEC".equals(value)) {
            header = "Code generated by Microsoft (R) TypeSpec Code Generator.";
        } else if ("MICROSOFT_MIT_SMALL_NO_CODEGEN".equals(value)) {
            header = MICROSOFT_MIT_SMALL_LICENSE_HEADER;
        } else {
            header = value;
        }
    }

    static void setHost(NewPlugin host) {
        JavaSettings.host = host;
        logger = new PluginLogger(host, JavaSettings.class);
    }

    public static void clear() {
        instance = null;
    }

    public static JavaSettings getInstance() {
        if (instance == null) {
            AutorestSettings autorestSettings = new AutorestSettings();
            loadStringSetting("title", autorestSettings::setTitle);
            loadStringOrArraySettingAsArray("security", autorestSettings::setSecurity);
            loadStringOrArraySettingAsArray("security-scopes", autorestSettings::setSecurityScopes);
            loadStringSetting("security-header-name", autorestSettings::setSecurityHeaderName);

            loadStringSetting("tag", autorestSettings::setTag);
            loadStringSetting("base-folder", autorestSettings::setBaseFolder);
            loadStringSetting("output-folder", autorestSettings::setOutputFolder);
            loadStringSetting("java-sdks-folder", autorestSettings::setJavaSdksFolder);
            // input-file
            List<Object> inputFiles = host.getValue(List.class, "input-file");
            if (inputFiles != null) {
                autorestSettings.getInputFiles().addAll(
                    inputFiles.stream().map(Object::toString).collect(Collectors.toList()));
                logger.debug("List of input files : {}", autorestSettings.getInputFiles());
            }
            // require (readme.md etc.)
            List<Object> require = host.getValue(List.class, "require");
            if (require != null) {
                autorestSettings.getRequire().addAll(
                    require.stream().map(Object::toString).collect(Collectors.toList()));
                logger.debug("List of require : {}", autorestSettings.getRequire());
            }

            setHeader(getStringValue(host, "license-header"));
            instance = new JavaSettings(
                autorestSettings,
                host.getValue(new TypeReference<Map<String, Object>>() {
                }.getType(), "modelerfour"),
                getBooleanValue(host, "azure-arm", false),
                getBooleanValue(host, "sdk-integration", false),
                getStringValue(host, "fluent"),
                getBooleanValue(host, "regenerate-pom", false),
                header,
                120,
                getStringValue(host, "service-name"),
                getStringValue(host, "namespace", "com.mycompany.app").toLowerCase(),
                getBooleanValue(host, "non-null-annotations", false),
                getBooleanValue(host, "client-side-validations", false),
                getStringValue(host, "client-type-prefix"),
                getBooleanValue(host, "generate-client-interfaces", false),
                getBooleanValue(host, "generate-client-as-impl", false),
                getStringValue(host, "implementation-subpackage", "implementation"),
                getStringValue(host, "models-subpackage", "models"),
                getStringValue(host, "custom-types", ""),
                getStringValue(host, "custom-types-subpackage", ""),
                getStringValue(host, "fluent-subpackage", "fluent"),
                getBooleanValue(host, "required-parameter-client-methods", false),
                getBooleanValue(host, "generate-sync-async-clients", false),
                getBooleanValue(host, "generate-builder-per-client", false),
                getStringValue(host, "sync-methods", "essential"),
                getBooleanValue(host, "client-logger", false),
                getBooleanValue(host, "required-fields-as-ctor-args", false),
                getBooleanValue(host, "service-interface-as-public", true),
                getStringValue(host, "artifact-id", ""),
                getStringValue(host, "credential-types", "none"),
                getStringValue(host, "credential-scopes"),
                getStringValue(host, "customization-jar-path"),
                getStringValue(host, "customization-class"),
                getBooleanValue(host, "optional-constant-as-enum", false),
                getBooleanValue(host, "data-plane", false),
                getBooleanValue(host, "use-iterable", false),
                host.getValue(List.class, "service-versions"),
                getBooleanValue(host, "require-x-ms-flattened-to-flatten", false),
                getStringValue(host, "client-flattened-annotation-target", ""),
                getStringValue(host, "key-credential-header-name", ""),
                getBooleanValue(host, "disable-client-builder", false),
                getBooleanValue(host, "skip-formatting", false),
                host.getValue(new TypeReference<Map<String, PollingDetails>>() {
                }.getType(), "polling"),
                getBooleanValue(host, "generate-samples", false),
                getBooleanValue(host, "generate-tests", false),
                false, //getBooleanValue(host, "generate-send-request-method", false),
                getBooleanValue(host, "generate-models", false),
                getBooleanValue(host, "annotate-getters-and-setters-for-serialization", false),
                getStringValue(host, "default-http-exception-type"),
                getBooleanValue(host, "use-default-http-status-code-to-exception-type-mapping", false),
                host.getValue(new TypeReference<Map<Integer, String>>() {}.getType(),
                    "http-status-code-to-exception-type-mapping"),
                getBooleanValue(host, "partial-update", false),
                getBooleanValue(host, "generic-response-type", false),
                getBooleanValue(host, "stream-style-serialization", true),
                getBooleanValue(host, "enable-sync-stack", false),
                getBooleanValue(host, "output-model-immutable", false),
                getBooleanValue(host, "use-input-stream-for-binary", false),
                getBooleanValue(host, "no-custom-headers", false),
                getBooleanValue(host, "include-read-only-in-constructor-args", false),
                // setting the default as true as the Java design guideline recommends using String for URLs.
                getBooleanValue(host, "url-as-string", true),

                // setting this to false by default as a lot of existing libraries still use swagger and
                // were generated with required = true set in JsonProperty annotation
                getBooleanValue(host, "disable-required-property-annotation", false),
                getBooleanValue(host, "enable-page-size", false),
                getBooleanValue(host, "use-key-credential", false),
                getBooleanValue(host, "null-byte-array-maps-to-empty-array", false),
                getBooleanValue(host, "graal-vm-config", false),
                getBooleanValue(host, "branded", true)
            );
        }
        return instance;
    }

    /**
     * Create a new JavaSettings object with the provided properties.
     *
     * @param autorestSettings
     * @param modelerSettings
     * @param azure
     * @param sdkIntegration
     * @param fluent
     * @param regeneratePom
     * @param fileHeaderText
     * @param maximumJavadocCommentWidth
     * @param serviceName
     * @param packageKeyword
     * @param nonNullAnnotations Whether to add the @NotNull annotation to required parameters in client methods.
     * @param clientSideValidations
     * @param clientTypePrefix The prefix that will be added to each generated client type.
     * @param generateClientInterfaces Whether interfaces will be generated for Service and Method Group clients.
     * @param generateClientAsImpl
     * @param implementationSubpackage The sub-package that the Service and Method Group client implementation classes
     * will be put into.
     * @param modelsSubpackage The sub-package that Enums, Exceptions, and Model types will be put into.
     * @param customTypes
     * @param customTypesSubpackage
     * @param fluentSubpackage
     * @param requiredParameterClientMethods Whether Service and Method Group client method overloads that omit optional
     * parameters will be created.
     * @param generateSyncAsyncClients
     * @param generateBuilderPerClient
     * @param syncMethods
     * @param clientLogger
     * @param requiredFieldsAsConstructorArgs
     * @param serviceInterfaceAsPublic If set to true, proxy method service interface will be marked as public.
     * @param artifactId
     * @param credentialType
     * @param credentialScopes
     * @param customizationJarPath
     * @param customizationClass
     * @param optionalConstantAsEnum
     * @param dataPlaneClient
     * @param useIterable
     * @param serviceVersions
     * @param requireXMsFlattenedToFlatten If set to true, a model must have x-ms-flattened to be annotated with
     * JsonFlatten.
     * @param clientFlattenAnnotationTarget
     * @param keyCredentialHeaderName
     * @param clientBuilderDisabled
     * @param skipFormatting
     * @param pollingConfig
     * @param generateSamples
     * @param generateTests
     * @param generateSendRequestMethod
     * @param generateModels
     * @param passDiscriminatorToChildDeserialization If set to true, Jackson subtype deserialization will be passed
     * the discriminator field.
     * @param annotateGettersAndSettersForSerialization If set to true, Jackson JsonGetter and JsonSetter will annotate
     * getters and setters in generated models to handle serialization and deserialization. For now, fields will
     * continue being annotated to ensure that there are no backwards compatibility breaks.
     * @param defaultHttpExceptionType The fully-qualified class that should be used as the default exception type. This
     * class must extend from HttpResponseException.
     * @param useDefaultHttpStatusCodeToExceptionTypeMapping Determines whether a well-known HTTP status code to exception type mapping
     * should be used if an HTTP status code-exception mapping isn't provided.
     * @param httpStatusCodeToExceptionTypeMapping A mapping of HTTP response status code to the exception type that should be
     * thrown if that status code is seen. All exception types must be fully-qualified and extend from
     * HttpResponseException.
     * @param handlePartialUpdate
     * @param genericResponseTypes If set to true, responses will only use Response, ResponseBase, PagedResponse, and
     * PagedResponseBase types with generics instead of creating a specific named type that extends one of those types.
     * @param streamStyleSerialization If set to true, models will handle serialization themselves using stream-style
     * serialization instead of relying on Jackson Databind.
     *
     * @param isSyncStackEnabled If set to true, sync methods are generated using sync stack. i.e these methods do
     * not use sync-over-async stack.
     * @param outputModelImmutable If set to true, the models that are determined as output only models will be made
     * immutable without any public constructors or setter methods.
     * @param streamResponseInputStream If set to true, sync methods will use {@code InputStream} for binary responses.
     * @param noCustomHeaders If set to true, methods that have custom header types will also have an equivalent
     * method that returns just the response with untyped headers.
     * @param includeReadOnlyInConstructorArgs If set to true, read-only required properties will be included in the
     * constructor if {@code requiredFieldsAsConstructorArgs} is true. This is a backwards compatibility flag as
     * previously read-only required were included in constructors.
     * @param urlAsString This generates all URLs as String type. This is enabled by default as required by the Java
     * design guidelines. For backward compatability, this can be set to false.
     * @param nullByteArrayMapsToEmptyArray If set to true, {@code ArrayType.BYTE_ARRAY} will return an empty array
     * instead of null when the default value expression is null.
     */
    private JavaSettings(AutorestSettings autorestSettings,
        Map<String, Object> modelerSettings,
        boolean azure,
        boolean sdkIntegration,
        String fluent,
        boolean regeneratePom,
        String fileHeaderText,
        int maximumJavadocCommentWidth,
        String serviceName,
        String packageKeyword,
        boolean nonNullAnnotations,
        boolean clientSideValidations,
        String clientTypePrefix,
        boolean generateClientInterfaces,
        boolean generateClientAsImpl,
        String implementationSubpackage,
        String modelsSubpackage,
        String customTypes,
        String customTypesSubpackage,
        String fluentSubpackage,
        boolean requiredParameterClientMethods,
        boolean generateSyncAsyncClients,
        boolean generateBuilderPerClient,
        String syncMethods,
        boolean clientLogger,
        boolean requiredFieldsAsConstructorArgs,
        boolean serviceInterfaceAsPublic,
        String artifactId,
        String credentialType,
        String credentialScopes,
        String customizationJarPath,
        String customizationClass,
        boolean optionalConstantAsEnum,
        boolean dataPlaneClient,
        boolean useIterable,
        List<String> serviceVersions,
        boolean requireXMsFlattenedToFlatten,
        String clientFlattenAnnotationTarget,
        String keyCredentialHeaderName,
        boolean clientBuilderDisabled,
        boolean skipFormatting,
        Map<String, PollingDetails> pollingConfig,
        boolean generateSamples,
        boolean generateTests,
        boolean generateSendRequestMethod,
        boolean generateModels,
        boolean annotateGettersAndSettersForSerialization,
        String defaultHttpExceptionType,
        boolean useDefaultHttpStatusCodeToExceptionTypeMapping,
        Map<Integer, String> httpStatusCodeToExceptionTypeMapping,
        boolean handlePartialUpdate,
        boolean genericResponseTypes,
        boolean streamStyleSerialization,
        boolean isSyncStackEnabled,
        boolean outputModelImmutable,
        boolean streamResponseInputStream,
        boolean noCustomHeaders,
        boolean includeReadOnlyInConstructorArgs,
        boolean urlAsString,
        boolean disableRequiredPropertyAnnotation,
        boolean pageSizeEnabled,
        boolean useKeyCredential,
        boolean nullByteArrayMapsToEmptyArray,
        boolean generateGraalVmConfig,
        boolean branded) {

        this.autorestSettings = autorestSettings;
        this.modelerSettings = new ModelerSettings(modelerSettings);
        this.azure = azure;
        this.sdkIntegration = sdkIntegration;
        this.fluent = fluent == null ? Fluent.NONE : (fluent.isEmpty() || fluent.equalsIgnoreCase("true") ? Fluent.PREMIUM : Fluent.valueOf(fluent.toUpperCase(Locale.ROOT)));
        this.regeneratePom = regeneratePom;
        this.fileHeaderText = fileHeaderText;
        this.maximumJavadocCommentWidth = maximumJavadocCommentWidth;
        this.serviceName = serviceName;
        this.packageName = packageKeyword;
        this.nonNullAnnotations = nonNullAnnotations;
        this.clientSideValidations = clientSideValidations;
        this.clientTypePrefix = clientTypePrefix;
        this.generateClientInterfaces = generateClientInterfaces;
        this.generateClientAsImpl = generateClientAsImpl || generateSyncAsyncClients || generateClientInterfaces;
        this.implementationSubpackage = implementationSubpackage;
        this.modelsSubpackage = modelsSubpackage;
        this.customTypes = (customTypes == null || customTypes.isEmpty()) ? new ArrayList<>() : Arrays.asList(customTypes.split(","));
        this.customTypesSubpackage = customTypesSubpackage;
        this.fluentSubpackage = fluentSubpackage;
        this.requiredParameterClientMethods = requiredParameterClientMethods;
        this.generateSyncAsyncClients = generateSyncAsyncClients;
        this.generateBuilderPerClient = generateBuilderPerClient;
        this.syncMethods = SyncMethodsGeneration.fromValue(syncMethods);
        this.clientLogger = clientLogger;
        this.requiredFieldsAsConstructorArgs = requiredFieldsAsConstructorArgs;
        this.serviceInterfaceAsPublic = serviceInterfaceAsPublic;
        this.artifactId = artifactId;
        this.optionalConstantAsEnum = optionalConstantAsEnum;
        this.dataPlaneClient = dataPlaneClient;
        this.useIterable = useIterable;
        this.serviceVersions = serviceVersions;
        this.requireXMsFlattenedToFlatten = requireXMsFlattenedToFlatten;
        this.clientFlattenAnnotationTarget = (clientFlattenAnnotationTarget == null || clientFlattenAnnotationTarget.isEmpty())
            ? ClientFlattenAnnotationTarget.TYPE
            : ClientFlattenAnnotationTarget.valueOf(clientFlattenAnnotationTarget.toUpperCase(Locale.ROOT));

        if (credentialType != null) {
            String[] splits = credentialType.split(",");
            this.credentialTypes = Arrays.stream(splits)
                .map(String::trim)
                .map(CredentialType::fromValue)
                .collect(Collectors.toSet());
        }
        if (credentialScopes != null) {
            String[] splits = credentialScopes.split(",");
            this.credentialScopes = Arrays.stream(splits)
                .map(String::trim)
                .map(split -> {
                    if (!split.startsWith("\"")) {
                        split = "\"" + split + "\"";
                    }
                    return split;
                })
                .collect(Collectors.toSet());
        }
        this.customizationJarPath = customizationJarPath;
        this.customizationClass = customizationClass;
        this.keyCredentialHeaderName = keyCredentialHeaderName;
        this.clientBuilderDisabled = clientBuilderDisabled;
        this.skipFormatting = skipFormatting;
        if (pollingConfig != null) {
            if (!pollingConfig.containsKey("default")) {
                pollingConfig.put("default", new PollingDetails());
            }
        }
        this.pollingConfig = pollingConfig;
        this.generateSamples = generateSamples;
        this.generateTests = generateTests;
        this.generateSendRequestMethod = generateSendRequestMethod;
        this.generateModels = generateModels;
        this.annotateGettersAndSettersForSerialization = annotateGettersAndSettersForSerialization;

        // Error HTTP status code exception type handling.
        this.defaultHttpExceptionType = defaultHttpExceptionType;
        this.useDefaultHttpStatusCodeToExceptionTypeMapping = useDefaultHttpStatusCodeToExceptionTypeMapping;
        this.httpStatusCodeToExceptionTypeMapping = httpStatusCodeToExceptionTypeMapping;

        this.handlePartialUpdate = handlePartialUpdate;

        this.genericResponseTypes = genericResponseTypes;

        this.streamStyleSerialization = streamStyleSerialization;
        this.syncStackEnabled = isSyncStackEnabled;

        this.outputModelImmutable = outputModelImmutable;

        this.isInputStreamForBinary = streamResponseInputStream;
        this.noCustomHeaders = noCustomHeaders;
        this.includeReadOnlyInConstructorArgs = includeReadOnlyInConstructorArgs;
        this.urlAsString = urlAsString;
        this.disableRequiredJsonAnnotation = disableRequiredPropertyAnnotation;
        this.pageSizeEnabled = pageSizeEnabled;
        this.useKeyCredential = useKeyCredential;
        this.nullByteArrayMapsToEmptyArray = nullByteArrayMapsToEmptyArray;
        this.generateGraalVmConfig = generateGraalVmConfig;
        this.branded = branded;
    }

    public boolean isBranded() {
        return branded;
    }

    private final String keyCredentialHeaderName;
    public String getKeyCredentialHeaderName() {
        return this.keyCredentialHeaderName;
    }


    private Set<CredentialType> credentialTypes;
    public Set<CredentialType> getCredentialTypes() {
        return credentialTypes;
    }


    private Set<String> credentialScopes;
    public Set<String> getCredentialScopes() {
        return credentialScopes;
    }


    private final boolean azure;
    public final boolean isAzure() {
        return azure;
    }


    private final String artifactId;
    public String getArtifactId() {
        return artifactId;
    }

    public boolean isNoCustomHeaders() {
        return noCustomHeaders;
    }


    private final boolean urlAsString;
    public boolean urlAsString() {
        return urlAsString;
    }

    private final boolean disableRequiredJsonAnnotation;
    public boolean isDisableRequiredJsonAnnotation() {
        return disableRequiredJsonAnnotation;
    }

    public enum Fluent {
        NONE, LITE, PREMIUM
    }

    private final Fluent fluent;

    public final boolean isFluent() {
        return fluent != Fluent.NONE;
    }

    public final boolean isFluentLite() {
        return fluent == Fluent.LITE;
    }

    public final boolean isFluentPremium() {
        return fluent == Fluent.PREMIUM;
    }

    public final boolean isAzureOrFluent() {
        return isAzure() || isFluent();
    }

    // configure for model flatten in client
    public enum ClientFlattenAnnotationTarget {
        // @JsonFlatten on class
        TYPE,
        // @JsonFlatten on class variable
        FIELD,
        // Do not use @JsonFlatten. The model flatten is implemented as class variable getter/setter access the flattened properties.
        NONE,
        // Disable the model flatten
        DISABLED
    }

    // target for @JsonFlatten annotation for x-ms-client-flatten
    private final ClientFlattenAnnotationTarget clientFlattenAnnotationTarget;

    /**
     * @return When flatten client mode, where to put the <code>@JsonFlatten</code> annotation. If NONE, flatten at
     * getter/setter methods via codegen.
     */
    public ClientFlattenAnnotationTarget getClientFlattenAnnotationTarget() {
        return this.clientFlattenAnnotationTarget;
    }

    public static class ModelerSettings {
        private final Map<String, Object> settings;

        public ModelerSettings(Map<String, Object> settings) {
            this.settings = settings == null ? Collections.emptyMap() : settings;
        }

        public Map<String, Object> getSettings() {
            return settings;
        }

        /**
         * If false, use client-flattened-annotation-target = TYPE for no flatten; client-flattened-annotation-target =
         * NONE for flatten at getter/setter methods via codegen.
         * <p>
         * If true, use client-flattened-annotation-target = TYPE for <code>@JsonFlatten</code> on type (i.e. on class);
         * client-flattened-annotation-target = FIELD for <code>@JsonFlatten</code> on field.
         * <p>
         * modelerfour.flatten-models = false and client-flattened-annotation-target = NONE would require
         * modelerfour.flatten-payloads = false.
         *
         * @return value of modelerfour.flatten-models
         */
        public boolean isFlattenModel() {
            return settings.containsKey("flatten-models") && (boolean) settings.get("flatten-models");
        }
    }

    private final ModelerSettings modelerSettings;

    public ModelerSettings getModelerSettings() {
        return modelerSettings;
    }

    private final AutorestSettings autorestSettings;

    public AutorestSettings getAutorestSettings() {
        return autorestSettings;
    }

    public Map<String, Object> getSimpleJavaSettings() {
        return SIMPLE_JAVA_SETTINGS;
    }

    private final boolean sdkIntegration;

    public boolean isSdkIntegration() {
        return sdkIntegration;
    }

    private final boolean regeneratePom;

    public final boolean isRegeneratePom() {
        return regeneratePom;
    }

    private final String fileHeaderText;

    public final String getFileHeaderText() {
        return fileHeaderText;
    }

    private final int maximumJavadocCommentWidth;

    public final int getMaximumJavadocCommentWidth() {
        return maximumJavadocCommentWidth;
    }

    private final String serviceName;

    public final String getServiceName() {
        return serviceName;
    }

    private final String packageName;

    public final String getPackage() {
        return packageName;
    }

    public final String getPackage(String... packageSuffixes) {
        StringBuilder packageBuilder = new StringBuilder(packageName);
        if (packageSuffixes != null) {
            for (String packageSuffix : packageSuffixes) {
                if (packageSuffix != null && !packageSuffix.isEmpty()) {
                    // Cleanse the package suffix to remove leading and trailing periods.
                    boolean startsWithPeriod = packageSuffix.startsWith(".");
                    boolean endsWithPeriod = packageSuffix.endsWith(".");

                    String cleansedPackageSuffix;
                    if (startsWithPeriod && endsWithPeriod) {
                        cleansedPackageSuffix = packageSuffix.substring(1, packageSuffix.length() - 1);
                    } else if (startsWithPeriod) {
                        cleansedPackageSuffix = packageSuffix.substring(1);
                    } else if (endsWithPeriod) {
                        cleansedPackageSuffix = packageSuffix.substring(0, packageSuffix.length() - 1);
                    } else {
                        cleansedPackageSuffix = packageSuffix;
                    }

                    packageBuilder.append(".").append(cleansedPackageSuffix);
                }
            }
        }
        return packageBuilder.toString();
    }

    /**
     * Whether to add the @NotNull annotation to required parameters in client methods.
     */
    private final boolean nonNullAnnotations;

    public final boolean isNonNullAnnotations() {
        return nonNullAnnotations;
    }

    private final boolean clientSideValidations;

    public final boolean isClientSideValidations() {
        return clientSideValidations;
    }

    /**
     * The prefix that will be added to each generated client type.
     */
    private final String clientTypePrefix;

    public final String getClientTypePrefix() {
        return clientTypePrefix;
    }

    /**
     * Whether interfaces will be generated for Service and Method Group clients.
     */
    private final boolean generateClientInterfaces;

    public final boolean isGenerateClientInterfaces() {
        return generateClientInterfaces;
    }

    /**
     * Whether interfaces will be generated for Service and Method Group clients.
     */
    private final boolean generateClientAsImpl;

    public final boolean isGenerateClientAsImpl() {
        return generateClientAsImpl;
    }

    /**
     * The sub-package that the Service and Method Group client implementation classes will be put into.
     */
    private final String implementationSubpackage;

    public final String getImplementationSubpackage() {
        return implementationSubpackage;
    }

    /**
     * The sub-package that Enums, Exceptions, and Model types will be put into.
     */
    private final String modelsSubpackage;

    public final String getModelsSubpackage() {
        return modelsSubpackage;
    }

    private final String fluentSubpackage;

    /**
     * @return The sub-package for Fluent SDK, that contains Client and Builder types, which is not recommended to be
     * used directly.
     */
    public final String getFluentSubpackage() {
        return fluentSubpackage;
    }

    /**
     * @return The sub-package for Fluent SDK, that contains Enums, Exceptions, and Model types, which is not
     * recommended being used directly.
     */
    public final String getFluentModelsSubpackage() {
        if (modelsSubpackage.contains(".")) {
            return fluentSubpackage + "." + modelsSubpackage.substring(modelsSubpackage.lastIndexOf(".") + 1);
        } else {
            return fluentSubpackage + "." + modelsSubpackage;
        }
    }

    /**
     * Whether Service and Method Group client method overloads that omit optional parameters will be created.
     */
    private final boolean requiredParameterClientMethods;

    public final boolean isRequiredParameterClientMethods() {
        return requiredParameterClientMethods;
    }

    private final boolean generateSyncAsyncClients;

    public final boolean isGenerateSyncAsyncClients() {
        return generateSyncAsyncClients;
    }

    public final boolean isSyncClientWrapAsyncClient() {
        return !syncStackEnabled;
    }

    private final SyncMethodsGeneration syncMethods;

    public final SyncMethodsGeneration getSyncMethods() {
        return syncMethods;
    }

    public final boolean isGenerateAsyncMethods() {
        SyncMethodsGeneration syncMethodsGeneration = getSyncMethods();
        return syncMethodsGeneration == SyncMethodsGeneration.ALL || syncMethodsGeneration == SyncMethodsGeneration.ESSENTIAL;
    }

    public final boolean isGenerateSyncMethods() {
        SyncMethodsGeneration syncMethodsGeneration = getSyncMethods();
        return syncMethodsGeneration == SyncMethodsGeneration.ALL || syncMethodsGeneration == SyncMethodsGeneration.SYNC_ONLY;
    }

    private final boolean requiredFieldsAsConstructorArgs;

    public boolean isRequiredFieldsAsConstructorArgs() {
        return requiredFieldsAsConstructorArgs;
    }

    private final boolean serviceInterfaceAsPublic;

    public boolean isServiceInterfaceAsPublic() {
        return serviceInterfaceAsPublic;
    }

    public enum SyncMethodsGeneration {
        ALL,
        ESSENTIAL,
        SYNC_ONLY,  // SYNC_ONLY requires "enable-sync-stack"
        NONE;

        public static SyncMethodsGeneration fromValue(String value) {
            if (value == null) {
                return null;
            } else if (value.equals("all")) {
                return ALL;
            } else if (value.equals("essential")) {
                return ESSENTIAL;
            } else if (value.equals("none")) {
                return NONE;
            } else if (value.equals("sync-only")) {
                return SYNC_ONLY;
            }
            return null;
        }
    }

    private final List<String> customTypes;

    public List<String> getCustomTypes() {
        return customTypes;
    }

    public boolean isCustomType(String typeName) {
        return customTypes.contains(typeName);
    }

    private final String customTypesSubpackage;

    public final String getCustomTypesSubpackage() {
        return customTypesSubpackage;
    }

    public enum CredentialType {
        TOKEN_CREDENTIAL,
        AZURE_KEY_CREDENTIAL,
        NONE;

        public static CredentialType fromValue(String value) {
            if (value == null) {
                return null;
            } else if (value.equals("tokencredential")) {
                return TOKEN_CREDENTIAL;
            } else if (value.equals("azurekeycredential")) {
                return AZURE_KEY_CREDENTIAL;
            } else if (value.equals("none")) {
                return NONE;
            }
            return NONE;
        }
    }

    private final boolean clientLogger;

    public final boolean isUseClientLogger() {
        return clientLogger;
    }

    private final String customizationJarPath;

    public final String getCustomizationJarPath() {
        return customizationJarPath;
    }

    private final String customizationClass;

    public final String getCustomizationClass() {
        return customizationClass;
    }

    boolean skipFormatting;

    /**
     * @return whether to skip formatting java files.
     */
    public boolean isSkipFormatting() {
        return skipFormatting;
    }

    private final boolean optionalConstantAsEnum;

    public boolean isOptionalConstantAsEnum() {
        return optionalConstantAsEnum;
    }

    private final boolean dataPlaneClient;

    public boolean isDataPlaneClient() {
        return dataPlaneClient;
    }

    private final boolean useIterable;

    public boolean isUseIterable() {
        return useIterable;
    }

    /**
     * Service version list. It maps to api-version parameter in swagger. Last one is the latest version, also default
     * version
     */
    private final List<String> serviceVersions;

    public List<String> getServiceVersions() {
        return serviceVersions;
    }

    private final boolean requireXMsFlattenedToFlatten;

    public boolean requireXMsFlattenedToFlatten() {
        return requireXMsFlattenedToFlatten;
    }

    private final boolean generateSamples;

    public boolean isGenerateSamples() {
        return generateSamples;
    }

    private final boolean generateTests;

    public boolean isGenerateTests() {
        return generateTests;
    }

    private final boolean generateSendRequestMethod;

    public boolean isGenerateSendRequestMethod() {
        return generateSendRequestMethod;
    }

    private final boolean generateModels;

    public boolean isGenerateModels() {
        return generateModels;
    }

    private final boolean syncStackEnabled;
    public boolean isSyncStackEnabled() {
        return syncStackEnabled;
    }

    private final boolean clientBuilderDisabled;

    public boolean clientBuilderDisabled() {
        return clientBuilderDisabled;
    }

    private final boolean outputModelImmutable;

    public boolean isOutputModelImmutable() {
        return outputModelImmutable;
    }

    private final boolean pageSizeEnabled;
    public boolean isPageSizeEnabled() {
        return pageSizeEnabled;
    }

    private final boolean generateGraalVmConfig;

    public boolean isGenerateGraalVmConfig() {
        return generateGraalVmConfig;
    }

    public static class PollingDetails {
        @JsonProperty("strategy")
        private String strategy;
        @JsonProperty("sync-strategy")
        private String syncStrategy;
        @JsonProperty("intermediate-type")
        private String intermediateType;
        @JsonProperty("final-type")
        private String finalType;
        @JsonProperty("poll-interval")
        private String pollInterval;

        public static final String DEFAULT_POLLING_STRATEGY_FORMAT = String.join("\n",
                "new %s<>(new PollingStrategyOptions({httpPipeline})",
                "    .setEndpoint({endpoint})",
                "    .setContext({context})",
                "    .setServiceVersion({serviceVersion}))");

        private static final String DEFAULT_POLLING_CODE = String.format(DEFAULT_POLLING_STRATEGY_FORMAT, "DefaultPollingStrategy");

        private static final String DEFAULT_SYNC_POLLING_CODE = String.format(DEFAULT_POLLING_STRATEGY_FORMAT, "SyncDefaultPollingStrategy");

        public String getStrategy() {
            if (strategy == null || "default".equalsIgnoreCase(strategy)) {
                return DEFAULT_POLLING_CODE;
            } else {
                return strategy;
            }
        }

        public String getSyncStrategy() {
            if (syncStrategy == null || "default".equalsIgnoreCase(syncStrategy)) {
                return DEFAULT_SYNC_POLLING_CODE;
            } else {
                return syncStrategy;
            }
        }

        public String getIntermediateType() {
            return intermediateType;
        }

        public String getFinalType() {
            return finalType;
        }

        public int getPollIntervalInSeconds() {
            return pollInterval != null ? Integer.parseInt(pollInterval) : 1;
        }
    }

    private final Map<String, PollingDetails> pollingConfig;

    public PollingDetails getPollingConfig(String operation) {
        if (pollingConfig == null) {
            return null;
        }
        for (String key : pollingConfig.keySet()) {
            if (key.equalsIgnoreCase(operation)) {
                return pollingConfig.get(key);
            }
        }
        return pollingConfig.get("default");
    }

    private final boolean annotateGettersAndSettersForSerialization;

    /**
     * Whether model getters and setters should be annotated with Jackson JsonGetter and JsonSetter to handle
     * serialization.
     * <p>
     * For now, Fields will continue to be annotated with JsonProperty to ensure there are no backwards compatibility
     * breaking changes.
     *
     * @return Whether model getters and setters should be annotated to handle serialization.
     */
    public boolean isGettersAndSettersAnnotatedForSerialization() {
        return annotateGettersAndSettersForSerialization;
    }

    private final String defaultHttpExceptionType;

    /**
     * Gets the fully-qualified exception type that is used for error HTTP status codes.
     *
     * @return The fully-qualified exception type.
     */
    public String getDefaultHttpExceptionType() {
        return defaultHttpExceptionType;
    }

    private final boolean useDefaultHttpStatusCodeToExceptionTypeMapping;

    /**
     * Whether to use the default error HTTP status code to exception type mapping.
     *
     * @return Whether to use the default error HTTP status code to exception type mapping.
     */
    public boolean isUseDefaultHttpStatusCodeToExceptionTypeMapping() {
        return useDefaultHttpStatusCodeToExceptionTypeMapping;
    }

    private final Map<Integer, String> httpStatusCodeToExceptionTypeMapping;

    /**
     * Gets a read-only view of the custom error HTTP status code to exception type mapping.
     *
     * @return A read-only view of the custom error HTTP status code to exception type mapping.
     */
    public Map<Integer, String> getHttpStatusCodeToExceptionTypeMapping() {
        return httpStatusCodeToExceptionTypeMapping == null
            ? null : Collections.unmodifiableMap(httpStatusCodeToExceptionTypeMapping);
    }

    private final boolean generateBuilderPerClient;

    public boolean isGenerateBuilderPerClient() {
        return generateBuilderPerClient;
    }

    private final boolean handlePartialUpdate;

    public boolean isHandlePartialUpdate() {
        return handlePartialUpdate;
    }

    private final boolean genericResponseTypes;

    /**
     * Whether Response, ResponseBase, PagedResponse, or PagedResponseBase will be used directly with generics instead
     * of creating a named type that extends one of those type.
     *
     * @return Whether generic response types are used instead of named types that extend the generic type.
     */
    public boolean isGenericResponseTypes() {
        return genericResponseTypes;
    }

    private final boolean streamStyleSerialization;

    /**
     * Whether models will handle serialization themselves using stream-style serialization instead of relying on
     * Jackson Databind.
     *
     * @return Whether models will handle serialization themselves.
     */
    public boolean isStreamStyleSerialization() {
        return streamStyleSerialization;
    }

    private final boolean isInputStreamForBinary;

    /**
     * @return If true, return <code>InputStream</code> for binary in response body. If false, return <code>BinaryData</code>.
     */
    public boolean isInputStreamForBinary() {
        return isInputStreamForBinary;
    }

    private final boolean includeReadOnlyInConstructorArgs;

    /**
     * Whether required read-only properties will be included in constructor arguments.
     * <p>
     * In the past, required read-only properties were included in constructor arguments when
     * {@link #isRequiredFieldsAsConstructorArgs()} was true. This flag re-enables that capability when the property is
     * required and read-only and {@link #isRequiredFieldsAsConstructorArgs()} is true.
     * <p>
     * If this returns true but {@link #isRequiredFieldsAsConstructorArgs()} returns false this configuration does
     * nothing.
     *
     * @return Whether required read-only properties will be included in constructor arguments.
     */
    public boolean isIncludeReadOnlyInConstructorArgs() {
        return includeReadOnlyInConstructorArgs;
    }

    public boolean isUseKeyCredential() {
        return this.useKeyCredential;
    }

    private final boolean nullByteArrayMapsToEmptyArray;

    /**
     * Whether {@code ArrayType.BYTE_ARRAY} will return an empty array instead of null when the default value expression
     * is null.
     * <p>
     * Set this to true to ensure backwards compatibility with previous versions of the Java generator.
     *
     * @return Whether {@code ArrayType.BYTE_ARRAY} will return an empty array instead of null when the default value
     * expression is null.
     */
    public boolean isNullByteArrayMapsToEmptyArray() {
        return nullByteArrayMapsToEmptyArray;
    }

    private static final String DEFAULT_CODE_GENERATION_HEADER = String.join("\r\n",
        "Code generated by Microsoft (R) AutoRest Code Generator %s",
        "Changes may cause incorrect behavior and will be lost if the code is regenerated.");

    private static final String DEFAULT_CODE_GENERATION_HEADER_WITHOUT_VERSION = String.join("\r\n",
        "Code generated by Microsoft (R) AutoRest Code Generator.",
        "Changes may cause incorrect behavior and will be lost if the code is regenerated.");

    private static final String MICROSOFT_APACHE_LICENSE_HEADER = String.join("\r\n",
        "Copyright (c) Microsoft and contributors.  All rights reserved.\r\n",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "  https://www.apache.org/licenses/LICENSE-2.0\r\n",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "");

    private static final String MICROSOFT_MIT_LICENSE_HEADER = String.join("\r\n",
        "Copyright (c) Microsoft Corporation. All rights reserved.",
        "Licensed under the MIT License. See License.txt in the project root for license information.",
        "");

    private static final String MICROSOFT_MIT_SMALL_LICENSE_HEADER = String.join("\r\n",
        "Copyright (c) Microsoft Corporation. All rights reserved.",
        "Licensed under the MIT License.",
        "");

    private static void loadStringSetting(String settingName, Consumer<String> action) {
        String settingValue = host.getStringValue(settingName);
        if (settingValue != null) {
            logger.debug("Option, string, {} : {}", settingName, settingValue);
            action.accept(settingValue);
        }
    }

    private static String getStringValue(NewPlugin host, String settingName) {
        String value = host.getStringValue(settingName);
        if (value != null) {
            logger.debug("Option, string, {} : {}", settingName, value);
            SIMPLE_JAVA_SETTINGS.put(settingName, value);
        }
        return value;
    }

    private static String getStringValue(NewPlugin host, String settingName, String defaultValue) {
        String ret = host.getStringValue(settingName);
        if (ret == null) {
            return defaultValue;
        } else {
            logger.debug("Option, string, {} : {}", settingName, ret);
            SIMPLE_JAVA_SETTINGS.put(settingName, ret);
            return ret;
        }
    }

    private static boolean getBooleanValue(NewPlugin host, String settingName, boolean defaultValue) {
        Boolean ret = host.getBooleanValue(settingName);
        if (ret == null) {
            return defaultValue;
        } else {
            logger.debug("Option, boolean, {} : {}", settingName, ret);
            SIMPLE_JAVA_SETTINGS.put(settingName, ret);
            return ret;
        }
    }

    @SuppressWarnings("unchecked")
    private static void loadStringOrArraySettingAsArray(String settingName, Consumer<List<String>> action) {
        List<String> settingValues = new ArrayList<>();
        Object settingValue = host.getValue(Object.class, settingName);
        if (settingValue instanceof String) {
            logger.debug("Option, string, {} : {}", settingName, settingValue);
            settingValues.add(settingValue.toString());
        } else if (settingValue instanceof List) {
            List<String> settingValueList = (List<String>) settingValue;
            logger.debug("Option, array, {} : {}", settingName, settingValueList);
            settingValues.addAll(settingValueList);
        }
        if (!settingValues.isEmpty()) {
            action.accept(settingValues);
        }
    }
}
