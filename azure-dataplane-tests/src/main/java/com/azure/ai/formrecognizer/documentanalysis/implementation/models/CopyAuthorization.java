// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.documentanalysis.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Authorization to copy a document model to the specified target resource and modelId.
 */
@Fluent
public final class CopyAuthorization implements JsonSerializable<CopyAuthorization> {
    /*
     * ID of the target Azure resource where the document model should be copied to.
     */
    private String targetResourceId;

    /*
     * Location of the target Azure resource where the document model should be copied to.
     */
    private String targetResourceRegion;

    /*
     * Identifier of the target document model.
     */
    private String targetModelId;

    /*
     * URL of the copied document model in the target account.
     */
    private String targetModelLocation;

    /*
     * Token used to authorize the request.
     */
    private String accessToken;

    /*
     * Date/time when the access token expires.
     */
    private OffsetDateTime expirationDateTime;

    /**
     * Creates an instance of CopyAuthorization class.
     */
    public CopyAuthorization() {
    }

    /**
     * Get the targetResourceId property: ID of the target Azure resource where the document model should be copied to.
     * 
     * @return the targetResourceId value.
     */
    public String getTargetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Set the targetResourceId property: ID of the target Azure resource where the document model should be copied to.
     * 
     * @param targetResourceId the targetResourceId value to set.
     * @return the CopyAuthorization object itself.
     */
    public CopyAuthorization setTargetResourceId(String targetResourceId) {
        this.targetResourceId = targetResourceId;
        return this;
    }

    /**
     * Get the targetResourceRegion property: Location of the target Azure resource where the document model should be copied to.
     * 
     * @return the targetResourceRegion value.
     */
    public String getTargetResourceRegion() {
        return this.targetResourceRegion;
    }

    /**
     * Set the targetResourceRegion property: Location of the target Azure resource where the document model should be copied to.
     * 
     * @param targetResourceRegion the targetResourceRegion value to set.
     * @return the CopyAuthorization object itself.
     */
    public CopyAuthorization setTargetResourceRegion(String targetResourceRegion) {
        this.targetResourceRegion = targetResourceRegion;
        return this;
    }

    /**
     * Get the targetModelId property: Identifier of the target document model.
     * 
     * @return the targetModelId value.
     */
    public String getTargetModelId() {
        return this.targetModelId;
    }

    /**
     * Set the targetModelId property: Identifier of the target document model.
     * 
     * @param targetModelId the targetModelId value to set.
     * @return the CopyAuthorization object itself.
     */
    public CopyAuthorization setTargetModelId(String targetModelId) {
        this.targetModelId = targetModelId;
        return this;
    }

    /**
     * Get the targetModelLocation property: URL of the copied document model in the target account.
     * 
     * @return the targetModelLocation value.
     */
    public String getTargetModelLocation() {
        return this.targetModelLocation;
    }

    /**
     * Set the targetModelLocation property: URL of the copied document model in the target account.
     * 
     * @param targetModelLocation the targetModelLocation value to set.
     * @return the CopyAuthorization object itself.
     */
    public CopyAuthorization setTargetModelLocation(String targetModelLocation) {
        this.targetModelLocation = targetModelLocation;
        return this;
    }

    /**
     * Get the accessToken property: Token used to authorize the request.
     * 
     * @return the accessToken value.
     */
    public String getAccessToken() {
        return this.accessToken;
    }

    /**
     * Set the accessToken property: Token used to authorize the request.
     * 
     * @param accessToken the accessToken value to set.
     * @return the CopyAuthorization object itself.
     */
    public CopyAuthorization setAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Get the expirationDateTime property: Date/time when the access token expires.
     * 
     * @return the expirationDateTime value.
     */
    public OffsetDateTime getExpirationDateTime() {
        return this.expirationDateTime;
    }

    /**
     * Set the expirationDateTime property: Date/time when the access token expires.
     * 
     * @param expirationDateTime the expirationDateTime value to set.
     * @return the CopyAuthorization object itself.
     */
    public CopyAuthorization setExpirationDateTime(OffsetDateTime expirationDateTime) {
        this.expirationDateTime = expirationDateTime;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetResourceId", this.targetResourceId);
        jsonWriter.writeStringField("targetResourceRegion", this.targetResourceRegion);
        jsonWriter.writeStringField("targetModelId", this.targetModelId);
        jsonWriter.writeStringField("targetModelLocation", this.targetModelLocation);
        jsonWriter.writeStringField("accessToken", this.accessToken);
        jsonWriter.writeStringField("expirationDateTime",
            this.expirationDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDateTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CopyAuthorization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CopyAuthorization if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CopyAuthorization.
     */
    public static CopyAuthorization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CopyAuthorization deserializedCopyAuthorization = new CopyAuthorization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetResourceId".equals(fieldName)) {
                    deserializedCopyAuthorization.targetResourceId = reader.getString();
                } else if ("targetResourceRegion".equals(fieldName)) {
                    deserializedCopyAuthorization.targetResourceRegion = reader.getString();
                } else if ("targetModelId".equals(fieldName)) {
                    deserializedCopyAuthorization.targetModelId = reader.getString();
                } else if ("targetModelLocation".equals(fieldName)) {
                    deserializedCopyAuthorization.targetModelLocation = reader.getString();
                } else if ("accessToken".equals(fieldName)) {
                    deserializedCopyAuthorization.accessToken = reader.getString();
                } else if ("expirationDateTime".equals(fieldName)) {
                    deserializedCopyAuthorization.expirationDateTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCopyAuthorization;
        });
    }
}
