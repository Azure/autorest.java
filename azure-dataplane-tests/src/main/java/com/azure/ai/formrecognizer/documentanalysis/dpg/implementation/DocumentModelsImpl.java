// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.documentanalysis.dpg.implementation;

import com.azure.ai.formrecognizer.documentanalysis.dpg.FormRecognizerServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.DefaultPollingStrategy;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncDefaultPollingStrategy;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DocumentModels.
 */
public final class DocumentModelsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DocumentModelsService service;

    /**
     * The service client containing this operation class.
     */
    private final FormRecognizerClientImpl client;

    /**
     * Initializes an instance of DocumentModelsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DocumentModelsImpl(FormRecognizerClientImpl client) {
        this.service
            = RestProxy.create(DocumentModelsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public FormRecognizerServiceVersion getServiceVersion() {
        return client.getServiceVersion();
    }

    /**
     * The interface defining all the services for FormRecognizerClientDocumentModels to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}/formrecognizer")
    @ServiceInterface(name = "FormRecognizerClient")
    public interface DocumentModelsService {
        @Post("/documentModels/{modelId}:analyze")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> analyzeDocument(@HostParam("endpoint") String endpoint,
            @PathParam("modelId") String modelId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/documentModels/{modelId}:analyze")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> analyzeDocumentSync(@HostParam("endpoint") String endpoint, @PathParam("modelId") String modelId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/documentModels/{modelId}/analyzeResults/{resultId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getAnalyzeResult(@HostParam("endpoint") String endpoint,
            @PathParam("modelId") String modelId, @PathParam("resultId") String resultId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/documentModels/{modelId}/analyzeResults/{resultId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getAnalyzeResultSync(@HostParam("endpoint") String endpoint,
            @PathParam("modelId") String modelId, @PathParam("resultId") String resultId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/documentModels:build")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> buildModel(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BinaryData buildRequest,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/documentModels:build")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> buildModelSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BinaryData buildRequest,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/documentModels:compose")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> composeModel(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BinaryData composeRequest,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/documentModels:compose")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> composeModelSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BinaryData composeRequest,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/documentModels:authorizeCopy")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> authorizeModelCopy(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BinaryData authorizeCopyRequest, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/documentModels:authorizeCopy")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> authorizeModelCopySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BinaryData authorizeCopyRequest, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/documentModels/{modelId}:copyTo")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> copyModelTo(@HostParam("endpoint") String endpoint, @PathParam("modelId") String modelId,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BinaryData copyToRequest,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/documentModels/{modelId}:copyTo")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> copyModelToSync(@HostParam("endpoint") String endpoint, @PathParam("modelId") String modelId,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BinaryData copyToRequest,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/documentModels")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listModels(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/documentModels")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listModelsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/documentModels/{modelId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getModel(@HostParam("endpoint") String endpoint,
            @PathParam("modelId") String modelId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/documentModels/{modelId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getModelSync(@HostParam("endpoint") String endpoint, @PathParam("modelId") String modelId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/documentModels/{modelId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteModel(@HostParam("endpoint") String endpoint, @PathParam("modelId") String modelId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Delete("/documentModels/{modelId}")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteModelSync(@HostParam("endpoint") String endpoint, @PathParam("modelId") String modelId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listModelsNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);

        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listModelsNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, RequestOptions requestOptions,
            Context context);
    }

    /**
     * Analyzes document with document model.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>pages</td><td>String</td><td>No</td><td>List of 1-based page numbers to analyze. Ex.
     * "1-3,5,7-9"</td></tr>
     * <tr><td>locale</td><td>String</td><td>No</td><td>Locale hint for text recognition and document analysis. Value
     * may contain only the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").</td></tr>
     * <tr><td>stringIndexType</td><td>String</td><td>No</td><td>Method used to compute string offset and length.
     * Allowed values: "textElements", "unicodeCodePoint", "utf16CodeUnit".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param contentType Upload file type. Allowed values: "application/octet-stream", "application/pdf", "image/bmp",
     * "image/heif", "image/jpeg", "image/png", "image/tiff".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> analyzeDocumentWithResponseAsync(String modelId, String contentType,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.analyzeDocument(this.client.getEndpoint(), modelId,
            this.client.getServiceVersion().getVersion(), contentType, accept, requestOptions, context));
    }

    /**
     * Analyzes document with document model.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>pages</td><td>String</td><td>No</td><td>List of 1-based page numbers to analyze. Ex.
     * "1-3,5,7-9"</td></tr>
     * <tr><td>locale</td><td>String</td><td>No</td><td>Locale hint for text recognition and document analysis. Value
     * may contain only the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").</td></tr>
     * <tr><td>stringIndexType</td><td>String</td><td>No</td><td>Method used to compute string offset and length.
     * Allowed values: "textElements", "unicodeCodePoint", "utf16CodeUnit".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param contentType Upload file type. Allowed values: "application/octet-stream", "application/pdf", "image/bmp",
     * "image/heif", "image/jpeg", "image/png", "image/tiff".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> analyzeDocumentWithResponse(String modelId, String contentType,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.analyzeDocumentSync(this.client.getEndpoint(), modelId,
            this.client.getServiceVersion().getVersion(), contentType, accept, requestOptions, Context.NONE);
    }

    /**
     * Analyzes document with document model.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>pages</td><td>String</td><td>No</td><td>List of 1-based page numbers to analyze. Ex.
     * "1-3,5,7-9"</td></tr>
     * <tr><td>locale</td><td>String</td><td>No</td><td>Locale hint for text recognition and document analysis. Value
     * may contain only the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").</td></tr>
     * <tr><td>stringIndexType</td><td>String</td><td>No</td><td>Method used to compute string offset and length.
     * Allowed values: "textElements", "unicodeCodePoint", "utf16CodeUnit".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param contentType Upload file type. Allowed values: "application/octet-stream", "application/pdf", "image/bmp",
     * "image/heif", "image/jpeg", "image/png", "image/tiff".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginAnalyzeDocumentAsync(String modelId, String contentType,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.analyzeDocumentWithResponseAsync(modelId, contentType, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}/formrecognizer".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Analyzes document with document model.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>pages</td><td>String</td><td>No</td><td>List of 1-based page numbers to analyze. Ex.
     * "1-3,5,7-9"</td></tr>
     * <tr><td>locale</td><td>String</td><td>No</td><td>Locale hint for text recognition and document analysis. Value
     * may contain only the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").</td></tr>
     * <tr><td>stringIndexType</td><td>String</td><td>No</td><td>Method used to compute string offset and length.
     * Allowed values: "textElements", "unicodeCodePoint", "utf16CodeUnit".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param contentType Upload file type. Allowed values: "application/octet-stream", "application/pdf", "image/bmp",
     * "image/heif", "image/jpeg", "image/png", "image/tiff".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginAnalyzeDocument(String modelId, String contentType,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.analyzeDocumentWithResponse(modelId, contentType, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}/formrecognizer".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Gets the result of document analysis.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     status: String(notStarted/running/failed/succeeded) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Required)
     *             message: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     analyzeResult (Optional): {
     *         apiVersion: String(2022-08-31) (Required)
     *         modelId: String (Required)
     *         stringIndexType: String(textElements/unicodeCodePoint/utf16CodeUnit) (Required)
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 pageNumber: int (Required)
     *                 angle: Float (Optional)
     *                 width: Float (Optional)
     *                 height: Float (Optional)
     *                 unit: String(pixel/inch) (Optional)
     *                 spans (Required): [
     *                      (Required){
     *                         offset: int (Required)
     *                         length: int (Required)
     *                     }
     *                 ]
     *                 words (Optional): [
     *                      (Optional){
     *                         content: String (Required)
     *                         polygon (Optional): [
     *                             float (Optional)
     *                         ]
     *                         span (Required): (recursive schema, see span above)
     *                         confidence: float (Required)
     *                     }
     *                 ]
     *                 selectionMarks (Optional): [
     *                      (Optional){
     *                         state: String(selected/unselected) (Required)
     *                         polygon (Optional): [
     *                             float (Optional)
     *                         ]
     *                         span (Required): (recursive schema, see span above)
     *                         confidence: float (Required)
     *                     }
     *                 ]
     *                 lines (Optional): [
     *                      (Optional){
     *                         content: String (Required)
     *                         polygon (Optional): [
     *                             float (Optional)
     *                         ]
     *                         spans (Required): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         paragraphs (Optional): [
     *              (Optional){
     *                 role: String(pageHeader/pageFooter/pageNumber/title/sectionHeading/footnote) (Optional)
     *                 content: String (Required)
     *                 boundingRegions (Optional): [
     *                      (Optional){
     *                         pageNumber: int (Required)
     *                         polygon (Required): [
     *                             float (Required)
     *                         ]
     *                     }
     *                 ]
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         tables (Optional): [
     *              (Optional){
     *                 rowCount: int (Required)
     *                 columnCount: int (Required)
     *                 cells (Required): [
     *                      (Required){
     *                         kind: String(content/rowHeader/columnHeader/stubHead/description) (Optional)
     *                         rowIndex: int (Required)
     *                         columnIndex: int (Required)
     *                         rowSpan: Integer (Optional)
     *                         columnSpan: Integer (Optional)
     *                         content: String (Required)
     *                         boundingRegions (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         spans (Required): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                 ]
     *                 boundingRegions (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         keyValuePairs (Optional): [
     *              (Optional){
     *                 key (Required): {
     *                     content: String (Required)
     *                     boundingRegions (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     spans (Required): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 value (Optional): (recursive schema, see value above)
     *                 confidence: float (Required)
     *             }
     *         ]
     *         styles (Optional): [
     *              (Optional){
     *                 isHandwritten: Boolean (Optional)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 confidence: float (Required)
     *             }
     *         ]
     *         languages (Optional): [
     *              (Optional){
     *                 locale: String (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 confidence: float (Required)
     *             }
     *         ]
     *         documents (Optional): [
     *              (Optional){
     *                 docType: String (Required)
     *                 boundingRegions (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 fields (Optional): {
     *                     String (Required): {
     *                         type: String(string/date/time/phoneNumber/number/integer/selectionMark/countryRegion/signature/array/object/currency/address) (Required)
     *                         valueString: String (Optional)
     *                         valueDate: String (Optional)
     *                         valueTime: String (Optional)
     *                         valuePhoneNumber: String (Optional)
     *                         valueNumber: Float (Optional)
     *                         valueInteger: Long (Optional)
     *                         valueSelectionMark: String(selected/unselected) (Optional)
     *                         valueSignature: String(signed/unsigned) (Optional)
     *                         valueCountryRegion: String (Optional)
     *                         valueArray (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         valueObject (Optional): {
     *                             String (Required): (recursive schema, see String above)
     *                         }
     *                         valueCurrency (Optional): {
     *                             amount: double (Required)
     *                             currencySymbol: String (Optional)
     *                         }
     *                         valueAddress (Optional): {
     *                             houseNumber: String (Optional)
     *                             poBox: String (Optional)
     *                             road: String (Optional)
     *                             city: String (Optional)
     *                             state: String (Optional)
     *                             postalCode: String (Optional)
     *                             countryRegion: String (Optional)
     *                             streetAddress: String (Optional)
     *                         }
     *                         content: String (Optional)
     *                         boundingRegions (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         spans (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         confidence: Float (Optional)
     *                     }
     *                 }
     *                 confidence: float (Required)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of document analysis along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getAnalyzeResultWithResponseAsync(String modelId, String resultId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getAnalyzeResult(this.client.getEndpoint(), modelId, resultId,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Gets the result of document analysis.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     status: String(notStarted/running/failed/succeeded) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Required)
     *             message: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     analyzeResult (Optional): {
     *         apiVersion: String(2022-08-31) (Required)
     *         modelId: String (Required)
     *         stringIndexType: String(textElements/unicodeCodePoint/utf16CodeUnit) (Required)
     *         content: String (Required)
     *         pages (Required): [
     *              (Required){
     *                 pageNumber: int (Required)
     *                 angle: Float (Optional)
     *                 width: Float (Optional)
     *                 height: Float (Optional)
     *                 unit: String(pixel/inch) (Optional)
     *                 spans (Required): [
     *                      (Required){
     *                         offset: int (Required)
     *                         length: int (Required)
     *                     }
     *                 ]
     *                 words (Optional): [
     *                      (Optional){
     *                         content: String (Required)
     *                         polygon (Optional): [
     *                             float (Optional)
     *                         ]
     *                         span (Required): (recursive schema, see span above)
     *                         confidence: float (Required)
     *                     }
     *                 ]
     *                 selectionMarks (Optional): [
     *                      (Optional){
     *                         state: String(selected/unselected) (Required)
     *                         polygon (Optional): [
     *                             float (Optional)
     *                         ]
     *                         span (Required): (recursive schema, see span above)
     *                         confidence: float (Required)
     *                     }
     *                 ]
     *                 lines (Optional): [
     *                      (Optional){
     *                         content: String (Required)
     *                         polygon (Optional): [
     *                             float (Optional)
     *                         ]
     *                         spans (Required): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                 ]
     *             }
     *         ]
     *         paragraphs (Optional): [
     *              (Optional){
     *                 role: String(pageHeader/pageFooter/pageNumber/title/sectionHeading/footnote) (Optional)
     *                 content: String (Required)
     *                 boundingRegions (Optional): [
     *                      (Optional){
     *                         pageNumber: int (Required)
     *                         polygon (Required): [
     *                             float (Required)
     *                         ]
     *                     }
     *                 ]
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         tables (Optional): [
     *              (Optional){
     *                 rowCount: int (Required)
     *                 columnCount: int (Required)
     *                 cells (Required): [
     *                      (Required){
     *                         kind: String(content/rowHeader/columnHeader/stubHead/description) (Optional)
     *                         rowIndex: int (Required)
     *                         columnIndex: int (Required)
     *                         rowSpan: Integer (Optional)
     *                         columnSpan: Integer (Optional)
     *                         content: String (Required)
     *                         boundingRegions (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         spans (Required): [
     *                             (recursive schema, see above)
     *                         ]
     *                     }
     *                 ]
     *                 boundingRegions (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *             }
     *         ]
     *         keyValuePairs (Optional): [
     *              (Optional){
     *                 key (Required): {
     *                     content: String (Required)
     *                     boundingRegions (Optional): [
     *                         (recursive schema, see above)
     *                     ]
     *                     spans (Required): [
     *                         (recursive schema, see above)
     *                     ]
     *                 }
     *                 value (Optional): (recursive schema, see value above)
     *                 confidence: float (Required)
     *             }
     *         ]
     *         styles (Optional): [
     *              (Optional){
     *                 isHandwritten: Boolean (Optional)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 confidence: float (Required)
     *             }
     *         ]
     *         languages (Optional): [
     *              (Optional){
     *                 locale: String (Required)
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 confidence: float (Required)
     *             }
     *         ]
     *         documents (Optional): [
     *              (Optional){
     *                 docType: String (Required)
     *                 boundingRegions (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 spans (Required): [
     *                     (recursive schema, see above)
     *                 ]
     *                 fields (Optional): {
     *                     String (Required): {
     *                         type: String(string/date/time/phoneNumber/number/integer/selectionMark/countryRegion/signature/array/object/currency/address) (Required)
     *                         valueString: String (Optional)
     *                         valueDate: String (Optional)
     *                         valueTime: String (Optional)
     *                         valuePhoneNumber: String (Optional)
     *                         valueNumber: Float (Optional)
     *                         valueInteger: Long (Optional)
     *                         valueSelectionMark: String(selected/unselected) (Optional)
     *                         valueSignature: String(signed/unsigned) (Optional)
     *                         valueCountryRegion: String (Optional)
     *                         valueArray (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         valueObject (Optional): {
     *                             String (Required): (recursive schema, see String above)
     *                         }
     *                         valueCurrency (Optional): {
     *                             amount: double (Required)
     *                             currencySymbol: String (Optional)
     *                         }
     *                         valueAddress (Optional): {
     *                             houseNumber: String (Optional)
     *                             poBox: String (Optional)
     *                             road: String (Optional)
     *                             city: String (Optional)
     *                             state: String (Optional)
     *                             postalCode: String (Optional)
     *                             countryRegion: String (Optional)
     *                             streetAddress: String (Optional)
     *                         }
     *                         content: String (Optional)
     *                         boundingRegions (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         spans (Optional): [
     *                             (recursive schema, see above)
     *                         ]
     *                         confidence: Float (Optional)
     *                     }
     *                 }
     *                 confidence: float (Required)
     *             }
     *         ]
     *     }
     * }
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of document analysis along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAnalyzeResultWithResponse(String modelId, String resultId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getAnalyzeResultSync(this.client.getEndpoint(), modelId, resultId,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
    }

    /**
     * Builds a custom document analysis model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     buildMode: String(template/neural) (Required)
     *     azureBlobSource (Optional): {
     *         containerUrl: String (Required)
     *         prefix: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param buildRequest Building request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> buildModelWithResponseAsync(BinaryData buildRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.buildModel(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), buildRequest, accept, requestOptions, context));
    }

    /**
     * Builds a custom document analysis model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     buildMode: String(template/neural) (Required)
     *     azureBlobSource (Optional): {
     *         containerUrl: String (Required)
     *         prefix: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param buildRequest Building request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> buildModelWithResponse(BinaryData buildRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.buildModelSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            buildRequest, accept, requestOptions, Context.NONE);
    }

    /**
     * Builds a custom document analysis model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     buildMode: String(template/neural) (Required)
     *     azureBlobSource (Optional): {
     *         containerUrl: String (Required)
     *         prefix: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param buildRequest Building request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginBuildModelAsync(BinaryData buildRequest,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.buildModelWithResponseAsync(buildRequest, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}/formrecognizer".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Builds a custom document analysis model.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     buildMode: String(template/neural) (Required)
     *     azureBlobSource (Optional): {
     *         containerUrl: String (Required)
     *         prefix: String (Optional)
     *     }
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param buildRequest Building request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginBuildModel(BinaryData buildRequest, RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.buildModelWithResponse(buildRequest, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}/formrecognizer".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Creates a new document model from document types of existing document models.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     componentModels (Required): [
     *          (Required){
     *             modelId: String (Required)
     *         }
     *     ]
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param composeRequest Compose request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> composeModelWithResponseAsync(BinaryData composeRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.composeModel(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), composeRequest, accept, requestOptions, context));
    }

    /**
     * Creates a new document model from document types of existing document models.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     componentModels (Required): [
     *          (Required){
     *             modelId: String (Required)
     *         }
     *     ]
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param composeRequest Compose request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> composeModelWithResponse(BinaryData composeRequest, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.composeModelSync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            composeRequest, accept, requestOptions, Context.NONE);
    }

    /**
     * Creates a new document model from document types of existing document models.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     componentModels (Required): [
     *          (Required){
     *             modelId: String (Required)
     *         }
     *     ]
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param composeRequest Compose request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginComposeModelAsync(BinaryData composeRequest,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.composeModelWithResponseAsync(composeRequest, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}/formrecognizer".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Creates a new document model from document types of existing document models.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     componentModels (Required): [
     *          (Required){
     *             modelId: String (Required)
     *         }
     *     ]
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param composeRequest Compose request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginComposeModel(BinaryData composeRequest,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.composeModelWithResponse(composeRequest, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}/formrecognizer".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Generates authorization to copy a document model to this location with specified modelId and optional
     * description.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     *     targetModelId: String (Required)
     *     targetModelLocation: String (Required)
     *     accessToken: String (Required)
     *     expirationDateTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param authorizeCopyRequest Authorize copy request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return authorization to copy a document model to the specified target resource and modelId along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> authorizeModelCopyWithResponseAsync(BinaryData authorizeCopyRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.authorizeModelCopy(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), authorizeCopyRequest, accept, requestOptions, context));
    }

    /**
     * Generates authorization to copy a document model to this location with specified modelId and optional
     * description.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     *     targetModelId: String (Required)
     *     targetModelLocation: String (Required)
     *     accessToken: String (Required)
     *     expirationDateTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param authorizeCopyRequest Authorize copy request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return authorization to copy a document model to the specified target resource and modelId along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> authorizeModelCopyWithResponse(BinaryData authorizeCopyRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.authorizeModelCopySync(this.client.getEndpoint(), this.client.getServiceVersion().getVersion(),
            authorizeCopyRequest, accept, requestOptions, Context.NONE);
    }

    /**
     * Copies document model to the target resource, region, and modelId.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     *     targetModelId: String (Required)
     *     targetModelLocation: String (Required)
     *     accessToken: String (Required)
     *     expirationDateTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param copyToRequest Copy to request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> copyModelToWithResponseAsync(String modelId, BinaryData copyToRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.copyModelTo(this.client.getEndpoint(), modelId,
            this.client.getServiceVersion().getVersion(), copyToRequest, accept, requestOptions, context));
    }

    /**
     * Copies document model to the target resource, region, and modelId.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     *     targetModelId: String (Required)
     *     targetModelLocation: String (Required)
     *     accessToken: String (Required)
     *     expirationDateTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param copyToRequest Copy to request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<Void> copyModelToWithResponse(String modelId, BinaryData copyToRequest,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.copyModelToSync(this.client.getEndpoint(), modelId, this.client.getServiceVersion().getVersion(),
            copyToRequest, accept, requestOptions, Context.NONE);
    }

    /**
     * Copies document model to the target resource, region, and modelId.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     *     targetModelId: String (Required)
     *     targetModelLocation: String (Required)
     *     accessToken: String (Required)
     *     expirationDateTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param copyToRequest Copy to request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginCopyModelToAsync(String modelId, BinaryData copyToRequest,
        RequestOptions requestOptions) {
        return PollerFlux.create(Duration.ofSeconds(1),
            () -> this.copyModelToWithResponseAsync(modelId, copyToRequest, requestOptions),
            new DefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}/formrecognizer".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Copies document model to the target resource, region, and modelId.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     targetResourceId: String (Required)
     *     targetResourceRegion: String (Required)
     *     targetModelId: String (Required)
     *     targetModelLocation: String (Required)
     *     accessToken: String (Required)
     *     expirationDateTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param copyToRequest Copy to request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginCopyModelTo(String modelId, BinaryData copyToRequest,
        RequestOptions requestOptions) {
        return SyncPoller.createPoller(Duration.ofSeconds(1),
            () -> this.copyModelToWithResponse(modelId, copyToRequest, requestOptions),
            new SyncDefaultPollingStrategy<>(new PollingStrategyOptions(this.client.getHttpPipeline())
                .setEndpoint("{endpoint}/formrecognizer".replace("{endpoint}", this.client.getEndpoint()))
                .setContext(requestOptions != null && requestOptions.getContext() != null
                    ? requestOptions.getContext()
                    : Context.NONE)
                .setServiceVersion(this.client.getServiceVersion().getVersion())),
            TypeReference.createInstance(BinaryData.class), TypeReference.createInstance(BinaryData.class));
    }

    /**
     * List all document models.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     apiVersion: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list document models response object along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listModelsSinglePageAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listModels(this.client.getEndpoint(),
                this.client.getServiceVersion().getVersion(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * List all document models.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     apiVersion: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list document models response object as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listModelsAsync(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedFlux<>(() -> listModelsSinglePageAsync(requestOptions),
            nextLink -> listModelsNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * List all document models.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     apiVersion: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list document models response object along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listModelsSinglePage(RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res = service.listModelsSync(this.client.getEndpoint(),
            this.client.getServiceVersion().getVersion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    /**
     * List all document models.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     apiVersion: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list document models response object as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listModels(RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
            requestOptions != null && requestOptions.getContext() != null ? requestOptions.getContext() : Context.NONE);
        return new PagedIterable<>(() -> listModelsSinglePage(requestOptions),
            nextLink -> listModelsNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets detailed document model information.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     apiVersion: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     docTypes (Optional): {
     *         String (Required): {
     *             description: String (Optional)
     *             buildMode: String(template/neural) (Optional)
     *             fieldSchema (Required): {
     *                 String (Required): {
     *                     type: String(string/date/time/phoneNumber/number/integer/selectionMark/countryRegion/signature/array/object/currency/address) (Required)
     *                     description: String (Optional)
     *                     example: String (Optional)
     *                     items (Optional): (recursive schema, see items above)
     *                     properties (Optional): {
     *                         String (Required): (recursive schema, see String above)
     *                     }
     *                 }
     *             }
     *             fieldConfidence (Optional): {
     *                 String: float (Required)
     *             }
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detailed document model information along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getModelWithResponseAsync(String modelId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getModel(this.client.getEndpoint(), modelId,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Gets detailed document model information.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     apiVersion: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     *     docTypes (Optional): {
     *         String (Required): {
     *             description: String (Optional)
     *             buildMode: String(template/neural) (Optional)
     *             fieldSchema (Required): {
     *                 String (Required): {
     *                     type: String(string/date/time/phoneNumber/number/integer/selectionMark/countryRegion/signature/array/object/currency/address) (Required)
     *                     description: String (Optional)
     *                     example: String (Optional)
     *                     items (Optional): (recursive schema, see items above)
     *                     properties (Optional): {
     *                         String (Required): (recursive schema, see String above)
     *                     }
     *                 }
     *             }
     *             fieldConfidence (Optional): {
     *                 String: float (Required)
     *             }
     *         }
     *     }
     * }
     * }</pre>
     * 
     * @param modelId Unique document model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return detailed document model information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getModelWithResponse(String modelId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getModelSync(this.client.getEndpoint(), modelId, this.client.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * Deletes document model.
     * 
     * @param modelId Unique document model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteModelWithResponseAsync(String modelId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteModel(this.client.getEndpoint(), modelId,
            this.client.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Deletes document model.
     * 
     * @param modelId Unique document model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteModelWithResponse(String modelId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteModelSync(this.client.getEndpoint(), modelId, this.client.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     apiVersion: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list document models response object along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listModelsNextSinglePageAsync(String nextLink,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listModelsNext(nextLink, this.client.getEndpoint(), accept, requestOptions, context))
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null));
    }

    /**
     * Get the next page of items.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     modelId: String (Required)
     *     description: String (Optional)
     *     createdDateTime: OffsetDateTime (Required)
     *     apiVersion: String (Optional)
     *     tags (Optional): {
     *         String: String (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param nextLink The URL to get the next list of items.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return list document models response object along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listModelsNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res
            = service.listModelsNextSync(nextLink, this.client.getEndpoint(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
            getValues(res.getValue(), "value"), getNextLink(res.getValue(), "nextLink"), null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
