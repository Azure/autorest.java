// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.documentanalysis.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An object representing observed text styles.
 */
@Fluent
public final class DocumentStyle implements JsonSerializable<DocumentStyle> {
    /*
     * Is content handwritten?
     */
    private Boolean isHandwritten;

    /*
     * Location of the text elements in the concatenated content the style applies to.
     */
    private List<DocumentSpan> spans;

    /*
     * Confidence of correctly identifying the style.
     */
    private float confidence;

    /**
     * Creates an instance of DocumentStyle class.
     */
    public DocumentStyle() {
    }

    /**
     * Get the isHandwritten property: Is content handwritten?.
     * 
     * @return the isHandwritten value.
     */
    public Boolean isHandwritten() {
        return this.isHandwritten;
    }

    /**
     * Set the isHandwritten property: Is content handwritten?.
     * 
     * @param isHandwritten the isHandwritten value to set.
     * @return the DocumentStyle object itself.
     */
    public DocumentStyle setIsHandwritten(Boolean isHandwritten) {
        this.isHandwritten = isHandwritten;
        return this;
    }

    /**
     * Get the spans property: Location of the text elements in the concatenated content the style applies to.
     * 
     * @return the spans value.
     */
    public List<DocumentSpan> getSpans() {
        return this.spans;
    }

    /**
     * Set the spans property: Location of the text elements in the concatenated content the style applies to.
     * 
     * @param spans the spans value to set.
     * @return the DocumentStyle object itself.
     */
    public DocumentStyle setSpans(List<DocumentSpan> spans) {
        this.spans = spans;
        return this;
    }

    /**
     * Get the confidence property: Confidence of correctly identifying the style.
     * 
     * @return the confidence value.
     */
    public float getConfidence() {
        return this.confidence;
    }

    /**
     * Set the confidence property: Confidence of correctly identifying the style.
     * 
     * @param confidence the confidence value to set.
     * @return the DocumentStyle object itself.
     */
    public DocumentStyle setConfidence(float confidence) {
        this.confidence = confidence;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("spans", this.spans, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeFloatField("confidence", this.confidence);
        jsonWriter.writeBooleanField("isHandwritten", this.isHandwritten);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentStyle from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentStyle if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentStyle.
     */
    public static DocumentStyle fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentStyle deserializedDocumentStyle = new DocumentStyle();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("spans".equals(fieldName)) {
                    List<DocumentSpan> spans = reader.readArray(reader1 -> DocumentSpan.fromJson(reader1));
                    deserializedDocumentStyle.spans = spans;
                } else if ("confidence".equals(fieldName)) {
                    deserializedDocumentStyle.confidence = reader.getFloat();
                } else if ("isHandwritten".equals(fieldName)) {
                    deserializedDocumentStyle.isHandwritten = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocumentStyle;
        });
    }
}
