// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.documentanalysis.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Content and layout elements extracted from a page from the input.
 */
@Fluent
public final class DocumentPage implements JsonSerializable<DocumentPage> {
    /*
     * 1-based page number in the input document.
     */
    private int pageNumber;

    /*
     * The general orientation of the content in clockwise direction, measured in degrees between (-180, 180].
     */
    private Float angle;

    /*
     * The width of the image/PDF in pixels/inches, respectively.
     */
    private Float width;

    /*
     * The height of the image/PDF in pixels/inches, respectively.
     */
    private Float height;

    /*
     * The unit used by the width, height, and polygon properties. For images, the unit is "pixel". For PDF, the unit is
     * "inch".
     */
    private LengthUnit unit;

    /*
     * Location of the page in the reading order concatenated content.
     */
    private List<DocumentSpan> spans;

    /*
     * Extracted words from the page.
     */
    private List<DocumentWord> words;

    /*
     * Extracted selection marks from the page.
     */
    private List<DocumentSelectionMark> selectionMarks;

    /*
     * Extracted lines from the page, potentially containing both textual and visual elements.
     */
    private List<DocumentLine> lines;

    /**
     * Creates an instance of DocumentPage class.
     */
    public DocumentPage() {
    }

    /**
     * Get the pageNumber property: 1-based page number in the input document.
     * 
     * @return the pageNumber value.
     */
    public int getPageNumber() {
        return this.pageNumber;
    }

    /**
     * Set the pageNumber property: 1-based page number in the input document.
     * 
     * @param pageNumber the pageNumber value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setPageNumber(int pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }

    /**
     * Get the angle property: The general orientation of the content in clockwise direction, measured in degrees
     * between (-180, 180].
     * 
     * @return the angle value.
     */
    public Float getAngle() {
        return this.angle;
    }

    /**
     * Set the angle property: The general orientation of the content in clockwise direction, measured in degrees
     * between (-180, 180].
     * 
     * @param angle the angle value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setAngle(Float angle) {
        this.angle = angle;
        return this;
    }

    /**
     * Get the width property: The width of the image/PDF in pixels/inches, respectively.
     * 
     * @return the width value.
     */
    public Float getWidth() {
        return this.width;
    }

    /**
     * Set the width property: The width of the image/PDF in pixels/inches, respectively.
     * 
     * @param width the width value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setWidth(Float width) {
        this.width = width;
        return this;
    }

    /**
     * Get the height property: The height of the image/PDF in pixels/inches, respectively.
     * 
     * @return the height value.
     */
    public Float getHeight() {
        return this.height;
    }

    /**
     * Set the height property: The height of the image/PDF in pixels/inches, respectively.
     * 
     * @param height the height value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setHeight(Float height) {
        this.height = height;
        return this;
    }

    /**
     * Get the unit property: The unit used by the width, height, and polygon properties. For images, the unit is
     * "pixel". For PDF, the unit is "inch".
     * 
     * @return the unit value.
     */
    public LengthUnit getUnit() {
        return this.unit;
    }

    /**
     * Set the unit property: The unit used by the width, height, and polygon properties. For images, the unit is
     * "pixel". For PDF, the unit is "inch".
     * 
     * @param unit the unit value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setUnit(LengthUnit unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the spans property: Location of the page in the reading order concatenated content.
     * 
     * @return the spans value.
     */
    public List<DocumentSpan> getSpans() {
        return this.spans;
    }

    /**
     * Set the spans property: Location of the page in the reading order concatenated content.
     * 
     * @param spans the spans value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setSpans(List<DocumentSpan> spans) {
        this.spans = spans;
        return this;
    }

    /**
     * Get the words property: Extracted words from the page.
     * 
     * @return the words value.
     */
    public List<DocumentWord> getWords() {
        return this.words;
    }

    /**
     * Set the words property: Extracted words from the page.
     * 
     * @param words the words value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setWords(List<DocumentWord> words) {
        this.words = words;
        return this;
    }

    /**
     * Get the selectionMarks property: Extracted selection marks from the page.
     * 
     * @return the selectionMarks value.
     */
    public List<DocumentSelectionMark> getSelectionMarks() {
        return this.selectionMarks;
    }

    /**
     * Set the selectionMarks property: Extracted selection marks from the page.
     * 
     * @param selectionMarks the selectionMarks value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setSelectionMarks(List<DocumentSelectionMark> selectionMarks) {
        this.selectionMarks = selectionMarks;
        return this;
    }

    /**
     * Get the lines property: Extracted lines from the page, potentially containing both textual and visual elements.
     * 
     * @return the lines value.
     */
    public List<DocumentLine> getLines() {
        return this.lines;
    }

    /**
     * Set the lines property: Extracted lines from the page, potentially containing both textual and visual elements.
     * 
     * @param lines the lines value to set.
     * @return the DocumentPage object itself.
     */
    public DocumentPage setLines(List<DocumentLine> lines) {
        this.lines = lines;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("pageNumber", this.pageNumber);
        jsonWriter.writeArrayField("spans", this.spans, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeNumberField("angle", this.angle);
        jsonWriter.writeNumberField("width", this.width);
        jsonWriter.writeNumberField("height", this.height);
        jsonWriter.writeStringField("unit", this.unit == null ? null : this.unit.toString());
        jsonWriter.writeArrayField("words", this.words, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("selectionMarks", this.selectionMarks,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("lines", this.lines, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentPage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentPage if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentPage.
     */
    public static DocumentPage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentPage deserializedDocumentPage = new DocumentPage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("pageNumber".equals(fieldName)) {
                    deserializedDocumentPage.pageNumber = reader.getInt();
                } else if ("spans".equals(fieldName)) {
                    List<DocumentSpan> spans = reader.readArray(reader1 -> DocumentSpan.fromJson(reader1));
                    deserializedDocumentPage.spans = spans;
                } else if ("angle".equals(fieldName)) {
                    deserializedDocumentPage.angle = reader.getNullable(JsonReader::getFloat);
                } else if ("width".equals(fieldName)) {
                    deserializedDocumentPage.width = reader.getNullable(JsonReader::getFloat);
                } else if ("height".equals(fieldName)) {
                    deserializedDocumentPage.height = reader.getNullable(JsonReader::getFloat);
                } else if ("unit".equals(fieldName)) {
                    deserializedDocumentPage.unit = LengthUnit.fromString(reader.getString());
                } else if ("words".equals(fieldName)) {
                    List<DocumentWord> words = reader.readArray(reader1 -> DocumentWord.fromJson(reader1));
                    deserializedDocumentPage.words = words;
                } else if ("selectionMarks".equals(fieldName)) {
                    List<DocumentSelectionMark> selectionMarks
                        = reader.readArray(reader1 -> DocumentSelectionMark.fromJson(reader1));
                    deserializedDocumentPage.selectionMarks = selectionMarks;
                } else if ("lines".equals(fieldName)) {
                    List<DocumentLine> lines = reader.readArray(reader1 -> DocumentLine.fromJson(reader1));
                    deserializedDocumentPage.lines = lines;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocumentPage;
        });
    }
}
