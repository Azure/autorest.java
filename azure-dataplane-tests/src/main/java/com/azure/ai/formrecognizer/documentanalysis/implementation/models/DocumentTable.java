// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.documentanalysis.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A table object consisting table cells arranged in a rectangular layout.
 */
@Fluent
public final class DocumentTable implements JsonSerializable<DocumentTable> {
    /*
     * Number of rows in the table.
     */
    @Generated
    private int rowCount;

    /*
     * Number of columns in the table.
     */
    @Generated
    private int columnCount;

    /*
     * Cells contained within the table.
     */
    @Generated
    private List<DocumentTableCell> cells;

    /*
     * Bounding regions covering the table.
     */
    @Generated
    private List<BoundingRegion> boundingRegions;

    /*
     * Location of the table in the reading order concatenated content.
     */
    @Generated
    private List<DocumentSpan> spans;

    /**
     * Creates an instance of DocumentTable class.
     */
    @Generated
    public DocumentTable() {
    }

    /**
     * Get the rowCount property: Number of rows in the table.
     * 
     * @return the rowCount value.
     */
    @Generated
    public int getRowCount() {
        return this.rowCount;
    }

    /**
     * Set the rowCount property: Number of rows in the table.
     * 
     * @param rowCount the rowCount value to set.
     * @return the DocumentTable object itself.
     */
    @Generated
    public DocumentTable setRowCount(int rowCount) {
        this.rowCount = rowCount;
        return this;
    }

    /**
     * Get the columnCount property: Number of columns in the table.
     * 
     * @return the columnCount value.
     */
    @Generated
    public int getColumnCount() {
        return this.columnCount;
    }

    /**
     * Set the columnCount property: Number of columns in the table.
     * 
     * @param columnCount the columnCount value to set.
     * @return the DocumentTable object itself.
     */
    @Generated
    public DocumentTable setColumnCount(int columnCount) {
        this.columnCount = columnCount;
        return this;
    }

    /**
     * Get the cells property: Cells contained within the table.
     * 
     * @return the cells value.
     */
    @Generated
    public List<DocumentTableCell> getCells() {
        return this.cells;
    }

    /**
     * Set the cells property: Cells contained within the table.
     * 
     * @param cells the cells value to set.
     * @return the DocumentTable object itself.
     */
    @Generated
    public DocumentTable setCells(List<DocumentTableCell> cells) {
        this.cells = cells;
        return this;
    }

    /**
     * Get the boundingRegions property: Bounding regions covering the table.
     * 
     * @return the boundingRegions value.
     */
    @Generated
    public List<BoundingRegion> getBoundingRegions() {
        return this.boundingRegions;
    }

    /**
     * Set the boundingRegions property: Bounding regions covering the table.
     * 
     * @param boundingRegions the boundingRegions value to set.
     * @return the DocumentTable object itself.
     */
    @Generated
    public DocumentTable setBoundingRegions(List<BoundingRegion> boundingRegions) {
        this.boundingRegions = boundingRegions;
        return this;
    }

    /**
     * Get the spans property: Location of the table in the reading order concatenated content.
     * 
     * @return the spans value.
     */
    @Generated
    public List<DocumentSpan> getSpans() {
        return this.spans;
    }

    /**
     * Set the spans property: Location of the table in the reading order concatenated content.
     * 
     * @param spans the spans value to set.
     * @return the DocumentTable object itself.
     */
    @Generated
    public DocumentTable setSpans(List<DocumentSpan> spans) {
        this.spans = spans;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("rowCount", this.rowCount);
        jsonWriter.writeIntField("columnCount", this.columnCount);
        jsonWriter.writeArrayField("cells", this.cells, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("spans", this.spans, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("boundingRegions", this.boundingRegions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentTable from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentTable if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentTable.
     */
    @Generated
    public static DocumentTable fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentTable deserializedDocumentTable = new DocumentTable();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rowCount".equals(fieldName)) {
                    deserializedDocumentTable.rowCount = reader.getInt();
                } else if ("columnCount".equals(fieldName)) {
                    deserializedDocumentTable.columnCount = reader.getInt();
                } else if ("cells".equals(fieldName)) {
                    List<DocumentTableCell> cells = reader.readArray(reader1 -> DocumentTableCell.fromJson(reader1));
                    deserializedDocumentTable.cells = cells;
                } else if ("spans".equals(fieldName)) {
                    List<DocumentSpan> spans = reader.readArray(reader1 -> DocumentSpan.fromJson(reader1));
                    deserializedDocumentTable.spans = spans;
                } else if ("boundingRegions".equals(fieldName)) {
                    List<BoundingRegion> boundingRegions
                        = reader.readArray(reader1 -> BoundingRegion.fromJson(reader1));
                    deserializedDocumentTable.boundingRegions = boundingRegions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocumentTable;
        });
    }
}
