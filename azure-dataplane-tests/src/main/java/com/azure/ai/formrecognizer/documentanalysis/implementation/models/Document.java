// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.documentanalysis.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * An object describing the location and semantic content of a document.
 */
@Fluent
public final class Document implements JsonSerializable<Document> {
    /*
     * Document type.
     */
    @Generated
    private String docType;

    /*
     * Bounding regions covering the document.
     */
    @Generated
    private List<BoundingRegion> boundingRegions;

    /*
     * Location of the document in the reading order concatenated content.
     */
    @Generated
    private List<DocumentSpan> spans;

    /*
     * Dictionary of named field values.
     */
    @Generated
    private Map<String, DocumentField> fields;

    /*
     * Confidence of correctly extracting the document.
     */
    @Generated
    private float confidence;

    /**
     * Creates an instance of Document class.
     */
    @Generated
    public Document() {
    }

    /**
     * Get the docType property: Document type.
     * 
     * @return the docType value.
     */
    @Generated
    public String getDocType() {
        return this.docType;
    }

    /**
     * Set the docType property: Document type.
     * 
     * @param docType the docType value to set.
     * @return the Document object itself.
     */
    @Generated
    public Document setDocType(String docType) {
        this.docType = docType;
        return this;
    }

    /**
     * Get the boundingRegions property: Bounding regions covering the document.
     * 
     * @return the boundingRegions value.
     */
    @Generated
    public List<BoundingRegion> getBoundingRegions() {
        return this.boundingRegions;
    }

    /**
     * Set the boundingRegions property: Bounding regions covering the document.
     * 
     * @param boundingRegions the boundingRegions value to set.
     * @return the Document object itself.
     */
    @Generated
    public Document setBoundingRegions(List<BoundingRegion> boundingRegions) {
        this.boundingRegions = boundingRegions;
        return this;
    }

    /**
     * Get the spans property: Location of the document in the reading order concatenated content.
     * 
     * @return the spans value.
     */
    @Generated
    public List<DocumentSpan> getSpans() {
        return this.spans;
    }

    /**
     * Set the spans property: Location of the document in the reading order concatenated content.
     * 
     * @param spans the spans value to set.
     * @return the Document object itself.
     */
    @Generated
    public Document setSpans(List<DocumentSpan> spans) {
        this.spans = spans;
        return this;
    }

    /**
     * Get the fields property: Dictionary of named field values.
     * 
     * @return the fields value.
     */
    @Generated
    public Map<String, DocumentField> getFields() {
        return this.fields;
    }

    /**
     * Set the fields property: Dictionary of named field values.
     * 
     * @param fields the fields value to set.
     * @return the Document object itself.
     */
    @Generated
    public Document setFields(Map<String, DocumentField> fields) {
        this.fields = fields;
        return this;
    }

    /**
     * Get the confidence property: Confidence of correctly extracting the document.
     * 
     * @return the confidence value.
     */
    @Generated
    public float getConfidence() {
        return this.confidence;
    }

    /**
     * Set the confidence property: Confidence of correctly extracting the document.
     * 
     * @param confidence the confidence value to set.
     * @return the Document object itself.
     */
    @Generated
    public Document setConfidence(float confidence) {
        this.confidence = confidence;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("docType", this.docType);
        jsonWriter.writeArrayField("spans", this.spans, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeFloatField("confidence", this.confidence);
        jsonWriter.writeArrayField("boundingRegions", this.boundingRegions,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("fields", this.fields, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Document from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Document if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Document.
     */
    @Generated
    public static Document fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Document deserializedDocument = new Document();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("docType".equals(fieldName)) {
                    deserializedDocument.docType = reader.getString();
                } else if ("spans".equals(fieldName)) {
                    List<DocumentSpan> spans = reader.readArray(reader1 -> DocumentSpan.fromJson(reader1));
                    deserializedDocument.spans = spans;
                } else if ("confidence".equals(fieldName)) {
                    deserializedDocument.confidence = reader.getFloat();
                } else if ("boundingRegions".equals(fieldName)) {
                    List<BoundingRegion> boundingRegions
                        = reader.readArray(reader1 -> BoundingRegion.fromJson(reader1));
                    deserializedDocument.boundingRegions = boundingRegions;
                } else if ("fields".equals(fieldName)) {
                    Map<String, DocumentField> fields = reader.readMap(reader1 -> DocumentField.fromJson(reader1));
                    deserializedDocument.fields = fields;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDocument;
        });
    }
}
