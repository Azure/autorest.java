@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Model.MethodJv>
@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
<text>
@* ------------------------------------ *@
@* Synchronous with required parameters *@
@* ------------------------------------ *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
public @Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodRequiredParameterDeclaration) {
@if (@Model.ReturnTypeResponseName == "void")
{
@:    @(Model.Name)Async(@Model.MethodRequiredParameterInvocation).toBlocking().value();
}
else
{
@:    return @(Model.Name)Async(@Model.MethodRequiredParameterInvocation).toBlocking().value();
}
}
@EmptyLine


@* --------------------------------- *@
@* Callback with required parameters *@
@* --------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@return the {@@link ServiceFuture} object
 */
public ServiceFuture<@Model.ReturnTypeJv.ServiceFutureGenericParameterString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclarationWithCallback) {
    return ServiceFuture.@(Model.ServiceFutureFactoryMethod)(@(Model.Name)Async(@Model.MethodRequiredParameterInvocation), serviceCallback);
}
@EmptyLine


@* ----------------------------------- *@
@* Observable with required parameters *@
@* ----------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeJv.GenericBodyClientTypeString.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @(Model.ReturnTypeJv.GenericBodyClientTypeString)} object if successful.
}
 */
public Single<@Model.ReturnTypeJv.ClientResponseTypeString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclaration) {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterJv parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.ClientType.Name) @(parameter.Name) = @(parameter.ClientType.GetDefaultValue(Model) ?? "null");
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.ClientType.Name) @(parameter.Name) = @(parameter.DefaultValue ?? "null");

    }
}
    @Model.BuildInputMappings(true)
    @Model.ParameterConversion
    return service.@(Model.Name)(@Model.MethodParameterApiInvocation);
}
@EmptyLine
</text>
}


@* ------------------------------- *@
@* Synchronous with all parameters *@
@* ------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
public @Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodParameterDeclaration) {
@if (@Model.ReturnTypeResponseName == "void")
{
@:    @(Model.Name)Async(@Model.MethodParameterInvocation).toBlocking().value();
}
else
{
@:    return @(Model.Name)Async(@Model.MethodParameterInvocation).toBlocking().value();
}
}
@EmptyLine

    
@* ---------------------------- *@
@* Callback with all parameters *@
@* ---------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@return the {@@link ServiceFuture} object
 */
public ServiceFuture<@Model.ReturnTypeJv.ServiceFutureGenericParameterString> @(Model.Name)Async(@Model.MethodParameterDeclarationWithCallback) {
    return ServiceFuture.@(Model.ServiceFutureFactoryMethod)(@(Model.Name)Async(@Model.MethodParameterInvocation), serviceCallback);
}
@EmptyLine

    
@* ----------------------------------- *@
@* Observable with required parameters *@
@* ----------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeJv.GenericBodyClientTypeString.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link Single<@Model.ReturnTypeJv.GenericBodyClientTypeString>} object if successful.
}
 */
public Single<@(Model.ReturnTypeJv.GenericBodyClientTypeString)> @(Model.Name)Async(@Model.MethodParameterDeclaration) {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate)
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterJv parameter in Model.LocalParameters)
{
    if (parameter.IsConstant)
    {
@:    final @(parameter.ModelType.Name) @(parameter.Name) = @(parameter.DefaultValue ?? "null");
    }
}
    @Model.BuildInputMappings()
    @Model.ParameterConversion
    return service.@(Model.Name)(@Model.MethodParameterApiInvocation);
}
@EmptyLine
