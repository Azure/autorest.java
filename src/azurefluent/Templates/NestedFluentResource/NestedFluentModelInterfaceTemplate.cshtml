@using System
@using AutoRest.Java
@using AutoRest.Java.vanilla.Templates
@using AutoRest.Java.azure.Templates
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.Java.Model
@using AutoRest.Java.Azure.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Azure.Fluent.Model.NestedFluentModelInterface>

/**
@Header(" * ").TrimMultilineHeader()
 */
@EmptyLine

package @(Settings.Namespace.ToLower());

@EmptyLine

@foreach (var importClass in Model.Imports)
{
@:import @importClass;
}
@EmptyLine

/**
 * Type representing @(Model.JavaInterfaceName).
 */
public interface @(Model.JavaInterfaceName)@(Model.ExtendsFrom) {
@foreach (string getter in Model.ModelLocalProperties.Getters)
{
@:    @(getter)
@EmptyLine
}

@if (Model.SupportsCreating)
{
    <text>
    /**
     * The entirety of the @(Model.JavaInterfaceName) definition.
     */
    </text>
@:    interface Definition@(Model.DefinitionExtendsFrom) {
@:    }

@EmptyLine

    <text>
    /**
     * Grouping of @(Model.JavaInterfaceName) definition stages.
     */
    </text>
@:    interface DefinitionStages {
    <text>
        /**
         * The first stage of a @(Model.JavaInterfaceName) definition.
         */
        interface Blank@(Model.BlankExtendsFrom) {
        }
    </text>
@EmptyLine
@foreach (var stage in Model.RequiredDefinitionStages)
{
        <text>
        /**
         * @(String.Format(stage.Comment, "definition"))
         */
        </text>
        @:interface @(stage.Name) {
@foreach (var method in stage.Methods)
{
           <text>
           /**
            * @(method.Comment)
            */
           </text>
            @:@(method.NextStage.Name) @(method.Name)(@(method.ParameterDeclaration));
}
@:        }
@EmptyLine
}

@foreach (var stage in Model.OptionalDefinitionStages)
{
        <text>
        /**
         * @(String.Format(stage.Comment, "definition"))
         */
        </text>
        @:interface @(stage.Name) {
@foreach (var method in stage.Methods)
{
            <text>
            /**
             * @(method.Comment)
             */
            </text>
            @:@(method.NextStage.Name) @(method.Name)(@(method.ParameterDeclaration));
}
@:        }
@EmptyLine
}
       <text>
        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        </text>
        @:interface WithCreate@(Model.WithCreateExtendsFrom) {
        @:}
@:    }
}
@if (Model.SupportsUpdating)
{
    <text>
    /**
     * The template for a @(Model.JavaInterfaceName) update operation, containing all the settings that can be modified.
     */
    </text>
@:    interface Update@(Model.UpdateExtendsFrom) {
@:    }

@EmptyLine

    <text>
    /**
     * Grouping of @(Model.JavaInterfaceName) update stages.
     */
    </text>
@:    interface UpdateStages {
@foreach (var stage in Model.UpdateStages)
{
        <text>
        /**
         * @(String.Format(stage.Comment, "update"))
         */
        </text>
@:        interface @(stage.Name) {
@foreach (var method in stage.Methods)
{
            <text>
            /**
             * @(method.Comment)
             */
            </text>
            @:@(method.NextStage.Name) @(method.Name)(@(method.ParameterDeclaration));
}
@:        }
@EmptyLine
}
@:    }
}
}
