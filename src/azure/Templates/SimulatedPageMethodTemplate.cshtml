@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.Model
@using AutoRest.Java.Azure.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Azure.Model.MethodJva>
@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
<text>

@* ----------------------------------------- *@
@* Synchronous with only required parameters *@
@* ----------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the PagedList<@Model.ReturnTypeJv.SequenceElementTypeString> object if successful.
}
 */
public PagedList<@Model.ReturnTypeJv.SequenceElementTypeString> @(Model.Name)(@Model.MethodRequiredParameterDeclaration) {
    @((Model.ReturnTypeJv.BodyClientType as SequenceTypeJva).PageImplType)<@Model.ReturnTypeJv.SequenceElementTypeString> page = new @((Model.ReturnTypeJv.BodyClientType as SequenceTypeJva).PageImplType)<>();
    page.setItems(@(Model.Name)Async(@Model.MethodRequiredParameterInvocation).single().items());
    page.setNextPageLink(null);
    return new PagedList<@Model.ReturnTypeJv.SequenceElementTypeString>(page) {
        @@Override
        public Page<@Model.ReturnTypeJv.SequenceElementTypeString> nextPage(String nextPageLink) {
            return null;
        }
    };
}
@EmptyLine


@* ---------------------------------------- *@
@* Observable with only required parameters *@
@* ---------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeJv.GenericBodyClientTypeString.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link Observable<Page<@Model.ReturnTypeJv.SequenceElementTypeString>>} object if successful.
}
 */
public Observable<Page<@Model.ReturnTypeJv.SequenceElementTypeString>> @(Model.Name)Async(@Model.MethodRequiredParameterDeclaration) {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterJv parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.ClientType.Name) @(parameter.Name) = @(parameter.ClientType.GetDefaultValue(Model) ?? "null");
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.ClientType.Name) @(parameter.Name) = @(parameter.DefaultValue ?? "null");

    }
}
    @Model.BuildInputMappings(true)
    @Model.ParameterConversion
    return service.@(Model.Name)(@Model.MethodParameterApiInvocation).map(new Func1<@(Model.RestResponseConcreteTypeName), @(Model.ReturnTypeJva.ServiceResponseGenericParameterString)>() {
            @@Override
            public @(Model.ReturnTypeJva.ServiceResponseGenericParameterString) call(@(Model.RestResponseConcreteTypeName) response) {
                return response.body();
            }
    }).toObservable();
}
@EmptyLine
</text>
}


@* ------------------------------- *@
@* Synchronous with all parameters *@
@* ------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the PagedList<@Model.ReturnTypeJv.SequenceElementTypeString> object if successful.
}
 */
public PagedList<@Model.ReturnTypeJv.SequenceElementTypeString> @(Model.Name)(@Model.MethodParameterDeclaration) {
    @((Model.ReturnTypeJv.BodyClientType as SequenceTypeJva).PageImplType)<@Model.ReturnTypeJv.SequenceElementTypeString> page = new @((Model.ReturnTypeJv.BodyClientType as SequenceTypeJva).PageImplType)<>();
    page.setItems(@(Model.Name)Async(@Model.MethodParameterInvocation).toBlocking().single().items());
    page.setNextPageLink(null);
    return new PagedList<@Model.ReturnTypeJv.SequenceElementTypeString>(page) {
        @@Override
        public Page<@Model.ReturnTypeJv.SequenceElementTypeString> nextPage(String nextPageLink) {
            return null;
        }
    };
}
@EmptyLine


@* ------------------------------- *@
@* Observable with all parameters  *@
@* ------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeJv.GenericBodyClientTypeString.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link Observable<Page<@Model.ReturnTypeJv.SequenceElementTypeString>>} object if successful.
}
 */
public Observable<Page<@Model.ReturnTypeJv.SequenceElementTypeString>> @(Model.Name)Async(@Model.MethodParameterDeclaration) {
@foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate)
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterJv parameter in Model.LocalParameters)
{
    if (parameter.IsConstant)
    {
@:    final @(parameter.ModelType.Name) @(parameter.Name) = @(parameter.DefaultValue ?? "null");
    }
}
    @Model.BuildInputMappings()
    @Model.ParameterConversion
    return service.@(Model.Name)(@Model.MethodParameterApiInvocation).map(new Func1<@(Model.RestResponseConcreteTypeName), @(Model.ReturnTypeJva.ServiceResponseGenericParameterString)>() {
            @@Override
            public @(Model.ReturnTypeJva.ServiceResponseGenericParameterString) call(@(Model.RestResponseConcreteTypeName) response) {
                return response.body();
            }
    }).toObservable();
}
@EmptyLine
