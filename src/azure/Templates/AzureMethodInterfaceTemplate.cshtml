@using System.Linq;
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Azure.Model.MethodJva>

@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
<text>
@* ----------------------------------------- *@
@* Synchronous with only required parameters *@
@* ----------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
@Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodRequiredParameterDeclaration);
@EmptyLine


@* -------------------------------------- *@
@* Callback with only required parameters *@
@* -------------------------------------- *@
@if (!Model.IsPagingOperation && !Model.IsPagingNextOperation)
{
<text>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@return the {@@link ServiceFuture} object
 */
ServiceFuture<@Model.ReturnTypeJv.ServiceFutureGenericParameterString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclarationWithCallback);
@EmptyLine
</text>
}

@* ---------------------------------------- *@
@* Observable with only required parameters *@
@* ---------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.ModelType.Name + " value" : param.Documentation.ToString()).EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.AsyncClientReturnTypeString} object if successful.
}
 */
@(Model.AsyncClientReturnTypeString) @(Model.Name)Async(@Model.MethodRequiredParameterDeclaration);


@if (Model.ShouldGenerateBeginRestResponseMethod())
{
<text>
@* --------------------------------------------- *@
@* Observable, RestResponse, required parameters *@
@* --------------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.ModelType.Name + " value" : param.Documentation.ToString()).EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.RestResponseAbstractTypeName} object if successful.
}
 */
Single<@(Model.RestResponseAbstractTypeName)> @(Model.Name)WithRestResponseAsync(@Model.MethodRequiredParameterDeclaration);
</text>
}
</text>
}



@* ------------------------------- *@
@* Synchronous with all parameters *@
@* ------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
@Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodParameterDeclaration);
@EmptyLine


@* ---------------------------- *@
@* Callback with all parameters *@
@* ---------------------------- *@
@if (!Model.IsPagingOperation && !Model.IsPagingNextOperation)
{
<text>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment())
}
@Model.CallbackDocumentation
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@return the {@@link ServiceFuture} object
 */
ServiceFuture<@Model.ReturnTypeJv.ServiceFutureGenericParameterString> @(Model.Name)Async(@Model.MethodParameterDeclarationWithCallback);
@EmptyLine
</text>
}


@* ------------------------------ *@
@* Observable with all parameters *@
@* ------------------------------ *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.ModelType.Name + " value" : param.Documentation.ToString()).EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.AsyncClientReturnTypeString} object if successful.
}
 */
@(Model.AsyncClientReturnTypeString) @(Model.Name)Async(@Model.MethodParameterDeclaration);
@EmptyLine


@if (Model.ShouldGenerateBeginRestResponseMethod())
{
<text>
@* ---------------------------------------- *@
@* Observable, RestResponse, all parameters *@
@* ---------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.ModelType.Name + " value" : param.Documentation.ToString()).EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.RestResponseAbstractTypeName} object if successful.
}
 */
Single<@(Model.RestResponseAbstractTypeName)> @(Model.Name)WithRestResponseAsync(@Model.MethodParameterDeclaration);
@EmptyLine
</text>
}