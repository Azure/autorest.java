@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.Model
@using AutoRest.Java.Azure.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Azure.Model.MethodJva>
@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
<text>
@* ----------------------------------------------- *@
@* All pages. Synchronous with required parameters *@
@* ----------------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
public @Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodRequiredParameterDeclaration) {
    @Model.ReturnTypeJva.ServiceResponseGenericParameterString response = @(Model.Name)SinglePageAsync(@Model.MethodRequiredParameterInvocation).toBlocking().value();
    return new @(Model.ReturnTypeJva.GenericBodyClientTypeString)(response) {
        @@Override
        public @Model.ReturnTypeJva.ServiceResponseGenericParameterString nextPage(String @Model.PagingNextPageLinkParameterName) {
            @Model.PagingGroupedParameterTransformation(filterRequired: true)
            return @(Model.GetPagingNextMethodInvocation(async: true))(@Model.NextMethodParameterInvocation(filterRequired: true)).toBlocking().value();
        }
    };
}
@EmptyLine


@* ----------------------------------------------- *@
@* All pages. Observable with required parameters. *@
@* ----------------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link Observable<@Model.ReturnTypeJva.ServiceResponseGenericParameterString>} object if successful.
}
 */
public Observable<@Model.ReturnTypeJva.ServiceResponseGenericParameterString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclaration) {
    return @(Model.Name)SinglePageAsync(@Model.MethodRequiredParameterInvocation)
        .toObservable()
        .concatMap(new Func1<@Model.ReturnTypeJva.ServiceResponseGenericParameterString, Observable<@Model.ReturnTypeJva.ServiceResponseGenericParameterString>>() {
            @@Override
            public Observable<@Model.ReturnTypeJva.ServiceResponseGenericParameterString> call(@Model.ReturnTypeJva.ServiceResponseGenericParameterString page) {
                String @Model.PagingNextPageLinkParameterName = page.nextPageLink();
                if (@Model.PagingNextPageLinkParameterName == null) {
                    return Observable.just(page);
                }
                @Model.PagingGroupedParameterTransformation(filterRequired: true)
                return Observable.just(page).concatWith(@(Model.GetPagingNextMethodInvocation(async: true, singlePage: false))(@Model.NextMethodParameterInvocation(filterRequired: true)));
            }
        });
}
@EmptyLine



@* ------------------------------------------------- *@
@* Single page. Observable with required parameters. *@
@* ------------------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeResponseName object if successful.
}
else
{
@: * @@return the {@@link Single<@Model.ReturnTypeJva.ServiceResponseGenericParameterString>} object if successful.
}
 */
public Single<@Model.ReturnTypeJva.ServiceResponseGenericParameterString> @(Model.Name)SinglePageAsync(@Model.MethodRequiredParameterDeclaration) {
    @foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate.Where(p => p.IsRequired))
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterJv parameter in Model.LocalParameters)
{
    if (!parameter.IsRequired)
    {
@:    final @(parameter.ClientType.Name) @(parameter.Name) = @(parameter.ClientType.GetDefaultValue(Model) ?? "null");
    }
    if (parameter.IsConstant)
    {
@:    final @(parameter.ClientType.ParameterVariant.Name) @(parameter.Name) = @(parameter.DefaultValue ?? "null");

    }
}
    @Model.BuildInputMappings(true)
    @Model.ParameterConversion
@if (Model.IsPagingNextOperation)
{
@:    String nextUrl = @(Model.NextUrlConstruction);
}
    return service.@(Model.Name)(@Model.MethodParameterApiInvocation).map(new Func1<@(Model.ReturnTypeJva.ServiceResponseConcreteTypeParameterString), @(Model.ReturnTypeJva.ServiceResponseGenericParameterString)>() {
            @@Override
            public @(Model.ReturnTypeJva.ServiceResponseGenericParameterString) call(@(Model.ReturnTypeJva.ServiceResponseConcreteTypeParameterString) productPage) {
                return productPage;
            }
        });
}
@EmptyLine
</text>
}


@* ------------------------------------------- *@
@* All pages. Synchronous with all parameters. *@
@* ------------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
public @Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodParameterDeclaration) {
    @Model.ReturnTypeJva.ServiceResponseGenericParameterString response = @(Model.Name)SinglePageAsync(@Model.MethodParameterInvocation).toBlocking().value();
    return new @(Model.ReturnTypeJva.GenericBodyClientTypeString)(response) {
        @@Override
        public @Model.ReturnTypeJva.ServiceResponseGenericParameterString nextPage(String @Model.PagingNextPageLinkParameterName) {
            @Model.PagingGroupedParameterTransformation()
            return @(Model.GetPagingNextMethodInvocation(async: true))(@Model.NextMethodParameterInvocation()).toBlocking().value();
        }
    };
}
@EmptyLine


@* ------------------------------------------ *@
@* All pages. Observable with all parameters. *@
@* ------------------------------------------ *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnType.Body != null)
{
@: * @@return the observable to the @Model.ReturnTypeResponseName object
}
else
{
@: * @@return the {@@link Single<@Model.ReturnTypeJva.ServiceResponseGenericParameterString>} object if successful.
}
 */
public Observable<@Model.ReturnTypeJva.ServiceResponseGenericParameterString> @(Model.Name)Async(@Model.MethodParameterDeclaration) {
    return @(Model.Name)SinglePageAsync(@Model.MethodParameterInvocation)
        .toObservable()
        .concatMap(new Func1<@Model.ReturnTypeJva.ServiceResponseGenericParameterString, Observable<@Model.ReturnTypeJva.ServiceResponseGenericParameterString>>() {
            @@Override
            public Observable<@Model.ReturnTypeJva.ServiceResponseGenericParameterString> call(@Model.ReturnTypeJva.ServiceResponseGenericParameterString page) {
                String @Model.PagingNextPageLinkParameterName = page.nextPageLink();
                if (@Model.PagingNextPageLinkParameterName == null) {
                    return Observable.just(page);
                }
                @Model.PagingGroupedParameterTransformation()
                return Observable.just(page).concatWith(@(Model.GetPagingNextMethodInvocation(async: true, singlePage: false))(@Model.NextMethodParameterInvocation()));
            }
        });
}
@EmptyLine


@* -------------------------------------------- *@
@* Single page. Observable with all parameters. *@
@* -------------------------------------------- *@
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
    @Model.ReturnTypeJva.GenericBodyWireTypeStringWrapped
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnType.Body != null)
{
@: * @@return the @Model.ReturnTypeResponseName object if successful.
}
else
{
@: * @@return the {@@link Single<@Model.ReturnTypeJva.ServiceResponseGenericParameterString>} object if successful.
}
 */
public Single<@Model.ReturnTypeJva.ServiceResponseGenericParameterString> @(Model.Name)SinglePageAsync(@Model.MethodParameterDeclaration) {
    @foreach (var param in Model.RequiredNullableParameters)
{
@:    if (@param.Name == null) {
@:        throw new IllegalArgumentException("Parameter @param.Name is required and cannot be null.");
@:    }
}
@foreach (var param in Model.ParametersToValidate)
{
@:    Validator.validate(@(param.Name));
}
@foreach (ParameterJv parameter in Model.LocalParameters)
{
    if (parameter.IsConstant)
    {
@:    final @(parameter.ModelType.Name) @(parameter.Name) = @(parameter.DefaultValue ?? "null");
    }
}
    @Model.BuildInputMappings()
    @Model.ParameterConversion
@if (Model.IsPagingNextOperation)
{
@:    String nextUrl = @(Model.NextUrlConstruction);
}
    return service.@(Model.Name)(@Model.MethodParameterApiInvocation).map(new Func1<@(Model.ReturnTypeJva.ServiceResponseConcreteTypeParameterString), @(Model.ReturnTypeJva.ServiceResponseGenericParameterString)>() {
            @@Override
            public @(Model.ReturnTypeJva.ServiceResponseGenericParameterString) call(@(Model.ReturnTypeJva.ServiceResponseConcreteTypeParameterString) productPage) {
                return productPage;
            }
        });
}
@EmptyLine
