@using System
@using System.Text.RegularExpressions
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.Azure.Model
@using AutoRest.Java.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Azure.Model.CodeModelJva>

@{
    var serviceName = Model.ServiceName;
    var className = serviceName + "Manager";
}

/**
@Header(" * ").TrimMultilineHeader()
 */
@EmptyLine

package @(Settings.Namespace.ToLower()).@(Model.ImplPackage);

@EmptyLine
import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.management.resources.fluentcore.arm.AzureConfigurable;
import com.microsoft.azure.management.resources.fluentcore.arm.implementation.AzureConfigurableImpl;
import com.microsoft.azure.management.resources.fluentcore.arm.implementation.Manager;
import com.microsoft.azure.management.resources.fluentcore.utils.ProviderRegistrationInterceptor;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
@EmptyLine

/**
 * Entry point to Azure @(serviceName) resource management.
 */
@@Beta(SinceVersion.@Model.BetaSinceVersion)
public final class @(className) extends Manager<@(className), @(Model.Name + "Impl")> {
    /**
    * Get a Configurable instance that can be used to create @(className) with optional configuration.
    *
    * @@return the instance allowing configurations
    */
    public static Configurable configure() {
        return new @(className).ConfigurableImpl();
    }

    /**
    * Creates an instance of @className that exposes @serviceName resource management API entry points.
    *
    * @@param credentials the credentials to use
    * @@param subscriptionId the subscription UUID
    * @@return the @className
    */
    public static @className authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new @(className)(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .withInterceptor(new ProviderRegistrationInterceptor(credentials))
            .build(), subscriptionId);
    }

    /**
    * Creates an instance of @className that exposes @serviceName resource management API entry points.
    *
    * @@param restClient the RestClient to be used for API calls.
    * @@param subscriptionId the subscription UUID
    * @@return the @className
    */
    public static @className authenticate(RestClient restClient, String subscriptionId) {
        return new @(className)(restClient, subscriptionId);
    }

    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of @className that exposes @serviceName management API entry points.
        *
        * @@param credentials the credentials to use
        * @@param subscriptionId the subscription UUID
        * @@return the interface exposing @serviceName management API entry points that work across subscriptions
        */
        @className authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableImpl<Configurable> implements Configurable {
        public @className authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return @(className).authenticate(buildRestClient(credentials), subscriptionId);
        }
     }

    private @(className)(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new @(Model.Name)Impl(restClient).withSubscriptionId(subscriptionId));
    }
}
