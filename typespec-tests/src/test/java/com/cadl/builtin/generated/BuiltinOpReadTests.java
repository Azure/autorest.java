// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.cadl.builtin.generated;

import com.cadl.builtin.models.Builtin;
import com.cadl.builtin.models.Encoded;
import java.time.Duration;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class BuiltinOpReadTests extends BuiltinClientTestBase {
    @Test
    @Disabled
    public void testBuiltinOpReadTests() {
        Builtin response = builtinClient.read(null, null, null, "myFilter", null, null);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(true, response.isBooleanProperty());
        Assertions.assertEquals("myString", response.getString());
        Assertions.assertEquals(32L, response.getSafeint());
        Assertions.assertEquals(64L, response.getLongProperty());
        Assertions.assertEquals(32.0, response.getFloatProperty());
        Assertions.assertEquals(64.0, response.getDoubleProperty());
        Assertions.assertEquals(Duration.parse("PT15M"), response.getDuration());
        Assertions.assertEquals(LocalDate.parse("2023-08-29"), response.getDate());
        Assertions.assertEquals(OffsetDateTime.parse("2019-10-12T07:20:50.520Z"), response.getDateTime());
        String responseFirstItem = response.getStringList().iterator().next();
        Assertions.assertEquals("a", responseFirstItem);
        Assertions.assertEquals("https://www.github.com", response.getUrl());
        Assertions.assertEquals(mapOf("max", 15.0, "min", 14.0, "average", 14.3), response.getNullableFloatDict());
        Encoded responseEncoded = response.getEncoded();
        Assertions.assertNotNull(responseEncoded);
        Assertions.assertEquals(Duration.parse("PT15M"), responseEncoded.getTimeInSeconds());
        Assertions.assertEquals(Duration.parse("PT20.345S"), responseEncoded.getTimeInSecondsFraction());
        Assertions.assertEquals(OffsetDateTime.parse("1966-03-03T00:06:56.52Z"), responseEncoded.getDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("1994-11-06T08:49:37Z"), responseEncoded.getDateTimeRfc7231());
        Assertions.assertEquals(OffsetDateTime.parse("1693362903"), responseEncoded.getUnixTimestamp());
        Assertions.assertEquals("aHR0cHM6Ly93d3cuZ2l0aHViLmNvbQ==".getBytes(), responseEncoded.getBase64());
        Assertions.assertEquals("aHR0cHM6Ly93d3cuZ2l0aHViLmNvbQ==".getBytes(), responseEncoded.getBase64Url());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
