// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.cadl.builtin.generated;

import com.cadl.builtin.models.Builtin;
import java.time.Duration;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

@Disabled
public final class BuiltinOpReadTests extends BuiltinClientTestBase {
    @Test
    @Disabled
    public void testBuiltinOpReadTests() {
        Builtin response = builtinClient.read(null, null, null, "myFilter", null, null);
        Assertions.assertNotNull(response);
        Assertions.assertEquals(response.isBooleanProperty(), true);
        Assertions.assertEquals(response.getString(), "myString");
        Assertions.assertEquals(response.getSafeint(), 32L);
        Assertions.assertEquals(response.getLongProperty(), 64L);
        Assertions.assertEquals(response.getFloatProperty(), 32.0);
        Assertions.assertEquals(response.getDoubleProperty(), 64.0);
        Assertions.assertEquals(response.getDuration(), Duration.parse("10"));
        Assertions.assertEquals(response.getDate(), LocalDate.parse("2023-08-29"));
        Assertions.assertEquals(response.getDateTime(), OffsetDateTime.parse("2019-10-12T07:20:50.520Z"));
        String responseFirstItem = response.getStringList().iterator().next();
        Assertions.assertEquals(responseFirstItem, "a");
        Assertions.assertEquals(response.getUrl(), "https://www.github.com");
        Assertions.assertEquals(response.getNullableFloatDict(), mapOf("max", 15.0, "min", 14.0, "average", 14.3));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
