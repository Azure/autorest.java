// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.armresource.generated;

import com.azure.core.util.BinaryData;
import com.cadl.armresource.fluent.models.TopLevelArmResourceInner;
import com.cadl.armresource.models.TopLevelArmResourceProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopLevelArmResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopLevelArmResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"configurationEndpoints\":[\"jye\",\"kkvnipjox\"],\"childResources\":[{\"id\":\"chgejspodm\"},{\"id\":\"ilzyd\"}],\"provisioningState\":\"Deleting\"},\"location\":\"wyahuxinpmqnja\",\"tags\":{\"prozvcputegjvwmf\":\"xj\",\"pjhulsuuvmkj\":\"atscmd\",\"iodjp\":\"zkrwfn\",\"ryo\":\"lwejdpv\"},\"id\":\"psoacctazakljl\",\"name\":\"hbcryffdfdosyge\",\"type\":\"paojakhmsbzjh\"}")
            .toObject(TopLevelArmResourceInner.class);
        Assertions.assertEquals("wyahuxinpmqnja", model.location());
        Assertions.assertEquals("xj", model.tags().get("prozvcputegjvwmf"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopLevelArmResourceInner model = new TopLevelArmResourceInner().withLocation("wyahuxinpmqnja")
            .withTags(mapOf("prozvcputegjvwmf", "xj", "pjhulsuuvmkj", "atscmd", "iodjp", "zkrwfn", "ryo", "lwejdpv"))
            .withProperties(new TopLevelArmResourceProperties());
        model = BinaryData.fromObject(model).toObject(TopLevelArmResourceInner.class);
        Assertions.assertEquals("wyahuxinpmqnja", model.location());
        Assertions.assertEquals("xj", model.tags().get("prozvcputegjvwmf"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
