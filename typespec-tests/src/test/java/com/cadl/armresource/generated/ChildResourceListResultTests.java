// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.armresource.generated;

import com.azure.core.util.BinaryData;
import com.cadl.armresource.fluent.models.ChildResourceInner;
import com.cadl.armresource.models.ChildResourceListResult;
import com.cadl.armresource.models.ChildResourceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChildResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChildResourceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Accepted\"},\"location\":\"bpazlobcufpdzn\",\"tags\":{\"foooj\":\"cqqjnqglhqgn\"},\"id\":\"wifsq\",\"name\":\"saagdf\",\"type\":\"glzlhjxrifkwmrv\"},{\"properties\":{\"provisioningState\":\"Accepted\"},\"location\":\"nt\",\"tags\":{\"uajpsquc\":\"pa\"},\"id\":\"poyfdkfogkn\",\"name\":\"gjofjd\",\"type\":\"eqsrdeupewnwreit\"},{\"properties\":{\"provisioningState\":\"Succeeded\"},\"location\":\"usarhmofc\",\"tags\":{\"rkdtmlxh\":\"my\"},\"id\":\"kuksjtxukcdm\",\"name\":\"arcryuanzwuxzdxt\",\"type\":\"yrlhmwhfpmrqobm\"},{\"properties\":{\"provisioningState\":\"Provisioning\"},\"location\":\"ryrtihfxtijbpzv\",\"tags\":{\"ihanuf\":\"zsymglzufcyzkohd\",\"ifpikxwczby\":\"fcbjysagithxqha\",\"rkxvdum\":\"cnpqxuhivyqniwby\"},\"id\":\"grtfwvu\",\"name\":\"xgaudccs\",\"type\":\"h\"}],\"nextLink\":\"cnyejhkryhtnapcz\"}")
            .toObject(ChildResourceListResult.class);
        Assertions.assertEquals("bpazlobcufpdzn", model.value().get(0).location());
        Assertions.assertEquals("cqqjnqglhqgn", model.value().get(0).tags().get("foooj"));
        Assertions.assertEquals("cnyejhkryhtnapcz", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChildResourceListResult model = new ChildResourceListResult()
            .withValue(Arrays.asList(
                new ChildResourceInner().withLocation("bpazlobcufpdzn").withTags(mapOf("foooj", "cqqjnqglhqgn"))
                    .withProperties(new ChildResourceProperties()),
                new ChildResourceInner().withLocation("nt").withTags(mapOf("uajpsquc", "pa"))
                    .withProperties(new ChildResourceProperties()),
                new ChildResourceInner().withLocation("usarhmofc").withTags(mapOf("rkdtmlxh", "my"))
                    .withProperties(new ChildResourceProperties()),
                new ChildResourceInner().withLocation("ryrtihfxtijbpzv")
                    .withTags(mapOf("ihanuf", "zsymglzufcyzkohd", "ifpikxwczby", "fcbjysagithxqha", "rkxvdum",
                        "cnpqxuhivyqniwby"))
                    .withProperties(new ChildResourceProperties())))
            .withNextLink("cnyejhkryhtnapcz");
        model = BinaryData.fromObject(model).toObject(ChildResourceListResult.class);
        Assertions.assertEquals("bpazlobcufpdzn", model.value().get(0).location());
        Assertions.assertEquals("cqqjnqglhqgn", model.value().get(0).tags().get("foooj"));
        Assertions.assertEquals("cnyejhkryhtnapcz", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
