// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.armresource.generated;

import com.azure.core.util.BinaryData;
import com.cadl.armresource.fluent.models.TopLevelArmResourceInner;
import com.cadl.armresource.models.TopLevelArmResourceListResult;
import com.cadl.armresource.models.TopLevelArmResourceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopLevelArmResourceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopLevelArmResourceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"configurationEndpoints\":[\"eotusivyevc\",\"iqihn\"],\"childResources\":[{\"id\":\"gbwjzrnf\"},{\"id\":\"gxg\"}],\"provisioningState\":\"Succeeded\"},\"location\":\"mvtzfkufub\",\"tags\":{\"aeqjhqjbasvms\":\"fxqeof\"},\"id\":\"jqul\",\"name\":\"gsntnbybkzgcwr\",\"type\":\"clxxwrljdo\"},{\"properties\":{\"configurationEndpoints\":[\"qvkoc\",\"cjdkwtnhxbnjbi\",\"sqrglssainq\",\"jwnzlljfmp\"],\"childResources\":[{\"id\":\"bvmgxsabkyqduuji\"},{\"id\":\"c\"},{\"id\":\"czdzev\"},{\"id\":\"dhkrwpdappdsbdk\"}],\"provisioningState\":\"Failed\"},\"location\":\"jfeusnh\",\"tags\":{\"xhocdgeablgphuti\":\"eltmrldhugjzzdat\"},\"id\":\"ndv\",\"name\":\"aozwyiftyhxhu\",\"type\":\"okftyxolniwpwcuk\"},{\"properties\":{\"configurationEndpoints\":[\"iawxklry\",\"lwckbasyypnddhs\"],\"childResources\":[{\"id\":\"acphejkoty\"},{\"id\":\"qgoulznd\"},{\"id\":\"i\"}],\"provisioningState\":\"Provisioning\"},\"location\":\"kgfg\",\"tags\":{\"qedqytbciqfoufl\":\"adgakeqsrxybz\",\"glougpbk\":\"mnkzsmod\",\"uqktap\":\"tmut\",\"kdosvqw\":\"pwgcuertu\"},\"id\":\"bmdg\",\"name\":\"bjf\",\"type\":\"dgmb\"},{\"properties\":{\"configurationEndpoints\":[\"ppbhtqqrolfp\",\"psalgbqux\",\"gjyjgzjaoyfhrtxi\"],\"childResources\":[{\"id\":\"rkujy\"},{\"id\":\"vlejuvfqa\"}],\"provisioningState\":\"Deleting\"},\"location\":\"xwjkcprbnwbxg\",\"tags\":{\"dnrujqguhmuouqfp\":\"bvpyss\",\"uizga\":\"wzwbnguitn\",\"fizuckyf\":\"x\"},\"id\":\"hr\",\"name\":\"idf\",\"type\":\"zwdzuh\"}],\"nextLink\":\"mwisdkfthwxmnt\"}")
            .toObject(TopLevelArmResourceListResult.class);
        Assertions.assertEquals("mvtzfkufub", model.value().get(0).location());
        Assertions.assertEquals("fxqeof", model.value().get(0).tags().get("aeqjhqjbasvms"));
        Assertions.assertEquals("mwisdkfthwxmnt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopLevelArmResourceListResult model = new TopLevelArmResourceListResult().withValue(Arrays.asList(
            new TopLevelArmResourceInner().withLocation("mvtzfkufub").withTags(mapOf("aeqjhqjbasvms", "fxqeof"))
                .withProperties(new TopLevelArmResourceProperties()),
            new TopLevelArmResourceInner().withLocation("jfeusnh")
                .withTags(mapOf("xhocdgeablgphuti", "eltmrldhugjzzdat"))
                .withProperties(new TopLevelArmResourceProperties()),
            new TopLevelArmResourceInner().withLocation("kgfg")
                .withTags(mapOf("qedqytbciqfoufl", "adgakeqsrxybz", "glougpbk", "mnkzsmod", "uqktap", "tmut", "kdosvqw",
                    "pwgcuertu"))
                .withProperties(new TopLevelArmResourceProperties()),
            new TopLevelArmResourceInner().withLocation("xwjkcprbnwbxg")
                .withTags(mapOf("dnrujqguhmuouqfp", "bvpyss", "uizga", "wzwbnguitn", "fizuckyf", "x"))
                .withProperties(new TopLevelArmResourceProperties())))
            .withNextLink("mwisdkfthwxmnt");
        model = BinaryData.fromObject(model).toObject(TopLevelArmResourceListResult.class);
        Assertions.assertEquals("mvtzfkufub", model.value().get(0).location());
        Assertions.assertEquals("fxqeof", model.value().get(0).tags().get("aeqjhqjbasvms"));
        Assertions.assertEquals("mwisdkfthwxmnt", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
