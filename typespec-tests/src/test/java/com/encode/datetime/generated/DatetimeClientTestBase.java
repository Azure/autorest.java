// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.encode.datetime.generated;

// The Java test files under 'generated' package are generated for your reference.
// If you wish to modify these files, please copy them out of the 'generated' package, and modify there.
// See https://aka.ms/azsdk/dpg/java/tests for guide on adding a test.

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.test.TestMode;
import com.azure.core.test.TestProxyTestBase;
import com.azure.core.util.Configuration;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.encode.datetime.DatetimeClientBuilder;
import com.encode.datetime.HeaderAsyncClient;
import com.encode.datetime.HeaderClient;
import com.encode.datetime.PropertyAsyncClient;
import com.encode.datetime.PropertyClient;
import com.encode.datetime.QueryAsyncClient;
import com.encode.datetime.QueryClient;
import com.encode.datetime.ResponseHeaderAsyncClient;
import com.encode.datetime.ResponseHeaderClient;
import com.encode.datetime.implementation.DatetimeClientImpl;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

 class DatetimeClientTestBase extends TestProxyTestBase {
    protected QueryClient queryClient;

    protected PropertyClient propertyClient;

    protected HeaderClient headerClient;

    protected ResponseHeaderClient responseHeaderClient;

    @Override
    protected void beforeTest() {
        DatetimeClientBuilder queryClientbuilder = new DatetimeClientBuilder()
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            queryClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            queryClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        queryClient = queryClientbuilder.buildQueryClient();

        DatetimeClientBuilder propertyClientbuilder = new DatetimeClientBuilder()
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            propertyClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            propertyClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        propertyClient = propertyClientbuilder.buildPropertyClient();

        DatetimeClientBuilder headerClientbuilder = new DatetimeClientBuilder()
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            headerClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            headerClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        headerClient = headerClientbuilder.buildHeaderClient();

        DatetimeClientBuilder responseHeaderClientbuilder = new DatetimeClientBuilder()
            .httpClient(HttpClient.createDefault())
            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC));
        if (getTestMode() == TestMode.PLAYBACK) {
            responseHeaderClientbuilder.httpClient(interceptorManager.getPlaybackClient());
        } else if (getTestMode() == TestMode.RECORD) {
            responseHeaderClientbuilder.addPolicy(interceptorManager.getRecordPolicy());
        }
        responseHeaderClient = responseHeaderClientbuilder.buildResponseHeaderClient();

    }
}
