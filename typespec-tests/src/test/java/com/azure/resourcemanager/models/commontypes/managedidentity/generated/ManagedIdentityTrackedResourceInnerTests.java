// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.models.commontypes.managedidentity.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.models.commontypes.managedidentity.fluent.models.ManagedIdentityTrackedResourceInner;
import com.azure.resourcemanager.models.commontypes.managedidentity.models.ManagedIdentityTrackedResourceProperties;
import com.azure.resourcemanager.models.commontypes.managedidentity.models.ManagedServiceIdentity;
import com.azure.resourcemanager.models.commontypes.managedidentity.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.models.commontypes.managedidentity.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedIdentityTrackedResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedIdentityTrackedResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"mhquvgjxp\"},\"identity\":{\"principalId\":\"zm\",\"tenantId\":\"mtz\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"sx\":{\"principalId\":\"h\",\"clientId\":\"pidgsybbejhphoyc\"},\"zehtbmu\":{\"principalId\":\"bhdxbm\",\"clientId\":\"ioq\"},\"k\":{\"principalId\":\"ownoizhw\",\"clientId\":\"xybqsoqij\"}}},\"location\":\"bpazlobcufpdzn\",\"tags\":{\"foooj\":\"cqqjnqglhqgn\"},\"id\":\"wifsq\",\"name\":\"saagdf\",\"type\":\"glzlhjxrifkwmrv\"}")
            .toObject(ManagedIdentityTrackedResourceInner.class);
        Assertions.assertEquals("bpazlobcufpdzn", model.location());
        Assertions.assertEquals("cqqjnqglhqgn", model.tags().get("foooj"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedIdentityTrackedResourceInner model
            = new ManagedIdentityTrackedResourceInner().withLocation("bpazlobcufpdzn")
                .withTags(mapOf("foooj", "cqqjnqglhqgn"))
                .withProperties(new ManagedIdentityTrackedResourceProperties())
                .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("sx", new UserAssignedIdentity(), "zehtbmu",
                        new UserAssignedIdentity(), "k", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(ManagedIdentityTrackedResourceInner.class);
        Assertions.assertEquals("bpazlobcufpdzn", model.location());
        Assertions.assertEquals("cqqjnqglhqgn", model.tags().get("foooj"));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
