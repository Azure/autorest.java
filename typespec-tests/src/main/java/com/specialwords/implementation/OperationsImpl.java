// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.specialwords.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.core.util.logging.ClientLogger;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Operations.
 */
public final class OperationsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final SpecialWordsClientImpl client;

    /**
     * Initializes an instance of OperationsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
     OperationsImpl(SpecialWordsClientImpl client) {
        this.service = RestProxy.create(OperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SpecialWordsClientOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "SpecialWordsClientOp")
    public interface OperationsService {
        @Get("/special-words/operations/and")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> and(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/and")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> andSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/as")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> as(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/as")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> asSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/assert")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> assertMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/assert")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> assertMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/async")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> async(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/async")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> asyncSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/await")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> await(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/await")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> awaitSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/break")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> breakMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/break")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> breakMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/class")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> classMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/class")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> classMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/constructor")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> constructor(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/constructor")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> constructorSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/continue")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> continueMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/continue")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> continueMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/def")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> def(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/def")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> defSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/del")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> del(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/del")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> delSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/elif")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> elif(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/elif")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> elifSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/else")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> elseMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/else")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> elseMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/except")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> except(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/except")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> exceptSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/exec")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> exec(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/exec")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> execSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/finally")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> finallyMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/finally")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> finallyMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/for")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> forMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/for")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> forMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/from")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> from(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/from")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> fromSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/global")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> global(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/global")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> globalSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/if")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> ifMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/if")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> ifMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/import")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> importMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/import")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> importMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/in")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> in(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/in")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> inSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/is")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> is(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/is")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> isSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/lambda")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> lambda(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/lambda")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> lambdaSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/not")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> not(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/not")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> notSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/or")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> or(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/or")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> orSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/pass")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> pass(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/pass")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> passSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/raise")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> raise(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/raise")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> raiseSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/return")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> returnMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/return")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> returnMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/try")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> tryMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/try")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> tryMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/while")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> whileMethod(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/while")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> whileMethodSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/with")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> with(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/with")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> withSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/yield")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> yield(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/special-words/operations/yield")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> yieldSync(@HeaderParam("accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * The and operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> andWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.and(accept, requestOptions, context));
    }

    /**
     * The and operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> andWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.andSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The as operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> asWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.as(accept, requestOptions, context));
    }

    /**
     * The as operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> asWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.asSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The assertMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> assertMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.assertMethod(accept, requestOptions, context));
    }

    /**
     * The assertMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> assertMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.assertMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The async operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> asyncWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.async(accept, requestOptions, context));
    }

    /**
     * The async operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> asyncWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.asyncSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The await operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> awaitWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.await(accept, requestOptions, context));
    }

    /**
     * The await operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> awaitWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.awaitSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The breakMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> breakMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.breakMethod(accept, requestOptions, context));
    }

    /**
     * The breakMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> breakMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.breakMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The classMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> classMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.classMethod(accept, requestOptions, context));
    }

    /**
     * The classMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> classMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.classMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The constructor operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> constructorWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.constructor(accept, requestOptions, context));
    }

    /**
     * The constructor operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> constructorWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.constructorSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The continueMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> continueMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.continueMethod(accept, requestOptions, context));
    }

    /**
     * The continueMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> continueMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.continueMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The def operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> defWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.def(accept, requestOptions, context));
    }

    /**
     * The def operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> defWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.defSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The del operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> delWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.del(accept, requestOptions, context));
    }

    /**
     * The del operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> delWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.delSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The elif operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> elifWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.elif(accept, requestOptions, context));
    }

    /**
     * The elif operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> elifWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.elifSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The elseMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> elseMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.elseMethod(accept, requestOptions, context));
    }

    /**
     * The elseMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> elseMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.elseMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The except operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> exceptWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.except(accept, requestOptions, context));
    }

    /**
     * The except operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> exceptWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.exceptSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The exec operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> execWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.exec(accept, requestOptions, context));
    }

    /**
     * The exec operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> execWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.execSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The finallyMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> finallyMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.finallyMethod(accept, requestOptions, context));
    }

    /**
     * The finallyMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> finallyMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.finallyMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The forMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> forMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.forMethod(accept, requestOptions, context));
    }

    /**
     * The forMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> forMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.forMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The from operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> fromWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.from(accept, requestOptions, context));
    }

    /**
     * The from operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> fromWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.fromSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The global operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> globalWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.global(accept, requestOptions, context));
    }

    /**
     * The global operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> globalWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.globalSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The ifMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> ifMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.ifMethod(accept, requestOptions, context));
    }

    /**
     * The ifMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> ifMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.ifMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The importMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> importMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.importMethod(accept, requestOptions, context));
    }

    /**
     * The importMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> importMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.importMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The in operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> inWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.in(accept, requestOptions, context));
    }

    /**
     * The in operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> inWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.inSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The is operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> isWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.is(accept, requestOptions, context));
    }

    /**
     * The is operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> isWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.isSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The lambda operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> lambdaWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.lambda(accept, requestOptions, context));
    }

    /**
     * The lambda operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> lambdaWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.lambdaSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The not operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> notWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.not(accept, requestOptions, context));
    }

    /**
     * The not operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> notWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.notSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The or operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> orWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.or(accept, requestOptions, context));
    }

    /**
     * The or operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> orWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.orSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The pass operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> passWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.pass(accept, requestOptions, context));
    }

    /**
     * The pass operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> passWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.passSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The raise operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> raiseWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.raise(accept, requestOptions, context));
    }

    /**
     * The raise operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> raiseWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.raiseSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The returnMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> returnMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.returnMethod(accept, requestOptions, context));
    }

    /**
     * The returnMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> returnMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.returnMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The tryMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> tryMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.tryMethod(accept, requestOptions, context));
    }

    /**
     * The tryMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> tryMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.tryMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The whileMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> whileMethodWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.whileMethod(accept, requestOptions, context));
    }

    /**
     * The whileMethod operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> whileMethodWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.whileMethodSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The with operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> withWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.with(accept, requestOptions, context));
    }

    /**
     * The with operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> withWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.withSync(accept, requestOptions, Context.NONE);
    }

    /**
     * The yield operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> yieldWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.yield(accept, requestOptions, context));
    }

    /**
     * The yield operation.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> yieldWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.yieldSync(accept, requestOptions, Context.NONE);
    }
}
