// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.specialwords;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.specialwords.implementation.ParametersImpl;

/** Initializes a new instance of the synchronous SpecialWordsClient type. */
@ServiceClient(builder = SpecialWordsClientBuilder.class)
public final class ParameterClient {
    @Generated private final ParametersImpl serviceClient;

    /**
     * Initializes an instance of ParameterClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    ParameterClient(ParametersImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The getWithIf operation.
     *
     * @param ifParameter A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getWithIfWithResponse(String ifParameter, RequestOptions requestOptions) {
        return this.serviceClient.getWithIfWithResponse(ifParameter, requestOptions);
    }

    /**
     * The getWithFilter operation.
     *
     * @param filter A sequence of textual characters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getWithFilterWithResponse(String filter, RequestOptions requestOptions) {
        return this.serviceClient.getWithFilterWithResponse(filter, requestOptions);
    }

    /**
     * The getWithIf operation.
     *
     * @param ifParameter A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getWithIf(String ifParameter) {
        // Generated convenience method for getWithIfWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getWithIfWithResponse(ifParameter, requestOptions).getValue();
    }

    /**
     * The getWithFilter operation.
     *
     * @param filter A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getWithFilter(String filter) {
        // Generated convenience method for getWithFilterWithResponse
        RequestOptions requestOptions = new RequestOptions();
        getWithFilterWithResponse(filter, requestOptions).getValue();
    }
}
