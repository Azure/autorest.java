// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.specialwords.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/** This is a model has property names of special words or characters. */
@Immutable
public final class DerivedModel extends BaseModel {
    /*
     * model.kind
     */
    @Generated private static final String MODEL_KIND = "derived";

    /*
     * The derived.name property.
     */
    @Generated private final String derivedName;

    /*
     * The for property.
     */
    @Generated private final String forProperty;

    /**
     * Creates an instance of DerivedModel class.
     *
     * @param derivedName the derivedName value to set.
     * @param forProperty the forProperty value to set.
     */
    @Generated
    public DerivedModel(String derivedName, String forProperty) {
        this.derivedName = derivedName;
        this.forProperty = forProperty;
    }

    /**
     * Get the derivedName property: The derived.name property.
     *
     * @return the derivedName value.
     */
    @Generated
    public String getDerivedName() {
        return this.derivedName;
    }

    /**
     * Get the forProperty property: The for property.
     *
     * @return the forProperty value.
     */
    @Generated
    public String getForProperty() {
        return this.forProperty;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("model.kind", MODEL_KIND);
        jsonWriter.writeStringField("derived.name", this.derivedName);
        jsonWriter.writeStringField("for", this.forProperty);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DerivedModel from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DerivedModel if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     *     polymorphic discriminator.
     * @throws IOException If an error occurs while reading the DerivedModel.
     */
    public static DerivedModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    boolean derivedNameFound = false;
                    String derivedName = null;
                    boolean forPropertyFound = false;
                    String forProperty = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("model.kind".equals(fieldName)) {
                            String modelKind = reader.getString();
                            if (!MODEL_KIND.equals(modelKind)) {
                                throw new IllegalStateException(
                                        "'model.kind' was expected to be non-null and equal to '"
                                                + MODEL_KIND
                                                + "'. The found 'model.kind' was '"
                                                + modelKind
                                                + "'.");
                            }
                        } else if ("derived.name".equals(fieldName)) {
                            derivedName = reader.getString();
                            derivedNameFound = true;
                        } else if ("for".equals(fieldName)) {
                            forProperty = reader.getString();
                            forPropertyFound = true;
                        } else {
                            reader.skipChildren();
                        }
                    }
                    if (derivedNameFound && forPropertyFound) {
                        DerivedModel deserializedDerivedModel = new DerivedModel(derivedName, forProperty);

                        return deserializedDerivedModel;
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!derivedNameFound) {
                        missingProperties.add("derived.name");
                    }
                    if (!forPropertyFound) {
                        missingProperties.add("for");
                    }

                    throw new IllegalStateException(
                            "Missing required property/properties: " + String.join(", ", missingProperties));
                });
    }
}
