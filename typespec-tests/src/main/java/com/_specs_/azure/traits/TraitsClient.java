// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com._specs_.azure.traits;

import com._specs_.azure.traits.models.User;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.DateTimeRfc1123;
import java.time.OffsetDateTime;

/** Initializes a new instance of the synchronous TraitsClient type. */
@ServiceClient(builder = TraitsClientBuilder.class)
public final class TraitsClient {
    @Generated private final TraitsAsyncClient client;

    /**
     * Initializes an instance of TraitsClient class.
     *
     * @param client the async client.
     */
    @Generated
    TraitsClient(TraitsAsyncClient client) {
        this.client = client;
    }

    /**
     * Get a resource, sending and receiving headers.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>If-Match</td><td>String</td><td>No</td><td>The request should only proceed if an entity matches this string.</td></tr>
     *     <tr><td>If-None-Match</td><td>String</td><td>No</td><td>The request should only proceed if no entity matches this string.</td></tr>
     *     <tr><td>If-Unmodified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity was not modified after this time.</td></tr>
     *     <tr><td>If-Modified-Since</td><td>OffsetDateTime</td><td>No</td><td>The request should only proceed if the entity was modified after this time.</td></tr>
     *     <tr><td>x-ms-client-request-id</td><td>String</td><td>No</td><td>An opaque, globally-unique, client-generated string identifier for the request.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: int (Required)
     *     name: String (Optional)
     * }
     * }</pre>
     *
     * @param id The user's id.
     * @param foo header in request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a resource, sending and receiving headers along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(int id, String foo, RequestOptions requestOptions) {
        return this.client.getWithResponse(id, foo, requestOptions).block();
    }

    /**
     * Delete resource with api-version path parameter.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>x-ms-client-request-id</td><td>String</td><td>No</td><td>An opaque, globally-unique, client-generated string identifier for the request.</td></tr>
     *     <tr><td>repeatability-request-id</td><td>String</td><td>No</td><td>Repeatability request ID header</td></tr>
     *     <tr><td>repeatability-first-sent</td><td>String</td><td>No</td><td>Repeatability first sent header as HTTP-date</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * @param id The user's id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(int id, RequestOptions requestOptions) {
        return this.client.deleteWithResponse(id, requestOptions).block();
    }

    /**
     * Get a resource, sending and receiving headers.
     *
     * @param id The user's id.
     * @param foo header in request.
     * @param ifMatch The request should only proceed if an entity matches this string.
     * @param ifNoneMatch The request should only proceed if no entity matches this string.
     * @param ifUnmodifiedSince The request should only proceed if the entity was not modified after this time.
     * @param ifModifiedSince The request should only proceed if the entity was modified after this time.
     * @param clientRequestId An opaque, globally-unique, client-generated string identifier for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource, sending and receiving headers.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public User get(
            int id,
            String foo,
            String ifMatch,
            String ifNoneMatch,
            OffsetDateTime ifUnmodifiedSince,
            OffsetDateTime ifModifiedSince,
            String clientRequestId) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (ifMatch != null) {
            requestOptions.setHeader("If-Match", ifMatch);
        }
        if (ifNoneMatch != null) {
            requestOptions.setHeader("If-None-Match", ifNoneMatch);
        }
        if (ifUnmodifiedSince != null) {
            requestOptions.setHeader("If-Unmodified-Since", String.valueOf(new DateTimeRfc1123(ifUnmodifiedSince)));
        }
        if (ifModifiedSince != null) {
            requestOptions.setHeader("If-Modified-Since", String.valueOf(new DateTimeRfc1123(ifModifiedSince)));
        }
        if (clientRequestId != null) {
            requestOptions.setHeader("x-ms-client-request-id", clientRequestId);
        }
        return getWithResponse(id, foo, requestOptions).getValue().toObject(User.class);
    }

    /**
     * Get a resource, sending and receiving headers.
     *
     * @param id The user's id.
     * @param foo header in request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a resource, sending and receiving headers.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public User get(int id, String foo) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(id, foo, requestOptions).getValue().toObject(User.class);
    }

    /**
     * Delete resource with api-version path parameter.
     *
     * @param id The user's id.
     * @param clientRequestId An opaque, globally-unique, client-generated string identifier for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(int id, String clientRequestId) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (clientRequestId != null) {
            requestOptions.setHeader("x-ms-client-request-id", clientRequestId);
        }
        deleteWithResponse(id, requestOptions).getValue();
    }

    /**
     * Delete resource with api-version path parameter.
     *
     * @param id The user's id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(int id) {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteWithResponse(id, requestOptions).getValue();
    }
}
