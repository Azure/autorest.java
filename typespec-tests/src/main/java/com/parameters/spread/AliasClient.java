// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.parameters.spread;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.parameters.spread.implementation.AliasImpl;
import com.parameters.spread.models.SpreadWithMultipleParametersOptions;
import java.util.HashMap;
import java.util.Map;

/** Initializes a new instance of the synchronous SpreadClient type. */
@ServiceClient(builder = SpreadClientBuilder.class)
public final class AliasClient {
    @Generated private final AliasImpl serviceClient;

    /**
     * Initializes an instance of AliasClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    AliasClient(AliasImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The spreadAsRequestBody operation.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     * }
     * }</pre>
     *
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> spreadAsRequestBodyWithResponse(BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.spreadAsRequestBodyWithResponse(request, requestOptions);
    }

    /**
     * The spreadAsRequestParameter operation.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     * }
     * }</pre>
     *
     * @param id A sequence of textual characters.
     * @param xMsTestHeader A sequence of textual characters.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> spreadAsRequestParameterWithResponse(
            String id, String xMsTestHeader, BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.spreadAsRequestParameterWithResponse(id, xMsTestHeader, request, requestOptions);
    }

    /**
     * The spreadWithMultipleParameters operation.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String (Required)
     * }
     * }</pre>
     *
     * @param id A sequence of textual characters.
     * @param xMsTestHeader A sequence of textual characters.
     * @param request The request parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> spreadWithMultipleParametersWithResponse(
            String id, String xMsTestHeader, BinaryData request, RequestOptions requestOptions) {
        return this.serviceClient.spreadWithMultipleParametersWithResponse(id, xMsTestHeader, request, requestOptions);
    }

    /**
     * The spreadAsRequestBody operation.
     *
     * @param name A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void spreadAsRequestBody(String name) {
        // Generated convenience method for spreadAsRequestBodyWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("name", name);
        BinaryData request = BinaryData.fromObject(requestObj);
        spreadAsRequestBodyWithResponse(request, requestOptions).getValue();
    }

    /**
     * The spreadAsRequestParameter operation.
     *
     * @param id A sequence of textual characters.
     * @param xMsTestHeader A sequence of textual characters.
     * @param name A sequence of textual characters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void spreadAsRequestParameter(String id, String xMsTestHeader, String name) {
        // Generated convenience method for spreadAsRequestParameterWithResponse
        RequestOptions requestOptions = new RequestOptions();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("name", name);
        BinaryData request = BinaryData.fromObject(requestObj);
        spreadAsRequestParameterWithResponse(id, xMsTestHeader, request, requestOptions).getValue();
    }

    /**
     * The spreadWithMultipleParameters operation.
     *
     * @param options Options for spreadWithMultipleParameters API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void spreadWithMultipleParameters(SpreadWithMultipleParametersOptions options) {
        // Generated convenience method for spreadWithMultipleParametersWithResponse
        RequestOptions requestOptions = new RequestOptions();
        String id = options.getId();
        String xMsTestHeader = options.getXMsTestHeader();
        Map<String, Object> requestObj = new HashMap<>();
        requestObj.put("prop1", options.getProp1());
        requestObj.put("prop2", options.getProp2());
        requestObj.put("prop3", options.getProp3());
        requestObj.put("prop4", options.getProp4());
        requestObj.put("prop5", options.getProp5());
        requestObj.put("prop6", options.getProp6());
        BinaryData request = BinaryData.fromObject(requestObj);
        spreadWithMultipleParametersWithResponse(id, xMsTestHeader, request, requestOptions).getValue();
    }
}
