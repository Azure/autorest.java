// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.encode.datetime.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.List;

/** The UnixTimestampArrayDatetimeProperty model. */
@Immutable
public final class UnixTimestampArrayDatetimeProperty {
    /*
     * The value property.
     */
    @Generated
    @JsonProperty(value = "value")
    private List<Long> value;

    /**
     * Creates an instance of UnixTimestampArrayDatetimeProperty class.
     *
     * @param value the value value to set.
     */
    @Generated
    public UnixTimestampArrayDatetimeProperty(List<OffsetDateTime> value) {
        this.value = value.stream().map(el -> el.toEpochSecond()).collect(java.util.stream.Collectors.toList());
    }

    @Generated
    @JsonCreator
    private static UnixTimestampArrayDatetimeProperty fromJson(@JsonProperty(value = "value") List<Long> value) {
        return new UnixTimestampArrayDatetimeProperty(
                value.stream()
                        .map(el -> OffsetDateTime.ofInstant(Instant.ofEpochSecond(el), ZoneOffset.UTC))
                        .collect(java.util.stream.Collectors.toList()));
    }

    /**
     * Get the value property: The value property.
     *
     * @return the value value.
     */
    @Generated
    public List<OffsetDateTime> getValue() {
        if (this.value == null) {
            return null;
        }
        return this.value.stream()
                .map(el -> OffsetDateTime.ofInstant(Instant.ofEpochSecond(el), ZoneOffset.UTC))
                .collect(java.util.stream.Collectors.toList());
    }
}
