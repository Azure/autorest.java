// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.encode.bytes.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.core.util.logging.ClientLogger;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Properties.
 */
public final class PropertiesImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final PropertiesService service;

    /**
     * The service client containing this operation class.
     */
    private final BytesClientImpl client;

    /**
     * Initializes an instance of PropertiesImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
     PropertiesImpl(BytesClientImpl client) {
        this.service = RestProxy.create(PropertiesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BytesClientProperties to be used by the proxy service to perform
     * REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "BytesClientPropertie")
    public interface PropertiesService {
        @Post("/encode/bytes/property/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> defaultMethod(@HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/encode/bytes/property/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> defaultMethodSync(@HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/encode/bytes/property/base64")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> base64(@HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/encode/bytes/property/base64")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> base64Sync(@HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/encode/bytes/property/base64url")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> base64Url(@HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/encode/bytes/property/base64url")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> base64UrlSync(@HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/encode/bytes/property/base64url-array")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> base64UrlArray(@HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);

        @Post("/encode/bytes/property/base64url-array")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = {401})
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = {404})
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> base64UrlArraySync(@HeaderParam("accept") String accept, @BodyParam("application/json") BinaryData body, RequestOptions requestOptions, Context context);
    }

    /**
     * The defaultMethod operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: byte[] (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: byte[] (Required)
     * }
     * }</pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> defaultMethodWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.defaultMethod(accept, body, requestOptions, context));
    }

    /**
     * The defaultMethod operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: byte[] (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: byte[] (Required)
     * }
     * }</pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> defaultMethodWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.defaultMethodSync(accept, body, requestOptions, Context.NONE);
    }

    /**
     * The base64 operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: byte[] (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: byte[] (Required)
     * }
     * }</pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> base64WithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.base64(accept, body, requestOptions, context));
    }

    /**
     * The base64 operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: byte[] (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: byte[] (Required)
     * }
     * }</pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> base64WithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.base64Sync(accept, body, requestOptions, Context.NONE);
    }

    /**
     * The base64Url operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: Base64Url (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: Base64Url (Required)
     * }
     * }</pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> base64UrlWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.base64Url(accept, body, requestOptions, context));
    }

    /**
     * The base64Url operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: Base64Url (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value: Base64Url (Required)
     * }
     * }</pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> base64UrlWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.base64UrlSync(accept, body, requestOptions, Context.NONE);
    }

    /**
     * The base64UrlArray operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value (Required): [
     *         Base64Url (Required)
     *     ]
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value (Required): [
     *         Base64Url (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> base64UrlArrayWithResponseAsync(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.base64UrlArray(accept, body, requestOptions, context));
    }

    /**
     * The base64UrlArray operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value (Required): [
     *         Base64Url (Required)
     *     ]
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     value (Required): [
     *         Base64Url (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> base64UrlArrayWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.base64UrlArraySync(accept, body, requestOptions, Context.NONE);
    }
}
