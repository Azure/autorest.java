// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.payload.multipart.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The JsonArrayPartsRequest model.
 */
@Fluent
public final class JsonArrayPartsRequest implements JsonSerializable<JsonArrayPartsRequest> {
    /*
     * The profileImage property.
     */
    @Generated
    private final BinaryData profileImage;

    /*
     * The filename for profileImage
     */
    @Generated
    private String profileImageFilename = "profileImage";

    /*
     * The previousAddresses property.
     */
    @Generated
    private final List<Address> previousAddresses;

    /**
     * Creates an instance of JsonArrayPartsRequest class.
     * 
     * @param profileImage the profileImage value to set.
     * @param previousAddresses the previousAddresses value to set.
     */
    @Generated
    public JsonArrayPartsRequest(BinaryData profileImage, List<Address> previousAddresses) {
        this.profileImage = profileImage;
        this.previousAddresses = previousAddresses;
    }

    /**
     * Get the profileImage property: The profileImage property.
     * 
     * @return the profileImage value.
     */
    @Generated
    public BinaryData getProfileImage() {
        return this.profileImage;
    }

    /**
     * Get the profileImageFilename property: The filename for profileImage.
     * 
     * @return the profileImageFilename value.
     */
    @Generated
    public String getProfileImageFilename() {
        return this.profileImageFilename;
    }

    /**
     * Set the profileImageFilename property: The filename for profileImage.
     * 
     * @param profileImageFilename the profileImageFilename value to set.
     * @return the JsonArrayPartsRequest object itself.
     */
    @Generated
    public JsonArrayPartsRequest setProfileImageFilename(String profileImageFilename) {
        this.profileImageFilename = profileImageFilename;
        return this;
    }

    /**
     * Get the previousAddresses property: The previousAddresses property.
     * 
     * @return the previousAddresses value.
     */
    @Generated
    public List<Address> getPreviousAddresses() {
        return this.previousAddresses;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("profileImage", this.profileImage.toObject(Object.class));
        jsonWriter.writeArrayField("previousAddresses", this.previousAddresses,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("profileImage", this.profileImageFilename);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonArrayPartsRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonArrayPartsRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JsonArrayPartsRequest.
     */
    public static JsonArrayPartsRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData profileImage = null;
            List<Address> previousAddresses = null;
            String profileImageFilename = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("profileImage".equals(fieldName)) {
                    profileImage
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("previousAddresses".equals(fieldName)) {
                    previousAddresses = reader.readArray(reader1 -> Address.fromJson(reader1));
                } else if ("profileImage".equals(fieldName)) {
                    profileImageFilename = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            JsonArrayPartsRequest deserializedJsonArrayPartsRequest
                = new JsonArrayPartsRequest(profileImage, previousAddresses);
            deserializedJsonArrayPartsRequest.profileImageFilename = profileImageFilename;

            return deserializedJsonArrayPartsRequest;
        });
    }
}
