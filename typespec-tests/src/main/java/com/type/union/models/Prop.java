// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.type.union.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Collection;

/**
 * Defines values for Prop.
 */
public final class Prop extends ExpandableStringEnum<Prop> implements JsonSerializable<Prop> {
    /**
     * Static value b for Prop.
     */
    @Generated
    public static final Prop B = fromString("b");

    /**
     * Static value c for Prop.
     */
    @Generated
    public static final Prop C = fromString("c");

    /**
     * Creates a new instance of Prop value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public Prop() {
    }

    /**
     * Creates or finds a Prop from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding Prop.
     */
    @Generated
    public static Prop fromString(String name) {
        return fromString(name, Prop.class);
    }

    /**
     * Gets known Prop values.
     * 
     * @return known Prop values.
     */
    @Generated
    public static Collection<Prop> values() {
        return values(Prop.class);
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(toString());
    }

    /**
     * Reads a Prop from the JSON stream.
     * <p>
     * The passed JsonReader must be positioned at a JsonToken.STRING value.
     * 
     * @param jsonReader The JsonReader being read.
     * @return The Prop that the JSON stream represented, may return null.
     * @throws java.io.IOException If a Prop fails to be read from the JsonReader.
     */
    @Generated
    public static Prop fromJson(JsonReader jsonReader) throws IOException {
        return fromString(jsonReader.getString(), Prop.class);
    }
}
