// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.type.union.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The first one of the unioned model type.
 */
@Immutable
public final class Model1 extends BaseModel {
    /*
     * The prop1 property.
     */
    @Generated
    private final int prop1;

    /**
     * Creates an instance of Model1 class.
     * 
     * @param name the name value to set.
     * @param prop1 the prop1 value to set.
     */
    @Generated
    public Model1(String name, int prop1) {
        super(name);
        this.prop1 = prop1;
    }

    /**
     * Get the prop1 property: The prop1 property.
     * 
     * @return the prop1 value.
     */
    @Generated
    public int getProp1() {
        return this.prop1;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeIntField("prop1", this.prop1);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Model1 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Model1 if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Model1.
     */
    public static Model1 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean prop1Found = false;
            int prop1 = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("prop1".equals(fieldName)) {
                    prop1 = reader.getInt();
                    prop1Found = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && prop1Found) {
                return new Model1(name, prop1);
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!prop1Found) {
                missingProperties.add("prop1");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
