// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.type.union.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Collection;

/**
 * Defines values for Lr.
 */
public final class Lr extends ExpandableStringEnum<Lr> implements JsonSerializable<Lr> {
    /**
     * Static value left for Lr.
     */
    @Generated
    public static final Lr LEFT = fromString("left");

    /**
     * Static value right for Lr.
     */
    @Generated
    public static final Lr RIGHT = fromString("right");

    /**
     * Creates a new instance of Lr value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public Lr() {
    }

    /**
     * Creates or finds a Lr from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding Lr.
     */
    @Generated
    public static Lr fromString(String name) {
        return fromString(name, Lr.class);
    }

    /**
     * Gets known Lr values.
     * 
     * @return known Lr values.
     */
    @Generated
    public static Collection<Lr> values() {
        return values(Lr.class);
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(toString());
    }

    /**
     * Reads a Lr from the JSON stream.
     * <p>
     * The passed JsonReader must be positioned at a JsonToken.STRING value.
     * 
     * @param jsonReader The JsonReader being read.
     * @return The Lr that the JSON stream represented, may return null.
     * @throws java.io.IOException If a Lr fails to be read from the JsonReader.
     */
    @Generated
    public static Lr fromJson(JsonReader jsonReader) throws IOException {
        return fromString(jsonReader.getString(), Lr.class);
    }
}
