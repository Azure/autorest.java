// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.type.property.additionalproperties.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * The model extends from a model that spread Record&lt;ModelForRecord[]&gt; with the different known property type.
 */
@Fluent
public final class DifferentSpreadModelArrayDerived implements JsonSerializable<DifferentSpreadModelArrayDerived> {
    /*
     * The index property
     */
    @Generated
    private final List<ModelForRecord> derivedProp;

    /*
     * The model spread Record<ModelForRecord[]> with the different known property type
     */
    @Generated
    private Map<String, List<ModelForRecord>> additionalProperties;

    /**
     * Creates an instance of DifferentSpreadModelArrayDerived class.
     * 
     * @param derivedProp the derivedProp value to set.
     */
    @Generated
    public DifferentSpreadModelArrayDerived(List<ModelForRecord> derivedProp) {
        this.derivedProp = derivedProp;
    }

    /**
     * Get the derivedProp property: The index property.
     * 
     * @return the derivedProp value.
     */
    @Generated
    public List<ModelForRecord> getDerivedProp() {
        return this.derivedProp;
    }

    /**
     * Get the additionalProperties property: The model spread Record&lt;ModelForRecord[]&gt; with the different known
     * property type.
     * 
     * @return the additionalProperties value.
     */
    @Generated
    public Map<String, List<ModelForRecord>> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: The model spread Record&lt;ModelForRecord[]&gt; with the different known
     * property type.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the DifferentSpreadModelArrayDerived object itself.
     */
    @Generated
    public DifferentSpreadModelArrayDerived
        setAdditionalProperties(Map<String, List<ModelForRecord>> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("derivedProp", this.derivedProp, (writer, element) -> writer.writeJson(element));
        if (additionalProperties != null) {
            for (Map.Entry<String, List<ModelForRecord>> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DifferentSpreadModelArrayDerived from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DifferentSpreadModelArrayDerived if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DifferentSpreadModelArrayDerived.
     */
    @Generated
    public static DifferentSpreadModelArrayDerived fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<ModelForRecord> derivedProp = null;
            Map<String, List<ModelForRecord>> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("derivedProp".equals(fieldName)) {
                    derivedProp = reader.readArray(reader1 -> ModelForRecord.fromJson(reader1));
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, null);
                }
            }
            DifferentSpreadModelArrayDerived deserializedDifferentSpreadModelArrayDerived
                = new DifferentSpreadModelArrayDerived(derivedProp);
            deserializedDifferentSpreadModelArrayDerived.additionalProperties = additionalProperties;

            return deserializedDifferentSpreadModelArrayDerived;
        });
    }
}
