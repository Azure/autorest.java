// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.naming.models;

import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines values for RequestType.
 */
public enum RequestType implements JsonSerializable<RequestType> {
    /**
     * Enum value Type1.
     */
    TYPE1("Type1"),

    /**
     * Enum value Type2.
     */
    TYPE2("Type2");

    /**
     * The actual serialized value for a RequestType instance.
     */
    private final String value;

    RequestType(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a RequestType instance.
     * 
     * @param value the serialized value to parse.
     * @return the parsed RequestType object, or null if unable to parse.
     */
    public static RequestType fromString(String value) {
        if (value == null) {
            return null;
        }
        RequestType[] items = RequestType.values();
        for (RequestType item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return this.value;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(value);
    }

    /**
     * Reads a RequestType from the JSON stream.
     * <p>
     * The passed JsonReader must be positioned at a JsonToken.STRING value.
     * 
     * @param jsonReader The JsonReader being read.
     * @return The RequestType that the JSON stream represented, may return null.
     * @throws java.io.IOException If a RequestType fails to be read from the JsonReader.
     */
    @Generated
    public static RequestType fromJson(JsonReader jsonReader) throws IOException {
        return fromString(jsonReader.getString());
    }
}
