// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.naming.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Data model.
 */
@Immutable
public class Data implements JsonSerializable<Data> {
    /*
     * The kind_id property.
     */
    @Generated
    private String type;

    /**
     * Creates an instance of Data class.
     */
    @Generated
    protected Data() {
        this.type = "Data";
    }

    /**
     * Get the type property: The kind_id property.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Set the type property: The kind_id property.
     * 
     * @param type the type value to set.
     * @return the Data object itself.
     */
    Data setType(String type) {
        this.type = type;
        return this;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind_id", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Data from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Data if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Data.
     */
    @Generated
    public static Data fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind_id".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("bytes".equals(discriminatorValue)) {
                    return BytesData.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static Data fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Data deserializedData = new Data();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind_id".equals(fieldName)) {
                    deserializedData.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedData;
        });
    }
}
