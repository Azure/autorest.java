// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.naming.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Collection;

/**
 * summary of Statuses
 * 
 * description of Statuses.
 */
public final class DataStatus extends ExpandableStringEnum<DataStatus> implements JsonSerializable<DataStatus> {
    /**
     * Static value Running for DataStatus.
     */
    @Generated
    public static final DataStatus RUNNING = fromString("Running");

    /**
     * Static value Completed for DataStatus.
     */
    @Generated
    public static final DataStatus COMPLETED = fromString("Completed");

    /**
     * Static value Failed for DataStatus.
     */
    @Generated
    public static final DataStatus FAILED = fromString("Failed");

    /**
     * Creates a new instance of DataStatus value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public DataStatus() {
    }

    /**
     * Creates or finds a DataStatus from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding DataStatus.
     */
    @Generated
    public static DataStatus fromString(String name) {
        return fromString(name, DataStatus.class);
    }

    /**
     * Gets known DataStatus values.
     * 
     * @return known DataStatus values.
     */
    @Generated
    public static Collection<DataStatus> values() {
        return values(DataStatus.class);
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(toString());
    }

    /**
     * Reads a DataStatus from the JSON stream.
     * <p>
     * The passed JsonReader must be positioned at a JsonToken.STRING value.
     * 
     * @param jsonReader The JsonReader being read.
     * @return The DataStatus that the JSON stream represented, may return null.
     * @throws java.io.IOException If a DataStatus fails to be read from the JsonReader.
     */
    public static DataStatus fromJson(JsonReader jsonReader) throws IOException {
        return fromString(jsonReader.getString(), DataStatus.class);
    }
}
