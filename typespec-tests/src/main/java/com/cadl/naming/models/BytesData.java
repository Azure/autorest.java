// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.naming.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The BytesData model.
 */
@Immutable
public final class BytesData extends Data {
    /*
     * The data property.
     */
    @Generated
    private final byte[] data;

    /**
     * Creates an instance of BytesData class.
     * 
     * @param data the data value to set.
     */
    @Generated
    private BytesData(byte[] data) {
        this.data = data;
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    @Generated
    public byte[] getData() {
        return CoreUtils.clone(this.data);
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind_id", "bytes");
        jsonWriter.writeBinaryField("data", this.data);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BytesData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BytesData if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     * polymorphic discriminator.
     * @throws IOException If an error occurs while reading the BytesData.
     */
    public static BytesData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            byte[] data = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind_id".equals(fieldName)) {
                    String type = reader.getString();
                    if (!"bytes".equals(type)) {
                        throw new IllegalStateException(
                            "'kind_id' was expected to be non-null and equal to 'bytes'. The found 'kind_id' was '"
                                + type + "'.");
                    }
                } else if ("data".equals(fieldName)) {
                    data = reader.getBinary();
                } else {
                    reader.skipChildren();
                }
            }
            return new BytesData(data);
        });
    }
}
