// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.armresourceprovider.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.HashMap;
import java.util.Map;

/**
 * The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be
 * ARM resource ids in the form:
 * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
 * The dictionary values can be empty objects ({}) in requests.",.
 */
@Fluent
public final class UserAssignedIdentities {
    /*
     * Additional properties
     */
    @JsonIgnore
    private Map<String, UserAssignedIdentity> additionalProperties;

    /**
     * Creates an instance of UserAssignedIdentities class.
     */
    public UserAssignedIdentities() {
    }

    /**
     * Get the additionalProperties property: Additional properties.
     * 
     * @return the additionalProperties value.
     */
    @JsonAnyGetter
    public Map<String, UserAssignedIdentity> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Additional properties.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the UserAssignedIdentities object itself.
     */
    public UserAssignedIdentities withAdditionalProperties(Map<String, UserAssignedIdentity> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    @JsonAnySetter
    void withAdditionalProperties(String key, UserAssignedIdentity value) {
        if (additionalProperties == null) {
            additionalProperties = new HashMap<>();
        }
        additionalProperties.put(key, value);
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (additionalProperties() != null) {
            additionalProperties().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }
}
