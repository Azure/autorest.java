// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.specialchars.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.regex.Pattern;

/**
 * The Resource model.
 */
@Immutable
public final class Resource {
    /*
     * id
     */
    @Generated
    @JsonProperty(value = "id")
    private String id;

    /*
     * The aggregation function to be applied on the client metric. Allowed functions
     * - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’,
     * ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
     * ‘count’ - for requests
     */
    @Generated
    @JsonProperty(value = "aggregate")
    private String aggregate;

    /*
     * The comparison operator. Supported types ‘>’, ‘<’
     */
    @Generated
    @JsonProperty(value = "condition")
    private String condition;

    /*
     * Request name for which the Pass fail criteria has to be applied
     */
    @Generated
    @JsonProperty(value = "requestName")
    private String requestName;

    /*
     * The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
     * 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
     */
    @Generated
    @JsonProperty(value = "value")
    private Double value;

    /**
     * Creates an instance of Resource class.
     * 
     * @param id the id value to set.
     */
    @Generated
    @JsonCreator
    private Resource(@JsonProperty(value = "id") String id) {
        this.id = id;
    }

    /**
     * Get the id property: id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the aggregate property: The aggregation function to be applied on the client metric. Allowed functions
     * - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’,
     * ‘max’ - for response_time_ms and latency metric, ‘avg’ - for requests_per_sec,
     * ‘count’ - for requests.
     * 
     * @return the aggregate value.
     */
    @Generated
    public String getAggregate() {
        return this.aggregate;
    }

    /**
     * Get the condition property: The comparison operator. Supported types ‘&gt;’, ‘&lt;’.
     * 
     * @return the condition value.
     */
    @Generated
    public String getCondition() {
        return this.condition;
    }

    /**
     * Get the requestName property: Request name for which the Pass fail criteria has to be applied.
     * 
     * @return the requestName value.
     */
    @Generated
    public String getRequestName() {
        return this.requestName;
    }

    /**
     * Get the value property: The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
     * 100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
     * 
     * @return the value value.
     */
    @Generated
    public Double getValue() {
        return this.value;
    }
}
