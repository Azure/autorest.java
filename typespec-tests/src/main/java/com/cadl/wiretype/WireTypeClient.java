// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.wiretype;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Base64Url;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.UrlBuilder;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.TypeReference;
import com.cadl.wiretype.implementation.WireTypeClientImpl;
import com.cadl.wiretype.models.SubClass;
import com.cadl.wiretype.models.SubClassBothMismatch;
import com.cadl.wiretype.models.SubClassMismatch;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the synchronous WireTypeClient type.
 */
@ServiceClient(builder = WireTypeClientBuilder.class)
public final class WireTypeClient {
    @Generated
    private final WireTypeClientImpl serviceClient;

    /**
     * Initializes an instance of WireTypeClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
     WireTypeClient(WireTypeClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * The superClassMismatch operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     *     dateTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     *     dateTime: OffsetDateTime (Required)
     * }
     * }</pre>
     * 
     * @param subClass The subClass parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> superClassMismatchWithResponse(BinaryData subClass, RequestOptions requestOptions) {
        return this.serviceClient.superClassMismatchWithResponse(subClass, requestOptions);
    }

    /**
     * The subClassMismatch operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     dateTime: OffsetDateTime (Required)
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     dateTime: OffsetDateTime (Required)
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     * }
     * }</pre>
     * 
     * @param subClassMismatch The subClassMismatch parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> subClassMismatchWithResponse(BinaryData subClassMismatch, RequestOptions requestOptions) {
        return this.serviceClient.subClassMismatchWithResponse(subClassMismatch, requestOptions);
    }

    /**
     * The bothClassMismatch operation.
     * <p><strong>Request Body Schema</strong></p>
     * <pre>{@code
     * {
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     *     base64url: Base64Url (Required)
     * }
     * }</pre>
     * <p><strong>Response Body Schema</strong></p>
     * <pre>{@code
     * {
     *     dateTimeRfc7231: DateTimeRfc1123 (Required)
     *     base64url: Base64Url (Required)
     * }
     * }</pre>
     * 
     * @param subClassBothMismatch The subClassBothMismatch parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> bothClassMismatchWithResponse(BinaryData subClassBothMismatch, RequestOptions requestOptions) {
        return this.serviceClient.bothClassMismatchWithResponse(subClassBothMismatch, requestOptions);
    }

    /**
     * The superClassMismatch operation.
     * 
     * @param subClass The subClass parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubClass superClassMismatch(SubClass subClass) {
        // Generated convenience method for superClassMismatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return superClassMismatchWithResponse(BinaryData.fromObject(subClass), requestOptions).getValue().toObject(SubClass.class);
    }

    /**
     * The subClassMismatch operation.
     * 
     * @param subClassMismatch The subClassMismatch parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubClassMismatch subClassMismatch(SubClassMismatch subClassMismatch) {
        // Generated convenience method for subClassMismatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return subClassMismatchWithResponse(BinaryData.fromObject(subClassMismatch), requestOptions).getValue().toObject(SubClassMismatch.class);
    }

    /**
     * The bothClassMismatch operation.
     * 
     * @param subClassBothMismatch The subClassBothMismatch parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubClassBothMismatch bothClassMismatch(SubClassBothMismatch subClassBothMismatch) {
        // Generated convenience method for bothClassMismatchWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return bothClassMismatchWithResponse(BinaryData.fromObject(subClassBothMismatch), requestOptions).getValue().toObject(SubClassBothMismatch.class);
    }
}
