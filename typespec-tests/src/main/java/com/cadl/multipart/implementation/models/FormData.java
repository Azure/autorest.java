// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.multipart.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The FormData model.
 */
@Immutable
public final class FormData implements JsonSerializable<FormData> {
    /*
     * The name property.
     */
    @Generated
    private final String name;

    /*
     * The image property.
     */
    @Generated
    private final byte[] image;

    /**
     * Creates an instance of FormData class.
     * 
     * @param name the name value to set.
     * @param image the image value to set.
     */
    @Generated
    public FormData(String name, byte[] image) {
        this.name = name;
        this.image = image;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the image property: The image property.
     * 
     * @return the image value.
     */
    @Generated
    public byte[] getImage() {
        return CoreUtils.clone(this.image);
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeBinaryField("image", this.image);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FormData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FormData if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FormData.
     */
    public static FormData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean imageFound = false;
            byte[] image = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("image".equals(fieldName)) {
                    image = reader.getBinary();
                    imageFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && imageFound) {
                FormData deserializedFormData = new FormData(name, image);

                return deserializedFormData;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!imageFound) {
                missingProperties.add("image");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
