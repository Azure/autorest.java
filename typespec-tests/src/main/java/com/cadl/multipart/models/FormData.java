// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.multipart.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The FormData model.
 */
@Fluent
public final class FormData implements JsonSerializable<FormData> {
    /*
     * The name property.
     */
    @Generated
    private final String name;

    /*
     * The resolution property.
     */
    @Generated
    private final int resolution;

    /*
     * The type property.
     */
    @Generated
    private final ImageType type;

    /*
     * The size property.
     */
    @Generated
    private final Size size;

    /*
     * The image property.
     */
    @Generated
    private final BinaryData image;

    /*
     * The filename for image
     */
    @Generated
    private String imageFilename = "image";

    /**
     * Creates an instance of FormData class.
     * 
     * @param name the name value to set.
     * @param resolution the resolution value to set.
     * @param type the type value to set.
     * @param size the size value to set.
     * @param image the image value to set.
     */
    @Generated
    public FormData(String name, int resolution, ImageType type, Size size, BinaryData image) {
        this.name = name;
        this.resolution = resolution;
        this.type = type;
        this.size = size;
        this.image = image;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the resolution property: The resolution property.
     * 
     * @return the resolution value.
     */
    @Generated
    public int getResolution() {
        return this.resolution;
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Generated
    public ImageType getType() {
        return this.type;
    }

    /**
     * Get the size property: The size property.
     * 
     * @return the size value.
     */
    @Generated
    public Size getSize() {
        return this.size;
    }

    /**
     * Get the image property: The image property.
     * 
     * @return the image value.
     */
    @Generated
    public BinaryData getImage() {
        return this.image;
    }

    /**
     * Get the imageFilename property: The filename for image.
     * 
     * @return the imageFilename value.
     */
    @Generated
    public String getImageFilename() {
        return this.imageFilename;
    }

    /**
     * Set the imageFilename property: The filename for image.
     * 
     * @param imageFilename the imageFilename value to set.
     * @return the FormData object itself.
     */
    @Generated
    public FormData setImageFilename(String imageFilename) {
        this.imageFilename = imageFilename;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeIntField("resolution", this.resolution);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("size", this.size);
        jsonWriter.writeUntypedField("image", this.image.toObject(Object.class));
        jsonWriter.writeStringField("image", this.imageFilename);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FormData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FormData if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FormData.
     */
    public static FormData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            int resolution = 0;
            ImageType type = null;
            Size size = null;
            BinaryData image = null;
            String imageFilename = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("resolution".equals(fieldName)) {
                    resolution = reader.getInt();
                } else if ("type".equals(fieldName)) {
                    type = ImageType.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    size = Size.fromJson(reader);
                } else if ("image".equals(fieldName)) {
                    image = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("image".equals(fieldName)) {
                    imageFilename = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FormData deserializedFormData = new FormData(name, resolution, type, size, image);
            deserializedFormData.imageFilename = imageFilename;

            return deserializedFormData;
        });
    }
}
