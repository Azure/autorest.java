// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.armstreamstyleserialization.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.AdditionalInfo;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The Error model.
 */
@Immutable
public final class Error extends ManagementError {
    /*
     * The details property.
     */
    private List<Error> details;

    /*
     * The additionalProperty property.
     */
    private String additionalProperty;

    /*
     * The error code parsed from the body of the http error response.
     */
    private String code;

    /*
     * The error message parsed from the body of the http error response.
     */
    private String message;

    /*
     * The target of the error.
     */
    private String target;

    /*
     * Additional info for the error.
     */
    private List<AdditionalInfo> additionalInfo;

    /**
     * Creates an instance of Error class.
     */
    private Error() {
    }

    /**
     * Get the details property: The details property.
     * 
     * @return the details value.
     */
    @Override
    public List<Error> getDetails() {
        return this.details;
    }

    /**
     * Get the additionalProperty property: The additionalProperty property.
     * 
     * @return the additionalProperty value.
     */
    public String getAdditionalProperty() {
        return this.additionalProperty;
    }

    /**
     * Get the code property: The error code parsed from the body of the http error response.
     * 
     * @return the code value.
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Get the message property: The error message parsed from the body of the http error response.
     * 
     * @return the message value.
     */
    @Override
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the target property: The target of the error.
     * 
     * @return the target value.
     */
    @Override
    public String getTarget() {
        return this.target;
    }

    /**
     * Get the additionalInfo property: Additional info for the error.
     * 
     * @return the additionalInfo value.
     */
    @Override
    public List<AdditionalInfo> getAdditionalInfo() {
        return this.additionalInfo;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getDetails() != null) {
            getDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Error from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Error if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Error.
     */
    public static Error fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonReader bufferedReader = reader.bufferObject();
            bufferedReader.nextToken();
            while (bufferedReader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = bufferedReader.getFieldName();
                bufferedReader.nextToken();

                if ("error".equals(fieldName)) {
                    return fromJson0(bufferedReader);
                } else {
                    bufferedReader.skipChildren();
                }
            }
            return fromJson0(bufferedReader.reset());
        });
    }

    private static Error fromJson0(JsonReader reader) throws IOException {
        Error deserializedError = new Error();
        while (reader.nextToken() != JsonToken.END_OBJECT) {
            String fieldName = reader.getFieldName();
            reader.nextToken();

            if ("code".equals(fieldName)) {
                deserializedError.code = reader.getString();
            } else if ("message".equals(fieldName)) {
                deserializedError.message = reader.getString();
            } else if ("target".equals(fieldName)) {
                deserializedError.target = reader.getString();
            } else if ("additionalInfo".equals(fieldName)) {
                List<AdditionalInfo> additionalInfo = reader.readArray(reader1 -> AdditionalInfo.fromJson(reader1));
                deserializedError.additionalInfo = additionalInfo;
            } else if ("additionalProperty".equals(fieldName)) {
                deserializedError.additionalProperty = reader.getString();
            } else if ("details".equals(fieldName)) {
                List<Error> details = reader.readArray(reader1 -> Error.fromJson(reader1));
                deserializedError.details = details;
            } else {
                reader.skipChildren();
            }
        }

        return deserializedError;
    }
}
