// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.internal.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;

import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/**
 * The StandAloneUnion model.
 */
@Immutable
public final class StandAloneUnion implements JsonSerializable<StandAloneUnion> {
    /*
     * The data property.
     */
    @Generated
    private final BinaryData data;

    /**
     * Creates an instance of StandAloneUnion class.
     * 
     * @param data the data value to set.
     */
    @Generated
    private StandAloneUnion(BinaryData data) {
        this.data = data;
    }

    /**
     * Get the data property: The data property.
     * 
     * @return the data value.
     */
    @Generated
    public BinaryData getData() {
        return this.data;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeUntypedField("data", this.data.toObject(Object.class));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StandAloneUnion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StandAloneUnion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StandAloneUnion.
     */
    public static StandAloneUnion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BinaryData data = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    data = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else {
                    reader.skipChildren();
                }
            }
            return new StandAloneUnion(data);
        });
    }
}
