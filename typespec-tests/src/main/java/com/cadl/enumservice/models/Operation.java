// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.enumservice.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The Operation model.
 */
@Immutable
public final class Operation implements JsonSerializable<Operation> {
    /*
     * The name property.
     */
    @Generated
    private final OperationName name;

    /*
     * The best property.
     */
    @Generated
    private final boolean best = true;

    /*
     * The age property.
     */
    @Generated
    private final long age = 50L;

    /*
     * The priority property.
     */
    @Generated
    private final Priority priority;

    /*
     * The color property.
     */
    @Generated
    private final ColorModel color;

    /*
     * The unit property.
     */
    @Generated
    private final Unit unit;

    /*
     * The priorityValue property.
     */
    @Generated
    private final Priority priorityValue = Priority.LOW;

    /*
     * The colorValue property.
     */
    @Generated
    private final Color colorValue = Color.GREEN;

    /*
     * The colorModelValue property.
     */
    @Generated
    private final ColorModel colorModelValue = ColorModel.BLUE;

    /*
     * The unitValue property.
     */
    @Generated
    private final Unit unitValue = Unit.MILLIGRAM;

    /**
     * Creates an instance of Operation class.
     * 
     * @param name the name value to set.
     * @param priority the priority value to set.
     * @param color the color value to set.
     * @param unit the unit value to set.
     */
    @Generated
    private Operation(OperationName name, Priority priority, ColorModel color, Unit unit) {
        this.name = name;
        this.priority = priority;
        this.color = color;
        this.unit = unit;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Generated
    public OperationName getName() {
        return this.name;
    }

    /**
     * Get the best property: The best property.
     * 
     * @return the best value.
     */
    @Generated
    public boolean isBest() {
        return this.best;
    }

    /**
     * Get the age property: The age property.
     * 
     * @return the age value.
     */
    @Generated
    public long getAge() {
        return this.age;
    }

    /**
     * Get the priority property: The priority property.
     * 
     * @return the priority value.
     */
    @Generated
    public Priority getPriority() {
        return this.priority;
    }

    /**
     * Get the color property: The color property.
     * 
     * @return the color value.
     */
    @Generated
    public ColorModel getColor() {
        return this.color;
    }

    /**
     * Get the unit property: The unit property.
     * 
     * @return the unit value.
     */
    @Generated
    public Unit getUnit() {
        return this.unit;
    }

    /**
     * Get the priorityValue property: The priorityValue property.
     * 
     * @return the priorityValue value.
     */
    @Generated
    public Priority getPriorityValue() {
        return this.priorityValue;
    }

    /**
     * Get the colorValue property: The colorValue property.
     * 
     * @return the colorValue value.
     */
    @Generated
    public Color getColorValue() {
        return this.colorValue;
    }

    /**
     * Get the colorModelValue property: The colorModelValue property.
     * 
     * @return the colorModelValue value.
     */
    @Generated
    public ColorModel getColorModelValue() {
        return this.colorModelValue;
    }

    /**
     * Get the unitValue property: The unitValue property.
     * 
     * @return the unitValue value.
     */
    @Generated
    public Unit getUnitValue() {
        return this.unitValue;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name == null ? null : this.name.toString());
        jsonWriter.writeBooleanField("best", this.best);
        jsonWriter.writeLongField("age", this.age);
        jsonWriter.writeLongField("priority", this.priority == null ? null : this.priority.toLong());
        jsonWriter.writeStringField("color", this.color == null ? null : this.color.toString());
        jsonWriter.writeDoubleField("unit", this.unit == null ? null : this.unit.toDouble());
        jsonWriter.writeLongField("priorityValue", this.priorityValue == null ? null : this.priorityValue.toLong());
        jsonWriter.writeStringField("colorValue", this.colorValue == null ? null : this.colorValue.toString());
        jsonWriter.writeStringField("colorModelValue",
            this.colorModelValue == null ? null : this.colorModelValue.toString());
        jsonWriter.writeDoubleField("unitValue", this.unitValue == null ? null : this.unitValue.toDouble());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Operation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Operation if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Operation.
     */
    public static Operation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            OperationName name = null;
            boolean bestFound = false;
            boolean best = false;
            boolean ageFound = false;
            long age = 0L;
            boolean priorityFound = false;
            Priority priority = null;
            boolean colorFound = false;
            ColorModel color = null;
            boolean unitFound = false;
            Unit unit = null;
            boolean priorityValueFound = false;
            Priority priorityValue = null;
            boolean colorValueFound = false;
            Color colorValue = null;
            boolean colorModelValueFound = false;
            ColorModel colorModelValue = null;
            boolean unitValueFound = false;
            Unit unitValue = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = OperationName.fromString(reader.getString());
                    nameFound = true;
                } else if ("best".equals(fieldName)) {
                    best = reader.getBoolean();
                    bestFound = true;
                } else if ("age".equals(fieldName)) {
                    age = reader.getLong();
                    ageFound = true;
                } else if ("priority".equals(fieldName)) {
                    priority = Priority.fromLong(reader.getLong());
                    priorityFound = true;
                } else if ("color".equals(fieldName)) {
                    color = ColorModel.fromString(reader.getString());
                    colorFound = true;
                } else if ("unit".equals(fieldName)) {
                    unit = Unit.fromDouble(reader.getDouble());
                    unitFound = true;
                } else if ("priorityValue".equals(fieldName)) {
                    priorityValue = Priority.fromLong(reader.getLong());
                    priorityValueFound = true;
                } else if ("colorValue".equals(fieldName)) {
                    colorValue = Color.fromString(reader.getString());
                    colorValueFound = true;
                } else if ("colorModelValue".equals(fieldName)) {
                    colorModelValue = ColorModel.fromString(reader.getString());
                    colorModelValueFound = true;
                } else if ("unitValue".equals(fieldName)) {
                    unitValue = Unit.fromDouble(reader.getDouble());
                    unitValueFound = true;
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && bestFound && ageFound && priorityFound && colorFound && unitFound && priorityValueFound
                && colorValueFound && colorModelValueFound && unitValueFound) {
                Operation deserializedOperation = new Operation(name, priority, color, unit);

                return deserializedOperation;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!bestFound) {
                missingProperties.add("best");
            }
            if (!ageFound) {
                missingProperties.add("age");
            }
            if (!priorityFound) {
                missingProperties.add("priority");
            }
            if (!colorFound) {
                missingProperties.add("color");
            }
            if (!unitFound) {
                missingProperties.add("unit");
            }
            if (!priorityValueFound) {
                missingProperties.add("priorityValue");
            }
            if (!colorValueFound) {
                missingProperties.add("colorValue");
            }
            if (!colorModelValueFound) {
                missingProperties.add("colorModelValue");
            }
            if (!unitValueFound) {
                missingProperties.add("unitValue");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
