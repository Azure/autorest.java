// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.response.models;

import com.azure.core.annotation.Generated;
import com.azure.core.util.ExpandableStringEnum;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Collection;

/**
 * Enum describing allowed operation states.
 */
public final class OperationState extends ExpandableStringEnum<OperationState>
    implements JsonSerializable<OperationState> {
    /**
     * The operation has not started.
     */
    @Generated
    public static final OperationState NOT_STARTED = fromString("NotStarted");

    /**
     * The operation is in progress.
     */
    @Generated
    public static final OperationState RUNNING = fromString("Running");

    /**
     * The operation has completed successfully.
     */
    @Generated
    public static final OperationState SUCCEEDED = fromString("Succeeded");

    /**
     * The operation has failed.
     */
    @Generated
    public static final OperationState FAILED = fromString("Failed");

    /**
     * The operation has been canceled by the user.
     */
    @Generated
    public static final OperationState CANCELED = fromString("Canceled");

    /**
     * Creates a new instance of OperationState value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Generated
    @Deprecated
    public OperationState() {
    }

    /**
     * Creates or finds a OperationState from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding OperationState.
     */
    @Generated
    public static OperationState fromString(String name) {
        return fromString(name, OperationState.class);
    }

    /**
     * Gets known OperationState values.
     * 
     * @return known OperationState values.
     */
    @Generated
    public static Collection<OperationState> values() {
        return values(OperationState.class);
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(toString());
    }

    /**
     * Reads a OperationState from the JSON stream.
     * <p>
     * The passed JsonReader must be positioned at a JsonToken.STRING value.
     * 
     * @param jsonReader The JsonReader being read.
     * @return The OperationState that the JSON stream represented, may return null.
     * @throws java.io.IOException If a OperationState fails to be read from the JsonReader.
     */
    public static OperationState fromJson(JsonReader jsonReader) throws IOException {
        return fromString(jsonReader.getString(), OperationState.class);
    }
}
