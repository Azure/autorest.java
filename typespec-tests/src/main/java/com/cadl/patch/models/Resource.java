// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.patch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.cadl.patch.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * The Resource model.
 */
@Fluent
public final class Resource implements JsonSerializable<Resource> {
    /*
     * The id property.
     */
    @Generated
    private String id;

    /*
     * The name property.
     */
    @Generated
    private String name;

    /*
     * The description property.
     */
    @Generated
    private String description;

    /*
     * The map property.
     */
    @Generated
    private final Map<String, String> map;

    /*
     * The longValue property.
     */
    @Generated
    private final long longValue;

    /*
     * The intValue property.
     */
    @Generated
    private final int intValue;

    /*
     * The enumValue property.
     */
    @Generated
    private ResourceEnumValue enumValue;

    @Generated
    private boolean jsonMergePatch;

    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setResourceAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of Resource class.
     * 
     * @param map the map value to set.
     * @param longValue the longValue value to set.
     * @param intValue the intValue value to set.
     */
    @Generated
    public Resource(Map<String, String> map, long longValue, int intValue) {
        this.map = map;
        this.longValue = longValue;
        this.intValue = intValue;
    }

    /**
     * Get the id property: The id property.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the description property: The description property.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: The description property.
     * 
     * @param description the description value to set.
     * @return the Resource object itself.
     */
    @Generated
    public Resource setDescription(String description) {
        this.description = description;
        this.updatedProperties.add("description");
        return this;
    }

    /**
     * Get the map property: The map property.
     * 
     * @return the map value.
     */
    @Generated
    public Map<String, String> getMap() {
        return this.map;
    }

    /**
     * Get the longValue property: The longValue property.
     * 
     * @return the longValue value.
     */
    @Generated
    public long getLongValue() {
        return this.longValue;
    }

    /**
     * Get the intValue property: The intValue property.
     * 
     * @return the intValue value.
     */
    @Generated
    public int getIntValue() {
        return this.intValue;
    }

    /**
     * Get the enumValue property: The enumValue property.
     * 
     * @return the enumValue value.
     */
    @Generated
    public ResourceEnumValue getEnumValue() {
        return this.enumValue;
    }

    /**
     * Set the enumValue property: The enumValue property.
     * 
     * @param enumValue the enumValue value to set.
     * @return the Resource object itself.
     */
    @Generated
    public Resource setEnumValue(ResourceEnumValue enumValue) {
        this.enumValue = enumValue;
        this.updatedProperties.add("enumValue");
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeMapField("map", this.map, (writer, element) -> writer.writeString(element));
            jsonWriter.writeLongField("longValue", this.longValue);
            jsonWriter.writeIntField("intValue", this.intValue);
            jsonWriter.writeStringField("description", this.description);
            jsonWriter.writeStringField("enumValue", this.enumValue == null ? null : this.enumValue.toString());
            return jsonWriter.writeEndObject();
        }
    }

    public JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (map != null) {
            jsonWriter.writeMapField("map", this.map, (writer, element) -> writer.writeString(element));
        } else if (updatedProperties.contains("map")) {
            jsonWriter.writeNullField("map");
        }
        jsonWriter.writeLongField("longValue", this.longValue);
        jsonWriter.writeIntField("intValue", this.intValue);
        if (description != null) {
            jsonWriter.writeStringField("description", this.description);
        } else if (updatedProperties.contains("description")) {
            jsonWriter.writeNullField("description");
        }
        if (enumValue != null) {
            jsonWriter.writeStringField("enumValue", this.enumValue == null ? null : this.enumValue.toString());
        } else if (updatedProperties.contains("enumValue")) {
            jsonWriter.writeNullField("enumValue");
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Resource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Resource if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Resource.
     */
    public static Resource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            Map<String, String> map = null;
            long longValue = 0L;
            int intValue = 0;
            String description = null;
            ResourceEnumValue enumValue = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("map".equals(fieldName)) {
                    map = reader.readMap(reader1 -> reader1.getString());
                } else if ("longValue".equals(fieldName)) {
                    longValue = reader.getLong();
                } else if ("intValue".equals(fieldName)) {
                    intValue = reader.getInt();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("enumValue".equals(fieldName)) {
                    enumValue = ResourceEnumValue.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            Resource deserializedResource = new Resource(map, longValue, intValue);
            deserializedResource.id = id;
            deserializedResource.name = name;
            deserializedResource.description = description;
            deserializedResource.enumValue = enumValue;

            return deserializedResource;
        });
    }
}
