// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.patch.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.cadl.patch.implementation.JsonMergePatchHelper;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/**
 * The third level model GoblinShark in polymorphic multiple levels inheritance.
 */
@Fluent
public final class GoblinShark extends Shark {
    @Generated
    private boolean jsonMergePatch;

    @Generated
    private final Set<String> updatedProperties = new HashSet<>();

    @Generated
    void serializeAsJsonMergePatch(boolean jsonMergePatch) {
        this.jsonMergePatch = jsonMergePatch;
    }

    static {
        JsonMergePatchHelper.setGoblinSharkAccessor((model, jsonMergePatchEnabled) -> {
            model.serializeAsJsonMergePatch(jsonMergePatchEnabled);
            return model;
        });
    }

    /**
     * Creates an instance of GoblinShark class.
     * 
     * @param age the age value to set.
     * @param sharktype the sharktype value to set.
     */
    @Generated
    public GoblinShark(int age, String sharktype) {
        super(age, sharktype);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public GoblinShark setColor(String color) {
        super.setColor(color);
        this.updatedProperties.add("color");
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        if (jsonMergePatch) {
            return toJsonMergePatch(jsonWriter);
        } else {
            jsonWriter.writeStartObject();
            jsonWriter.writeIntField("age", getAge());
            jsonWriter.writeStringField("sharktype", getSharktype());
            jsonWriter.writeStringField("color", getColor());
            return jsonWriter.writeEndObject();
        }
    }

    public JsonWriter toJsonMergePatch(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("age", getAge());
        if (getSharktype() != null) {
            jsonWriter.writeStringField("sharktype", getSharktype());
        } else if (updatedProperties.contains("sharktype")) {
            jsonWriter.writeNullField("sharktype");
        }
        if (getColor() != null) {
            jsonWriter.writeStringField("color", getColor());
        } else if (updatedProperties.contains("color")) {
            jsonWriter.writeNullField("color");
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GoblinShark from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GoblinShark if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties or the
     * polymorphic discriminator.
     * @throws IOException If an error occurs while reading the GoblinShark.
     */
    public static GoblinShark fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            int age = 0;
            String sharktype = null;
            String color = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sharktype".equals(fieldName)) {
                    sharktype = reader.getString();
                    if (!"goblin".equals(sharktype)) {
                        throw new IllegalStateException(
                            "'sharktype' was expected to be non-null and equal to 'goblin'. The found 'sharktype' was '"
                                + sharktype + "'.");
                    }
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("age".equals(fieldName)) {
                    age = reader.getInt();
                } else if ("color".equals(fieldName)) {
                    color = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            GoblinShark deserializedGoblinShark = new GoblinShark(age, sharktype);
            deserializedGoblinShark.setId(id);
            deserializedGoblinShark.setName(name);
            deserializedGoblinShark.setColor(color);

            return deserializedGoblinShark;
        });
    }
}
