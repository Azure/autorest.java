// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.streamstyleserialization.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The AsAssetResource model.
 */
@Immutable
public final class AsAssetResource extends AssetResource {
    /*
     * asset
     */
    @Generated
    private final AsAsset asset;

    /**
     * Creates an instance of AsAssetResource class.
     * 
     * @param asset the asset value to set.
     */
    @Generated
    private AsAssetResource(AsAsset asset) {
        this.asset = asset;
        this.kind = "as";
    }

    /**
     * Get the asset property: asset.
     * 
     * @return the asset value.
     */
    @Generated
    public AsAsset getAsset() {
        return this.asset;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        toJsonShared(jsonWriter);
        jsonWriter.writeJsonField("asset", this.asset);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AsAssetResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AsAssetResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AsAssetResource.
     */
    @Generated
    public static AsAssetResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            AsAsset asset = null;
            String kind = "as";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("asset".equals(fieldName)) {
                    asset = AsAsset.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    kind = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AsAssetResource deserializedAsAssetResource = new AsAssetResource(asset);
            deserializedAsAssetResource.setId(id);
            deserializedAsAssetResource.setName(name);
            deserializedAsAssetResource.kind = kind;

            return deserializedAsAssetResource;
        });
    }
}
