// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.cadl.streamstyleserialization.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The items in the current page of results.
 */
@Immutable
public class AssetResource implements JsonSerializable<AssetResource> {
    /*
     * Discriminator property for AssetResource.
     */
    @Generated
    String kind;

    /*
     * The system generated unique id for the resource.
     */
    @Generated
    private String id;

    /*
     * The caller provided unique name for the resource.
     */
    @Generated
    private String name;

    /**
     * Creates an instance of AssetResource class.
     */
    @Generated
    protected AssetResource() {
        this.kind = "AssetResource";
    }

    /**
     * Get the kind property: Discriminator property for AssetResource.
     * 
     * @return the kind value.
     */
    @Generated
    public String getKind() {
        return this.kind;
    }

    /**
     * Get the id property: The system generated unique id for the resource.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: The system generated unique id for the resource.
     * 
     * @param id the id value to set.
     * @return the AssetResource object itself.
     */
    @Generated
    AssetResource setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: The caller provided unique name for the resource.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The caller provided unique name for the resource.
     * 
     * @param name the name value to set.
     * @return the AssetResource object itself.
     */
    @Generated
    AssetResource setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        toJsonShared(jsonWriter);
        return jsonWriter.writeEndObject();
    }

    void toJsonShared(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("name", this.name);
    }

    /**
     * Reads an instance of AssetResource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetResource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssetResource.
     */
    @Generated
    public static AssetResource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("as".equals(discriminatorValue)) {
                    return AsAssetResource.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static AssetResource fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssetResource deserializedAssetResource = new AssetResource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if (!AssetResource.fromJsonShared(reader, fieldName, deserializedAssetResource)) {
                    reader.skipChildren();
                }
            }

            return deserializedAssetResource;
        });
    }

    @Generated
    static boolean fromJsonShared(JsonReader reader, String fieldName, AssetResource deserializedAssetResource)
        throws IOException {
        if ("id".equals(fieldName)) {
            deserializedAssetResource.id = reader.getString();
            return true;
        } else if ("kind".equals(fieldName)) {
            deserializedAssetResource.kind = reader.getString();
            return true;
        } else if ("name".equals(fieldName)) {
            deserializedAssetResource.name = reader.getString();
            return true;
        }
        return false;
    }
}
