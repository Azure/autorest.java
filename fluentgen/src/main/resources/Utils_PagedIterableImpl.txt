static <T, S> PagedIterable<S> mapPage(PagedIterable<T> pageIterable, Function<T, S> mapper) {
    return new PagedIterableImpl<T, S>(pageIterable, mapper);
}

private static final class PagedIterableImpl<T, S> extends PagedIterable<S> {

    private final PagedIterable<T> pageIterable;
    private final Function<T, S> mapper;
    private final Function<PagedResponse<T>, PagedResponse<S>> pageMapper;

    private PagedIterableImpl(PagedIterable<T> pageIterable, Function<T, S> mapper) {
        super(new PagedFlux<S>(Mono::empty));
        this.pageIterable = pageIterable;
        this.mapper = mapper;
        this.pageMapper = page -> new PagedResponseBase<Void, S>(
                page.getRequest(),
                page.getStatusCode(),
                page.getHeaders(),
                page.getElements().stream().map(mapper).collect(Collectors.toList()),
                page.getContinuationToken(),
                null);
    }

    @Override
    public Stream<S> stream() {
        return pageIterable.stream().map(mapper);
    }

    @Override
    public Stream<PagedResponse<S>> streamByPage() {
        return pageIterable.streamByPage().map(pageMapper);
    }

    @Override
    public Stream<PagedResponse<S>> streamByPage(String continuationToken) {
        return pageIterable.streamByPage(continuationToken).map(pageMapper);
    }

    @Override
    public Stream<PagedResponse<S>> streamByPage(int preferredPageSize) {
        return pageIterable.streamByPage(preferredPageSize).map(pageMapper);
    }

    @Override
    public Stream<PagedResponse<S>> streamByPage(String continuationToken, int preferredPageSize) {
        return pageIterable.streamByPage(continuationToken, preferredPageSize).map(pageMapper);
    }

    @Override
    public Iterator<S> iterator() {
        return new IteratorImpl<T, S>(pageIterable.iterator(), mapper);
    }

    @Override
    public Iterable<PagedResponse<S>> iterableByPage() {
        return new IterableImpl<PagedResponse<T>, PagedResponse<S>>(
                pageIterable.iterableByPage(), pageMapper);
    }

    @Override
    public Iterable<PagedResponse<S>> iterableByPage(String continuationToken) {
        return new IterableImpl<PagedResponse<T>, PagedResponse<S>>(
                pageIterable.iterableByPage(continuationToken), pageMapper);
    }

    @Override
    public Iterable<PagedResponse<S>> iterableByPage(int preferredPageSize) {
        return new IterableImpl<PagedResponse<T>, PagedResponse<S>>(
                pageIterable.iterableByPage(preferredPageSize), pageMapper);
    }

    @Override
    public Iterable<PagedResponse<S>> iterableByPage(String continuationToken, int preferredPageSize) {
        return new IterableImpl<PagedResponse<T>, PagedResponse<S>>(
                pageIterable.iterableByPage(continuationToken, preferredPageSize), pageMapper);
    }
}

private static final class IteratorImpl<T, S> implements Iterator<S> {

    private final Iterator<T> iterator;
    private final Function<T, S> mapper;

    private IteratorImpl(Iterator<T> iterator, Function<T, S> mapper) {
        this.iterator = iterator;
        this.mapper = mapper;
    }

    @Override
    public boolean hasNext() {
        return iterator.hasNext();
    }

    @Override
    public S next() {
        return mapper.apply(iterator.next());
    }

    @Override
    public void remove() {
        iterator.remove();
    }
}

private static final class IterableImpl<T, S> implements Iterable<S> {

    private final Iterable<T> iterable;
    private final Function<T, S> mapper;

    private IterableImpl(Iterable<T> iterable, Function<T, S> mapper) {
        this.iterable = iterable;
        this.mapper = mapper;
    }

    @Override
    public Iterator<S> iterator() {
        return new IteratorImpl<T, S>(iterable.iterator(), mapper);
    }
}
