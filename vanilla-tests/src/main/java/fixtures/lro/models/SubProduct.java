// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.lro.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SubProduct model.
 */
@Fluent
public class SubProduct extends SubResource {
    /*
     * The provisioningState property.
     */
    private String provisioningState;

    /*
     * The provisioningStateValues property.
     */
    private SubProductPropertiesProvisioningStateValues provisioningStateValues;

    /**
     * Creates an instance of SubProduct class.
     */
    public SubProduct() {
    }

    /**
     * Get the provisioningState property: The provisioningState property.
     * 
     * @return the provisioningState value.
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The provisioningState property.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the SubProduct object itself.
     */
    public SubProduct setProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the provisioningStateValues property: The provisioningStateValues property.
     * 
     * @return the provisioningStateValues value.
     */
    public SubProductPropertiesProvisioningStateValues getProvisioningStateValues() {
        return this.provisioningStateValues;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        if (provisioningState != null || provisioningStateValues != null) {
            jsonWriter.writeStartObject("properties");
            jsonWriter.writeStringField("provisioningState", this.provisioningState);
            jsonWriter.writeEndObject();
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubProduct from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubProduct if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SubProduct.
     */
    public static SubProduct fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubProduct deserializedSubProduct = new SubProduct();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedSubProduct.setId(reader.getString());
                } else if ("properties".equals(fieldName) && reader.currentToken() == JsonToken.START_OBJECT) {
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("provisioningState".equals(fieldName)) {
                            deserializedSubProduct.provisioningState = reader.getString();
                        } else if ("provisioningStateValues".equals(fieldName)) {
                            deserializedSubProduct.provisioningStateValues
                                = SubProductPropertiesProvisioningStateValues.fromString(reader.getString());
                        } else {
                            reader.skipChildren();
                        }
                    }
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubProduct;
        });
    }
}
