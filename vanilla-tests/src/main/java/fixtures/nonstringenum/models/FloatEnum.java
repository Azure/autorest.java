// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.nonstringenum.models;

import com.azure.core.util.ExpandableEnum;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * List of float enums.
 */
public final class FloatEnum implements ExpandableEnum<Float>, JsonSerializable<FloatEnum> {
    private static final Map<Float, FloatEnum> VALUES = new ConcurrentHashMap<>();

    private static final Function<Float, FloatEnum> NEW_INSTANCE = FloatEnum::new;

    /**
     * Static value 200.4 for FloatEnum.
     */
    public static final FloatEnum TWO_HUNDRED4 = fromValue(200.4f);

    /**
     * Static value 403.4 for FloatEnum.
     */
    public static final FloatEnum FOUR_HUNDRED_THREE4 = fromValue(403.4f);

    /**
     * Static value 405.3 for FloatEnum.
     */
    public static final FloatEnum FOUR_HUNDRED_FIVE3 = fromValue(405.3f);

    /**
     * Static value 406.2 for FloatEnum.
     */
    public static final FloatEnum FOUR_HUNDRED_SIX2 = fromValue(406.2f);

    /**
     * Static value 429.1 for FloatEnum.
     */
    public static final FloatEnum FOUR_HUNDRED_TWENTY_NINE1 = fromValue(429.1f);

    private final Float value;

    private FloatEnum(Float value) {
        this.value = value;
    }

    /**
     * Creates or finds a FloatEnum.
     * 
     * @param value a value to look for.
     * @return the corresponding FloatEnum.
     * @throws IllegalArgumentException if value is null.
     */
    public static FloatEnum fromValue(Float value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known FloatEnum values.
     * 
     * @return Known FloatEnum values.
     */
    public static Collection<FloatEnum> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the FloatEnum instance.
     * 
     * @return the value of the FloatEnum instance.
     */
    @Override
    public Float getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeFloat(getValue());
    }

    /**
     * Reads an instance of FloatEnum from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FloatEnum if the JsonReader was pointing to an instance of it.
     * @throws IOException If an error occurs while reading the FloatEnum.
     * @throws IllegalArgumentException if the JsonReader was pointing to JSON null.
     */
    public static FloatEnum fromJson(JsonReader jsonReader) throws IOException {
        jsonReader.nextToken();
        return FloatEnum.fromValue(jsonReader.getFloat());
    }

    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
