// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstylexmlserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.util.ArrayList;
import java.util.List;

/** A barrel of apples. */
@Fluent
public final class AppleBarrel implements XmlSerializable<AppleBarrel> {
    /*
     * The GoodApples property.
     */
    private static final class GoodApplesWrapper implements XmlSerializable<GoodApplesWrapper> {
        private final List<String> items;

        private GoodApplesWrapper(List<String> items) {
            this.items = items;
        }

        @Override
        public XmlWriter toXml(XmlWriter xmlWriter) {
            xmlWriter.writeStartElement("GoodApples");
            if (items != null) {
                items.forEach(element -> xmlWriter.writeStringElement("Apple", element));
            }
            return xmlWriter.writeEndElement();
        }

        public static GoodApplesWrapper fromXml(XmlReader xmlReader) {
            return xmlReader.readObject(
                    "GoodApples",
                    reader -> {
                        List<String> items = null;

                        while (reader.nextElement() != XmlToken.END_ELEMENT) {
                            String elementName = reader.getElementName().getLocalPart();

                            if ("Apple".equals(elementName)) {
                                if (items == null) {
                                    items = new ArrayList<>();
                                }

                                items.add(reader.getStringElement());
                            } else {
                                reader.nextElement();
                            }
                        }
                        return new GoodApplesWrapper(items);
                    });
        }
    }

    private GoodApplesWrapper goodApples;

    /*
     * The BadApples property.
     */
    private static final class BadApplesWrapper implements XmlSerializable<BadApplesWrapper> {
        private final List<String> items;

        private BadApplesWrapper(List<String> items) {
            this.items = items;
        }

        @Override
        public XmlWriter toXml(XmlWriter xmlWriter) {
            xmlWriter.writeStartElement("BadApples");
            if (items != null) {
                items.forEach(element -> xmlWriter.writeStringElement("Apple", element));
            }
            return xmlWriter.writeEndElement();
        }

        public static BadApplesWrapper fromXml(XmlReader xmlReader) {
            return xmlReader.readObject(
                    "BadApples",
                    reader -> {
                        List<String> items = null;

                        while (reader.nextElement() != XmlToken.END_ELEMENT) {
                            String elementName = reader.getElementName().getLocalPart();

                            if ("Apple".equals(elementName)) {
                                if (items == null) {
                                    items = new ArrayList<>();
                                }

                                items.add(reader.getElementStringValue());
                            } else {
                                reader.nextElement();
                            }
                        }
                        return new BadApplesWrapper(items);
                    });
        }
    }

    private BadApplesWrapper badApples;

    /**
     * Get the goodApples property: The GoodApples property.
     *
     * @return the goodApples value.
     */
    public List<String> getGoodApples() {
        if (this.goodApples == null) {
            this.goodApples = new GoodApplesWrapper(new ArrayList<String>());
        }
        return this.goodApples.items;
    }

    /**
     * Set the goodApples property: The GoodApples property.
     *
     * @param goodApples the goodApples value to set.
     * @return the AppleBarrel object itself.
     */
    public AppleBarrel setGoodApples(List<String> goodApples) {
        this.goodApples = new GoodApplesWrapper(goodApples);
        return this;
    }

    /**
     * Get the badApples property: The BadApples property.
     *
     * @return the badApples value.
     */
    public List<String> getBadApples() {
        if (this.badApples == null) {
            this.badApples = new BadApplesWrapper(new ArrayList<String>());
        }
        return this.badApples.items;
    }

    /**
     * Set the badApples property: The BadApples property.
     *
     * @param badApples the badApples value to set.
     * @return the AppleBarrel object itself.
     */
    public AppleBarrel setBadApples(List<String> badApples) {
        this.badApples = new BadApplesWrapper(badApples);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {}

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) {
        xmlWriter.writeStartElement("AppleBarrel");
        xmlWriter.writeXml(this.goodApples);
        xmlWriter.writeXml(this.badApples);
        return xmlWriter.writeEndElement();
    }
}
