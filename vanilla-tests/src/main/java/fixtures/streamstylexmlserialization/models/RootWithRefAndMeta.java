// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstylexmlserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/**
 * I am root, and I ref a model WITH meta.
 */
@Fluent
public final class RootWithRefAndMeta implements XmlSerializable<RootWithRefAndMeta> {
    /*
     * XML will use XMLComplexTypeWithMeta
     */
    @Generated
    private ComplexTypeWithMeta refToModel;

    /*
     * Something else (just to avoid flattening)
     */
    @Generated
    private String something;

    /**
     * Creates an instance of RootWithRefAndMeta class.
     */
    @Generated
    public RootWithRefAndMeta() {
    }

    /**
     * Get the refToModel property: XML will use XMLComplexTypeWithMeta.
     * 
     * @return the refToModel value.
     */
    @Generated
    public ComplexTypeWithMeta getRefToModel() {
        return this.refToModel;
    }

    /**
     * Set the refToModel property: XML will use XMLComplexTypeWithMeta.
     * 
     * @param refToModel the refToModel value to set.
     * @return the RootWithRefAndMeta object itself.
     */
    @Generated
    public RootWithRefAndMeta setRefToModel(ComplexTypeWithMeta refToModel) {
        this.refToModel = refToModel;
        return this;
    }

    /**
     * Get the something property: Something else (just to avoid flattening).
     * 
     * @return the something value.
     */
    @Generated
    public String getSomething() {
        return this.something;
    }

    /**
     * Set the something property: Something else (just to avoid flattening).
     * 
     * @param something the something value to set.
     * @return the RootWithRefAndMeta object itself.
     */
    @Generated
    public RootWithRefAndMeta setSomething(String something) {
        this.something = something;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getRefToModel() != null) {
            getRefToModel().validate();
        }
    }

    @Generated
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Generated
    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = rootElementName == null || rootElementName.isEmpty() ? "RootWithRefAndMeta" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeXml(this.refToModel, "XMLComplexTypeWithMeta");
        xmlWriter.writeStringElement("Something", this.something);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of RootWithRefAndMeta from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @return An instance of RootWithRefAndMeta if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the RootWithRefAndMeta.
     */
    @Generated
    public static RootWithRefAndMeta fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of RootWithRefAndMeta from the XmlReader.
     * 
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default defined by the model. Used to support
     * cases where the model can deserialize from different root element names.
     * @return An instance of RootWithRefAndMeta if the XmlReader was pointing to an instance of it, or null if it was
     * pointing to XML null.
     * @throws XMLStreamException If an error occurs while reading the RootWithRefAndMeta.
     */
    @Generated
    public static RootWithRefAndMeta fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName
            = rootElementName == null || rootElementName.isEmpty() ? "RootWithRefAndMeta" : rootElementName;
        return xmlReader.readObject(finalRootElementName, reader -> {
            RootWithRefAndMeta deserializedRootWithRefAndMeta = new RootWithRefAndMeta();
            while (reader.nextElement() != XmlToken.END_ELEMENT) {
                QName elementName = reader.getElementName();

                if ("XMLComplexTypeWithMeta".equals(elementName.getLocalPart())) {
                    deserializedRootWithRefAndMeta.refToModel
                        = ComplexTypeWithMeta.fromXml(reader, "XMLComplexTypeWithMeta");
                } else if ("Something".equals(elementName.getLocalPart())) {
                    deserializedRootWithRefAndMeta.something = reader.getStringElement();
                } else {
                    reader.skipElement();
                }
            }

            return deserializedRootWithRefAndMeta;
        });
    }
}
