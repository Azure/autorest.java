// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstylexmlserialization.models;

import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines values for LeaseStateType.
 */
public enum LeaseStateType implements JsonSerializable<LeaseStateType> {
    /**
     * Enum value available.
     */
    AVAILABLE("available"),

    /**
     * Enum value leased.
     */
    LEASED("leased"),

    /**
     * Enum value expired.
     */
    EXPIRED("expired"),

    /**
     * Enum value breaking.
     */
    BREAKING("breaking"),

    /**
     * Enum value broken.
     */
    BROKEN("broken");

    /**
     * The actual serialized value for a LeaseStateType instance.
     */
    private final String value;

    LeaseStateType(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a LeaseStateType instance.
     * 
     * @param value the serialized value to parse.
     * @return the parsed LeaseStateType object, or null if unable to parse.
     */
    public static LeaseStateType fromString(String value) {
        if (value == null) {
            return null;
        }
        LeaseStateType[] items = LeaseStateType.values();
        for (LeaseStateType item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return this.value;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(value);
    }

    /**
     * Reads a LeaseStateType from the JSON stream.
     * <p>
     * The passed JsonReader must be positioned at a JsonToken.STRING value.
     * 
     * @param jsonReader The JsonReader being read.
     * @return The LeaseStateType that the JSON stream represented, may return null.
     * @throws java.io.IOException If a LeaseStateType fails to be read from the JsonReader.
     */
    public static LeaseStateType fromJson(JsonReader jsonReader) throws IOException {
        return fromString(jsonReader.getString());
    }
}
