// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstylexmlserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.time.OffsetDateTime;
import java.util.Objects;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/** An Access policy. */
@Fluent
public final class AccessPolicy implements XmlSerializable<AccessPolicy> {
    /*
     * the date-time the policy is active
     */
    private OffsetDateTime start;

    /*
     * the date-time the policy expires
     */
    private OffsetDateTime expiry;

    /*
     * the permissions for the acl policy
     */
    private String permission;

    /** Creates an instance of AccessPolicy class. */
    public AccessPolicy() {}

    /**
     * Get the start property: the date-time the policy is active.
     *
     * @return the start value.
     */
    public OffsetDateTime getStart() {
        return this.start;
    }

    /**
     * Set the start property: the date-time the policy is active.
     *
     * @param start the start value to set.
     * @return the AccessPolicy object itself.
     */
    public AccessPolicy setStart(OffsetDateTime start) {
        this.start = start;
        return this;
    }

    /**
     * Get the expiry property: the date-time the policy expires.
     *
     * @return the expiry value.
     */
    public OffsetDateTime getExpiry() {
        return this.expiry;
    }

    /**
     * Set the expiry property: the date-time the policy expires.
     *
     * @param expiry the expiry value to set.
     * @return the AccessPolicy object itself.
     */
    public AccessPolicy setExpiry(OffsetDateTime expiry) {
        this.expiry = expiry;
        return this;
    }

    /**
     * Get the permission property: the permissions for the acl policy.
     *
     * @return the permission value.
     */
    public String getPermission() {
        return this.permission;
    }

    /**
     * Set the permission property: the permissions for the acl policy.
     *
     * @param permission the permission value to set.
     * @return the AccessPolicy object itself.
     */
    public AccessPolicy setPermission(String permission) {
        this.permission = permission;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getStart() == null) {
            throw new IllegalArgumentException("Missing required property start in model AccessPolicy");
        }
        if (getExpiry() == null) {
            throw new IllegalArgumentException("Missing required property expiry in model AccessPolicy");
        }
        if (getPermission() == null) {
            throw new IllegalArgumentException("Missing required property permission in model AccessPolicy");
        }
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        return toXml(xmlWriter, null);
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter, String rootElementName) throws XMLStreamException {
        rootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "AccessPolicy" : rootElementName;
        xmlWriter.writeStartElement(rootElementName);
        xmlWriter.writeStringElement("Start", Objects.toString(this.start, null));
        xmlWriter.writeStringElement("Expiry", Objects.toString(this.expiry, null));
        xmlWriter.writeStringElement("Permission", this.permission);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of AccessPolicy from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of AccessPolicy if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing any required properties.
     * @throws XMLStreamException If an error occurs while reading the AccessPolicy.
     */
    public static AccessPolicy fromXml(XmlReader xmlReader) throws XMLStreamException {
        return fromXml(xmlReader, null);
    }

    /**
     * Reads an instance of AccessPolicy from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @param rootElementName Optional root element name to override the default definedby the model. Used to support
     *     cases where the model can deserialize from different root elementnames.
     * @return An instance of AccessPolicy if the XmlReader was pointing to an instance of it, or null if it was
     *     pointing to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing any required properties.
     * @throws XMLStreamException If an error occurs while reading the AccessPolicy.
     */
    public static AccessPolicy fromXml(XmlReader xmlReader, String rootElementName) throws XMLStreamException {
        String finalRootElementName = CoreUtils.isNullOrEmpty(rootElementName) ? "AccessPolicy" : rootElementName;
        return xmlReader.readObject(
                finalRootElementName,
                reader -> {
                    OffsetDateTime start = null;
                    OffsetDateTime expiry = null;
                    String permission = null;
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName elementName = reader.getElementName();

                        if ("Start".equals(elementName.getLocalPart())) {
                            start = reader.getNullableElement(OffsetDateTime::parse);
                        } else if ("Expiry".equals(elementName.getLocalPart())) {
                            expiry = reader.getNullableElement(OffsetDateTime::parse);
                        } else if ("Permission".equals(elementName.getLocalPart())) {
                            permission = reader.getStringElement();
                        } else {
                            reader.skipElement();
                        }
                    }
                    AccessPolicy deserializedAccessPolicy = new AccessPolicy();
                    deserializedAccessPolicy.start = start;
                    deserializedAccessPolicy.expiry = expiry;
                    deserializedAccessPolicy.permission = permission;

                    return deserializedAccessPolicy;
                });
    }
}
