// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstylexmlserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/** The Blobs model. */
@Fluent
public final class Blobs implements XmlSerializable<Blobs> {
    /*
     * The BlobPrefix property.
     */
    private List<BlobPrefix> blobPrefix = new ArrayList<>();

    /*
     * The Blob property.
     */
    private List<Blob> blob = new ArrayList<>();

    /**
     * Get the blobPrefix property: The BlobPrefix property.
     *
     * @return the blobPrefix value.
     */
    public List<BlobPrefix> getBlobPrefix() {
        return this.blobPrefix;
    }

    /**
     * Set the blobPrefix property: The BlobPrefix property.
     *
     * @param blobPrefix the blobPrefix value to set.
     * @return the Blobs object itself.
     */
    public Blobs setBlobPrefix(List<BlobPrefix> blobPrefix) {
        this.blobPrefix = blobPrefix;
        return this;
    }

    /**
     * Get the blob property: The Blob property.
     *
     * @return the blob value.
     */
    public List<Blob> getBlob() {
        return this.blob;
    }

    /**
     * Set the blob property: The Blob property.
     *
     * @param blob the blob value to set.
     * @return the Blobs object itself.
     */
    public Blobs setBlob(List<Blob> blob) {
        this.blob = blob;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getBlobPrefix() != null) {
            getBlobPrefix().forEach(e -> e.validate());
        }
        if (getBlob() != null) {
            getBlob().forEach(e -> e.validate());
        }
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        xmlWriter.writeStartElement("Blobs");
        if (this.blobPrefix != null) {
            for (BlobPrefix element : this.blobPrefix) {
                xmlWriter.writeXml(element);
            }
        }
        if (this.blob != null) {
            for (Blob element : this.blob) {
                xmlWriter.writeXml(element);
            }
        }
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of Blobs from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of Blobs if the XmlReader was pointing to an instance of it, or null if it was pointing to
     *     XML null.
     */
    public static Blobs fromXml(XmlReader xmlReader) throws XMLStreamException {
        return xmlReader.readObject(
                "Blobs",
                reader -> {
                    List<BlobPrefix> blobPrefix = null;
                    List<Blob> blob = null;
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName fieldName = reader.getElementName();

                        if ("BlobPrefix".equals(fieldName.getLocalPart())) {
                            if (blobPrefix == null) {
                                blobPrefix = new LinkedList<>();
                            }
                            blobPrefix.add(BlobPrefix.fromXml(reader));
                        } else if ("Blob".equals(fieldName.getLocalPart())) {
                            if (blob == null) {
                                blob = new LinkedList<>();
                            }
                            blob.add(Blob.fromXml(reader));
                        } else {
                            reader.skipElement();
                        }
                    }
                    Blobs deserializedValue = new Blobs();
                    deserializedValue.blobPrefix = blobPrefix;
                    deserializedValue.blob = blob;

                    return deserializedValue;
                });
    }
}
