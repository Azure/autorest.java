// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstylexmlserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.xml.XmlReader;
import com.azure.xml.XmlSerializable;
import com.azure.xml.XmlToken;
import com.azure.xml.XmlWriter;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;

/** The BlobPrefix model. */
@Fluent
public final class BlobPrefix implements XmlSerializable<BlobPrefix> {
    /*
     * The Name property.
     */
    private String name;

    /** Creates an instance of BlobPrefix class. */
    public BlobPrefix() {}

    /**
     * Get the name property: The Name property.
     *
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The Name property.
     *
     * @param name the name value to set.
     * @return the BlobPrefix object itself.
     */
    public BlobPrefix setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getName() == null) {
            throw new IllegalArgumentException("Missing required property name in model BlobPrefix");
        }
    }

    @Override
    public XmlWriter toXml(XmlWriter xmlWriter) throws XMLStreamException {
        xmlWriter.writeStartElement("BlobPrefix");
        xmlWriter.writeStringElement("Name", this.name);
        return xmlWriter.writeEndElement();
    }

    /**
     * Reads an instance of BlobPrefix from the XmlReader.
     *
     * @param xmlReader The XmlReader being read.
     * @return An instance of BlobPrefix if the XmlReader was pointing to an instance of it, or null if it was pointing
     *     to XML null.
     * @throws IllegalStateException If the deserialized XML object was missing any required properties.
     */
    public static BlobPrefix fromXml(XmlReader xmlReader) throws XMLStreamException {
        return xmlReader.readObject(
                "BlobPrefix",
                reader -> {
                    String name = null;
                    while (reader.nextElement() != XmlToken.END_ELEMENT) {
                        QName fieldName = reader.getElementName();

                        if ("Name".equals(fieldName.getLocalPart())) {
                            name = reader.getStringElement();
                        } else {
                            reader.skipElement();
                        }
                    }
                    BlobPrefix deserializedValue = new BlobPrefix();
                    deserializedValue.name = name;

                    return deserializedValue;
                });
    }
}
