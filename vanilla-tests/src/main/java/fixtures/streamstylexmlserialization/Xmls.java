// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstylexmlserialization;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import fixtures.streamstylexmlserialization.implementation.models.BananaWrapper;
import fixtures.streamstylexmlserialization.implementation.models.SignedIdentifierWrapper;
import fixtures.streamstylexmlserialization.models.AppleBarrel;
import fixtures.streamstylexmlserialization.models.Banana;
import fixtures.streamstylexmlserialization.models.ErrorException;
import fixtures.streamstylexmlserialization.models.JsonInput;
import fixtures.streamstylexmlserialization.models.JsonOutput;
import fixtures.streamstylexmlserialization.models.ListBlobsResponse;
import fixtures.streamstylexmlserialization.models.ListContainersResponse;
import fixtures.streamstylexmlserialization.models.ModelWithByteProperty;
import fixtures.streamstylexmlserialization.models.ModelWithUrlProperty;
import fixtures.streamstylexmlserialization.models.ObjectWithXMsTextProperty;
import fixtures.streamstylexmlserialization.models.RootWithRefAndMeta;
import fixtures.streamstylexmlserialization.models.RootWithRefAndNoMeta;
import fixtures.streamstylexmlserialization.models.SignedIdentifier;
import fixtures.streamstylexmlserialization.models.Slideshow;
import fixtures.streamstylexmlserialization.models.StorageServiceProperties;
import fixtures.streamstylexmlserialization.models.XmlsGetHeadersResponse;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Xmls.
 */
public final class Xmls {
    /**
     * The proxy service used to perform REST calls.
     */
    private final XmlsService service;

    /**
     * The service client containing this operation class.
     */
    private final AutoRestSwaggerBATXMLService client;

    /**
     * Initializes an instance of Xmls.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    Xmls(AutoRestSwaggerBATXMLService client) {
        this.service = RestProxy.create(XmlsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AutoRestSwaggerBATXMLServiceXmls to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AutoRestSwaggerBATXM")
    public interface XmlsService {
        @Get("/xml/complex-type-ref-no-meta")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<RootWithRefAndNoMeta>> getComplexTypeRefNoMeta(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/complex-type-ref-no-meta")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putComplexTypeRefNoMeta(@HostParam("$host") String host,
            @BodyParam("application/xml") RootWithRefAndNoMeta model, Context context);

        @Get("/xml/complex-type-ref-with-meta")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<RootWithRefAndMeta>> getComplexTypeRefWithMeta(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/complex-type-ref-with-meta")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putComplexTypeRefWithMeta(@HostParam("$host") String host,
            @BodyParam("application/xml") RootWithRefAndMeta model, Context context);

        @Get("/xml/simple")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Slideshow>> getSimple(@HostParam("$host") String host, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/xml/simple")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putSimple(@HostParam("$host") String host,
            @BodyParam("application/xml") Slideshow slideshow, @HeaderParam("Accept") String accept, Context context);

        @Get("/xml/wrapped-lists")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<AppleBarrel>> getWrappedLists(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/wrapped-lists")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putWrappedLists(@HostParam("$host") String host,
            @BodyParam("application/xml") AppleBarrel wrappedLists, @HeaderParam("Accept") String accept,
            Context context);

        @Get("/xml/headers")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<XmlsGetHeadersResponse> getHeaders(@HostParam("$host") String host, Context context);

        @Get("/xml/empty-list")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Slideshow>> getEmptyList(@HostParam("$host") String host, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/xml/empty-list")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putEmptyList(@HostParam("$host") String host,
            @BodyParam("application/xml") Slideshow slideshow, Context context);

        @Get("/xml/empty-wrapped-lists")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<AppleBarrel>> getEmptyWrappedLists(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/empty-wrapped-lists")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putEmptyWrappedLists(@HostParam("$host") String host,
            @BodyParam("application/xml") AppleBarrel appleBarrel, Context context);

        @Get("/xml/root-list")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<List<Banana>>> getRootList(@HostParam("$host") String host, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/xml/root-list")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putRootList(@HostParam("$host") String host,
            @BodyParam("application/xml") BananaWrapper bananas, Context context);

        @Get("/xml/root-list-single-item")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<List<Banana>>> getRootListSingleItem(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/root-list-single-item")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putRootListSingleItem(@HostParam("$host") String host,
            @BodyParam("application/xml") BananaWrapper bananas, Context context);

        @Get("/xml/empty-root-list")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<List<Banana>>> getEmptyRootList(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/empty-root-list")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putEmptyRootList(@HostParam("$host") String host,
            @BodyParam("application/xml") BananaWrapper bananas, Context context);

        @Get("/xml/empty-child-element")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Banana>> getEmptyChildElement(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/empty-child-element")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putEmptyChildElement(@HostParam("$host") String host,
            @BodyParam("application/xml") Banana banana, Context context);

        @Get("/xml/")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ListContainersResponse>> listContainers(@HostParam("$host") String host,
            @QueryParam("comp") String comp, @HeaderParam("Accept") String accept, Context context);

        @Get("/xml/")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<StorageServiceProperties>> getServiceProperties(@HostParam("$host") String host,
            @QueryParam("comp") String comp, @QueryParam("restype") String restype,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putServiceProperties(@HostParam("$host") String host, @QueryParam("comp") String comp,
            @QueryParam("restype") String restype, @BodyParam("application/xml") StorageServiceProperties properties,
            Context context);

        @Get("/xml/mycontainer")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<SignedIdentifierWrapper>> getAcls(@HostParam("$host") String host,
            @QueryParam("comp") String comp, @QueryParam("restype") String restype,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/mycontainer")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putAcls(@HostParam("$host") String host, @QueryParam("comp") String comp,
            @QueryParam("restype") String restype, @BodyParam("application/xml") SignedIdentifierWrapper properties,
            Context context);

        @Get("/xml/mycontainer")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ListBlobsResponse>> listBlobs(@HostParam("$host") String host, @QueryParam("comp") String comp,
            @QueryParam("restype") String restype, @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/jsoninput")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> jsonInput(@HostParam("$host") String host,
            @BodyParam("application/json") JsonInput properties, Context context);

        @Get("/xml/jsonoutput")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<JsonOutput>> jsonOutput(@HostParam("$host") String host, @HeaderParam("Accept") String accept,
            Context context);

        @Get("/xml/x-ms-text")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ObjectWithXMsTextProperty>> getXMsText(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/xml/bytes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ModelWithByteProperty>> getBytes(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/bytes")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putBinary(@HostParam("$host") String host,
            @BodyParam("application/xml") ModelWithByteProperty slideshow, @HeaderParam("Accept") String accept,
            Context context);

        @Get("/xml/url")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<ModelWithUrlProperty>> getUri(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/xml/url")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putUri(@HostParam("$host") String host,
            @BodyParam("application/xml") ModelWithUrlProperty model, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get a complex type that has a ref to a complex type with no XML node.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with no XML node along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RootWithRefAndNoMeta>> getComplexTypeRefNoMetaWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getComplexTypeRefNoMeta(this.client.getHost(), accept, context));
    }

    /**
     * Get a complex type that has a ref to a complex type with no XML node.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with no XML node along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RootWithRefAndNoMeta>> getComplexTypeRefNoMetaWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getComplexTypeRefNoMeta(this.client.getHost(), accept, context);
    }

    /**
     * Get a complex type that has a ref to a complex type with no XML node.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with no XML node on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RootWithRefAndNoMeta> getComplexTypeRefNoMetaAsync() {
        return getComplexTypeRefNoMetaWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a complex type that has a ref to a complex type with no XML node.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with no XML node on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RootWithRefAndNoMeta> getComplexTypeRefNoMetaAsync(Context context) {
        return getComplexTypeRefNoMetaWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a complex type that has a ref to a complex type with no XML node.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with no XML node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RootWithRefAndNoMeta> getComplexTypeRefNoMetaWithResponse(Context context) {
        return getComplexTypeRefNoMetaWithResponseAsync(context).block();
    }

    /**
     * Get a complex type that has a ref to a complex type with no XML node.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with no XML node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RootWithRefAndNoMeta getComplexTypeRefNoMeta() {
        return getComplexTypeRefNoMetaWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts a complex type that has a ref to a complex type with no XML node.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putComplexTypeRefNoMetaWithResponseAsync(RootWithRefAndNoMeta model) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (model == null) {
            return Mono.error(new IllegalArgumentException("Parameter model is required and cannot be null."));
        } else {
            model.validate();
        }
        return FluxUtil.withContext(context -> service.putComplexTypeRefNoMeta(this.client.getHost(), model, context));
    }

    /**
     * Puts a complex type that has a ref to a complex type with no XML node.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putComplexTypeRefNoMetaWithResponseAsync(RootWithRefAndNoMeta model, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (model == null) {
            return Mono.error(new IllegalArgumentException("Parameter model is required and cannot be null."));
        } else {
            model.validate();
        }
        return service.putComplexTypeRefNoMeta(this.client.getHost(), model, context);
    }

    /**
     * Puts a complex type that has a ref to a complex type with no XML node.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putComplexTypeRefNoMetaAsync(RootWithRefAndNoMeta model) {
        return putComplexTypeRefNoMetaWithResponseAsync(model).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a complex type that has a ref to a complex type with no XML node.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putComplexTypeRefNoMetaAsync(RootWithRefAndNoMeta model, Context context) {
        return putComplexTypeRefNoMetaWithResponseAsync(model, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a complex type that has a ref to a complex type with no XML node.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putComplexTypeRefNoMetaWithResponse(RootWithRefAndNoMeta model, Context context) {
        return putComplexTypeRefNoMetaWithResponseAsync(model, context).block();
    }

    /**
     * Puts a complex type that has a ref to a complex type with no XML node.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putComplexTypeRefNoMeta(RootWithRefAndNoMeta model) {
        putComplexTypeRefNoMetaWithResponse(model, Context.NONE);
    }

    /**
     * Get a complex type that has a ref to a complex type with XML node.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with XML node along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RootWithRefAndMeta>> getComplexTypeRefWithMetaWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil
            .withContext(context -> service.getComplexTypeRefWithMeta(this.client.getHost(), accept, context));
    }

    /**
     * Get a complex type that has a ref to a complex type with XML node.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with XML node along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RootWithRefAndMeta>> getComplexTypeRefWithMetaWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getComplexTypeRefWithMeta(this.client.getHost(), accept, context);
    }

    /**
     * Get a complex type that has a ref to a complex type with XML node.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with XML node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RootWithRefAndMeta> getComplexTypeRefWithMetaAsync() {
        return getComplexTypeRefWithMetaWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a complex type that has a ref to a complex type with XML node.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with XML node on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RootWithRefAndMeta> getComplexTypeRefWithMetaAsync(Context context) {
        return getComplexTypeRefWithMetaWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a complex type that has a ref to a complex type with XML node.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with XML node along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RootWithRefAndMeta> getComplexTypeRefWithMetaWithResponse(Context context) {
        return getComplexTypeRefWithMetaWithResponseAsync(context).block();
    }

    /**
     * Get a complex type that has a ref to a complex type with XML node.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a complex type that has a ref to a complex type with XML node.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RootWithRefAndMeta getComplexTypeRefWithMeta() {
        return getComplexTypeRefWithMetaWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts a complex type that has a ref to a complex type with XML node.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putComplexTypeRefWithMetaWithResponseAsync(RootWithRefAndMeta model) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (model == null) {
            return Mono.error(new IllegalArgumentException("Parameter model is required and cannot be null."));
        } else {
            model.validate();
        }
        return FluxUtil
            .withContext(context -> service.putComplexTypeRefWithMeta(this.client.getHost(), model, context));
    }

    /**
     * Puts a complex type that has a ref to a complex type with XML node.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putComplexTypeRefWithMetaWithResponseAsync(RootWithRefAndMeta model, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (model == null) {
            return Mono.error(new IllegalArgumentException("Parameter model is required and cannot be null."));
        } else {
            model.validate();
        }
        return service.putComplexTypeRefWithMeta(this.client.getHost(), model, context);
    }

    /**
     * Puts a complex type that has a ref to a complex type with XML node.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putComplexTypeRefWithMetaAsync(RootWithRefAndMeta model) {
        return putComplexTypeRefWithMetaWithResponseAsync(model).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a complex type that has a ref to a complex type with XML node.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putComplexTypeRefWithMetaAsync(RootWithRefAndMeta model, Context context) {
        return putComplexTypeRefWithMetaWithResponseAsync(model, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a complex type that has a ref to a complex type with XML node.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putComplexTypeRefWithMetaWithResponse(RootWithRefAndMeta model, Context context) {
        return putComplexTypeRefWithMetaWithResponseAsync(model, context).block();
    }

    /**
     * Puts a complex type that has a ref to a complex type with XML node.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putComplexTypeRefWithMeta(RootWithRefAndMeta model) {
        putComplexTypeRefWithMetaWithResponse(model, Context.NONE);
    }

    /**
     * Get a simple XML document.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a simple XML document along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Slideshow>> getSimpleWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getSimple(this.client.getHost(), accept, context));
    }

    /**
     * Get a simple XML document.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a simple XML document along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Slideshow>> getSimpleWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getSimple(this.client.getHost(), accept, context);
    }

    /**
     * Get a simple XML document.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a simple XML document on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Slideshow> getSimpleAsync() {
        return getSimpleWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a simple XML document.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a simple XML document on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Slideshow> getSimpleAsync(Context context) {
        return getSimpleWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a simple XML document.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a simple XML document along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Slideshow> getSimpleWithResponse(Context context) {
        return getSimpleWithResponseAsync(context).block();
    }

    /**
     * Get a simple XML document.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a simple XML document.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Slideshow getSimple() {
        return getSimpleWithResponse(Context.NONE).getValue();
    }

    /**
     * Put a simple XML document.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putSimpleWithResponseAsync(Slideshow slideshow) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (slideshow == null) {
            return Mono.error(new IllegalArgumentException("Parameter slideshow is required and cannot be null."));
        } else {
            slideshow.validate();
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.putSimple(this.client.getHost(), slideshow, accept, context));
    }

    /**
     * Put a simple XML document.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putSimpleWithResponseAsync(Slideshow slideshow, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (slideshow == null) {
            return Mono.error(new IllegalArgumentException("Parameter slideshow is required and cannot be null."));
        } else {
            slideshow.validate();
        }
        final String accept = "application/xml";
        return service.putSimple(this.client.getHost(), slideshow, accept, context);
    }

    /**
     * Put a simple XML document.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putSimpleAsync(Slideshow slideshow) {
        return putSimpleWithResponseAsync(slideshow).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put a simple XML document.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putSimpleAsync(Slideshow slideshow, Context context) {
        return putSimpleWithResponseAsync(slideshow, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put a simple XML document.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putSimpleWithResponse(Slideshow slideshow, Context context) {
        return putSimpleWithResponseAsync(slideshow, context).block();
    }

    /**
     * Put a simple XML document.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putSimple(Slideshow slideshow) {
        putSimpleWithResponse(slideshow, Context.NONE);
    }

    /**
     * Get an XML document with multiple wrapped lists.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with multiple wrapped lists along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AppleBarrel>> getWrappedListsWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getWrappedLists(this.client.getHost(), accept, context));
    }

    /**
     * Get an XML document with multiple wrapped lists.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with multiple wrapped lists along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AppleBarrel>> getWrappedListsWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getWrappedLists(this.client.getHost(), accept, context);
    }

    /**
     * Get an XML document with multiple wrapped lists.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with multiple wrapped lists on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppleBarrel> getWrappedListsAsync() {
        return getWrappedListsWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an XML document with multiple wrapped lists.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with multiple wrapped lists on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppleBarrel> getWrappedListsAsync(Context context) {
        return getWrappedListsWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an XML document with multiple wrapped lists.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with multiple wrapped lists along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AppleBarrel> getWrappedListsWithResponse(Context context) {
        return getWrappedListsWithResponseAsync(context).block();
    }

    /**
     * Get an XML document with multiple wrapped lists.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with multiple wrapped lists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppleBarrel getWrappedLists() {
        return getWrappedListsWithResponse(Context.NONE).getValue();
    }

    /**
     * Put an XML document with multiple wrapped lists.
     * 
     * @param wrappedLists The wrappedLists parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putWrappedListsWithResponseAsync(AppleBarrel wrappedLists) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (wrappedLists == null) {
            return Mono.error(new IllegalArgumentException("Parameter wrappedLists is required and cannot be null."));
        } else {
            wrappedLists.validate();
        }
        final String accept = "application/xml";
        return FluxUtil
            .withContext(context -> service.putWrappedLists(this.client.getHost(), wrappedLists, accept, context));
    }

    /**
     * Put an XML document with multiple wrapped lists.
     * 
     * @param wrappedLists The wrappedLists parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putWrappedListsWithResponseAsync(AppleBarrel wrappedLists, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (wrappedLists == null) {
            return Mono.error(new IllegalArgumentException("Parameter wrappedLists is required and cannot be null."));
        } else {
            wrappedLists.validate();
        }
        final String accept = "application/xml";
        return service.putWrappedLists(this.client.getHost(), wrappedLists, accept, context);
    }

    /**
     * Put an XML document with multiple wrapped lists.
     * 
     * @param wrappedLists The wrappedLists parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putWrappedListsAsync(AppleBarrel wrappedLists) {
        return putWrappedListsWithResponseAsync(wrappedLists).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put an XML document with multiple wrapped lists.
     * 
     * @param wrappedLists The wrappedLists parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putWrappedListsAsync(AppleBarrel wrappedLists, Context context) {
        return putWrappedListsWithResponseAsync(wrappedLists, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put an XML document with multiple wrapped lists.
     * 
     * @param wrappedLists The wrappedLists parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putWrappedListsWithResponse(AppleBarrel wrappedLists, Context context) {
        return putWrappedListsWithResponseAsync(wrappedLists, context).block();
    }

    /**
     * Put an XML document with multiple wrapped lists.
     * 
     * @param wrappedLists The wrappedLists parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putWrappedLists(AppleBarrel wrappedLists) {
        putWrappedListsWithResponse(wrappedLists, Context.NONE);
    }

    /**
     * Get strongly-typed response headers.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return strongly-typed response headers on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<XmlsGetHeadersResponse> getHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return FluxUtil.withContext(context -> service.getHeaders(this.client.getHost(), context));
    }

    /**
     * Get strongly-typed response headers.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return strongly-typed response headers on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<XmlsGetHeadersResponse> getHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.getHeaders(this.client.getHost(), context);
    }

    /**
     * Get strongly-typed response headers.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return strongly-typed response headers on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getHeadersAsync() {
        return getHeadersWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Get strongly-typed response headers.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return strongly-typed response headers on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getHeadersAsync(Context context) {
        return getHeadersWithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Get strongly-typed response headers.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return strongly-typed response headers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public XmlsGetHeadersResponse getHeadersWithResponse(Context context) {
        return getHeadersWithResponseAsync(context).block();
    }

    /**
     * Get strongly-typed response headers.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getHeaders() {
        getHeadersWithResponse(Context.NONE);
    }

    /**
     * Get an empty list.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Slideshow>> getEmptyListWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getEmptyList(this.client.getHost(), accept, context));
    }

    /**
     * Get an empty list.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Slideshow>> getEmptyListWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getEmptyList(this.client.getHost(), accept, context);
    }

    /**
     * Get an empty list.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Slideshow> getEmptyListAsync() {
        return getEmptyListWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an empty list.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Slideshow> getEmptyListAsync(Context context) {
        return getEmptyListWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an empty list.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Slideshow> getEmptyListWithResponse(Context context) {
        return getEmptyListWithResponseAsync(context).block();
    }

    /**
     * Get an empty list.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Slideshow getEmptyList() {
        return getEmptyListWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts an empty list.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putEmptyListWithResponseAsync(Slideshow slideshow) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (slideshow == null) {
            return Mono.error(new IllegalArgumentException("Parameter slideshow is required and cannot be null."));
        } else {
            slideshow.validate();
        }
        return FluxUtil.withContext(context -> service.putEmptyList(this.client.getHost(), slideshow, context));
    }

    /**
     * Puts an empty list.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putEmptyListWithResponseAsync(Slideshow slideshow, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (slideshow == null) {
            return Mono.error(new IllegalArgumentException("Parameter slideshow is required and cannot be null."));
        } else {
            slideshow.validate();
        }
        return service.putEmptyList(this.client.getHost(), slideshow, context);
    }

    /**
     * Puts an empty list.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putEmptyListAsync(Slideshow slideshow) {
        return putEmptyListWithResponseAsync(slideshow).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts an empty list.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putEmptyListAsync(Slideshow slideshow, Context context) {
        return putEmptyListWithResponseAsync(slideshow, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts an empty list.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putEmptyListWithResponse(Slideshow slideshow, Context context) {
        return putEmptyListWithResponseAsync(slideshow, context).block();
    }

    /**
     * Puts an empty list.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putEmptyList(Slideshow slideshow) {
        putEmptyListWithResponse(slideshow, Context.NONE);
    }

    /**
     * Gets some empty wrapped lists.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return some empty wrapped lists along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AppleBarrel>> getEmptyWrappedListsWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getEmptyWrappedLists(this.client.getHost(), accept, context));
    }

    /**
     * Gets some empty wrapped lists.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return some empty wrapped lists along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AppleBarrel>> getEmptyWrappedListsWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getEmptyWrappedLists(this.client.getHost(), accept, context);
    }

    /**
     * Gets some empty wrapped lists.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return some empty wrapped lists on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppleBarrel> getEmptyWrappedListsAsync() {
        return getEmptyWrappedListsWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets some empty wrapped lists.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return some empty wrapped lists on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppleBarrel> getEmptyWrappedListsAsync(Context context) {
        return getEmptyWrappedListsWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets some empty wrapped lists.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return some empty wrapped lists along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AppleBarrel> getEmptyWrappedListsWithResponse(Context context) {
        return getEmptyWrappedListsWithResponseAsync(context).block();
    }

    /**
     * Gets some empty wrapped lists.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return some empty wrapped lists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppleBarrel getEmptyWrappedLists() {
        return getEmptyWrappedListsWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts some empty wrapped lists.
     * 
     * @param appleBarrel The appleBarrel parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putEmptyWrappedListsWithResponseAsync(AppleBarrel appleBarrel) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (appleBarrel == null) {
            return Mono.error(new IllegalArgumentException("Parameter appleBarrel is required and cannot be null."));
        } else {
            appleBarrel.validate();
        }
        return FluxUtil
            .withContext(context -> service.putEmptyWrappedLists(this.client.getHost(), appleBarrel, context));
    }

    /**
     * Puts some empty wrapped lists.
     * 
     * @param appleBarrel The appleBarrel parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putEmptyWrappedListsWithResponseAsync(AppleBarrel appleBarrel, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (appleBarrel == null) {
            return Mono.error(new IllegalArgumentException("Parameter appleBarrel is required and cannot be null."));
        } else {
            appleBarrel.validate();
        }
        return service.putEmptyWrappedLists(this.client.getHost(), appleBarrel, context);
    }

    /**
     * Puts some empty wrapped lists.
     * 
     * @param appleBarrel The appleBarrel parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putEmptyWrappedListsAsync(AppleBarrel appleBarrel) {
        return putEmptyWrappedListsWithResponseAsync(appleBarrel).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts some empty wrapped lists.
     * 
     * @param appleBarrel The appleBarrel parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putEmptyWrappedListsAsync(AppleBarrel appleBarrel, Context context) {
        return putEmptyWrappedListsWithResponseAsync(appleBarrel, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts some empty wrapped lists.
     * 
     * @param appleBarrel The appleBarrel parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putEmptyWrappedListsWithResponse(AppleBarrel appleBarrel, Context context) {
        return putEmptyWrappedListsWithResponseAsync(appleBarrel, context).block();
    }

    /**
     * Puts some empty wrapped lists.
     * 
     * @param appleBarrel The appleBarrel parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putEmptyWrappedLists(AppleBarrel appleBarrel) {
        putEmptyWrappedListsWithResponse(appleBarrel, Context.NONE);
    }

    /**
     * Gets a list as the root element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list as the root element along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<Banana>>> getRootListWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getRootList(this.client.getHost(), accept, context));
    }

    /**
     * Gets a list as the root element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list as the root element along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<Banana>>> getRootListWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getRootList(this.client.getHost(), accept, context);
    }

    /**
     * Gets a list as the root element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list as the root element on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Banana>> getRootListAsync() {
        return getRootListWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a list as the root element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list as the root element on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Banana>> getRootListAsync(Context context) {
        return getRootListWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a list as the root element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list as the root element along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<Banana>> getRootListWithResponse(Context context) {
        return getRootListWithResponseAsync(context).block();
    }

    /**
     * Gets a list as the root element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list as the root element.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<Banana> getRootList() {
        return getRootListWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts a list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putRootListWithResponseAsync(List<Banana> bananas) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bananas == null) {
            return Mono.error(new IllegalArgumentException("Parameter bananas is required and cannot be null."));
        } else {
            bananas.forEach(e -> e.validate());
        }
        BananaWrapper bananasConverted = new BananaWrapper(bananas);
        return FluxUtil.withContext(context -> service.putRootList(this.client.getHost(), bananasConverted, context));
    }

    /**
     * Puts a list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putRootListWithResponseAsync(List<Banana> bananas, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bananas == null) {
            return Mono.error(new IllegalArgumentException("Parameter bananas is required and cannot be null."));
        } else {
            bananas.forEach(e -> e.validate());
        }
        BananaWrapper bananasConverted = new BananaWrapper(bananas);
        return service.putRootList(this.client.getHost(), bananasConverted, context);
    }

    /**
     * Puts a list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putRootListAsync(List<Banana> bananas) {
        return putRootListWithResponseAsync(bananas).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putRootListAsync(List<Banana> bananas, Context context) {
        return putRootListWithResponseAsync(bananas, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putRootListWithResponse(List<Banana> bananas, Context context) {
        return putRootListWithResponseAsync(bananas, context).block();
    }

    /**
     * Puts a list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putRootList(List<Banana> bananas) {
        putRootListWithResponse(bananas, Context.NONE);
    }

    /**
     * Gets a list with a single item.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list with a single item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<Banana>>> getRootListSingleItemWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getRootListSingleItem(this.client.getHost(), accept, context));
    }

    /**
     * Gets a list with a single item.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list with a single item along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<Banana>>> getRootListSingleItemWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getRootListSingleItem(this.client.getHost(), accept, context);
    }

    /**
     * Gets a list with a single item.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list with a single item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Banana>> getRootListSingleItemAsync() {
        return getRootListSingleItemWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a list with a single item.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list with a single item on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Banana>> getRootListSingleItemAsync(Context context) {
        return getRootListSingleItemWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a list with a single item.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list with a single item along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<Banana>> getRootListSingleItemWithResponse(Context context) {
        return getRootListSingleItemWithResponseAsync(context).block();
    }

    /**
     * Gets a list with a single item.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list with a single item.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<Banana> getRootListSingleItem() {
        return getRootListSingleItemWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts a list with a single item.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putRootListSingleItemWithResponseAsync(List<Banana> bananas) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bananas == null) {
            return Mono.error(new IllegalArgumentException("Parameter bananas is required and cannot be null."));
        } else {
            bananas.forEach(e -> e.validate());
        }
        BananaWrapper bananasConverted = new BananaWrapper(bananas);
        return FluxUtil
            .withContext(context -> service.putRootListSingleItem(this.client.getHost(), bananasConverted, context));
    }

    /**
     * Puts a list with a single item.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putRootListSingleItemWithResponseAsync(List<Banana> bananas, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bananas == null) {
            return Mono.error(new IllegalArgumentException("Parameter bananas is required and cannot be null."));
        } else {
            bananas.forEach(e -> e.validate());
        }
        BananaWrapper bananasConverted = new BananaWrapper(bananas);
        return service.putRootListSingleItem(this.client.getHost(), bananasConverted, context);
    }

    /**
     * Puts a list with a single item.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putRootListSingleItemAsync(List<Banana> bananas) {
        return putRootListSingleItemWithResponseAsync(bananas).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a list with a single item.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putRootListSingleItemAsync(List<Banana> bananas, Context context) {
        return putRootListSingleItemWithResponseAsync(bananas, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a list with a single item.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putRootListSingleItemWithResponse(List<Banana> bananas, Context context) {
        return putRootListSingleItemWithResponseAsync(bananas, context).block();
    }

    /**
     * Puts a list with a single item.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putRootListSingleItem(List<Banana> bananas) {
        putRootListSingleItemWithResponse(bananas, Context.NONE);
    }

    /**
     * Gets an empty list as the root element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list as the root element along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<Banana>>> getEmptyRootListWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getEmptyRootList(this.client.getHost(), accept, context));
    }

    /**
     * Gets an empty list as the root element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list as the root element along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<Banana>>> getEmptyRootListWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getEmptyRootList(this.client.getHost(), accept, context);
    }

    /**
     * Gets an empty list as the root element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list as the root element on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Banana>> getEmptyRootListAsync() {
        return getEmptyRootListWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an empty list as the root element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list as the root element on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<Banana>> getEmptyRootListAsync(Context context) {
        return getEmptyRootListWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an empty list as the root element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list as the root element along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<Banana>> getEmptyRootListWithResponse(Context context) {
        return getEmptyRootListWithResponseAsync(context).block();
    }

    /**
     * Gets an empty list as the root element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an empty list as the root element.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<Banana> getEmptyRootList() {
        return getEmptyRootListWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts an empty list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putEmptyRootListWithResponseAsync(List<Banana> bananas) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bananas == null) {
            return Mono.error(new IllegalArgumentException("Parameter bananas is required and cannot be null."));
        } else {
            bananas.forEach(e -> e.validate());
        }
        BananaWrapper bananasConverted = new BananaWrapper(bananas);
        return FluxUtil
            .withContext(context -> service.putEmptyRootList(this.client.getHost(), bananasConverted, context));
    }

    /**
     * Puts an empty list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putEmptyRootListWithResponseAsync(List<Banana> bananas, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bananas == null) {
            return Mono.error(new IllegalArgumentException("Parameter bananas is required and cannot be null."));
        } else {
            bananas.forEach(e -> e.validate());
        }
        BananaWrapper bananasConverted = new BananaWrapper(bananas);
        return service.putEmptyRootList(this.client.getHost(), bananasConverted, context);
    }

    /**
     * Puts an empty list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putEmptyRootListAsync(List<Banana> bananas) {
        return putEmptyRootListWithResponseAsync(bananas).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts an empty list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putEmptyRootListAsync(List<Banana> bananas, Context context) {
        return putEmptyRootListWithResponseAsync(bananas, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts an empty list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putEmptyRootListWithResponse(List<Banana> bananas, Context context) {
        return putEmptyRootListWithResponseAsync(bananas, context).block();
    }

    /**
     * Puts an empty list as the root element.
     * 
     * @param bananas The bananas parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putEmptyRootList(List<Banana> bananas) {
        putEmptyRootListWithResponse(bananas, Context.NONE);
    }

    /**
     * Gets an XML document with an empty child element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with an empty child element along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Banana>> getEmptyChildElementWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getEmptyChildElement(this.client.getHost(), accept, context));
    }

    /**
     * Gets an XML document with an empty child element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with an empty child element along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Banana>> getEmptyChildElementWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getEmptyChildElement(this.client.getHost(), accept, context);
    }

    /**
     * Gets an XML document with an empty child element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with an empty child element on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Banana> getEmptyChildElementAsync() {
        return getEmptyChildElementWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an XML document with an empty child element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with an empty child element on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Banana> getEmptyChildElementAsync(Context context) {
        return getEmptyChildElementWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an XML document with an empty child element.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with an empty child element along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Banana> getEmptyChildElementWithResponse(Context context) {
        return getEmptyChildElementWithResponseAsync(context).block();
    }

    /**
     * Gets an XML document with an empty child element.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with an empty child element.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Banana getEmptyChildElement() {
        return getEmptyChildElementWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts a value with an empty child element.
     * 
     * @param banana The banana parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putEmptyChildElementWithResponseAsync(Banana banana) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (banana == null) {
            return Mono.error(new IllegalArgumentException("Parameter banana is required and cannot be null."));
        } else {
            banana.validate();
        }
        return FluxUtil.withContext(context -> service.putEmptyChildElement(this.client.getHost(), banana, context));
    }

    /**
     * Puts a value with an empty child element.
     * 
     * @param banana The banana parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putEmptyChildElementWithResponseAsync(Banana banana, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (banana == null) {
            return Mono.error(new IllegalArgumentException("Parameter banana is required and cannot be null."));
        } else {
            banana.validate();
        }
        return service.putEmptyChildElement(this.client.getHost(), banana, context);
    }

    /**
     * Puts a value with an empty child element.
     * 
     * @param banana The banana parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putEmptyChildElementAsync(Banana banana) {
        return putEmptyChildElementWithResponseAsync(banana).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a value with an empty child element.
     * 
     * @param banana The banana parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putEmptyChildElementAsync(Banana banana, Context context) {
        return putEmptyChildElementWithResponseAsync(banana, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts a value with an empty child element.
     * 
     * @param banana The banana parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putEmptyChildElementWithResponse(Banana banana, Context context) {
        return putEmptyChildElementWithResponseAsync(banana, context).block();
    }

    /**
     * Puts a value with an empty child element.
     * 
     * @param banana The banana parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putEmptyChildElement(Banana banana) {
        putEmptyChildElementWithResponse(banana, Context.NONE);
    }

    /**
     * Lists containers in a storage account.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of containers along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ListContainersResponse>> listContainersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String comp = "list";
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.listContainers(this.client.getHost(), comp, accept, context));
    }

    /**
     * Lists containers in a storage account.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of containers along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ListContainersResponse>> listContainersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String comp = "list";
        final String accept = "application/xml";
        return service.listContainers(this.client.getHost(), comp, accept, context);
    }

    /**
     * Lists containers in a storage account.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of containers on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListContainersResponse> listContainersAsync() {
        return listContainersWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists containers in a storage account.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of containers on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListContainersResponse> listContainersAsync(Context context) {
        return listContainersWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists containers in a storage account.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of containers along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ListContainersResponse> listContainersWithResponse(Context context) {
        return listContainersWithResponseAsync(context).block();
    }

    /**
     * Lists containers in a storage account.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of containers.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListContainersResponse listContainers() {
        return listContainersWithResponse(Context.NONE).getValue();
    }

    /**
     * Gets storage service properties.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage service properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StorageServiceProperties>> getServicePropertiesWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String comp = "properties";
        final String restype = "service";
        final String accept = "application/xml";
        return FluxUtil.withContext(
            context -> service.getServiceProperties(this.client.getHost(), comp, restype, accept, context));
    }

    /**
     * Gets storage service properties.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage service properties along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StorageServiceProperties>> getServicePropertiesWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String comp = "properties";
        final String restype = "service";
        final String accept = "application/xml";
        return service.getServiceProperties(this.client.getHost(), comp, restype, accept, context);
    }

    /**
     * Gets storage service properties.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage service properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StorageServiceProperties> getServicePropertiesAsync() {
        return getServicePropertiesWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets storage service properties.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage service properties on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StorageServiceProperties> getServicePropertiesAsync(Context context) {
        return getServicePropertiesWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets storage service properties.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage service properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StorageServiceProperties> getServicePropertiesWithResponse(Context context) {
        return getServicePropertiesWithResponseAsync(context).block();
    }

    /**
     * Gets storage service properties.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage service properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageServiceProperties getServiceProperties() {
        return getServicePropertiesWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts storage service properties.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putServicePropertiesWithResponseAsync(StorageServiceProperties properties) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String comp = "properties";
        final String restype = "service";
        return FluxUtil.withContext(
            context -> service.putServiceProperties(this.client.getHost(), comp, restype, properties, context));
    }

    /**
     * Puts storage service properties.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putServicePropertiesWithResponseAsync(StorageServiceProperties properties,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String comp = "properties";
        final String restype = "service";
        return service.putServiceProperties(this.client.getHost(), comp, restype, properties, context);
    }

    /**
     * Puts storage service properties.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putServicePropertiesAsync(StorageServiceProperties properties) {
        return putServicePropertiesWithResponseAsync(properties).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts storage service properties.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putServicePropertiesAsync(StorageServiceProperties properties, Context context) {
        return putServicePropertiesWithResponseAsync(properties, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts storage service properties.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putServicePropertiesWithResponse(StorageServiceProperties properties, Context context) {
        return putServicePropertiesWithResponseAsync(properties, context).block();
    }

    /**
     * Puts storage service properties.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putServiceProperties(StorageServiceProperties properties) {
        putServicePropertiesWithResponse(properties, Context.NONE);
    }

    /**
     * Gets storage ACLs for a container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage ACLs for a container along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SignedIdentifierWrapper>> getAclsWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String comp = "acl";
        final String restype = "container";
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getAcls(this.client.getHost(), comp, restype, accept, context));
    }

    /**
     * Gets storage ACLs for a container.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage ACLs for a container along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SignedIdentifierWrapper>> getAclsWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String comp = "acl";
        final String restype = "container";
        final String accept = "application/xml";
        return service.getAcls(this.client.getHost(), comp, restype, accept, context);
    }

    /**
     * Gets storage ACLs for a container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage ACLs for a container on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SignedIdentifierWrapper> getAclsAsync() {
        return getAclsWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets storage ACLs for a container.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage ACLs for a container on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SignedIdentifierWrapper> getAclsAsync(Context context) {
        return getAclsWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets storage ACLs for a container.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage ACLs for a container along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SignedIdentifierWrapper> getAclsWithResponse(Context context) {
        return getAclsWithResponseAsync(context).block();
    }

    /**
     * Gets storage ACLs for a container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return storage ACLs for a container.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SignedIdentifierWrapper getAcls() {
        return getAclsWithResponse(Context.NONE).getValue();
    }

    /**
     * Puts storage ACLs for a container.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putAclsWithResponseAsync(List<SignedIdentifier> properties) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.forEach(e -> e.validate());
        }
        final String comp = "acl";
        final String restype = "container";
        SignedIdentifierWrapper propertiesConverted = new SignedIdentifierWrapper(properties);
        return FluxUtil.withContext(
            context -> service.putAcls(this.client.getHost(), comp, restype, propertiesConverted, context));
    }

    /**
     * Puts storage ACLs for a container.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putAclsWithResponseAsync(List<SignedIdentifier> properties, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.forEach(e -> e.validate());
        }
        final String comp = "acl";
        final String restype = "container";
        SignedIdentifierWrapper propertiesConverted = new SignedIdentifierWrapper(properties);
        return service.putAcls(this.client.getHost(), comp, restype, propertiesConverted, context);
    }

    /**
     * Puts storage ACLs for a container.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putAclsAsync(List<SignedIdentifier> properties) {
        return putAclsWithResponseAsync(properties).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts storage ACLs for a container.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putAclsAsync(List<SignedIdentifier> properties, Context context) {
        return putAclsWithResponseAsync(properties, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts storage ACLs for a container.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putAclsWithResponse(List<SignedIdentifier> properties, Context context) {
        return putAclsWithResponseAsync(properties, context).block();
    }

    /**
     * Puts storage ACLs for a container.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putAcls(List<SignedIdentifier> properties) {
        putAclsWithResponse(properties, Context.NONE);
    }

    /**
     * Lists blobs in a storage container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ListBlobsResponse>> listBlobsWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String comp = "list";
        final String restype = "container";
        final String accept = "application/xml";
        return FluxUtil
            .withContext(context -> service.listBlobs(this.client.getHost(), comp, restype, accept, context));
    }

    /**
     * Lists blobs in a storage container.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ListBlobsResponse>> listBlobsWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String comp = "list";
        final String restype = "container";
        final String accept = "application/xml";
        return service.listBlobs(this.client.getHost(), comp, restype, accept, context);
    }

    /**
     * Lists blobs in a storage container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListBlobsResponse> listBlobsAsync() {
        return listBlobsWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists blobs in a storage container.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListBlobsResponse> listBlobsAsync(Context context) {
        return listBlobsWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists blobs in a storage container.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ListBlobsResponse> listBlobsWithResponse(Context context) {
        return listBlobsWithResponseAsync(context).block();
    }

    /**
     * Lists blobs in a storage container.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an enumeration of blobs.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ListBlobsResponse listBlobs() {
        return listBlobsWithResponse(Context.NONE).getValue();
    }

    /**
     * A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> jsonInputWithResponseAsync(JsonInput properties) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        return FluxUtil.withContext(context -> service.jsonInput(this.client.getHost(), properties, context));
    }

    /**
     * A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> jsonInputWithResponseAsync(JsonInput properties, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        return service.jsonInput(this.client.getHost(), properties, context);
    }

    /**
     * A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> jsonInputAsync(JsonInput properties) {
        return jsonInputWithResponseAsync(properties).flatMap(ignored -> Mono.empty());
    }

    /**
     * A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> jsonInputAsync(JsonInput properties, Context context) {
        return jsonInputWithResponseAsync(properties, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42.
     * 
     * @param properties The properties parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> jsonInputWithResponse(JsonInput properties, Context context) {
        return jsonInputWithResponseAsync(properties, context).block();
    }

    /**
     * A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42.
     * 
     * @param properties The properties parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void jsonInput(JsonInput properties) {
        jsonInputWithResponse(properties, Context.NONE);
    }

    /**
     * A Swagger with XML that has one operation that returns JSON. ID number 42.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<JsonOutput>> jsonOutputWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.jsonOutput(this.client.getHost(), accept, context));
    }

    /**
     * A Swagger with XML that has one operation that returns JSON. ID number 42.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<JsonOutput>> jsonOutputWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.jsonOutput(this.client.getHost(), accept, context);
    }

    /**
     * A Swagger with XML that has one operation that returns JSON. ID number 42.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<JsonOutput> jsonOutputAsync() {
        return jsonOutputWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * A Swagger with XML that has one operation that returns JSON. ID number 42.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<JsonOutput> jsonOutputAsync(Context context) {
        return jsonOutputWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * A Swagger with XML that has one operation that returns JSON. ID number 42.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<JsonOutput> jsonOutputWithResponse(Context context) {
        return jsonOutputWithResponseAsync(context).block();
    }

    /**
     * A Swagger with XML that has one operation that returns JSON. ID number 42.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public JsonOutput jsonOutput() {
        return jsonOutputWithResponse(Context.NONE).getValue();
    }

    /**
     * Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text'.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text' along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ObjectWithXMsTextProperty>> getXMsTextWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getXMsText(this.client.getHost(), accept, context));
    }

    /**
     * Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text'.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text' along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ObjectWithXMsTextProperty>> getXMsTextWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getXMsText(this.client.getHost(), accept, context);
    }

    /**
     * Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text'.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text' on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ObjectWithXMsTextProperty> getXMsTextAsync() {
        return getXMsTextWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text'.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text' on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ObjectWithXMsTextProperty> getXMsTextAsync(Context context) {
        return getXMsTextWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text'.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text' along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ObjectWithXMsTextProperty> getXMsTextWithResponse(Context context) {
        return getXMsTextWithResponseAsync(context).block();
    }

    /**
     * Get back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text'.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return back an XML object with an x-ms-text property, which should translate to the returned object's 'language'
     * property being 'english' and its 'content' property being 'I am text'.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ObjectWithXMsTextProperty getXMsText() {
        return getXMsTextWithResponse(Context.NONE).getValue();
    }

    /**
     * Get an XML document with binary property.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with binary property along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ModelWithByteProperty>> getBytesWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getBytes(this.client.getHost(), accept, context));
    }

    /**
     * Get an XML document with binary property.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with binary property along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ModelWithByteProperty>> getBytesWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getBytes(this.client.getHost(), accept, context);
    }

    /**
     * Get an XML document with binary property.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with binary property on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ModelWithByteProperty> getBytesAsync() {
        return getBytesWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an XML document with binary property.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with binary property on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ModelWithByteProperty> getBytesAsync(Context context) {
        return getBytesWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an XML document with binary property.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with binary property along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ModelWithByteProperty> getBytesWithResponse(Context context) {
        return getBytesWithResponseAsync(context).block();
    }

    /**
     * Get an XML document with binary property.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with binary property.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ModelWithByteProperty getBytes() {
        return getBytesWithResponse(Context.NONE).getValue();
    }

    /**
     * Put an XML document with binary property.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBinaryWithResponseAsync(ModelWithByteProperty slideshow) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (slideshow == null) {
            return Mono.error(new IllegalArgumentException("Parameter slideshow is required and cannot be null."));
        } else {
            slideshow.validate();
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.putBinary(this.client.getHost(), slideshow, accept, context));
    }

    /**
     * Put an XML document with binary property.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBinaryWithResponseAsync(ModelWithByteProperty slideshow, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (slideshow == null) {
            return Mono.error(new IllegalArgumentException("Parameter slideshow is required and cannot be null."));
        } else {
            slideshow.validate();
        }
        final String accept = "application/xml";
        return service.putBinary(this.client.getHost(), slideshow, accept, context);
    }

    /**
     * Put an XML document with binary property.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBinaryAsync(ModelWithByteProperty slideshow) {
        return putBinaryWithResponseAsync(slideshow).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put an XML document with binary property.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBinaryAsync(ModelWithByteProperty slideshow, Context context) {
        return putBinaryWithResponseAsync(slideshow, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put an XML document with binary property.
     * 
     * @param slideshow The slideshow parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putBinaryWithResponse(ModelWithByteProperty slideshow, Context context) {
        return putBinaryWithResponseAsync(slideshow, context).block();
    }

    /**
     * Put an XML document with binary property.
     * 
     * @param slideshow The slideshow parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBinary(ModelWithByteProperty slideshow) {
        putBinaryWithResponse(slideshow, Context.NONE);
    }

    /**
     * Get an XML document with uri property.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with uri property along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ModelWithUrlProperty>> getUriWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.getUri(this.client.getHost(), accept, context));
    }

    /**
     * Get an XML document with uri property.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with uri property along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ModelWithUrlProperty>> getUriWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/xml";
        return service.getUri(this.client.getHost(), accept, context);
    }

    /**
     * Get an XML document with uri property.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with uri property on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ModelWithUrlProperty> getUriAsync() {
        return getUriWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an XML document with uri property.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with uri property on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ModelWithUrlProperty> getUriAsync(Context context) {
        return getUriWithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get an XML document with uri property.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with uri property along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ModelWithUrlProperty> getUriWithResponse(Context context) {
        return getUriWithResponseAsync(context).block();
    }

    /**
     * Get an XML document with uri property.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an XML document with uri property.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ModelWithUrlProperty getUri() {
        return getUriWithResponse(Context.NONE).getValue();
    }

    /**
     * Put an XML document with uri property.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putUriWithResponseAsync(ModelWithUrlProperty model) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (model == null) {
            return Mono.error(new IllegalArgumentException("Parameter model is required and cannot be null."));
        } else {
            model.validate();
        }
        final String accept = "application/xml";
        return FluxUtil.withContext(context -> service.putUri(this.client.getHost(), model, accept, context));
    }

    /**
     * Put an XML document with uri property.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putUriWithResponseAsync(ModelWithUrlProperty model, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (model == null) {
            return Mono.error(new IllegalArgumentException("Parameter model is required and cannot be null."));
        } else {
            model.validate();
        }
        final String accept = "application/xml";
        return service.putUri(this.client.getHost(), model, accept, context);
    }

    /**
     * Put an XML document with uri property.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putUriAsync(ModelWithUrlProperty model) {
        return putUriWithResponseAsync(model).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put an XML document with uri property.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putUriAsync(ModelWithUrlProperty model, Context context) {
        return putUriWithResponseAsync(model, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put an XML document with uri property.
     * 
     * @param model The model parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putUriWithResponse(ModelWithUrlProperty model, Context context) {
        return putUriWithResponseAsync(model, context).block();
    }

    /**
     * Put an XML document with uri property.
     * 
     * @param model The model parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putUri(ModelWithUrlProperty model) {
        putUriWithResponse(model, Context.NONE);
    }
}
