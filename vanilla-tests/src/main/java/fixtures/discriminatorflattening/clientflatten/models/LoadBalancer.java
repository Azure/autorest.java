// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.discriminatorflattening.clientflatten.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * LoadBalancer resource.
 */
@Fluent
public final class LoadBalancer implements JsonSerializable<LoadBalancer> {
    /*
     * Properties of load balancer.
     */
    private LoadBalancerPropertiesFormat innerProperties;

    /**
     * Creates an instance of LoadBalancer class.
     */
    public LoadBalancer() {
    }

    /**
     * Get the innerProperties property: Properties of load balancer.
     * 
     * @return the innerProperties value.
     */
    private LoadBalancerPropertiesFormat getInnerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the backendAddressPools property: Collection of backend address pools used by a load balancer.
     * 
     * @return the backendAddressPools value.
     */
    public List<BackendAddressPool> getBackendAddressPools() {
        return this.getInnerProperties() == null ? null : this.getInnerProperties().getBackendAddressPools();
    }

    /**
     * Set the backendAddressPools property: Collection of backend address pools used by a load balancer.
     * 
     * @param backendAddressPools the backendAddressPools value to set.
     * @return the LoadBalancer object itself.
     */
    public LoadBalancer setBackendAddressPools(List<BackendAddressPool> backendAddressPools) {
        if (this.getInnerProperties() == null) {
            this.innerProperties = new LoadBalancerPropertiesFormat();
        }
        this.getInnerProperties().setBackendAddressPools(backendAddressPools);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getInnerProperties() != null) {
            getInnerProperties().validate();
        }
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LoadBalancer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LoadBalancer if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LoadBalancer.
     */
    public static LoadBalancer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LoadBalancer deserializedLoadBalancer = new LoadBalancer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedLoadBalancer.innerProperties = LoadBalancerPropertiesFormat.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLoadBalancer;
        });
    }
}
