// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.multipleinheritance.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Horse model.
 */
@Fluent
public final class Horse extends Pet {
    /*
     * The isAShowHorse property.
     */
    @Generated
    private Boolean isAShowHorse;

    /**
     * Creates an instance of Horse class.
     */
    @Generated
    public Horse() {
    }

    /**
     * Get the isAShowHorse property: The isAShowHorse property.
     * 
     * @return the isAShowHorse value.
     */
    @Generated
    public Boolean isAShowHorse() {
        return this.isAShowHorse;
    }

    /**
     * Set the isAShowHorse property: The isAShowHorse property.
     * 
     * @param isAShowHorse the isAShowHorse value to set.
     * @return the Horse object itself.
     */
    @Generated
    public Horse setIsAShowHorse(Boolean isAShowHorse) {
        this.isAShowHorse = isAShowHorse;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public Horse setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (getName() == null) {
            throw new IllegalArgumentException("Missing required property name in model Horse");
        }
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeBooleanField("isAShowHorse", this.isAShowHorse);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Horse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Horse if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Horse.
     */
    @Generated
    public static Horse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Horse deserializedHorse = new Horse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedHorse.setName(reader.getString());
                } else if ("isAShowHorse".equals(fieldName)) {
                    deserializedHorse.isAShowHorse = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHorse;
        });
    }
}
