// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.multipleinheritance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Kitten model.
 */
@Fluent
public final class Kitten extends Cat {
    /*
     * The eatsMiceYet property.
     */
    private Boolean eatsMiceYet;

    /**
     * Creates an instance of Kitten class.
     */
    public Kitten() {
    }

    /**
     * Get the eatsMiceYet property: The eatsMiceYet property.
     * 
     * @return the eatsMiceYet value.
     */
    public Boolean isEatsMiceYet() {
        return this.eatsMiceYet;
    }

    /**
     * Set the eatsMiceYet property: The eatsMiceYet property.
     * 
     * @param eatsMiceYet the eatsMiceYet value to set.
     * @return the Kitten object itself.
     */
    public Kitten setEatsMiceYet(Boolean eatsMiceYet) {
        this.eatsMiceYet = eatsMiceYet;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Kitten setLikesMilk(Boolean likesMilk) {
        super.setLikesMilk(likesMilk);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Kitten setMeows(Boolean meows) {
        super.setMeows(meows);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Kitten setHisses(Boolean hisses) {
        super.setHisses(hisses);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Kitten setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getName() == null) {
            throw new IllegalArgumentException("Missing required property name in model Kitten");
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeBooleanField("likesMilk", isLikesMilk());
        jsonWriter.writeBooleanField("meows", isMeows());
        jsonWriter.writeBooleanField("hisses", isHisses());
        jsonWriter.writeBooleanField("eatsMiceYet", this.eatsMiceYet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Kitten from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Kitten if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Kitten.
     */
    public static Kitten fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Kitten deserializedKitten = new Kitten();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedKitten.setName(reader.getString());
                } else if ("likesMilk".equals(fieldName)) {
                    deserializedKitten.setLikesMilk(reader.getNullable(JsonReader::getBoolean));
                } else if ("meows".equals(fieldName)) {
                    deserializedKitten.setMeows(reader.getNullable(JsonReader::getBoolean));
                } else if ("hisses".equals(fieldName)) {
                    deserializedKitten.setHisses(reader.getNullable(JsonReader::getBoolean));
                } else if ("eatsMiceYet".equals(fieldName)) {
                    deserializedKitten.eatsMiceYet = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKitten;
        });
    }
}
