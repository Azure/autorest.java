// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.multipleinheritance.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Cat model.
 */
@Fluent
public class Cat extends Pet {
    /*
     * The likesMilk property.
     */
    private Boolean likesMilk;

    /*
     * The meows property.
     */
    private Boolean meows;

    /*
     * The hisses property.
     */
    private Boolean hisses;

    /**
     * Creates an instance of Cat class.
     */
    public Cat() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cat setName(String name) {
        super.setName(name);
        return this;
    }

    /**
     * Get the likesMilk property: The likesMilk property.
     * 
     * @return the likesMilk value.
     */
    public Boolean isLikesMilk() {
        return this.likesMilk;
    }

    /**
     * Set the likesMilk property: The likesMilk property.
     * 
     * @param likesMilk the likesMilk value to set.
     * @return the Cat object itself.
     */
    public Cat setLikesMilk(Boolean likesMilk) {
        this.likesMilk = likesMilk;
        return this;
    }

    /**
     * Get the meows property: The meows property.
     * 
     * @return the meows value.
     */
    public Boolean isMeows() {
        return this.meows;
    }

    /**
     * Set the meows property: The meows property.
     * 
     * @param meows the meows value to set.
     * @return the Cat object itself.
     */
    public Cat setMeows(Boolean meows) {
        this.meows = meows;
        return this;
    }

    /**
     * Get the hisses property: The hisses property.
     * 
     * @return the hisses value.
     */
    public Boolean isHisses() {
        return this.hisses;
    }

    /**
     * Set the hisses property: The hisses property.
     * 
     * @param hisses the hisses value to set.
     * @return the Cat object itself.
     */
    public Cat setHisses(Boolean hisses) {
        this.hisses = hisses;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (getName() == null) {
            throw new IllegalArgumentException("Missing required property name in model Cat");
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeBooleanField("likesMilk", this.likesMilk);
        jsonWriter.writeBooleanField("meows", this.meows);
        jsonWriter.writeBooleanField("hisses", this.hisses);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Cat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Cat if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Cat.
     */
    public static Cat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Cat deserializedCat = new Cat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCat.setName(reader.getString());
                } else if ("likesMilk".equals(fieldName)) {
                    deserializedCat.likesMilk = reader.getNullable(JsonReader::getBoolean);
                } else if ("meows".equals(fieldName)) {
                    deserializedCat.meows = reader.getNullable(JsonReader::getBoolean);
                } else if ("hisses".equals(fieldName)) {
                    deserializedCat.hisses = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCat;
        });
    }
}
