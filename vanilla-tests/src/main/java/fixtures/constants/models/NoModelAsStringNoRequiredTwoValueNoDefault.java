// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.constants.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The NoModelAsStringNoRequiredTwoValueNoDefault model.
 */
@Fluent
public final class NoModelAsStringNoRequiredTwoValueNoDefault
    implements JsonSerializable<NoModelAsStringNoRequiredTwoValueNoDefault> {
    /*
     * The parameter property.
     */
    private NoModelAsStringNoRequiredTwoValueNoDefaultEnum parameter;

    /**
     * Creates an instance of NoModelAsStringNoRequiredTwoValueNoDefault class.
     */
    public NoModelAsStringNoRequiredTwoValueNoDefault() {
    }

    /**
     * Get the parameter property: The parameter property.
     * 
     * @return the parameter value.
     */
    public NoModelAsStringNoRequiredTwoValueNoDefaultEnum getParameter() {
        return this.parameter;
    }

    /**
     * Set the parameter property: The parameter property.
     * 
     * @param parameter the parameter value to set.
     * @return the NoModelAsStringNoRequiredTwoValueNoDefault object itself.
     */
    public NoModelAsStringNoRequiredTwoValueNoDefault
        setParameter(NoModelAsStringNoRequiredTwoValueNoDefaultEnum parameter) {
        this.parameter = parameter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("parameter", this.parameter == null ? null : this.parameter.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NoModelAsStringNoRequiredTwoValueNoDefault from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NoModelAsStringNoRequiredTwoValueNoDefault if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NoModelAsStringNoRequiredTwoValueNoDefault.
     */
    public static NoModelAsStringNoRequiredTwoValueNoDefault fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NoModelAsStringNoRequiredTwoValueNoDefault deserializedNoModelAsStringNoRequiredTwoValueNoDefault
                = new NoModelAsStringNoRequiredTwoValueNoDefault();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("parameter".equals(fieldName)) {
                    deserializedNoModelAsStringNoRequiredTwoValueNoDefault.parameter
                        = NoModelAsStringNoRequiredTwoValueNoDefaultEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNoModelAsStringNoRequiredTwoValueNoDefault;
        });
    }
}
