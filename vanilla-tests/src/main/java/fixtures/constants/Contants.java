// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.constants;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import fixtures.constants.models.ModelAsStringNoRequiredOneValueDefaultOpEnum;
import fixtures.constants.models.ModelAsStringNoRequiredOneValueNoDefaultOpEnum;
import fixtures.constants.models.ModelAsStringNoRequiredTwoValueDefaultOpEnum;
import fixtures.constants.models.ModelAsStringNoRequiredTwoValueNoDefaultOpEnum;
import fixtures.constants.models.ModelAsStringRequiredOneValueDefaultOpEnum;
import fixtures.constants.models.ModelAsStringRequiredOneValueNoDefaultOpEnum;
import fixtures.constants.models.ModelAsStringRequiredTwoValueDefaultOpEnum;
import fixtures.constants.models.ModelAsStringRequiredTwoValueNoDefaultOpEnum;
import fixtures.constants.models.NoModelAsStringNoRequiredTwoValueDefaultOpEnum;
import fixtures.constants.models.NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum;
import fixtures.constants.models.NoModelAsStringRequiredTwoValueDefaultOpEnum;
import fixtures.constants.models.NoModelAsStringRequiredTwoValueNoDefaultOpEnum;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Contants.
 */
public final class Contants {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ContantsService service;

    /**
     * The service client containing this operation class.
     */
    private final AutoRestSwaggerConstantService client;

    /**
     * Initializes an instance of Contants.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    Contants(AutoRestSwaggerConstantService client) {
        this.service = RestProxy.create(ContantsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AutoRestSwaggerConstantServiceContants to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AutoRestSwaggerConst")
    public interface ContantsService {
        @Put("/constants/putNoModelAsStringNoRequiredTwoValueNoDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putNoModelAsStringNoRequiredTwoValueNoDefault(@HostParam("$host") String host,
            @QueryParam("input") NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input, Context context);

        @Put("/constants/putNoModelAsStringNoRequiredTwoValueDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putNoModelAsStringNoRequiredTwoValueDefault(@HostParam("$host") String host,
            @QueryParam("input") NoModelAsStringNoRequiredTwoValueDefaultOpEnum input, Context context);

        @Put("/constants/putNoModelAsStringNoRequiredOneValueNoDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putNoModelAsStringNoRequiredOneValueNoDefault(@HostParam("$host") String host,
            @QueryParam("input") String input, Context context);

        @Put("/constants/putNoModelAsStringNoRequiredOneValueDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putNoModelAsStringNoRequiredOneValueDefault(@HostParam("$host") String host,
            @QueryParam("input") String input, Context context);

        @Put("/constants/putNoModelAsStringRequiredTwoValueNoDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putNoModelAsStringRequiredTwoValueNoDefault(@HostParam("$host") String host,
            @QueryParam("input") NoModelAsStringRequiredTwoValueNoDefaultOpEnum input, Context context);

        @Put("/constants/putNoModelAsStringRequiredTwoValueDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putNoModelAsStringRequiredTwoValueDefault(@HostParam("$host") String host,
            @QueryParam("input") NoModelAsStringRequiredTwoValueDefaultOpEnum input, Context context);

        @Put("/constants/putNoModelAsStringRequiredOneValueNoDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putNoModelAsStringRequiredOneValueNoDefault(@HostParam("$host") String host,
            @QueryParam("input") String input, Context context);

        @Put("/constants/putNoModelAsStringRequiredOneValueDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putNoModelAsStringRequiredOneValueDefault(@HostParam("$host") String host,
            @QueryParam("input") String input, Context context);

        @Put("/constants/putModelAsStringNoRequiredTwoValueNoDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putModelAsStringNoRequiredTwoValueNoDefault(@HostParam("$host") String host,
            @QueryParam("input") ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input, Context context);

        @Put("/constants/putModelAsStringNoRequiredTwoValueDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putModelAsStringNoRequiredTwoValueDefault(@HostParam("$host") String host,
            @QueryParam("input") ModelAsStringNoRequiredTwoValueDefaultOpEnum input, Context context);

        @Put("/constants/putModelAsStringNoRequiredOneValueNoDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putModelAsStringNoRequiredOneValueNoDefault(@HostParam("$host") String host,
            @QueryParam("input") ModelAsStringNoRequiredOneValueNoDefaultOpEnum input, Context context);

        @Put("/constants/putModelAsStringNoRequiredOneValueDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putModelAsStringNoRequiredOneValueDefault(@HostParam("$host") String host,
            @QueryParam("input") ModelAsStringNoRequiredOneValueDefaultOpEnum input, Context context);

        @Put("/constants/putModelAsStringRequiredTwoValueNoDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putModelAsStringRequiredTwoValueNoDefault(@HostParam("$host") String host,
            @QueryParam("input") ModelAsStringRequiredTwoValueNoDefaultOpEnum input, Context context);

        @Put("/constants/putModelAsStringRequiredTwoValueDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putModelAsStringRequiredTwoValueDefault(@HostParam("$host") String host,
            @QueryParam("input") ModelAsStringRequiredTwoValueDefaultOpEnum input, Context context);

        @Put("/constants/putModelAsStringRequiredOneValueNoDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putModelAsStringRequiredOneValueNoDefault(@HostParam("$host") String host,
            @QueryParam("input") ModelAsStringRequiredOneValueNoDefaultOpEnum input, Context context);

        @Put("/constants/putModelAsStringRequiredOneValueDefault")
        @ExpectedResponses({ 201 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putModelAsStringRequiredOneValueDefault(@HostParam("$host") String host,
            @QueryParam("input") ModelAsStringRequiredOneValueDefaultOpEnum input, Context context);

        @Put("/constants/clientConstants/{path-constant}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> putClientConstants(@HostParam("$host") String host,
            @HeaderParam("header-constant") boolean headerConstant, @QueryParam("query-constant") int queryConstant,
            @PathParam("path-constant") String pathConstant, Context context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(
        NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(
        NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.putNoModelAsStringNoRequiredTwoValueNoDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putNoModelAsStringNoRequiredTwoValueNoDefaultAsync(NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input) {
        return putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringNoRequiredTwoValueNoDefaultAsync() {
        final NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input = null;
        return putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringNoRequiredTwoValueNoDefaultAsync(
        NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input, Context context) {
        return putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse(
        NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input, Context context) {
        return putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredTwoValueNoDefault(NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input) {
        putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredTwoValueNoDefault() {
        final NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input = null;
        putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(
        NoModelAsStringNoRequiredTwoValueDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putNoModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(
        NoModelAsStringNoRequiredTwoValueDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.putNoModelAsStringNoRequiredTwoValueDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putNoModelAsStringNoRequiredTwoValueDefaultAsync(NoModelAsStringNoRequiredTwoValueDefaultOpEnum input) {
        return putNoModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringNoRequiredTwoValueDefaultAsync() {
        final NoModelAsStringNoRequiredTwoValueDefaultOpEnum input = null;
        return putNoModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringNoRequiredTwoValueDefaultAsync(
        NoModelAsStringNoRequiredTwoValueDefaultOpEnum input, Context context) {
        return putNoModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredTwoValueDefaultWithResponse(
        NoModelAsStringNoRequiredTwoValueDefaultOpEnum input, Context context) {
        return putNoModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredTwoValueDefault(NoModelAsStringNoRequiredTwoValueDefaultOpEnum input) {
        putNoModelAsStringNoRequiredTwoValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredTwoValueDefault() {
        final NoModelAsStringNoRequiredTwoValueDefaultOpEnum input = null;
        putNoModelAsStringNoRequiredTwoValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync() {
        return FluxUtil.withContext(context -> putNoModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String input = "value1";
        return service.putNoModelAsStringNoRequiredOneValueNoDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringNoRequiredOneValueNoDefaultAsync() {
        return putNoModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringNoRequiredOneValueNoDefaultAsync(Context context) {
        return putNoModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredOneValueNoDefaultWithResponse(Context context) {
        return putNoModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredOneValueNoDefault() {
        putNoModelAsStringNoRequiredOneValueNoDefaultWithResponse(Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringNoRequiredOneValueDefaultWithResponseAsync() {
        return FluxUtil.withContext(context -> putNoModelAsStringNoRequiredOneValueDefaultWithResponseAsync(context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringNoRequiredOneValueDefaultWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String input = "value1";
        return service.putNoModelAsStringNoRequiredOneValueDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringNoRequiredOneValueDefaultAsync() {
        return putNoModelAsStringNoRequiredOneValueDefaultWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringNoRequiredOneValueDefaultAsync(Context context) {
        return putNoModelAsStringNoRequiredOneValueDefaultWithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredOneValueDefaultWithResponse(Context context) {
        return putNoModelAsStringNoRequiredOneValueDefaultWithResponseAsync(context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredOneValueDefault() {
        putNoModelAsStringNoRequiredOneValueDefaultWithResponse(Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(
        NoModelAsStringRequiredTwoValueNoDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putNoModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(
        NoModelAsStringRequiredTwoValueNoDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        }
        return service.putNoModelAsStringRequiredTwoValueNoDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putNoModelAsStringRequiredTwoValueNoDefaultAsync(NoModelAsStringRequiredTwoValueNoDefaultOpEnum input) {
        return putNoModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringRequiredTwoValueNoDefaultAsync(
        NoModelAsStringRequiredTwoValueNoDefaultOpEnum input, Context context) {
        return putNoModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredTwoValueNoDefaultWithResponse(
        NoModelAsStringRequiredTwoValueNoDefaultOpEnum input, Context context) {
        return putNoModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringRequiredTwoValueNoDefault(NoModelAsStringRequiredTwoValueNoDefaultOpEnum input) {
        putNoModelAsStringRequiredTwoValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>>
        putNoModelAsStringRequiredTwoValueDefaultWithResponseAsync(NoModelAsStringRequiredTwoValueDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putNoModelAsStringRequiredTwoValueDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringRequiredTwoValueDefaultWithResponseAsync(
        NoModelAsStringRequiredTwoValueDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        }
        return service.putNoModelAsStringRequiredTwoValueDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putNoModelAsStringRequiredTwoValueDefaultAsync(NoModelAsStringRequiredTwoValueDefaultOpEnum input) {
        return putNoModelAsStringRequiredTwoValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringRequiredTwoValueDefaultAsync(NoModelAsStringRequiredTwoValueDefaultOpEnum input,
        Context context) {
        return putNoModelAsStringRequiredTwoValueDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredTwoValueDefaultWithResponse(
        NoModelAsStringRequiredTwoValueDefaultOpEnum input, Context context) {
        return putNoModelAsStringRequiredTwoValueDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringRequiredTwoValueDefault(NoModelAsStringRequiredTwoValueDefaultOpEnum input) {
        putNoModelAsStringRequiredTwoValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringRequiredOneValueNoDefaultWithResponseAsync() {
        return FluxUtil.withContext(context -> putNoModelAsStringRequiredOneValueNoDefaultWithResponseAsync(context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringRequiredOneValueNoDefaultWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String input = "value1";
        return service.putNoModelAsStringRequiredOneValueNoDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringRequiredOneValueNoDefaultAsync() {
        return putNoModelAsStringRequiredOneValueNoDefaultWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringRequiredOneValueNoDefaultAsync(Context context) {
        return putNoModelAsStringRequiredOneValueNoDefaultWithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredOneValueNoDefaultWithResponse(Context context) {
        return putNoModelAsStringRequiredOneValueNoDefaultWithResponseAsync(context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringRequiredOneValueNoDefault() {
        putNoModelAsStringRequiredOneValueNoDefaultWithResponse(Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringRequiredOneValueDefaultWithResponseAsync() {
        return FluxUtil.withContext(context -> putNoModelAsStringRequiredOneValueDefaultWithResponseAsync(context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putNoModelAsStringRequiredOneValueDefaultWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String input = "value1";
        return service.putNoModelAsStringRequiredOneValueDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringRequiredOneValueDefaultAsync() {
        return putNoModelAsStringRequiredOneValueDefaultWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putNoModelAsStringRequiredOneValueDefaultAsync(Context context) {
        return putNoModelAsStringRequiredOneValueDefaultWithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredOneValueDefaultWithResponse(Context context) {
        return putNoModelAsStringRequiredOneValueDefaultWithResponseAsync(context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringRequiredOneValueDefault() {
        putNoModelAsStringRequiredOneValueDefaultWithResponse(Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(
        ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(
        ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.putModelAsStringNoRequiredTwoValueNoDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putModelAsStringNoRequiredTwoValueNoDefaultAsync(ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input) {
        return putModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringNoRequiredTwoValueNoDefaultAsync() {
        final ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input = null;
        return putModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringNoRequiredTwoValueNoDefaultAsync(
        ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input, Context context) {
        return putModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredTwoValueNoDefaultWithResponse(
        ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input, Context context) {
        return putModelAsStringNoRequiredTwoValueNoDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredTwoValueNoDefault(ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input) {
        putModelAsStringNoRequiredTwoValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredTwoValueNoDefault() {
        final ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input = null;
        putModelAsStringNoRequiredTwoValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>>
        putModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(ModelAsStringNoRequiredTwoValueDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(
        ModelAsStringNoRequiredTwoValueDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.putModelAsStringNoRequiredTwoValueDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putModelAsStringNoRequiredTwoValueDefaultAsync(ModelAsStringNoRequiredTwoValueDefaultOpEnum input) {
        return putModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringNoRequiredTwoValueDefaultAsync() {
        final ModelAsStringNoRequiredTwoValueDefaultOpEnum input = null;
        return putModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringNoRequiredTwoValueDefaultAsync(ModelAsStringNoRequiredTwoValueDefaultOpEnum input,
        Context context) {
        return putModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredTwoValueDefaultWithResponse(
        ModelAsStringNoRequiredTwoValueDefaultOpEnum input, Context context) {
        return putModelAsStringNoRequiredTwoValueDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredTwoValueDefault(ModelAsStringNoRequiredTwoValueDefaultOpEnum input) {
        putModelAsStringNoRequiredTwoValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredTwoValueDefault() {
        final ModelAsStringNoRequiredTwoValueDefaultOpEnum input = null;
        putModelAsStringNoRequiredTwoValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(
        ModelAsStringNoRequiredOneValueNoDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(
        ModelAsStringNoRequiredOneValueNoDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.putModelAsStringNoRequiredOneValueNoDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putModelAsStringNoRequiredOneValueNoDefaultAsync(ModelAsStringNoRequiredOneValueNoDefaultOpEnum input) {
        return putModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringNoRequiredOneValueNoDefaultAsync() {
        final ModelAsStringNoRequiredOneValueNoDefaultOpEnum input = null;
        return putModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringNoRequiredOneValueNoDefaultAsync(
        ModelAsStringNoRequiredOneValueNoDefaultOpEnum input, Context context) {
        return putModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredOneValueNoDefaultWithResponse(
        ModelAsStringNoRequiredOneValueNoDefaultOpEnum input, Context context) {
        return putModelAsStringNoRequiredOneValueNoDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredOneValueNoDefault(ModelAsStringNoRequiredOneValueNoDefaultOpEnum input) {
        putModelAsStringNoRequiredOneValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredOneValueNoDefault() {
        final ModelAsStringNoRequiredOneValueNoDefaultOpEnum input = null;
        putModelAsStringNoRequiredOneValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>>
        putModelAsStringNoRequiredOneValueDefaultWithResponseAsync(ModelAsStringNoRequiredOneValueDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putModelAsStringNoRequiredOneValueDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringNoRequiredOneValueDefaultWithResponseAsync(
        ModelAsStringNoRequiredOneValueDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.putModelAsStringNoRequiredOneValueDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putModelAsStringNoRequiredOneValueDefaultAsync(ModelAsStringNoRequiredOneValueDefaultOpEnum input) {
        return putModelAsStringNoRequiredOneValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringNoRequiredOneValueDefaultAsync() {
        final ModelAsStringNoRequiredOneValueDefaultOpEnum input = null;
        return putModelAsStringNoRequiredOneValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringNoRequiredOneValueDefaultAsync(ModelAsStringNoRequiredOneValueDefaultOpEnum input,
        Context context) {
        return putModelAsStringNoRequiredOneValueDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredOneValueDefaultWithResponse(
        ModelAsStringNoRequiredOneValueDefaultOpEnum input, Context context) {
        return putModelAsStringNoRequiredOneValueDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredOneValueDefault(ModelAsStringNoRequiredOneValueDefaultOpEnum input) {
        putModelAsStringNoRequiredOneValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredOneValueDefault() {
        final ModelAsStringNoRequiredOneValueDefaultOpEnum input = null;
        putModelAsStringNoRequiredOneValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>>
        putModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(ModelAsStringRequiredTwoValueNoDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(
        ModelAsStringRequiredTwoValueNoDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        }
        return service.putModelAsStringRequiredTwoValueNoDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putModelAsStringRequiredTwoValueNoDefaultAsync(ModelAsStringRequiredTwoValueNoDefaultOpEnum input) {
        return putModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringRequiredTwoValueNoDefaultAsync(ModelAsStringRequiredTwoValueNoDefaultOpEnum input,
        Context context) {
        return putModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredTwoValueNoDefaultWithResponse(
        ModelAsStringRequiredTwoValueNoDefaultOpEnum input, Context context) {
        return putModelAsStringRequiredTwoValueNoDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringRequiredTwoValueNoDefault(ModelAsStringRequiredTwoValueNoDefaultOpEnum input) {
        putModelAsStringRequiredTwoValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>>
        putModelAsStringRequiredTwoValueDefaultWithResponseAsync(ModelAsStringRequiredTwoValueDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putModelAsStringRequiredTwoValueDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringRequiredTwoValueDefaultWithResponseAsync(
        ModelAsStringRequiredTwoValueDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        }
        return service.putModelAsStringRequiredTwoValueDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringRequiredTwoValueDefaultAsync(ModelAsStringRequiredTwoValueDefaultOpEnum input) {
        return putModelAsStringRequiredTwoValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringRequiredTwoValueDefaultAsync(ModelAsStringRequiredTwoValueDefaultOpEnum input,
        Context context) {
        return putModelAsStringRequiredTwoValueDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredTwoValueDefaultWithResponse(
        ModelAsStringRequiredTwoValueDefaultOpEnum input, Context context) {
        return putModelAsStringRequiredTwoValueDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringRequiredTwoValueDefault(ModelAsStringRequiredTwoValueDefaultOpEnum input) {
        putModelAsStringRequiredTwoValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>>
        putModelAsStringRequiredOneValueNoDefaultWithResponseAsync(ModelAsStringRequiredOneValueNoDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putModelAsStringRequiredOneValueNoDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringRequiredOneValueNoDefaultWithResponseAsync(
        ModelAsStringRequiredOneValueNoDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        }
        return service.putModelAsStringRequiredOneValueNoDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void>
        putModelAsStringRequiredOneValueNoDefaultAsync(ModelAsStringRequiredOneValueNoDefaultOpEnum input) {
        return putModelAsStringRequiredOneValueNoDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringRequiredOneValueNoDefaultAsync(ModelAsStringRequiredOneValueNoDefaultOpEnum input,
        Context context) {
        return putModelAsStringRequiredOneValueNoDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredOneValueNoDefaultWithResponse(
        ModelAsStringRequiredOneValueNoDefaultOpEnum input, Context context) {
        return putModelAsStringRequiredOneValueNoDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringRequiredOneValueNoDefault(ModelAsStringRequiredOneValueNoDefaultOpEnum input) {
        putModelAsStringRequiredOneValueNoDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>>
        putModelAsStringRequiredOneValueDefaultWithResponseAsync(ModelAsStringRequiredOneValueDefaultOpEnum input) {
        return FluxUtil
            .withContext(context -> putModelAsStringRequiredOneValueDefaultWithResponseAsync(input, context));
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putModelAsStringRequiredOneValueDefaultWithResponseAsync(
        ModelAsStringRequiredOneValueDefaultOpEnum input, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (input == null) {
            return Mono.error(new IllegalArgumentException("Parameter input is required and cannot be null."));
        }
        return service.putModelAsStringRequiredOneValueDefault(this.client.getHost(), input, context);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringRequiredOneValueDefaultAsync(ModelAsStringRequiredOneValueDefaultOpEnum input) {
        return putModelAsStringRequiredOneValueDefaultWithResponseAsync(input).flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putModelAsStringRequiredOneValueDefaultAsync(ModelAsStringRequiredOneValueDefaultOpEnum input,
        Context context) {
        return putModelAsStringRequiredOneValueDefaultWithResponseAsync(input, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredOneValueDefaultWithResponse(
        ModelAsStringRequiredOneValueDefaultOpEnum input, Context context) {
        return putModelAsStringRequiredOneValueDefaultWithResponseAsync(input, context).block();
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringRequiredOneValueDefault(ModelAsStringRequiredOneValueDefaultOpEnum input) {
        putModelAsStringRequiredOneValueDefaultWithResponse(input, Context.NONE);
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putClientConstantsWithResponseAsync() {
        return FluxUtil.withContext(context -> putClientConstantsWithResponseAsync(context));
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putClientConstantsWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.putClientConstants(this.client.getHost(), this.client.isHeaderConstant(),
            this.client.getQueryConstant(), this.client.getPathConstant(), context);
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putClientConstantsAsync() {
        return putClientConstantsWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putClientConstantsAsync(Context context) {
        return putClientConstantsWithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putClientConstantsWithResponse(Context context) {
        return putClientConstantsWithResponseAsync(context).block();
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     * 
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putClientConstants() {
        putClientConstantsWithResponse(Context.NONE);
    }
}
