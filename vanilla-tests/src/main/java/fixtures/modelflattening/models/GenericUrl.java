// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.modelflattening.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Generic URL.
 */
@Fluent
public class GenericUrl implements JsonSerializable<GenericUrl> {
    /*
     * Generic URL value.
     */
    private String genericValue;

    /**
     * Creates an instance of GenericUrl class.
     */
    public GenericUrl() {
    }

    /**
     * Get the genericValue property: Generic URL value.
     * 
     * @return the genericValue value.
     */
    public String getGenericValue() {
        return this.genericValue;
    }

    /**
     * Set the genericValue property: Generic URL value.
     * 
     * @param genericValue the genericValue value to set.
     * @return the GenericUrl object itself.
     */
    public GenericUrl setGenericValue(String genericValue) {
        this.genericValue = genericValue;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("generic_value", this.genericValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenericUrl from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenericUrl if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GenericUrl.
     */
    public static GenericUrl fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GenericUrl deserializedGenericUrl = new GenericUrl();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("generic_value".equals(fieldName)) {
                    deserializedGenericUrl.genericValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGenericUrl;
        });
    }
}
