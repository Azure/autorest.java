// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.bodynumber;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import fixtures.bodynumber.models.ErrorException;
import java.math.BigDecimal;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in Numbers. */
public final class Numbers {
    /** The proxy service used to perform REST calls. */
    private final NumbersService service;

    /** The service client containing this operation class. */
    private final AutoRestNumberTestService client;

    /**
     * Initializes an instance of Numbers.
     *
     * @param client the instance of the service client containing this operation class.
     */
    Numbers(AutoRestNumberTestService client) {
        this.service = RestProxy.create(NumbersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AutoRestNumberTestServiceNumbers to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AutoRestNumberTestSe")
    private interface NumbersService {
        @Get("/number/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Float>> getNull(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Get("/number/invalidfloat")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Float>> getInvalidFloat(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Get("/number/invaliddouble")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Double>> getInvalidDouble(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Get("/number/invaliddecimal")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<BigDecimal>> getInvalidDecimal(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putBigFloat(
                @HostParam("$host") String host,
                @BodyParam("application/json") float numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Float>> getBigFloat(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putBigDouble(
                @HostParam("$host") String host,
                @BodyParam("application/json") double numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Double>> getBigDouble(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putBigDoublePositiveDecimal(
                @HostParam("$host") String host,
                @BodyParam("application/json") double numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Double>> getBigDoublePositiveDecimal(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putBigDoubleNegativeDecimal(
                @HostParam("$host") String host,
                @BodyParam("application/json") double numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Double>> getBigDoubleNegativeDecimal(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putBigDecimal(
                @HostParam("$host") String host,
                @BodyParam("application/json") BigDecimal numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<BigDecimal>> getBigDecimal(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putBigDecimalPositiveDecimal(
                @HostParam("$host") String host,
                @BodyParam("application/json") BigDecimal numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<BigDecimal>> getBigDecimalPositiveDecimal(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putBigDecimalNegativeDecimal(
                @HostParam("$host") String host,
                @BodyParam("application/json") BigDecimal numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<BigDecimal>> getBigDecimalNegativeDecimal(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putSmallFloat(
                @HostParam("$host") String host,
                @BodyParam("application/json") float numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Double>> getSmallFloat(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putSmallDouble(
                @HostParam("$host") String host,
                @BodyParam("application/json") double numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Double>> getSmallDouble(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);

        @Put("/number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putSmallDecimal(
                @HostParam("$host") String host,
                @BodyParam("application/json") BigDecimal numberBody,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<BigDecimal>> getSmallDecimal(
                @HostParam("$host") String host, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get null Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return null Number value along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Float>> getNullWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getNull(this.client.getHost(), accept, context));
    }

    /**
     * Get null Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return null Number value on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Float> getNullAsync() {
        return getNullWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get null Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return null Number value along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Float> getNullWithResponse() {
        return getNullWithResponseAsync().block();
    }

    /**
     * Get null Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return null Number value.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public float getNull() {
        return getNullWithResponse().getValue();
    }

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid float Number value along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Float>> getInvalidFloatWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getInvalidFloat(this.client.getHost(), accept, context));
    }

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid float Number value on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Float> getInvalidFloatAsync() {
        return getInvalidFloatWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid float Number value along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Float> getInvalidFloatWithResponse() {
        return getInvalidFloatWithResponseAsync().block();
    }

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid float Number value.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public float getInvalidFloat() {
        return getInvalidFloatWithResponse().getValue();
    }

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid double Number value along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Double>> getInvalidDoubleWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getInvalidDouble(this.client.getHost(), accept, context));
    }

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid double Number value on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getInvalidDoubleAsync() {
        return getInvalidDoubleWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid double Number value along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Double> getInvalidDoubleWithResponse() {
        return getInvalidDoubleWithResponseAsync().block();
    }

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid double Number value.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getInvalidDouble() {
        return getInvalidDoubleWithResponse().getValue();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid decimal Number value along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BigDecimal>> getInvalidDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getInvalidDecimal(this.client.getHost(), accept, context));
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid decimal Number value on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getInvalidDecimalAsync() {
        return getInvalidDecimalWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid decimal Number value along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BigDecimal> getInvalidDecimalWithResponse() {
        return getInvalidDecimalWithResponseAsync().block();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return invalid decimal Number value.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getInvalidDecimal() {
        return getInvalidDecimalWithResponse().getValue();
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBigFloatWithResponseAsync(float numberBody) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.putBigFloat(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigFloatAsync(float numberBody) {
        return putBigFloatWithResponseAsync(numberBody).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putBigFloatWithResponse(float numberBody) {
        return putBigFloatWithResponseAsync(numberBody).block();
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigFloat(float numberBody) {
        putBigFloatWithResponse(numberBody);
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big float value 3.402823e+20 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Float>> getBigFloatWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getBigFloat(this.client.getHost(), accept, context));
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big float value 3.402823e+20 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Float> getBigFloatAsync() {
        return getBigFloatWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big float value 3.402823e+20 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Float> getBigFloatWithResponse() {
        return getBigFloatWithResponseAsync().block();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big float value 3.402823e+20.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public float getBigFloat() {
        return getBigFloatWithResponse().getValue();
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBigDoubleWithResponseAsync(double numberBody) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putBigDouble(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDoubleAsync(double numberBody) {
        return putBigDoubleWithResponseAsync(numberBody).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putBigDoubleWithResponse(double numberBody) {
        return putBigDoubleWithResponseAsync(numberBody).block();
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDouble(double numberBody) {
        putBigDoubleWithResponse(numberBody);
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 2.5976931e+101 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Double>> getBigDoubleWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getBigDouble(this.client.getHost(), accept, context));
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 2.5976931e+101 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getBigDoubleAsync() {
        return getBigDoubleWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 2.5976931e+101 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Double> getBigDoubleWithResponse() {
        return getBigDoubleWithResponseAsync().block();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 2.5976931e+101.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getBigDouble() {
        return getBigDoubleWithResponse().getValue();
    }

    /**
     * Put big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBigDoublePositiveDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final double numberBody = 9.999999999E7;
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putBigDoublePositiveDecimal(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDoublePositiveDecimalAsync() {
        return putBigDoublePositiveDecimalWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Put big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putBigDoublePositiveDecimalWithResponse() {
        return putBigDoublePositiveDecimalWithResponseAsync().block();
    }

    /**
     * Put big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDoublePositiveDecimal() {
        putBigDoublePositiveDecimalWithResponse();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 99999999.99 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Double>> getBigDoublePositiveDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getBigDoublePositiveDecimal(this.client.getHost(), accept, context));
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 99999999.99 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getBigDoublePositiveDecimalAsync() {
        return getBigDoublePositiveDecimalWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 99999999.99 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Double> getBigDoublePositiveDecimalWithResponse() {
        return getBigDoublePositiveDecimalWithResponseAsync().block();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 99999999.99.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getBigDoublePositiveDecimal() {
        return getBigDoublePositiveDecimalWithResponse().getValue();
    }

    /**
     * Put big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBigDoubleNegativeDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final double numberBody = -9.999999999E7;
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putBigDoubleNegativeDecimal(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDoubleNegativeDecimalAsync() {
        return putBigDoubleNegativeDecimalWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Put big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putBigDoubleNegativeDecimalWithResponse() {
        return putBigDoubleNegativeDecimalWithResponseAsync().block();
    }

    /**
     * Put big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDoubleNegativeDecimal() {
        putBigDoubleNegativeDecimalWithResponse();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value -99999999.99 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Double>> getBigDoubleNegativeDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getBigDoubleNegativeDecimal(this.client.getHost(), accept, context));
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value -99999999.99 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getBigDoubleNegativeDecimalAsync() {
        return getBigDoubleNegativeDecimalWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value -99999999.99 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Double> getBigDoubleNegativeDecimalWithResponse() {
        return getBigDoubleNegativeDecimalWithResponseAsync().block();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value -99999999.99.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getBigDoubleNegativeDecimal() {
        return getBigDoubleNegativeDecimalWithResponse().getValue();
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBigDecimalWithResponseAsync(BigDecimal numberBody) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (numberBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter numberBody is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putBigDecimal(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDecimalAsync(BigDecimal numberBody) {
        return putBigDecimalWithResponseAsync(numberBody).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putBigDecimalWithResponse(BigDecimal numberBody) {
        return putBigDecimalWithResponseAsync(numberBody).block();
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDecimal(BigDecimal numberBody) {
        putBigDecimalWithResponse(numberBody);
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value 2.5976931e+101 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BigDecimal>> getBigDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getBigDecimal(this.client.getHost(), accept, context));
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value 2.5976931e+101 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getBigDecimalAsync() {
        return getBigDecimalWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value 2.5976931e+101 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BigDecimal> getBigDecimalWithResponse() {
        return getBigDecimalWithResponseAsync().block();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value 2.5976931e+101.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getBigDecimal() {
        return getBigDecimalWithResponse().getValue();
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBigDecimalPositiveDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final BigDecimal numberBody = new BigDecimal("9.999999999E7");
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putBigDecimalPositiveDecimal(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDecimalPositiveDecimalAsync() {
        return putBigDecimalPositiveDecimalWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putBigDecimalPositiveDecimalWithResponse() {
        return putBigDecimalPositiveDecimalWithResponseAsync().block();
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDecimalPositiveDecimal() {
        putBigDecimalPositiveDecimalWithResponse();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value 99999999.99 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BigDecimal>> getBigDecimalPositiveDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getBigDecimalPositiveDecimal(this.client.getHost(), accept, context));
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value 99999999.99 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getBigDecimalPositiveDecimalAsync() {
        return getBigDecimalPositiveDecimalWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value 99999999.99 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BigDecimal> getBigDecimalPositiveDecimalWithResponse() {
        return getBigDecimalPositiveDecimalWithResponseAsync().block();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value 99999999.99.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getBigDecimalPositiveDecimal() {
        return getBigDecimalPositiveDecimalWithResponse().getValue();
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putBigDecimalNegativeDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final BigDecimal numberBody = new BigDecimal("-9.999999999E7");
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putBigDecimalNegativeDecimal(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDecimalNegativeDecimalAsync() {
        return putBigDecimalNegativeDecimalWithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putBigDecimalNegativeDecimalWithResponse() {
        return putBigDecimalNegativeDecimalWithResponseAsync().block();
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDecimalNegativeDecimal() {
        putBigDecimalNegativeDecimalWithResponse();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value -99999999.99 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BigDecimal>> getBigDecimalNegativeDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.getBigDecimalNegativeDecimal(this.client.getHost(), accept, context));
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value -99999999.99 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getBigDecimalNegativeDecimalAsync() {
        return getBigDecimalNegativeDecimalWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value -99999999.99 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BigDecimal> getBigDecimalNegativeDecimalWithResponse() {
        return getBigDecimalNegativeDecimalWithResponseAsync().block();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big decimal value -99999999.99.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getBigDecimalNegativeDecimal() {
        return getBigDecimalNegativeDecimalWithResponse().getValue();
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putSmallFloatWithResponseAsync(float numberBody) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putSmallFloat(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putSmallFloatAsync(float numberBody) {
        return putSmallFloatWithResponseAsync(numberBody).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putSmallFloatWithResponse(float numberBody) {
        return putSmallFloatWithResponseAsync(numberBody).block();
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putSmallFloat(float numberBody) {
        putSmallFloatWithResponse(numberBody);
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 3.402823e-20 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Double>> getSmallFloatWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSmallFloat(this.client.getHost(), accept, context));
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 3.402823e-20 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getSmallFloatAsync() {
        return getSmallFloatWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 3.402823e-20 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Double> getSmallFloatWithResponse() {
        return getSmallFloatWithResponseAsync().block();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 3.402823e-20.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getSmallFloat() {
        return getSmallFloatWithResponse().getValue();
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putSmallDoubleWithResponseAsync(double numberBody) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putSmallDouble(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putSmallDoubleAsync(double numberBody) {
        return putSmallDoubleWithResponseAsync(numberBody).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putSmallDoubleWithResponse(double numberBody) {
        return putSmallDoubleWithResponseAsync(numberBody).block();
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putSmallDouble(double numberBody) {
        putSmallDoubleWithResponse(numberBody);
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 2.5976931e-101 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Double>> getSmallDoubleWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSmallDouble(this.client.getHost(), accept, context));
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 2.5976931e-101 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getSmallDoubleAsync() {
        return getSmallDoubleWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 2.5976931e-101 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Double> getSmallDoubleWithResponse() {
        return getSmallDoubleWithResponseAsync().block();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return big double value 2.5976931e-101.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getSmallDouble() {
        return getSmallDoubleWithResponse().getValue();
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putSmallDecimalWithResponseAsync(BigDecimal numberBody) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (numberBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter numberBody is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
                context -> service.putSmallDecimal(this.client.getHost(), numberBody, accept, context));
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putSmallDecimalAsync(BigDecimal numberBody) {
        return putSmallDecimalWithResponseAsync(numberBody).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putSmallDecimalWithResponse(BigDecimal numberBody) {
        return putSmallDecimalWithResponseAsync(numberBody).block();
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody number body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putSmallDecimal(BigDecimal numberBody) {
        putSmallDecimalWithResponse(numberBody);
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return small decimal value 2.5976931e-101 along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BigDecimal>> getSmallDecimalWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getSmallDecimal(this.client.getHost(), accept, context));
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return small decimal value 2.5976931e-101 on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getSmallDecimalAsync() {
        return getSmallDecimalWithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return small decimal value 2.5976931e-101 along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BigDecimal> getSmallDecimalWithResponse() {
        return getSmallDecimalWithResponseAsync().block();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return small decimal value 2.5976931e-101.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getSmallDecimal() {
        return getSmallDecimalWithResponse().getValue();
    }
}
