// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.requiredoptional.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The IntWrapper model.
 */
@Fluent
public final class IntWrapper implements JsonSerializable<IntWrapper> {
    /*
     * The value property.
     */
    private int value;

    /**
     * Creates an instance of IntWrapper class.
     */
    public IntWrapper() {
    }

    /**
     * Get the value property: The value property.
     * 
     * @return the value value.
     */
    public int getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value property.
     * 
     * @param value the value value to set.
     * @return the IntWrapper object itself.
     */
    public IntWrapper setValue(int value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IntWrapper from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IntWrapper if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IntWrapper.
     */
    public static IntWrapper fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IntWrapper deserializedIntWrapper = new IntWrapper();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedIntWrapper.value = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIntWrapper;
        });
    }
}
