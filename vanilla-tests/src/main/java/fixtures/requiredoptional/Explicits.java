// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.requiredoptional;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import fixtures.requiredoptional.models.ArrayOptionalWrapper;
import fixtures.requiredoptional.models.ArrayWrapper;
import fixtures.requiredoptional.models.ClassOptionalWrapper;
import fixtures.requiredoptional.models.ClassWrapper;
import fixtures.requiredoptional.models.ErrorException;
import fixtures.requiredoptional.models.IntOptionalWrapper;
import fixtures.requiredoptional.models.IntWrapper;
import fixtures.requiredoptional.models.Product;
import fixtures.requiredoptional.models.StringOptionalWrapper;
import fixtures.requiredoptional.models.StringWrapper;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Explicits.
 */
public final class Explicits {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ExplicitsService service;

    /**
     * The service client containing this operation class.
     */
    private final AutoRestRequiredOptionalTestService client;

    /**
     * Initializes an instance of Explicits.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    Explicits(AutoRestRequiredOptionalTestService client) {
        this.service
            = RestProxy.create(ExplicitsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AutoRestRequiredOptionalTestServiceExplicits to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AutoRestRequiredOpti")
    public interface ExplicitsService {
        @Put("/reqopt/explicit/optional/binary-body")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putOptionalBinaryBody(@HostParam("$host") String host,
            @BodyParam("application/octet-stream") Flux<ByteBuffer> bodyParameter,
            @HeaderParam("Content-Length") Long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/reqopt/explicit/optional/binary-body")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putOptionalBinaryBody(@HostParam("$host") String host,
            @BodyParam("application/octet-stream") BinaryData bodyParameter,
            @HeaderParam("Content-Length") Long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/reqopt/explicit/required/binary-body")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putRequiredBinaryBody(@HostParam("$host") String host,
            @BodyParam("application/octet-stream") Flux<ByteBuffer> bodyParameter,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/reqopt/explicit/required/binary-body")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> putRequiredBinaryBody(@HostParam("$host") String host,
            @BodyParam("application/octet-stream") BinaryData bodyParameter,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Post("/reqopt/requied/integer/parameter")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredIntegerParameter(@HostParam("$host") String host,
            @BodyParam("application/json") int bodyParameter, @HeaderParam("Accept") String accept, Context context);

        @Post("/reqopt/optional/integer/parameter")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalIntegerParameter(@HostParam("$host") String host,
            @BodyParam("application/json") Integer bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/requied/integer/property")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredIntegerProperty(@HostParam("$host") String host,
            @BodyParam("application/json") IntWrapper bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/optional/integer/property")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalIntegerProperty(@HostParam("$host") String host,
            @BodyParam("application/json") IntOptionalWrapper bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/requied/integer/header")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredIntegerHeader(@HostParam("$host") String host,
            @HeaderParam("headerParameter") int headerParameter, @HeaderParam("Accept") String accept, Context context);

        @Post("/reqopt/optional/integer/header")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalIntegerHeader(@HostParam("$host") String host,
            @HeaderParam("headerParameter") Integer headerParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/requied/string/parameter")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredStringParameter(@HostParam("$host") String host,
            @BodyParam("application/json") String bodyParameter, @HeaderParam("Accept") String accept, Context context);

        @Post("/reqopt/optional/string/parameter")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalStringParameter(@HostParam("$host") String host,
            @BodyParam("application/json") String bodyParameter, @HeaderParam("Accept") String accept, Context context);

        @Post("/reqopt/requied/string/property")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredStringProperty(@HostParam("$host") String host,
            @BodyParam("application/json") StringWrapper bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/optional/string/property")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalStringProperty(@HostParam("$host") String host,
            @BodyParam("application/json") StringOptionalWrapper bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/requied/string/header")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredStringHeader(@HostParam("$host") String host,
            @HeaderParam("headerParameter") String headerParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/optional/string/header")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalStringHeader(@HostParam("$host") String host,
            @HeaderParam("bodyParameter") String bodyParameter, @HeaderParam("Accept") String accept, Context context);

        @Post("/reqopt/requied/class/parameter")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredClassParameter(@HostParam("$host") String host,
            @BodyParam("application/json") Product bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/optional/class/parameter")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalClassParameter(@HostParam("$host") String host,
            @BodyParam("application/json") Product bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/requied/class/property")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredClassProperty(@HostParam("$host") String host,
            @BodyParam("application/json") ClassWrapper bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/optional/class/property")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalClassProperty(@HostParam("$host") String host,
            @BodyParam("application/json") ClassOptionalWrapper bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/requied/array/parameter")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredArrayParameter(@HostParam("$host") String host,
            @BodyParam("application/json") List<String> bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/optional/array/parameter")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalArrayParameter(@HostParam("$host") String host,
            @BodyParam("application/json") List<String> bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/requied/array/property")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredArrayProperty(@HostParam("$host") String host,
            @BodyParam("application/json") ArrayWrapper bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/optional/array/property")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalArrayProperty(@HostParam("$host") String host,
            @BodyParam("application/json") ArrayOptionalWrapper bodyParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/requied/array/header")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postRequiredArrayHeader(@HostParam("$host") String host,
            @HeaderParam("headerParameter") String headerParameter, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/reqopt/optional/array/header")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> postOptionalArrayHeader(@HostParam("$host") String host,
            @HeaderParam("headerParameter") String headerParameter, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putOptionalBinaryBodyWithResponseAsync(Flux<ByteBuffer> bodyParameter,
        Long contentLength) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.putOptionalBinaryBody(this.client.getHost(), bodyParameter,
            contentLength, accept, context));
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putOptionalBinaryBodyWithResponseAsync(Flux<ByteBuffer> bodyParameter,
        Long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.putOptionalBinaryBody(this.client.getHost(), bodyParameter, contentLength, accept, context);
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putOptionalBinaryBodyAsync(Flux<ByteBuffer> bodyParameter, Long contentLength) {
        return putOptionalBinaryBodyWithResponseAsync(bodyParameter, contentLength).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putOptionalBinaryBodyAsync() {
        final Flux<ByteBuffer> bodyParameter = null;
        final Long contentLength = null;
        return putOptionalBinaryBodyWithResponseAsync(bodyParameter, contentLength).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putOptionalBinaryBodyAsync(Flux<ByteBuffer> bodyParameter, Long contentLength, Context context) {
        return putOptionalBinaryBodyWithResponseAsync(bodyParameter, contentLength, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putOptionalBinaryBodyWithResponse(Flux<ByteBuffer> bodyParameter, Long contentLength,
        Context context) {
        return putOptionalBinaryBodyWithResponseAsync(bodyParameter, contentLength, context).block();
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putOptionalBinaryBody(Flux<ByteBuffer> bodyParameter, Long contentLength) {
        putOptionalBinaryBodyWithResponse(bodyParameter, contentLength, Context.NONE);
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putOptionalBinaryBody() {
        final Flux<ByteBuffer> bodyParameter = null;
        final Long contentLength = null;
        putOptionalBinaryBodyWithResponse(bodyParameter, contentLength, Context.NONE);
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putOptionalBinaryBodyWithResponseAsync(BinaryData bodyParameter, Long contentLength) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.putOptionalBinaryBody(this.client.getHost(), bodyParameter,
            contentLength, accept, context));
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putOptionalBinaryBodyWithResponseAsync(BinaryData bodyParameter, Long contentLength,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.putOptionalBinaryBody(this.client.getHost(), bodyParameter, contentLength, accept, context);
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putOptionalBinaryBodyAsync(BinaryData bodyParameter, Long contentLength) {
        return putOptionalBinaryBodyWithResponseAsync(bodyParameter, contentLength).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putOptionalBinaryBodyAsync(BinaryData bodyParameter, Long contentLength, Context context) {
        return putOptionalBinaryBodyWithResponseAsync(bodyParameter, contentLength, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putOptionalBinaryBodyWithResponse(BinaryData bodyParameter, Long contentLength,
        Context context) {
        return putOptionalBinaryBodyWithResponseAsync(bodyParameter, contentLength, context).block();
    }

    /**
     * Test explicitly optional body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putOptionalBinaryBody(BinaryData bodyParameter, Long contentLength) {
        putOptionalBinaryBodyWithResponse(bodyParameter, contentLength, Context.NONE);
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putRequiredBinaryBodyWithResponseAsync(Flux<ByteBuffer> bodyParameter,
        long contentLength) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.putRequiredBinaryBody(this.client.getHost(), bodyParameter,
            contentLength, accept, context));
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putRequiredBinaryBodyWithResponseAsync(Flux<ByteBuffer> bodyParameter,
        long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.putRequiredBinaryBody(this.client.getHost(), bodyParameter, contentLength, accept, context);
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putRequiredBinaryBodyAsync(Flux<ByteBuffer> bodyParameter, long contentLength) {
        return putRequiredBinaryBodyWithResponseAsync(bodyParameter, contentLength).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putRequiredBinaryBodyAsync(Flux<ByteBuffer> bodyParameter, long contentLength, Context context) {
        return putRequiredBinaryBodyWithResponseAsync(bodyParameter, contentLength, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putRequiredBinaryBodyWithResponse(Flux<ByteBuffer> bodyParameter, long contentLength,
        Context context) {
        return putRequiredBinaryBodyWithResponseAsync(bodyParameter, contentLength, context).block();
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putRequiredBinaryBody(Flux<ByteBuffer> bodyParameter, long contentLength) {
        putRequiredBinaryBodyWithResponse(bodyParameter, contentLength, Context.NONE);
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putRequiredBinaryBodyWithResponseAsync(BinaryData bodyParameter, long contentLength) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.putRequiredBinaryBody(this.client.getHost(), bodyParameter,
            contentLength, accept, context));
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> putRequiredBinaryBodyWithResponseAsync(BinaryData bodyParameter, long contentLength,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.putRequiredBinaryBody(this.client.getHost(), bodyParameter, contentLength, accept, context);
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putRequiredBinaryBodyAsync(BinaryData bodyParameter, long contentLength) {
        return putRequiredBinaryBodyWithResponseAsync(bodyParameter, contentLength).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putRequiredBinaryBodyAsync(BinaryData bodyParameter, long contentLength, Context context) {
        return putRequiredBinaryBodyWithResponseAsync(bodyParameter, contentLength, context)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putRequiredBinaryBodyWithResponse(BinaryData bodyParameter, long contentLength,
        Context context) {
        return putRequiredBinaryBodyWithResponseAsync(bodyParameter, contentLength, context).block();
    }

    /**
     * Test explicitly required body parameter.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putRequiredBinaryBody(BinaryData bodyParameter, long contentLength) {
        putRequiredBinaryBodyWithResponse(bodyParameter, contentLength, Context.NONE);
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredIntegerParameterWithResponseAsync(int bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredIntegerParameter(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredIntegerParameterWithResponseAsync(int bodyParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postRequiredIntegerParameter(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredIntegerParameterAsync(int bodyParameter) {
        return postRequiredIntegerParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredIntegerParameterAsync(int bodyParameter, Context context) {
        return postRequiredIntegerParameterWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredIntegerParameterWithResponse(int bodyParameter, Context context) {
        return postRequiredIntegerParameterWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredIntegerParameter(int bodyParameter) {
        postRequiredIntegerParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalIntegerParameterWithResponseAsync(Integer bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalIntegerParameter(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional integer. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalIntegerParameterWithResponseAsync(Integer bodyParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postOptionalIntegerParameter(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional integer. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerParameterAsync(Integer bodyParameter) {
        return postOptionalIntegerParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerParameterAsync() {
        final Integer bodyParameter = null;
        return postOptionalIntegerParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerParameterAsync(Integer bodyParameter, Context context) {
        return postOptionalIntegerParameterWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalIntegerParameterWithResponse(Integer bodyParameter, Context context) {
        return postOptionalIntegerParameterWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional integer. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerParameter(Integer bodyParameter) {
        postOptionalIntegerParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerParameter() {
        final Integer bodyParameter = null;
        postOptionalIntegerParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredIntegerPropertyWithResponseAsync(IntWrapper bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredIntegerProperty(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredIntegerPropertyWithResponseAsync(IntWrapper bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postRequiredIntegerProperty(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredIntegerPropertyAsync(IntWrapper bodyParameter) {
        return postRequiredIntegerPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredIntegerPropertyAsync(IntWrapper bodyParameter, Context context) {
        return postRequiredIntegerPropertyWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredIntegerPropertyWithResponse(IntWrapper bodyParameter, Context context) {
        return postRequiredIntegerPropertyWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredIntegerProperty(IntWrapper bodyParameter) {
        postRequiredIntegerPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalIntegerPropertyWithResponseAsync(IntOptionalWrapper bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalIntegerProperty(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalIntegerPropertyWithResponseAsync(IntOptionalWrapper bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postOptionalIntegerProperty(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerPropertyAsync(IntOptionalWrapper bodyParameter) {
        return postOptionalIntegerPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerPropertyAsync() {
        final IntOptionalWrapper bodyParameter = null;
        return postOptionalIntegerPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerPropertyAsync(IntOptionalWrapper bodyParameter, Context context) {
        return postOptionalIntegerPropertyWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalIntegerPropertyWithResponse(IntOptionalWrapper bodyParameter, Context context) {
        return postOptionalIntegerPropertyWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerProperty(IntOptionalWrapper bodyParameter) {
        postOptionalIntegerPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerProperty() {
        final IntOptionalWrapper bodyParameter = null;
        postOptionalIntegerPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredIntegerHeaderWithResponseAsync(int headerParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredIntegerHeader(this.client.getHost(), headerParameter, accept, context));
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredIntegerHeaderWithResponseAsync(int headerParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postRequiredIntegerHeader(this.client.getHost(), headerParameter, accept, context);
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredIntegerHeaderAsync(int headerParameter) {
        return postRequiredIntegerHeaderWithResponseAsync(headerParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredIntegerHeaderAsync(int headerParameter, Context context) {
        return postRequiredIntegerHeaderWithResponseAsync(headerParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredIntegerHeaderWithResponse(int headerParameter, Context context) {
        return postRequiredIntegerHeaderWithResponseAsync(headerParameter, context).block();
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredIntegerHeader(int headerParameter) {
        postRequiredIntegerHeaderWithResponse(headerParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalIntegerHeaderWithResponseAsync(Integer headerParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalIntegerHeader(this.client.getHost(), headerParameter, accept, context));
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalIntegerHeaderWithResponseAsync(Integer headerParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postOptionalIntegerHeader(this.client.getHost(), headerParameter, accept, context);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerHeaderAsync(Integer headerParameter) {
        return postOptionalIntegerHeaderWithResponseAsync(headerParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerHeaderAsync() {
        final Integer headerParameter = null;
        return postOptionalIntegerHeaderWithResponseAsync(headerParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerHeaderAsync(Integer headerParameter, Context context) {
        return postOptionalIntegerHeaderWithResponseAsync(headerParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalIntegerHeaderWithResponse(Integer headerParameter, Context context) {
        return postOptionalIntegerHeaderWithResponseAsync(headerParameter, context).block();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerHeader(Integer headerParameter) {
        postOptionalIntegerHeaderWithResponse(headerParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerHeader() {
        final Integer headerParameter = null;
        postOptionalIntegerHeaderWithResponse(headerParameter, Context.NONE);
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredStringParameterWithResponseAsync(String bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredStringParameter(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredStringParameterWithResponseAsync(String bodyParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postRequiredStringParameter(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredStringParameterAsync(String bodyParameter) {
        return postRequiredStringParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredStringParameterAsync(String bodyParameter, Context context) {
        return postRequiredStringParameterWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredStringParameterWithResponse(String bodyParameter, Context context) {
        return postRequiredStringParameterWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredStringParameter(String bodyParameter) {
        postRequiredStringParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional string. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalStringParameterWithResponseAsync(String bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalStringParameter(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional string. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalStringParameterWithResponseAsync(String bodyParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postOptionalStringParameter(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional string. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringParameterAsync(String bodyParameter) {
        return postOptionalStringParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional string. Please put null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringParameterAsync() {
        final String bodyParameter = null;
        return postOptionalStringParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional string. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringParameterAsync(String bodyParameter, Context context) {
        return postOptionalStringParameterWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional string. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalStringParameterWithResponse(String bodyParameter, Context context) {
        return postOptionalStringParameterWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional string. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringParameter(String bodyParameter) {
        postOptionalStringParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional string. Please put null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringParameter() {
        final String bodyParameter = null;
        postOptionalStringParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredStringPropertyWithResponseAsync(StringWrapper bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredStringProperty(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredStringPropertyWithResponseAsync(StringWrapper bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postRequiredStringProperty(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredStringPropertyAsync(StringWrapper bodyParameter) {
        return postRequiredStringPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredStringPropertyAsync(StringWrapper bodyParameter, Context context) {
        return postRequiredStringPropertyWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredStringPropertyWithResponse(StringWrapper bodyParameter, Context context) {
        return postRequiredStringPropertyWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredStringProperty(StringWrapper bodyParameter) {
        postRequiredStringPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalStringPropertyWithResponseAsync(StringOptionalWrapper bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalStringProperty(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalStringPropertyWithResponseAsync(StringOptionalWrapper bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postOptionalStringProperty(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringPropertyAsync(StringOptionalWrapper bodyParameter) {
        return postOptionalStringPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringPropertyAsync() {
        final StringOptionalWrapper bodyParameter = null;
        return postOptionalStringPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringPropertyAsync(StringOptionalWrapper bodyParameter, Context context) {
        return postOptionalStringPropertyWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalStringPropertyWithResponse(StringOptionalWrapper bodyParameter, Context context) {
        return postOptionalStringPropertyWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringProperty(StringOptionalWrapper bodyParameter) {
        postOptionalStringPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringProperty() {
        final StringOptionalWrapper bodyParameter = null;
        postOptionalStringPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredStringHeaderWithResponseAsync(String headerParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (headerParameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter headerParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredStringHeader(this.client.getHost(), headerParameter, accept, context));
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredStringHeaderWithResponseAsync(String headerParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (headerParameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter headerParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postRequiredStringHeader(this.client.getHost(), headerParameter, accept, context);
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredStringHeaderAsync(String headerParameter) {
        return postRequiredStringHeaderWithResponseAsync(headerParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredStringHeaderAsync(String headerParameter, Context context) {
        return postRequiredStringHeaderWithResponseAsync(headerParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredStringHeaderWithResponse(String headerParameter, Context context) {
        return postRequiredStringHeaderWithResponseAsync(headerParameter, context).block();
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredStringHeader(String headerParameter) {
        postRequiredStringHeaderWithResponse(headerParameter, Context.NONE);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalStringHeaderWithResponseAsync(String bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalStringHeader(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalStringHeaderWithResponseAsync(String bodyParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postOptionalStringHeader(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringHeaderAsync(String bodyParameter) {
        return postOptionalStringHeaderWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringHeaderAsync() {
        final String bodyParameter = null;
        return postOptionalStringHeaderWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringHeaderAsync(String bodyParameter, Context context) {
        return postOptionalStringHeaderWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalStringHeaderWithResponse(String bodyParameter, Context context) {
        return postOptionalStringHeaderWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringHeader(String bodyParameter) {
        postOptionalStringHeaderWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringHeader() {
        final String bodyParameter = null;
        postOptionalStringHeaderWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request
     * is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredClassParameterWithResponseAsync(Product bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredClassParameter(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request
     * is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredClassParameterWithResponseAsync(Product bodyParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postRequiredClassParameter(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request
     * is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredClassParameterAsync(Product bodyParameter) {
        return postRequiredClassParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request
     * is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredClassParameterAsync(Product bodyParameter, Context context) {
        return postRequiredClassParameterWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request
     * is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredClassParameterWithResponse(Product bodyParameter, Context context) {
        return postRequiredClassParameterWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request
     * is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredClassParameter(Product bodyParameter) {
        postRequiredClassParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalClassParameterWithResponseAsync(Product bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalClassParameter(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional complex object. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalClassParameterWithResponseAsync(Product bodyParameter, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postOptionalClassParameter(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalClassParameterAsync(Product bodyParameter) {
        return postOptionalClassParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional complex object. Please put null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalClassParameterAsync() {
        final Product bodyParameter = null;
        return postOptionalClassParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional complex object. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalClassParameterAsync(Product bodyParameter, Context context) {
        return postOptionalClassParameterWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional complex object. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalClassParameterWithResponse(Product bodyParameter, Context context) {
        return postOptionalClassParameterWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional complex object. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalClassParameter(Product bodyParameter) {
        postOptionalClassParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalClassParameter() {
        final Product bodyParameter = null;
        postOptionalClassParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client
     * library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredClassPropertyWithResponseAsync(ClassWrapper bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredClassProperty(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client
     * library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredClassPropertyWithResponseAsync(ClassWrapper bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postRequiredClassProperty(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client
     * library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredClassPropertyAsync(ClassWrapper bodyParameter) {
        return postRequiredClassPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client
     * library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredClassPropertyAsync(ClassWrapper bodyParameter, Context context) {
        return postRequiredClassPropertyWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client
     * library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredClassPropertyWithResponse(ClassWrapper bodyParameter, Context context) {
        return postRequiredClassPropertyWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client
     * library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredClassProperty(ClassWrapper bodyParameter) {
        postRequiredClassPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalClassPropertyWithResponseAsync(ClassOptionalWrapper bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalClassProperty(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalClassPropertyWithResponseAsync(ClassOptionalWrapper bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postOptionalClassProperty(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalClassPropertyAsync(ClassOptionalWrapper bodyParameter) {
        return postOptionalClassPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalClassPropertyAsync() {
        final ClassOptionalWrapper bodyParameter = null;
        return postOptionalClassPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalClassPropertyAsync(ClassOptionalWrapper bodyParameter, Context context) {
        return postOptionalClassPropertyWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalClassPropertyWithResponse(ClassOptionalWrapper bodyParameter, Context context) {
        return postOptionalClassPropertyWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalClassProperty(ClassOptionalWrapper bodyParameter) {
        postOptionalClassPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalClassProperty() {
        final ClassOptionalWrapper bodyParameter = null;
        postOptionalClassPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredArrayParameterWithResponseAsync(List<String> bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredArrayParameter(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredArrayParameterWithResponseAsync(List<String> bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postRequiredArrayParameter(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredArrayParameterAsync(List<String> bodyParameter) {
        return postRequiredArrayParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredArrayParameterAsync(List<String> bodyParameter, Context context) {
        return postRequiredArrayParameterWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredArrayParameterWithResponse(List<String> bodyParameter, Context context) {
        return postRequiredArrayParameterWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredArrayParameter(List<String> bodyParameter) {
        postRequiredArrayParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional array. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalArrayParameterWithResponseAsync(List<String> bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalArrayParameter(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional array. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalArrayParameterWithResponseAsync(List<String> bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.postOptionalArrayParameter(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional array. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayParameterAsync(List<String> bodyParameter) {
        return postOptionalArrayParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional array. Please put null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayParameterAsync() {
        final List<String> bodyParameter = null;
        return postOptionalArrayParameterWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional array. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayParameterAsync(List<String> bodyParameter, Context context) {
        return postOptionalArrayParameterWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional array. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalArrayParameterWithResponse(List<String> bodyParameter, Context context) {
        return postOptionalArrayParameterWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional array. Please put null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayParameter(List<String> bodyParameter) {
        postOptionalArrayParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional array. Please put null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayParameter() {
        final List<String> bodyParameter = null;
        postOptionalArrayParameterWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredArrayPropertyWithResponseAsync(ArrayWrapper bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postRequiredArrayProperty(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredArrayPropertyWithResponseAsync(ArrayWrapper bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter == null) {
            return Mono.error(new IllegalArgumentException("Parameter bodyParameter is required and cannot be null."));
        } else {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postRequiredArrayProperty(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredArrayPropertyAsync(ArrayWrapper bodyParameter) {
        return postRequiredArrayPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredArrayPropertyAsync(ArrayWrapper bodyParameter, Context context) {
        return postRequiredArrayPropertyWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredArrayPropertyWithResponse(ArrayWrapper bodyParameter, Context context) {
        return postRequiredArrayPropertyWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library
     * should throw before the request is sent.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredArrayProperty(ArrayWrapper bodyParameter) {
        postRequiredArrayPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalArrayPropertyWithResponseAsync(ArrayOptionalWrapper bodyParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.postOptionalArrayProperty(this.client.getHost(), bodyParameter, accept, context));
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalArrayPropertyWithResponseAsync(ArrayOptionalWrapper bodyParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (bodyParameter != null) {
            bodyParameter.validate();
        }
        final String accept = "application/json";
        return service.postOptionalArrayProperty(this.client.getHost(), bodyParameter, accept, context);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayPropertyAsync(ArrayOptionalWrapper bodyParameter) {
        return postOptionalArrayPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayPropertyAsync() {
        final ArrayOptionalWrapper bodyParameter = null;
        return postOptionalArrayPropertyWithResponseAsync(bodyParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayPropertyAsync(ArrayOptionalWrapper bodyParameter, Context context) {
        return postOptionalArrayPropertyWithResponseAsync(bodyParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalArrayPropertyWithResponse(ArrayOptionalWrapper bodyParameter, Context context) {
        return postOptionalArrayPropertyWithResponseAsync(bodyParameter, context).block();
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     * 
     * @param bodyParameter The bodyParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayProperty(ArrayOptionalWrapper bodyParameter) {
        postOptionalArrayPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayProperty() {
        final ArrayOptionalWrapper bodyParameter = null;
        postOptionalArrayPropertyWithResponse(bodyParameter, Context.NONE);
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredArrayHeaderWithResponseAsync(List<String> headerParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (headerParameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter headerParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        String headerParameterConverted = headerParameter.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return FluxUtil.withContext(context -> service.postRequiredArrayHeader(this.client.getHost(),
            headerParameterConverted, accept, context));
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postRequiredArrayHeaderWithResponseAsync(List<String> headerParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (headerParameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter headerParameter is required and cannot be null."));
        }
        final String accept = "application/json";
        String headerParameterConverted = headerParameter.stream()
            .map(paramItemValue -> Objects.toString(paramItemValue, ""))
            .collect(Collectors.joining(","));
        return service.postRequiredArrayHeader(this.client.getHost(), headerParameterConverted, accept, context);
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredArrayHeaderAsync(List<String> headerParameter) {
        return postRequiredArrayHeaderWithResponseAsync(headerParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredArrayHeaderAsync(List<String> headerParameter, Context context) {
        return postRequiredArrayHeaderWithResponseAsync(headerParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postRequiredArrayHeaderWithResponse(List<String> headerParameter, Context context) {
        return postRequiredArrayHeaderWithResponseAsync(headerParameter, context).block();
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should
     * throw before the request is sent.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequiredArrayHeader(List<String> headerParameter) {
        postRequiredArrayHeaderWithResponse(headerParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalArrayHeaderWithResponseAsync(List<String> headerParameter) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        String headerParameterConverted = (headerParameter == null)
            ? null
            : headerParameter.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return FluxUtil.withContext(context -> service.postOptionalArrayHeader(this.client.getHost(),
            headerParameterConverted, accept, context));
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> postOptionalArrayHeaderWithResponseAsync(List<String> headerParameter,
        Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        String headerParameterConverted = (headerParameter == null)
            ? null
            : headerParameter.stream()
                .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                .collect(Collectors.joining(","));
        return service.postOptionalArrayHeader(this.client.getHost(), headerParameterConverted, accept, context);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayHeaderAsync(List<String> headerParameter) {
        return postOptionalArrayHeaderWithResponseAsync(headerParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayHeaderAsync() {
        final List<String> headerParameter = null;
        return postOptionalArrayHeaderWithResponseAsync(headerParameter).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayHeaderAsync(List<String> headerParameter, Context context) {
        return postOptionalArrayHeaderWithResponseAsync(headerParameter, context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> postOptionalArrayHeaderWithResponse(List<String> headerParameter, Context context) {
        return postOptionalArrayHeaderWithResponseAsync(headerParameter, context).block();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @param headerParameter The headerParameter parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayHeader(List<String> headerParameter) {
        postOptionalArrayHeaderWithResponse(headerParameter, Context.NONE);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayHeader() {
        final List<String> headerParameter = null;
        postOptionalArrayHeaderWithResponse(headerParameter, Context.NONE);
    }
}
