// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.extensibleenums.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Pet model.
 */
@Fluent
public final class Pet implements JsonSerializable<Pet> {
    /*
     * name
     */
    @Generated
    private String name;

    /*
     * Type of Pet
     */
    @Generated
    private DaysOfWeekExtensibleEnum daysOfWeek;

    /*
     * The IntEnum property.
     */
    @Generated
    private IntEnum intEnum;

    /**
     * Creates an instance of Pet class.
     */
    @Generated
    public Pet() {
    }

    /**
     * Get the name property: name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: name.
     * 
     * @param name the name value to set.
     * @return the Pet object itself.
     */
    @Generated
    public Pet setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the daysOfWeek property: Type of Pet.
     * 
     * @return the daysOfWeek value.
     */
    @Generated
    public DaysOfWeekExtensibleEnum getDaysOfWeek() {
        return this.daysOfWeek;
    }

    /**
     * Set the daysOfWeek property: Type of Pet.
     * 
     * @param daysOfWeek the daysOfWeek value to set.
     * @return the Pet object itself.
     */
    @Generated
    public Pet setDaysOfWeek(DaysOfWeekExtensibleEnum daysOfWeek) {
        this.daysOfWeek = daysOfWeek;
        return this;
    }

    /**
     * Get the intEnum property: The IntEnum property.
     * 
     * @return the intEnum value.
     */
    @Generated
    public IntEnum getIntEnum() {
        return this.intEnum;
    }

    /**
     * Set the intEnum property: The IntEnum property.
     * 
     * @param intEnum the intEnum value to set.
     * @return the Pet object itself.
     */
    @Generated
    public Pet setIntEnum(IntEnum intEnum) {
        this.intEnum = intEnum;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getIntEnum() == null) {
            throw new IllegalArgumentException("Missing required property intEnum in model Pet");
        }
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("IntEnum", this.intEnum == null ? null : this.intEnum.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("DaysOfWeek", this.daysOfWeek == null ? null : this.daysOfWeek.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Pet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Pet if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Pet.
     */
    @Generated
    public static Pet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Pet deserializedPet = new Pet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("IntEnum".equals(fieldName)) {
                    deserializedPet.intEnum = IntEnum.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedPet.name = reader.getString();
                } else if ("DaysOfWeek".equals(fieldName)) {
                    deserializedPet.daysOfWeek = DaysOfWeekExtensibleEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPet;
        });
    }
}
