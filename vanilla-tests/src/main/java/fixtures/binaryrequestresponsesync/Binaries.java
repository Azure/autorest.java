// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.binaryrequestresponsesync;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in Binaries.
 */
public final class Binaries {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BinariesService service;

    /**
     * The service client containing this operation class.
     */
    private final BinariesClient client;

    /**
     * Initializes an instance of Binaries.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    Binaries(BinariesClient client) {
        this.service = RestProxy.create(BinariesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for BinariesClientBinaries to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "BinariesClientBinari")
    public interface BinariesService {
        @Put("/binaryRequestAndResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> putWithBinaryRequestAndResponse(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("application/zip") Flux<ByteBuffer> binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryRequestAndResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> putWithBinaryRequestAndResponse(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("application/zip") BinaryData binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryRequestAndResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> putWithBinaryRequestAndResponseSync(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("application/zip") BinaryData binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryRequestAndBinaryTextResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Flux<ByteBuffer>>> putWithBinaryJsonRequestAndBinaryTextResponse(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("application/zip") Flux<ByteBuffer> binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryRequestAndBinaryTextResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Flux<ByteBuffer>>> putWithBinaryJsonRequestAndBinaryTextResponse(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("application/zip") BinaryData binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryRequestAndBinaryTextResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> putWithBinaryJsonRequestAndBinaryTextResponseSync(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("application/zip") BinaryData binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryTextRequestAndBinaryResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> putWithBinaryTextRequestAndBinaryResponse(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("text/powershell") Flux<ByteBuffer> binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryTextRequestAndBinaryResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> putWithBinaryTextRequestAndBinaryResponse(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("text/powershell") BinaryData binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryTextRequestAndBinaryResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> putWithBinaryTextRequestAndBinaryResponseSync(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("text/powershell") BinaryData binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryTextRequestAndResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Flux<ByteBuffer>>> putWithBinaryTextRequestAndResponse(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("text/powershell") Flux<ByteBuffer> binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryTextRequestAndResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Flux<ByteBuffer>>> putWithBinaryTextRequestAndResponse(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("text/powershell") BinaryData binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);

        @Put("/binaryTextRequestAndResponse")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> putWithBinaryTextRequestAndResponseSync(@HostParam("$host") String host,
            @PathParam("runbookName") String runbookName, @BodyParam("text/powershell") BinaryData binaryContent,
            @HeaderParam("Content-Length") long contentLength, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithBinaryRequestAndResponseWithResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength) {
        return FluxUtil.withContext(context -> putWithBinaryRequestAndResponseWithResponseAsync(runbookName,
            binaryContent, contentLength, context));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithBinaryRequestAndResponseWithResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            return Mono.error(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "application/zip";
        return service.putWithBinaryRequestAndResponse(this.client.getHost(), runbookName, binaryContent, contentLength,
            accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> putWithBinaryRequestAndResponseAsync(String runbookName, Flux<ByteBuffer> binaryContent,
        long contentLength) {
        return putWithBinaryRequestAndResponseWithResponseAsync(runbookName, binaryContent, contentLength)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> putWithBinaryRequestAndResponseAsync(String runbookName, Flux<ByteBuffer> binaryContent,
        long contentLength, Context context) {
        return putWithBinaryRequestAndResponseWithResponseAsync(runbookName, binaryContent, contentLength, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithBinaryRequestAndResponseWithResponseAsync(String runbookName,
        BinaryData binaryContent, long contentLength) {
        return FluxUtil.withContext(context -> putWithBinaryRequestAndResponseWithResponseAsync(runbookName,
            binaryContent, contentLength, context));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithBinaryRequestAndResponseWithResponseAsync(String runbookName,
        BinaryData binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            return Mono.error(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "application/zip";
        return service.putWithBinaryRequestAndResponse(this.client.getHost(), runbookName, binaryContent, contentLength,
            accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> putWithBinaryRequestAndResponseAsync(String runbookName, BinaryData binaryContent,
        long contentLength) {
        return putWithBinaryRequestAndResponseWithResponseAsync(runbookName, binaryContent, contentLength)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> putWithBinaryRequestAndResponseAsync(String runbookName, BinaryData binaryContent,
        long contentLength, Context context) {
        return putWithBinaryRequestAndResponseWithResponseAsync(runbookName, binaryContent, contentLength, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> putWithBinaryRequestAndResponseWithResponse(String runbookName,
        BinaryData binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "application/zip";
        return service.putWithBinaryRequestAndResponseSync(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData putWithBinaryRequestAndResponse(String runbookName, BinaryData binaryContent,
        long contentLength) {
        return putWithBinaryRequestAndResponseWithResponse(runbookName, binaryContent, contentLength, Context.NONE)
            .getValue();
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(
        String runbookName, Flux<ByteBuffer> binaryContent, long contentLength) {
        return FluxUtil
            .withContext(context -> putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(runbookName,
                binaryContent, contentLength, context));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(
        String runbookName, Flux<ByteBuffer> binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            return Mono.error(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "text/powershell";
        return service.putWithBinaryJsonRequestAndBinaryTextResponse(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> putWithBinaryJsonRequestAndBinaryTextResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength) {
        return putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(runbookName, binaryContent, contentLength)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> putWithBinaryJsonRequestAndBinaryTextResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength, Context context) {
        return putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(runbookName, binaryContent, contentLength,
            context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(
        String runbookName, BinaryData binaryContent, long contentLength) {
        return FluxUtil
            .withContext(context -> putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(runbookName,
                binaryContent, contentLength, context));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(
        String runbookName, BinaryData binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            return Mono.error(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "text/powershell";
        return service.putWithBinaryJsonRequestAndBinaryTextResponse(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> putWithBinaryJsonRequestAndBinaryTextResponseAsync(String runbookName,
        BinaryData binaryContent, long contentLength) {
        return putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(runbookName, binaryContent, contentLength)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> putWithBinaryJsonRequestAndBinaryTextResponseAsync(String runbookName,
        BinaryData binaryContent, long contentLength, Context context) {
        return putWithBinaryJsonRequestAndBinaryTextResponseWithResponseAsync(runbookName, binaryContent, contentLength,
            context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> putWithBinaryJsonRequestAndBinaryTextResponseWithResponse(String runbookName,
        BinaryData binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "text/powershell";
        return service.putWithBinaryJsonRequestAndBinaryTextResponseSync(this.client.getHost(), runbookName,
            binaryContent, contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData putWithBinaryJsonRequestAndBinaryTextResponse(String runbookName, BinaryData binaryContent,
        long contentLength) {
        return putWithBinaryJsonRequestAndBinaryTextResponseWithResponse(runbookName, binaryContent, contentLength,
            Context.NONE).getValue();
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength) {
        return FluxUtil.withContext(context -> putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(runbookName,
            binaryContent, contentLength, context));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            return Mono.error(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "application/zip";
        return service.putWithBinaryTextRequestAndBinaryResponse(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> putWithBinaryTextRequestAndBinaryResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength) {
        return putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(runbookName, binaryContent, contentLength)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> putWithBinaryTextRequestAndBinaryResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength, Context context) {
        return putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(runbookName, binaryContent, contentLength,
            context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(String runbookName,
        BinaryData binaryContent, long contentLength) {
        return FluxUtil.withContext(context -> putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(runbookName,
            binaryContent, contentLength, context));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(String runbookName,
        BinaryData binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            return Mono.error(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "application/zip";
        return service.putWithBinaryTextRequestAndBinaryResponse(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> putWithBinaryTextRequestAndBinaryResponseAsync(String runbookName, BinaryData binaryContent,
        long contentLength) {
        return putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(runbookName, binaryContent, contentLength)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> putWithBinaryTextRequestAndBinaryResponseAsync(String runbookName, BinaryData binaryContent,
        long contentLength, Context context) {
        return putWithBinaryTextRequestAndBinaryResponseWithResponseAsync(runbookName, binaryContent, contentLength,
            context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> putWithBinaryTextRequestAndBinaryResponseWithResponse(String runbookName,
        BinaryData binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "application/zip";
        return service.putWithBinaryTextRequestAndBinaryResponseSync(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData putWithBinaryTextRequestAndBinaryResponse(String runbookName, BinaryData binaryContent,
        long contentLength) {
        return putWithBinaryTextRequestAndBinaryResponseWithResponse(runbookName, binaryContent, contentLength,
            Context.NONE).getValue();
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putWithBinaryTextRequestAndResponseWithResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength) {
        return FluxUtil.withContext(context -> putWithBinaryTextRequestAndResponseWithResponseAsync(runbookName,
            binaryContent, contentLength, context));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putWithBinaryTextRequestAndResponseWithResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            return Mono.error(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "text/powershell";
        return service.putWithBinaryTextRequestAndResponse(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> putWithBinaryTextRequestAndResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength) {
        return putWithBinaryTextRequestAndResponseWithResponseAsync(runbookName, binaryContent, contentLength)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> putWithBinaryTextRequestAndResponseAsync(String runbookName,
        Flux<ByteBuffer> binaryContent, long contentLength, Context context) {
        return putWithBinaryTextRequestAndResponseWithResponseAsync(runbookName, binaryContent, contentLength, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putWithBinaryTextRequestAndResponseWithResponseAsync(String runbookName,
        BinaryData binaryContent, long contentLength) {
        return FluxUtil.withContext(context -> putWithBinaryTextRequestAndResponseWithResponseAsync(runbookName,
            binaryContent, contentLength, context));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Flux<ByteBuffer>>> putWithBinaryTextRequestAndResponseWithResponseAsync(String runbookName,
        BinaryData binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            return Mono.error(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            return Mono.error(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "text/powershell";
        return service.putWithBinaryTextRequestAndResponse(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> putWithBinaryTextRequestAndResponseAsync(String runbookName, BinaryData binaryContent,
        long contentLength) {
        return putWithBinaryTextRequestAndResponseWithResponseAsync(runbookName, binaryContent, contentLength)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> putWithBinaryTextRequestAndResponseAsync(String runbookName, BinaryData binaryContent,
        long contentLength, Context context) {
        return putWithBinaryTextRequestAndResponseWithResponseAsync(runbookName, binaryContent, contentLength, context)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> putWithBinaryTextRequestAndResponseWithResponse(String runbookName,
        BinaryData binaryContent, long contentLength, Context context) {
        if (this.client.getHost() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (runbookName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter runbookName is required and cannot be null."));
        }
        if (binaryContent == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter binaryContent is required and cannot be null."));
        }
        final String accept = "text/powershell";
        return service.putWithBinaryTextRequestAndResponseSync(this.client.getHost(), runbookName, binaryContent,
            contentLength, accept, context);
    }

    /**
     * Replaces the runbook draft content.
     * 
     * @param runbookName The runbook name.
     * @param binaryContent The runbook draft content.
     * @param contentLength The Content-Length header for the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData putWithBinaryTextRequestAndResponse(String runbookName, BinaryData binaryContent,
        long contentLength) {
        return putWithBinaryTextRequestAndResponseWithResponse(runbookName, binaryContent, contentLength, Context.NONE)
            .getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(Binaries.class);
}
