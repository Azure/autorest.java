// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.DefaultJsonReader;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** The Salmon model. */
@Fluent
public class Salmon extends Fish {
    private String location;

    private Boolean iswild;

    /**
     * Creates an instance of Salmon class.
     *
     * @param length the length value to set.
     */
    public Salmon(float length) {
        super(length);
    }

    /**
     * Get the location property: The location property.
     *
     * @return the location value.
     */
    public String getLocation() {
        return this.location;
    }

    /**
     * Set the location property: The location property.
     *
     * @param location the location value to set.
     * @return the Salmon object itself.
     */
    public Salmon setLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the iswild property: The iswild property.
     *
     * @return the iswild value.
     */
    public Boolean iswild() {
        return this.iswild;
    }

    /**
     * Set the iswild property: The iswild property.
     *
     * @param iswild the iswild value to set.
     * @return the Salmon object itself.
     */
    public Salmon setIswild(Boolean iswild) {
        this.iswild = iswild;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Salmon setSpecies(String species) {
        super.setSpecies(species);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Salmon setSiblings(List<Fish> siblings) {
        super.setSiblings(siblings);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        return jsonWriter.flush();
    }

    public static Salmon fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    String discriminatorValue = null;
                    JsonReader readerToUse = null;

                    // Read the first field name and determine if it's the discriminator field.
                    reader.nextToken();
                    if ("fishtype".equals(reader.getFieldName())) {
                        reader.nextToken();
                        discriminatorValue = reader.getStringValue();
                        readerToUse = reader;
                    } else {
                        // If it isn't the discriminator field buffer the JSON structure to make it
                        // replayable and find the discriminator field value.
                        String json = JsonUtils.bufferJsonObject(reader);
                        JsonReader replayReader = DefaultJsonReader.fromString(json);
                        while (replayReader.nextToken() != JsonToken.END_OBJECT) {
                            String fieldName = replayReader.getFieldName();
                            replayReader.nextToken();
                            if ("fishtype".equals(fieldName)) {
                                discriminatorValue = replayReader.getStringValue();
                                break;
                            } else {
                                replayReader.skipChildren();
                            }
                        }
                        if (discriminatorValue != null) {
                            readerToUse = DefaultJsonReader.fromString(json);
                        }
                    }
                    // Use the discriminator value to determine which subtype should be deserialized.
                    if (discriminatorValue == null || "salmon".equals(discriminatorValue)) {
                        return fromJsonKnownDiscriminator(readerToUse);
                    } else {
                        throw new IllegalStateException(
                                "Discriminator field 'fishtype' was present and didn't match one of the expected values 'salmon'");
                    }
                });
    }

    static Salmon fromJsonKnownDiscriminator(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    boolean discriminatorPropertyFound = false;
                    String discriminatorProperty = null;
                    boolean lengthFound = false;
                    float length = 0.0f;
                    String species = null;
                    List<Fish> siblings = null;
                    String location = null;
                    Boolean iswild = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if (fieldName.equals("fishtype")) {
                            discriminatorPropertyFound = true;
                            discriminatorProperty = reader.getStringValue();
                        } else if ("length".equals(fieldName)) {
                            length = reader.getFloatValue();
                            lengthFound = true;
                        } else if ("species".equals(fieldName)) {
                            species = reader.getStringValue();
                        } else if ("siblings".equals(fieldName)) {
                            siblings = JsonUtils.readArray(reader, r -> Fish.fromJson(reader));
                        } else if ("location".equals(fieldName)) {
                            location = reader.getStringValue();
                        } else if ("iswild".equals(fieldName)) {
                            iswild = JsonUtils.getNullableProperty(reader, r -> reader.getBooleanValue());
                        } else {
                            reader.skipChildren();
                        }
                    }

                    if (!discriminatorPropertyFound || !Objects.equals(discriminatorProperty, "salmon")) {
                        throw new IllegalStateException(
                                "'fishtype' was expected to be non-null and equal to 'salmon'. The found 'fishtype' was '"
                                        + discriminatorProperty
                                        + "'.");
                    }

                    List<String> missingProperties = new ArrayList<>();
                    if (!lengthFound) {
                        missingProperties.add("length");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    Salmon deserializedValue = new Salmon(length);
                    deserializedValue.setSpecies(species);
                    deserializedValue.setSiblings(siblings);
                    deserializedValue.setLocation(location);
                    deserializedValue.setIswild(iswild);

                    return deserializedValue;
                });
    }
}
