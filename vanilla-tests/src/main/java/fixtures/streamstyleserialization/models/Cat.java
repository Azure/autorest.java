// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.List;

/** The Cat model. */
@Fluent
public class Cat extends Pet {
    private List<Dog> hates;

    private String color;

    /**
     * Get the hates property: The hates property.
     *
     * @return the hates value.
     */
    public List<Dog> getHates() {
        return this.hates;
    }

    /**
     * Set the hates property: The hates property.
     *
     * @param hates the hates value to set.
     * @return the Cat object itself.
     */
    public Cat setHates(List<Dog> hates) {
        this.hates = hates;
        return this;
    }

    /**
     * Get the color property: The color property.
     *
     * @return the color value.
     */
    public String getColor() {
        return this.color;
    }

    /**
     * Set the color property: The color property.
     *
     * @param color the color value to set.
     * @return the Cat object itself.
     */
    public Cat setColor(String color) {
        this.color = color;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Cat setName(String name) {
        super.setName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Cat setId(Integer id) {
        super.setId(id);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (getHates() != null) {
            getHates().forEach(e -> e.validate());
        }
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName(), false);
        jsonWriter.writeIntegerField("id", getId(), false);
        JsonUtils.writeArray(jsonWriter, "hates", this.hates, (writer, element) -> writer.writeJson(element, false));
        jsonWriter.writeStringField("color", this.color, false);
        return jsonWriter.writeEndObject().flush();
    }

    public static Cat fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    String name = null;
                    Integer id = null;
                    List<Dog> hates = null;
                    String color = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("name".equals(fieldName)) {
                            name = JsonUtils.getNullableProperty(reader, r -> reader.getStringValue());
                        } else if ("id".equals(fieldName)) {
                            id = JsonUtils.getNullableProperty(reader, r -> reader.getIntValue());
                        } else if ("hates".equals(fieldName)) {
                            hates =
                                    JsonUtils.readArray(
                                            reader, r -> JsonUtils.getNullableProperty(r, r1 -> Dog.fromJson(reader)));
                        } else if ("color".equals(fieldName)) {
                            color = JsonUtils.getNullableProperty(reader, r -> reader.getStringValue());
                        } else {
                            reader.skipChildren();
                        }
                    }
                    Cat deserializedValue = new Cat();
                    deserializedValue.setName(name);
                    deserializedValue.setId(id);
                    deserializedValue.setHates(hates);
                    deserializedValue.setColor(color);

                    return deserializedValue;
                });
    }
}
