// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.util.ExpandableStringEnum;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Collection;

/**
 * Defines values for MyKind.
 */
public final class MyKind extends ExpandableStringEnum<MyKind> implements JsonSerializable<MyKind> {
    /**
     * Static value Kind1 for MyKind.
     */
    public static final MyKind KIND1 = fromString("Kind1");

    /**
     * Creates a new instance of MyKind value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public MyKind() {
    }

    /**
     * Creates or finds a MyKind from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding MyKind.
     */
    public static MyKind fromString(String name) {
        return fromString(name, MyKind.class);
    }

    /**
     * Gets known MyKind values.
     * 
     * @return known MyKind values.
     */
    public static Collection<MyKind> values() {
        return values(MyKind.class);
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        return jsonWriter.writeString(toString());
    }

    /**
     * Reads a MyKind from the JSON stream.
     * <p>
     * The passed JsonReader must be positioned at a JsonToken.STRING value.
     * 
     * @param jsonReader The JsonReader being read.
     * @return The MyKind that the JSON stream represented, may return null.
     * @throws java.io.IOException If a MyKind fails to be read from the JsonReader.
     */
    public static MyKind fromJson(JsonReader jsonReader) throws IOException {
        return fromString(jsonReader.getString(), MyKind.class);
    }
}
