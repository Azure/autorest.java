// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

/** The MyBaseType model. */
@Fluent
public class MyBaseType implements JsonSerializable<MyBaseType> {
    private String propB1;

    private String propBH1;

    /**
     * Get the propB1 property: The propB1 property.
     *
     * @return the propB1 value.
     */
    public String getPropB1() {
        return this.propB1;
    }

    /**
     * Set the propB1 property: The propB1 property.
     *
     * @param propB1 the propB1 value to set.
     * @return the MyBaseType object itself.
     */
    public MyBaseType setPropB1(String propB1) {
        this.propB1 = propB1;
        return this;
    }

    /**
     * Get the propBH1 property: The propBH1 property.
     *
     * @return the propBH1 value.
     */
    public String getPropBH1() {
        return this.propBH1;
    }

    /**
     * Set the propBH1 property: The propBH1 property.
     *
     * @param propBH1 the propBH1 value to set.
     * @return the MyBaseType object itself.
     */
    public MyBaseType setPropBH1(String propBH1) {
        this.propBH1 = propBH1;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {}

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        return jsonWriter.flush();
    }

    public static MyBaseType fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    MyBaseType deserializedValue = new MyBaseType();
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("propB1".equals(fieldName)) {
                            deserializedValue.setPropB1(reader.getStringValue());
                        } else if ("helper.propBH1".equals(fieldName)) {
                            deserializedValue.setPropBH1(reader.getStringValue());
                        } else {
                            reader.skipChildren();
                        }
                    }
                    return deserializedValue;
                });
    }
}
