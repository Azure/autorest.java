// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

/** The BooleanWrapper model. */
@Fluent
public final class BooleanWrapper implements JsonSerializable<BooleanWrapper> {
    private Boolean fieldTrue;

    private Boolean fieldFalse;

    /**
     * Get the fieldTrue property: The field_true property.
     *
     * @return the fieldTrue value.
     */
    public Boolean isFieldTrue() {
        return this.fieldTrue;
    }

    /**
     * Set the fieldTrue property: The field_true property.
     *
     * @param fieldTrue the fieldTrue value to set.
     * @return the BooleanWrapper object itself.
     */
    public BooleanWrapper setFieldTrue(Boolean fieldTrue) {
        this.fieldTrue = fieldTrue;
        return this;
    }

    /**
     * Get the fieldFalse property: The field_false property.
     *
     * @return the fieldFalse value.
     */
    public Boolean isFieldFalse() {
        return this.fieldFalse;
    }

    /**
     * Set the fieldFalse property: The field_false property.
     *
     * @param fieldFalse the fieldFalse value to set.
     * @return the BooleanWrapper object itself.
     */
    public BooleanWrapper setFieldFalse(Boolean fieldFalse) {
        this.fieldFalse = fieldFalse;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {}

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("field_true", this.fieldTrue, false);
        jsonWriter.writeBooleanField("field_false", this.fieldFalse, false);
        return jsonWriter.writeEndObject().flush();
    }

    public static BooleanWrapper fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    Boolean fieldTrue = null;
                    Boolean fieldFalse = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("field_true".equals(fieldName)) {
                            fieldTrue = JsonUtils.getNullableProperty(reader, r -> reader.getBooleanValue());
                        } else if ("field_false".equals(fieldName)) {
                            fieldFalse = JsonUtils.getNullableProperty(reader, r -> reader.getBooleanValue());
                        } else {
                            reader.skipChildren();
                        }
                    }
                    BooleanWrapper deserializedValue = new BooleanWrapper();
                    deserializedValue.setFieldTrue(fieldTrue);
                    deserializedValue.setFieldFalse(fieldFalse);

                    return deserializedValue;
                });
    }
}
