// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.time.OffsetDateTime;
import java.util.Base64;
import java.util.List;

/** The Sawshark model. */
@Fluent
public final class Sawshark extends Shark {
    private byte[] picture;

    /**
     * Creates an instance of Sawshark class.
     *
     * @param length the length value to set.
     * @param birthday the birthday value to set.
     */
    public Sawshark(float length, OffsetDateTime birthday) {
        super(length, birthday);
    }

    /**
     * Get the picture property: The picture property.
     *
     * @return the picture value.
     */
    public byte[] getPicture() {
        return CoreUtils.clone(this.picture);
    }

    /**
     * Set the picture property: The picture property.
     *
     * @param picture the picture value to set.
     * @return the Sawshark object itself.
     */
    public Sawshark setPicture(byte[] picture) {
        this.picture = CoreUtils.clone(picture);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Sawshark setAge(Integer age) {
        super.setAge(age);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Sawshark setSpecies(String species) {
        super.setSpecies(species);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Sawshark setSiblings(List<Fish> siblings) {
        super.setSiblings(siblings);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        return jsonWriter.flush();
    }

    public static Sawshark fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    Sawshark deserializedValue = new Sawshark();
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("picture".equals(fieldName)) {
                            if (reader.currentToken() != JsonToken.NULL) {
                                deserializedValue.setPicture(Base64.getDecoder().decode(reader.getStringValue()));
                            }
                        } else if ("age".equals(fieldName)) {
                            if (reader.currentToken() != JsonToken.NULL) {
                                deserializedValue.setAge(reader.getIntValue());
                            }
                        } else if ("birthday".equals(fieldName)) {
                            if (reader.currentToken() != JsonToken.NULL) {
                                deserializedValue.setBirthday(OffsetDateTime.parse(reader.getStringValue()));
                            }
                        } else if ("species".equals(fieldName)) {
                            deserializedValue.setSpecies(reader.getStringValue());
                        } else if ("length".equals(fieldName)) {
                            deserializedValue.setLength(reader.getFloatValue());
                        } else if ("siblings".equals(fieldName)) {
                            List<Fish> value = JsonUtils.readArray(reader, r -> Fish.fromJson(reader));
                            deserializedValue.setSiblings(value);
                        } else {
                            reader.skipChildren();
                        }
                    }
                    return deserializedValue;
                });
    }
}
