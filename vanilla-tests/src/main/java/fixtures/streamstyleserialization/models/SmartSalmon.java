// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.List;
import java.util.Map;

/** The SmartSalmon model. */
@Fluent
public final class SmartSalmon extends Salmon {
    private String collegeDegree;

    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of SmartSalmon class.
     *
     * @param length the length value to set.
     */
    public SmartSalmon(float length) {
        super(length);
    }

    /**
     * Get the collegeDegree property: The college_degree property.
     *
     * @return the collegeDegree value.
     */
    public String getCollegeDegree() {
        return this.collegeDegree;
    }

    /**
     * Set the collegeDegree property: The college_degree property.
     *
     * @param collegeDegree the collegeDegree value to set.
     * @return the SmartSalmon object itself.
     */
    public SmartSalmon setCollegeDegree(String collegeDegree) {
        this.collegeDegree = collegeDegree;
        return this;
    }

    /**
     * Get the additionalProperties property: Dictionary of &lt;any&gt;.
     *
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Dictionary of &lt;any&gt;.
     *
     * @param additionalProperties the additionalProperties value to set.
     * @return the SmartSalmon object itself.
     */
    public SmartSalmon setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmartSalmon setLocation(String location) {
        super.setLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmartSalmon setIswild(Boolean iswild) {
        super.setIswild(iswild);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmartSalmon setSpecies(String species) {
        super.setSpecies(species);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmartSalmon setSiblings(List<Fish> siblings) {
        super.setSiblings(siblings);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        return jsonWriter.flush();
    }

    public static SmartSalmon fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    SmartSalmon deserializedValue = new SmartSalmon();
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("college_degree".equals(fieldName)) {
                            deserializedValue.setCollegeDegree(reader.getStringValue());
                        } else if ("location".equals(fieldName)) {
                            deserializedValue.setLocation(reader.getStringValue());
                        } else if ("iswild".equals(fieldName)) {
                            if (reader.currentToken() != JsonToken.NULL) {
                                deserializedValue.setIswild(reader.getBooleanValue());
                            }
                        } else if ("species".equals(fieldName)) {
                            deserializedValue.setSpecies(reader.getStringValue());
                        } else if ("length".equals(fieldName)) {
                            deserializedValue.setLength(reader.getFloatValue());
                        } else if ("siblings".equals(fieldName)) {
                            List<Fish> value = JsonUtils.readArray(reader, r -> Fish.fromJson(reader));
                            deserializedValue.setSiblings(value);
                        } else {
                        }
                    }
                    return deserializedValue;
                });
    }
}
