// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/** The SmartSalmon model. */
@Fluent
public final class SmartSalmon extends Salmon {
    private String collegeDegree;

    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of SmartSalmon class.
     *
     * @param length the length value to set.
     */
    public SmartSalmon(float length) {
        super(length);
    }

    /**
     * Get the collegeDegree property: The college_degree property.
     *
     * @return the collegeDegree value.
     */
    public String getCollegeDegree() {
        return this.collegeDegree;
    }

    /**
     * Set the collegeDegree property: The college_degree property.
     *
     * @param collegeDegree the collegeDegree value to set.
     * @return the SmartSalmon object itself.
     */
    public SmartSalmon setCollegeDegree(String collegeDegree) {
        this.collegeDegree = collegeDegree;
        return this;
    }

    /**
     * Get the additionalProperties property: Dictionary of &lt;any&gt;.
     *
     * @return the additionalProperties value.
     */
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Dictionary of &lt;any&gt;.
     *
     * @param additionalProperties the additionalProperties value to set.
     * @return the SmartSalmon object itself.
     */
    public SmartSalmon setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmartSalmon setLocation(String location) {
        super.setLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmartSalmon setIswild(Boolean iswild) {
        super.setIswild(iswild);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmartSalmon setSiblings(List<Fish> siblings) {
        super.setSiblings(siblings);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SmartSalmon setSpecies(String species) {
        super.setSpecies(species);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        return jsonWriter.flush();
    }

    public static SmartSalmon fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    boolean lengthFound = false;
                    float length = 0.0f;
                    List<Fish> siblings = null;
                    String species = null;
                    String location = null;
                    Boolean iswild = null;
                    String collegeDegree = null;
                    Map<String, Object> additionalProperties = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("length".equals(fieldName)) {
                            length = reader.getFloatValue();
                            lengthFound = true;
                        } else if ("siblings".equals(fieldName)) {
                            siblings = JsonUtils.readArray(reader, r -> Fish.fromJson(reader));
                        } else if ("species".equals(fieldName)) {
                            species = reader.getStringValue();
                        } else if ("location".equals(fieldName)) {
                            location = reader.getStringValue();
                        } else if ("iswild".equals(fieldName)) {
                            iswild = JsonUtils.getNullableProperty(reader, r -> reader.getBooleanValue());
                        } else if ("college_degree".equals(fieldName)) {
                            collegeDegree = reader.getStringValue();
                        } else {
                            if (additionalProperties == null) {
                                additionalProperties = new LinkedHashMap<>();
                            }

                            additionalProperties.put(fieldName, JsonUtils.readUntypedField(reader));
                        }
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!lengthFound) {
                        missingProperties.add("length");
                    }

                    if (!CoreUtils.isNullOrEmpty(missingProperties)) {
                        throw new IllegalStateException(
                                "Missing required property/properties: " + String.join(", ", missingProperties));
                    }
                    SmartSalmon deserializedValue = new SmartSalmon(length);
                    deserializedValue.setSiblings(siblings);
                    deserializedValue.setSpecies(species);
                    deserializedValue.setLocation(location);
                    deserializedValue.setIswild(iswild);
                    deserializedValue.setCollegeDegree(collegeDegree);
                    deserializedValue.setAdditionalProperties(additionalProperties);

                    return deserializedValue;
                });
    }
}
