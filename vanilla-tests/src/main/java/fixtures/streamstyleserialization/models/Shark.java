// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonWriter;
import java.time.OffsetDateTime;
import java.util.List;

/** The Shark model. */
@Fluent
public class Shark extends Fish {
    private Integer age;

    private OffsetDateTime birthday;

    /**
     * Creates an instance of Shark class.
     *
     * @param length the length value to set.
     * @param birthday the birthday value to set.
     */
    public Shark(float length, OffsetDateTime birthday) {
        super(length);
        this.birthday = birthday;
    }

    /**
     * Get the age property: The age property.
     *
     * @return the age value.
     */
    public Integer getAge() {
        return this.age;
    }

    /**
     * Set the age property: The age property.
     *
     * @param age the age value to set.
     * @return the Shark object itself.
     */
    public Shark setAge(Integer age) {
        this.age = age;
        return this;
    }

    /**
     * Get the birthday property: The birthday property.
     *
     * @return the birthday value.
     */
    public OffsetDateTime getBirthday() {
        return this.birthday;
    }

    /** {@inheritDoc} */
    @Override
    public Shark setSiblings(List<Fish> siblings) {
        super.setSiblings(siblings);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public Shark setSpecies(String species) {
        super.setSpecies(species);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (getBirthday() == null) {
            throw LOGGER.logExceptionAsError(
                    new IllegalArgumentException("Missing required property birthday in model Shark"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Shark.class);

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        return jsonWriter.flush();
    }
}
