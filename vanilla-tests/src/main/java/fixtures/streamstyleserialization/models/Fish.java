// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.streamstyleserialization.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.serializer.JsonUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.util.List;

/** The Fish model. */
@Fluent
public class Fish implements JsonSerializable<Fish> {
    private String species;

    private float length;

    private List<Fish> siblings;

    /**
     * Creates an instance of Fish class.
     *
     * @param length the length value to set.
     */
    public Fish(float length) {
        this.length = length;
    }

    /**
     * Get the species property: The species property.
     *
     * @return the species value.
     */
    public String getSpecies() {
        return this.species;
    }

    /**
     * Set the species property: The species property.
     *
     * @param species the species value to set.
     * @return the Fish object itself.
     */
    public Fish setSpecies(String species) {
        this.species = species;
        return this;
    }

    /**
     * Get the length property: The length property.
     *
     * @return the length value.
     */
    public float getLength() {
        return this.length;
    }

    /**
     * Get the siblings property: The siblings property.
     *
     * @return the siblings value.
     */
    public List<Fish> getSiblings() {
        return this.siblings;
    }

    /**
     * Set the siblings property: The siblings property.
     *
     * @param siblings the siblings value to set.
     * @return the Fish object itself.
     */
    public Fish setSiblings(List<Fish> siblings) {
        this.siblings = siblings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getSiblings() != null) {
            getSiblings().forEach(e -> e.validate());
        }
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) {
        return jsonWriter.flush();
    }

    public static Fish fromJson(JsonReader jsonReader) {
        return JsonUtils.readObject(
                jsonReader,
                reader -> {
                    Fish deserializedValue = new Fish();
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("species".equals(fieldName)) {
                            deserializedValue.setSpecies(reader.getStringValue());
                        } else if ("length".equals(fieldName)) {
                            deserializedValue.setLength(reader.getFloatValue());
                        } else if ("siblings".equals(fieldName)) {
                            List<Fish> value = JsonUtils.readArray(reader, r -> Fish.fromJson(reader));
                            deserializedValue.setSiblings(value);
                        } else {
                            reader.skipChildren();
                        }
                    }
                    return deserializedValue;
                });
    }
}
