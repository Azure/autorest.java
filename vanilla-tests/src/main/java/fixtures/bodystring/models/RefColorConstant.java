// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.bodystring.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RefColorConstant model.
 */
@Fluent
public final class RefColorConstant implements JsonSerializable<RefColorConstant> {
    /*
     * Referenced Color Constant Description.
     */
    private final String colorConstant = "green-color";

    /*
     * Sample string.
     */
    private String field1;

    /**
     * Creates an instance of RefColorConstant class.
     */
    public RefColorConstant() {
    }

    /**
     * Get the colorConstant property: Referenced Color Constant Description.
     * 
     * @return the colorConstant value.
     */
    public String getColorConstant() {
        return this.colorConstant;
    }

    /**
     * Get the field1 property: Sample string.
     * 
     * @return the field1 value.
     */
    public String getField1() {
        return this.field1;
    }

    /**
     * Set the field1 property: Sample string.
     * 
     * @param field1 the field1 value to set.
     * @return the RefColorConstant object itself.
     */
    public RefColorConstant setField1(String field1) {
        this.field1 = field1;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ColorConstant", this.colorConstant);
        jsonWriter.writeStringField("field1", this.field1);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RefColorConstant from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RefColorConstant if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RefColorConstant.
     */
    public static RefColorConstant fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RefColorConstant deserializedRefColorConstant = new RefColorConstant();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("field1".equals(fieldName)) {
                    deserializedRefColorConstant.field1 = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRefColorConstant;
        });
    }
}
