// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.httpinfrastructure;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Head;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Options;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.ResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import fixtures.httpinfrastructure.models.ErrorException;
import fixtures.httpinfrastructure.models.HttpRedirectsDelete307Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsGet300Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsGet301Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsGet302Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsGet307Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsHead300Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsHead301Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsHead302Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsHead307Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsOptions307Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsPatch302Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsPatch307Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsPost303Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsPost307Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsPut301Headers;
import fixtures.httpinfrastructure.models.HttpRedirectsPut307Headers;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in HttpRedirects.
 */
public final class HttpRedirects {
    /**
     * The proxy service used to perform REST calls.
     */
    private final HttpRedirectsService service;

    /**
     * The service client containing this operation class.
     */
    private final AutoRestHttpInfrastructureTestService client;

    /**
     * Initializes an instance of HttpRedirects.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    HttpRedirects(AutoRestHttpInfrastructureTestService client) {
        this.service
            = RestProxy.create(HttpRedirectsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AutoRestHttpInfrastructureTestServiceHttpRedirects to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AutoRestHttpInfrastr")
    public interface HttpRedirectsService {
        @Head("/http/redirect/300")
        @ExpectedResponses({ 200, 300 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsHead300Headers, Void>> head300(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Head("/http/redirect/300")
        @ExpectedResponses({ 200, 300 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> head300NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/http/redirect/300")
        @ExpectedResponses({ 200, 300 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsGet300Headers, List<String>>> get300(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/http/redirect/300")
        @ExpectedResponses({ 200, 300 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<List<String>>> get300NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Head("/http/redirect/301")
        @ExpectedResponses({ 200, 301 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsHead301Headers, Void>> head301(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Head("/http/redirect/301")
        @ExpectedResponses({ 200, 301 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> head301NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/http/redirect/301")
        @ExpectedResponses({ 200, 301 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsGet301Headers, Void>> get301(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/http/redirect/301")
        @ExpectedResponses({ 200, 301 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> get301NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/http/redirect/301")
        @ExpectedResponses({ 301 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsPut301Headers, Void>> put301(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Put("/http/redirect/301")
        @ExpectedResponses({ 301 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> put301NoCustomHeaders(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Head("/http/redirect/302")
        @ExpectedResponses({ 200, 302 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsHead302Headers, Void>> head302(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Head("/http/redirect/302")
        @ExpectedResponses({ 200, 302 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> head302NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/http/redirect/302")
        @ExpectedResponses({ 200, 302 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsGet302Headers, Void>> get302(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/http/redirect/302")
        @ExpectedResponses({ 200, 302 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> get302NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Patch("/http/redirect/302")
        @ExpectedResponses({ 302 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsPatch302Headers, Void>> patch302(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Patch("/http/redirect/302")
        @ExpectedResponses({ 302 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> patch302NoCustomHeaders(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Post("/http/redirect/303")
        @ExpectedResponses({ 200, 303 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsPost303Headers, Void>> post303(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Post("/http/redirect/303")
        @ExpectedResponses({ 200, 303 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> post303NoCustomHeaders(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Head("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsHead307Headers, Void>> head307(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Head("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> head307NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsGet307Headers, Void>> get307(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Get("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> get307NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Options("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsOptions307Headers, Void>> options307(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Options("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> options307NoCustomHeaders(@HostParam("$host") String host,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsPut307Headers, Void>> put307(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Put("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> put307NoCustomHeaders(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Patch("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsPatch307Headers, Void>> patch307(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Patch("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> patch307NoCustomHeaders(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Post("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsPost307Headers, Void>> post307(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Post("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> post307NoCustomHeaders(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Delete("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<ResponseBase<HttpRedirectsDelete307Headers, Void>> delete307(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);

        @Delete("/http/redirect/307")
        @ExpectedResponses({ 200, 307 })
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<Response<Void>> delete307NoCustomHeaders(@HostParam("$host") String host,
            @BodyParam("application/json") Boolean booleanValue, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsHead300Headers, Void>> head300WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.head300(this.client.getHost(), accept, context));
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsHead300Headers, Void>> head300WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.head300(this.client.getHost(), accept, context);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head300Async() {
        return head300WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head300Async(Context context) {
        return head300WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsHead300Headers, Void> head300WithResponse(Context context) {
        return head300WithResponseAsync(context).block();
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head300() {
        head300WithResponse(Context.NONE);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> head300NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.head300NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> head300NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.head300NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> head300NoCustomHeadersWithResponse(Context context) {
        return head300NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsGet300Headers, List<String>>> get300WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get300(this.client.getHost(), accept, context));
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsGet300Headers, List<String>>> get300WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.get300(this.client.getHost(), accept, context);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<String>> get300Async() {
        return get300WithResponseAsync().flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<String>> get300Async(Context context) {
        return get300WithResponseAsync(context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsGet300Headers, List<String>> get300WithResponse(Context context) {
        return get300WithResponseAsync(context).block();
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<String> get300() {
        return get300WithResponse(Context.NONE).getValue();
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<String>>> get300NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get300NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<String>>> get300NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.get300NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<String>> get300NoCustomHeadersWithResponse(Context context) {
        return get300NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsHead301Headers, Void>> head301WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.head301(this.client.getHost(), accept, context));
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsHead301Headers, Void>> head301WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.head301(this.client.getHost(), accept, context);
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head301Async() {
        return head301WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head301Async(Context context) {
        return head301WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsHead301Headers, Void> head301WithResponse(Context context) {
        return head301WithResponseAsync(context).block();
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head301() {
        head301WithResponse(Context.NONE);
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> head301NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.head301NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> head301NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.head301NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> head301NoCustomHeadersWithResponse(Context context) {
        return head301NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsGet301Headers, Void>> get301WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get301(this.client.getHost(), accept, context));
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsGet301Headers, Void>> get301WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.get301(this.client.getHost(), accept, context);
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get301Async() {
        return get301WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get301Async(Context context) {
        return get301WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsGet301Headers, Void> get301WithResponse(Context context) {
        return get301WithResponseAsync(context).block();
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void get301() {
        get301WithResponse(Context.NONE);
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> get301NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get301NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> get301NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.get301NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> get301NoCustomHeadersWithResponse(Context context) {
        return get301NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPut301Headers, Void>> put301WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.put301(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPut301Headers, Void>> put301WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.put301(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put301Async() {
        return put301WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put301Async(Context context) {
        return put301WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsPut301Headers, Void> put301WithResponse(Context context) {
        return put301WithResponseAsync(context).block();
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put301() {
        put301WithResponse(Context.NONE);
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> put301NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.put301NoCustomHeaders(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> put301NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.put301NoCustomHeaders(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Put true Boolean value in request returns 301. This request should not be automatically redirected, but should
     * return the received 301 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> put301NoCustomHeadersWithResponse(Context context) {
        return put301NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsHead302Headers, Void>> head302WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.head302(this.client.getHost(), accept, context));
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsHead302Headers, Void>> head302WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.head302(this.client.getHost(), accept, context);
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head302Async() {
        return head302WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head302Async(Context context) {
        return head302WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsHead302Headers, Void> head302WithResponse(Context context) {
        return head302WithResponseAsync(context).block();
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head302() {
        head302WithResponse(Context.NONE);
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> head302NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.head302NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> head302NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.head302NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> head302NoCustomHeadersWithResponse(Context context) {
        return head302NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsGet302Headers, Void>> get302WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get302(this.client.getHost(), accept, context));
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsGet302Headers, Void>> get302WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.get302(this.client.getHost(), accept, context);
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get302Async() {
        return get302WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get302Async(Context context) {
        return get302WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsGet302Headers, Void> get302WithResponse(Context context) {
        return get302WithResponseAsync(context).block();
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void get302() {
        get302WithResponse(Context.NONE);
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> get302NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get302NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> get302NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.get302NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> get302NoCustomHeadersWithResponse(Context context) {
        return get302NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPatch302Headers, Void>> patch302WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.patch302(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPatch302Headers, Void>> patch302WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.patch302(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch302Async() {
        return patch302WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch302Async(Context context) {
        return patch302WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsPatch302Headers, Void> patch302WithResponse(Context context) {
        return patch302WithResponseAsync(context).block();
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch302() {
        patch302WithResponse(Context.NONE);
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> patch302NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.patch302NoCustomHeaders(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> patch302NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.patch302NoCustomHeaders(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Patch true Boolean value in request returns 302. This request should not be automatically redirected, but should
     * return the received 302 to the caller for evaluation.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> patch302NoCustomHeadersWithResponse(Context context) {
        return patch302NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPost303Headers, Void>> post303WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.post303(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPost303Headers, Void>> post303WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.post303(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post303Async() {
        return post303WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post303Async(Context context) {
        return post303WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsPost303Headers, Void> post303WithResponse(Context context) {
        return post303WithResponseAsync(context).block();
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post303() {
        post303WithResponse(Context.NONE);
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> post303NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.post303NoCustomHeaders(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> post303NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.post303NoCustomHeaders(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Post true Boolean value in request returns 303. This request should be automatically redirected usign a get,
     * ultimately returning a 200 status code.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> post303NoCustomHeadersWithResponse(Context context) {
        return post303NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsHead307Headers, Void>> head307WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.head307(this.client.getHost(), accept, context));
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsHead307Headers, Void>> head307WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.head307(this.client.getHost(), accept, context);
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head307Async() {
        return head307WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head307Async(Context context) {
        return head307WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsHead307Headers, Void> head307WithResponse(Context context) {
        return head307WithResponseAsync(context).block();
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head307() {
        head307WithResponse(Context.NONE);
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> head307NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.head307NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> head307NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.head307NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> head307NoCustomHeadersWithResponse(Context context) {
        return head307NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsGet307Headers, Void>> get307WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get307(this.client.getHost(), accept, context));
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsGet307Headers, Void>> get307WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.get307(this.client.getHost(), accept, context);
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get307Async() {
        return get307WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> get307Async(Context context) {
        return get307WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsGet307Headers, Void> get307WithResponse(Context context) {
        return get307WithResponseAsync(context).block();
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void get307() {
        get307WithResponse(Context.NONE);
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> get307NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.get307NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> get307NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.get307NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> get307NoCustomHeadersWithResponse(Context context) {
        return get307NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsOptions307Headers, Void>> options307WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.options307(this.client.getHost(), accept, context));
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsOptions307Headers, Void>> options307WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.options307(this.client.getHost(), accept, context);
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> options307Async() {
        return options307WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> options307Async(Context context) {
        return options307WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsOptions307Headers, Void> options307WithResponse(Context context) {
        return options307WithResponseAsync(context).block();
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void options307() {
        options307WithResponse(Context.NONE);
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> options307NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.options307NoCustomHeaders(this.client.getHost(), accept, context));
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> options307NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.options307NoCustomHeaders(this.client.getHost(), accept, context);
    }

    /**
     * options redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> options307NoCustomHeadersWithResponse(Context context) {
        return options307NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPut307Headers, Void>> put307WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.put307(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPut307Headers, Void>> put307WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.put307(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put307Async() {
        return put307WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put307Async(Context context) {
        return put307WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsPut307Headers, Void> put307WithResponse(Context context) {
        return put307WithResponseAsync(context).block();
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put307() {
        put307WithResponse(Context.NONE);
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> put307NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.put307NoCustomHeaders(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> put307NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.put307NoCustomHeaders(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> put307NoCustomHeadersWithResponse(Context context) {
        return put307NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPatch307Headers, Void>> patch307WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.patch307(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPatch307Headers, Void>> patch307WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.patch307(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch307Async() {
        return patch307WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch307Async(Context context) {
        return patch307WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsPatch307Headers, Void> patch307WithResponse(Context context) {
        return patch307WithResponseAsync(context).block();
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch307() {
        patch307WithResponse(Context.NONE);
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> patch307NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.patch307NoCustomHeaders(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> patch307NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.patch307NoCustomHeaders(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> patch307NoCustomHeadersWithResponse(Context context) {
        return patch307NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPost307Headers, Void>> post307WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.post307(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsPost307Headers, Void>> post307WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.post307(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post307Async() {
        return post307WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post307Async(Context context) {
        return post307WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsPost307Headers, Void> post307WithResponse(Context context) {
        return post307WithResponseAsync(context).block();
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post307() {
        post307WithResponse(Context.NONE);
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> post307NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.post307NoCustomHeaders(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> post307NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.post307NoCustomHeaders(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> post307NoCustomHeadersWithResponse(Context context) {
        return post307NoCustomHeadersWithResponseAsync(context).block();
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsDelete307Headers, Void>> delete307WithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.delete307(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResponseBase<HttpRedirectsDelete307Headers, Void>> delete307WithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.delete307(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete307Async() {
        return delete307WithResponseAsync().flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete307Async(Context context) {
        return delete307WithResponseAsync(context).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link ResponseBase}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ResponseBase<HttpRedirectsDelete307Headers, Void> delete307WithResponse(Context context) {
        return delete307WithResponseAsync(context).block();
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete307() {
        delete307WithResponse(Context.NONE);
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> delete307NoCustomHeadersWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.delete307NoCustomHeaders(this.client.getHost(), booleanValue, accept, context));
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> delete307NoCustomHeadersWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        final Boolean booleanValue = true;
        final String accept = "application/json";
        return service.delete307NoCustomHeaders(this.client.getHost(), booleanValue, accept, context);
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> delete307NoCustomHeadersWithResponse(Context context) {
        return delete307NoCustomHeadersWithResponseAsync(context).block();
    }
}
