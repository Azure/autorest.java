// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.httpinfrastructure.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The MyException model.
 */
@Fluent
public class MyException implements JsonSerializable<MyException> {
    /*
     * The statusCode property.
     */
    private String statusCode;

    /**
     * Creates an instance of MyException class.
     */
    public MyException() {
    }

    /**
     * Get the statusCode property: The statusCode property.
     * 
     * @return the statusCode value.
     */
    public String getStatusCode() {
        return this.statusCode;
    }

    /**
     * Set the statusCode property: The statusCode property.
     * 
     * @param statusCode the statusCode value to set.
     * @return the MyException object itself.
     */
    public MyException setStatusCode(String statusCode) {
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("statusCode", this.statusCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MyException from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MyException if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MyException.
     */
    public static MyException fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MyException deserializedMyException = new MyException();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("statusCode".equals(fieldName)) {
                    deserializedMyException.statusCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMyException;
        });
    }
}
