// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.bodycomplex.generated;

import com.azure.core.util.BinaryData;
import fixtures.bodycomplex.models.Fish;
import fixtures.bodycomplex.models.SmartSalmon;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SmartSalmonTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SmartSalmon model = BinaryData.fromString(
            "{\"fishtype\":\"mwisdkfthwxmnt\",\"college_degree\":\"qguhmuo\",\"\":{\"gazxuf\":\"dataprwzwbnguitnwui\"},\"location\":\"rfidfvzwdz\",\"iswild\":false,\"species\":\"waopvkmijcmmxd\",\"length\":42.68887,\"siblings\":[{\"fishtype\":\"srp\",\"species\":\"zidnsezcxtbzsgfy\",\"length\":7.1093616,\"siblings\":[{\"fishtype\":\"wmdwzjeiachboo\",\"species\":\"lnrosfqp\",\"length\":18.581312,\"siblings\":[{\"fishtype\":\"Fish\",\"length\":85.271614},{\"fishtype\":\"Fish\",\"length\":77.50827}]},{\"fishtype\":\"ypyqrimzinp\",\"species\":\"wjdk\",\"length\":86.71942,\"siblings\":[{\"fishtype\":\"Fish\",\"length\":7.825482},{\"fishtype\":\"Fish\",\"length\":94.463844},{\"fishtype\":\"Fish\",\"length\":38.036823}]},{\"fishtype\":\"hc\",\"species\":\"nohjt\",\"length\":13.129669,\"siblings\":[{\"fishtype\":\"Fish\",\"length\":60.293747}]},{\"fishtype\":\"oifiyipjxsqwpgr\",\"species\":\"znorcj\",\"length\":23.660505,\"siblings\":[{\"fishtype\":\"Fish\",\"length\":41.42828}]}]}]}")
            .toObject(SmartSalmon.class);
        Assertions.assertEquals("waopvkmijcmmxd", model.getSpecies());
        Assertions.assertEquals(42.68887f, model.getLength());
        Assertions.assertEquals("zidnsezcxtbzsgfy", model.getSiblings().get(0).getSpecies());
        Assertions.assertEquals(7.1093616f, model.getSiblings().get(0).getLength());
        Assertions.assertEquals("lnrosfqp", model.getSiblings().get(0).getSiblings().get(0).getSpecies());
        Assertions.assertEquals(18.581312f, model.getSiblings().get(0).getSiblings().get(0).getLength());
        Assertions.assertEquals(85.271614f,
            model.getSiblings().get(0).getSiblings().get(0).getSiblings().get(0).getLength());
        Assertions.assertEquals("rfidfvzwdz", model.getLocation());
        Assertions.assertEquals(false, model.iswild());
        Assertions.assertEquals("qguhmuo", model.getCollegeDegree());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SmartSalmon model = new SmartSalmon(42.68887f).setSpecies("waopvkmijcmmxd")
            .setSiblings(Arrays.asList(new Fish(7.1093616f).setSpecies("zidnsezcxtbzsgfy")
                .setSiblings(Arrays.asList(
                    new Fish(18.581312f).setSpecies("lnrosfqp")
                        .setSiblings(Arrays.asList(new Fish(85.271614f), new Fish(77.50827f))),
                    new Fish(86.71942f).setSpecies("wjdk")
                        .setSiblings(Arrays.asList(new Fish(7.825482f), new Fish(94.463844f), new Fish(38.036823f))),
                    new Fish(13.129669f).setSpecies("nohjt").setSiblings(Arrays.asList(new Fish(60.293747f))),
                    new Fish(23.660505f).setSpecies("znorcj").setSiblings(Arrays.asList(new Fish(41.42828f)))))))
            .setLocation("rfidfvzwdz").setIswild(false).setCollegeDegree("qguhmuo")
            .setAdditionalProperties(mapOf("fishtype", "mwisdkfthwxmnt"));
        model = BinaryData.fromObject(model).toObject(SmartSalmon.class);
        Assertions.assertEquals("waopvkmijcmmxd", model.getSpecies());
        Assertions.assertEquals(42.68887f, model.getLength());
        Assertions.assertEquals("zidnsezcxtbzsgfy", model.getSiblings().get(0).getSpecies());
        Assertions.assertEquals(7.1093616f, model.getSiblings().get(0).getLength());
        Assertions.assertEquals("lnrosfqp", model.getSiblings().get(0).getSiblings().get(0).getSpecies());
        Assertions.assertEquals(18.581312f, model.getSiblings().get(0).getSiblings().get(0).getLength());
        Assertions.assertEquals(85.271614f,
            model.getSiblings().get(0).getSiblings().get(0).getSiblings().get(0).getLength());
        Assertions.assertEquals("rfidfvzwdz", model.getLocation());
        Assertions.assertEquals(false, model.iswild());
        Assertions.assertEquals("qguhmuo", model.getCollegeDegree());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
