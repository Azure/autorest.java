// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.bodycomplex.generated;

import com.azure.core.util.BinaryData;
import fixtures.bodycomplex.models.Fish;
import fixtures.bodycomplex.models.SmartSalmon;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SmartSalmonTests {
    @Test
    public void testDeserialize() {
        SmartSalmon model =
                BinaryData.fromString(
                                "{\"fishtype\":\"smart_salmon\",\"college_degree\":\"sne\",\"\":{},\"location\":\"ypyqrimzinp\",\"iswild\":false,\"species\":\"dkirsoodqxhcr\",\"length\":29.465246,\"siblings\":[{\"fishtype\":\"Fish\",\"species\":\"t\",\"length\":13.129669,\"siblings\":[{\"fishtype\":\"Fish\",\"species\":\"soifiyipjxsqw\",\"length\":7.124424,\"siblings\":[{\"fishtype\":\"Fish\",\"species\":\"znorcj\",\"length\":23.660505},{\"fishtype\":\"Fish\",\"species\":\"byxqabn\",\"length\":30.247969}]}]},{\"fishtype\":\"Fish\",\"species\":\"cyshurzafbljjgp\",\"length\":59.107674,\"siblings\":[{\"fishtype\":\"Fish\",\"species\":\"jmkljavbqidtqajz\",\"length\":57.07208,\"siblings\":[{\"fishtype\":\"Fish\",\"species\":\"u\",\"length\":78.68875}]}]}]}")
                        .toObject(SmartSalmon.class);
        Assertions.assertEquals("dkirsoodqxhcr", model.getSpecies());
        Assertions.assertEquals(29.465246f, model.getLength());
        Assertions.assertEquals("t", model.getSiblings().get(0).getSpecies());
        Assertions.assertEquals(13.129669f, model.getSiblings().get(0).getLength());
        Assertions.assertEquals("soifiyipjxsqw", model.getSiblings().get(0).getSiblings().get(0).getSpecies());
        Assertions.assertEquals(7.124424f, model.getSiblings().get(0).getSiblings().get(0).getLength());
        Assertions.assertEquals(
                "znorcj", model.getSiblings().get(0).getSiblings().get(0).getSiblings().get(0).getSpecies());
        Assertions.assertEquals(
                23.660505f, model.getSiblings().get(0).getSiblings().get(0).getSiblings().get(0).getLength());
        Assertions.assertEquals("ypyqrimzinp", model.getLocation());
        Assertions.assertEquals(false, model.iswild());
        Assertions.assertEquals("sne", model.getCollegeDegree());
    }

    @Test
    public void testSerialize() {
        SmartSalmon model =
                new SmartSalmon(29.465246f)
                        .setSpecies("dkirsoodqxhcr")
                        .setSiblings(
                                Arrays.asList(
                                        new Fish(13.129669f)
                                                .setSpecies("t")
                                                .setSiblings(
                                                        Arrays.asList(
                                                                new Fish(7.124424f)
                                                                        .setSpecies("soifiyipjxsqw")
                                                                        .setSiblings(
                                                                                Arrays.asList(
                                                                                        new Fish(23.660505f)
                                                                                                .setSpecies("znorcj"),
                                                                                        new Fish(30.247969f)
                                                                                                .setSpecies(
                                                                                                        "byxqabn"))))),
                                        new Fish(59.107674f)
                                                .setSpecies("cyshurzafbljjgp")
                                                .setSiblings(
                                                        Arrays.asList(
                                                                new Fish(57.07208f)
                                                                        .setSpecies("jmkljavbqidtqajz")
                                                                        .setSiblings(
                                                                                Arrays.asList(
                                                                                        new Fish(78.68875f)
                                                                                                .setSpecies("u")))))))
                        .setLocation("ypyqrimzinp")
                        .setIswild(false)
                        .setCollegeDegree("sne")
                        .setAdditionalProperties(mapOf("fishtype", "smart_salmon"));
        model = BinaryData.fromObject(model).toObject(SmartSalmon.class);
        Assertions.assertEquals("dkirsoodqxhcr", model.getSpecies());
        Assertions.assertEquals(29.465246f, model.getLength());
        Assertions.assertEquals("t", model.getSiblings().get(0).getSpecies());
        Assertions.assertEquals(13.129669f, model.getSiblings().get(0).getLength());
        Assertions.assertEquals("soifiyipjxsqw", model.getSiblings().get(0).getSiblings().get(0).getSpecies());
        Assertions.assertEquals(7.124424f, model.getSiblings().get(0).getSiblings().get(0).getLength());
        Assertions.assertEquals(
                "znorcj", model.getSiblings().get(0).getSiblings().get(0).getSiblings().get(0).getSpecies());
        Assertions.assertEquals(
                23.660505f, model.getSiblings().get(0).getSiblings().get(0).getSiblings().get(0).getLength());
        Assertions.assertEquals("ypyqrimzinp", model.getLocation());
        Assertions.assertEquals(false, model.iswild());
        Assertions.assertEquals("sne", model.getCollegeDegree());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
