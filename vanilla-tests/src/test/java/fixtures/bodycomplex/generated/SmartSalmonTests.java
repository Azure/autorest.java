// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.bodycomplex.generated;

import com.azure.core.util.BinaryData;
import fixtures.bodycomplex.models.Fish;
import fixtures.bodycomplex.models.SmartSalmon;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class SmartSalmonTests {
    @Test
    public void testDeserialize() throws Exception {
        SmartSalmon model =
                BinaryData.fromString(
                                "{\"fishtype\":\"smart_salmon\",\"college_degree\":\"ayhuy\",\"\":{\"inuvamiheogn\":\"datapodepoo\",\"usivye\":\"datarxzxtheo\"},\"location\":\"ciqihnhung\",\"iswild\":false,\"species\":\"rnfygxgispem\",\"length\":55.453957,\"siblings\":[{\"fishtype\":\"Fish\",\"species\":\"ufubl\",\"length\":16.258835,\"siblings\":[]},{\"fishtype\":\"Fish\",\"species\":\"eofjaeqjh\",\"length\":91.61654,\"siblings\":[]}]}")
                        .toObject(SmartSalmon.class);
        Assertions.assertEquals("rnfygxgispem", model.getSpecies());
        Assertions.assertEquals(55.453957f, model.getLength());
        Assertions.assertEquals("ufubl", model.getSiblings().get(0).getSpecies());
        Assertions.assertEquals(16.258835f, model.getSiblings().get(0).getLength());
        Assertions.assertEquals("ciqihnhung", model.getLocation());
        Assertions.assertEquals(false, model.iswild());
        Assertions.assertEquals("ayhuy", model.getCollegeDegree());
    }

    @Test
    public void testSerialize() throws Exception {
        SmartSalmon model =
                new SmartSalmon(55.453957f)
                        .setSpecies("rnfygxgispem")
                        .setSiblings(
                                Arrays.asList(
                                        new Fish(16.258835f).setSpecies("ufubl").setSiblings(Arrays.asList()),
                                        new Fish(91.61654f).setSpecies("eofjaeqjh").setSiblings(Arrays.asList())))
                        .setLocation("ciqihnhung")
                        .setIswild(false)
                        .setCollegeDegree("ayhuy")
                        .setAdditionalProperties(mapOf("fishtype", "smart_salmon"));
        model = BinaryData.fromObject(model).toObject(SmartSalmon.class);
        Assertions.assertEquals("rnfygxgispem", model.getSpecies());
        Assertions.assertEquals(55.453957f, model.getLength());
        Assertions.assertEquals("ufubl", model.getSiblings().get(0).getSpecies());
        Assertions.assertEquals(16.258835f, model.getSiblings().get(0).getLength());
        Assertions.assertEquals("ciqihnhung", model.getLocation());
        Assertions.assertEquals(false, model.iswild());
        Assertions.assertEquals("ayhuy", model.getCollegeDegree());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
