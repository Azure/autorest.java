// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.azureparametergrouping.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;

/**
 * Parameter group.
 */
@Fluent
public final class Grouper {
    /*
     * A grouped parameter that is a constant.
     */
    @Generated
    private String groupedConstant = "foo";

    /*
     * Optional parameter part of a parameter grouping.
     */
    @Generated
    private String groupedParameter;

    /**
     * Creates an instance of Grouper class.
     */
    @Generated
    public Grouper() {
    }

    /**
     * Get the groupedConstant property: A grouped parameter that is a constant.
     * 
     * @return the groupedConstant value.
     */
    @Generated
    public String getGroupedConstant() {
        return this.groupedConstant;
    }

    /**
     * Set the groupedConstant property: A grouped parameter that is a constant.
     * 
     * @param groupedConstant the groupedConstant value to set.
     * @return the Grouper object itself.
     */
    @Generated
    public Grouper setGroupedConstant(String groupedConstant) {
        this.groupedConstant = groupedConstant;
        return this;
    }

    /**
     * Get the groupedParameter property: Optional parameter part of a parameter grouping.
     * 
     * @return the groupedParameter value.
     */
    @Generated
    public String getGroupedParameter() {
        return this.groupedParameter;
    }

    /**
     * Set the groupedParameter property: Optional parameter part of a parameter grouping.
     * 
     * @param groupedParameter the groupedParameter value to set.
     * @return the Grouper object itself.
     */
    @Generated
    public Grouper setGroupedParameter(String groupedParameter) {
        this.groupedParameter = groupedParameter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
