// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.azureparametergrouping.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;

/**
 * Parameter group.
 */
@Fluent
public final class ParameterGroupingPostMultiParamGroupsSecondParamGroup {
    /*
     * The header-two property.
     */
    @Generated
    private String headerTwo;

    /*
     * Query parameter with default
     */
    @Generated
    private Integer queryTwo;

    /**
     * Creates an instance of ParameterGroupingPostMultiParamGroupsSecondParamGroup class.
     */
    @Generated
    public ParameterGroupingPostMultiParamGroupsSecondParamGroup() {
    }

    /**
     * Get the headerTwo property: The header-two property.
     * 
     * @return the headerTwo value.
     */
    @Generated
    public String getHeaderTwo() {
        return this.headerTwo;
    }

    /**
     * Set the headerTwo property: The header-two property.
     * 
     * @param headerTwo the headerTwo value to set.
     * @return the ParameterGroupingPostMultiParamGroupsSecondParamGroup object itself.
     */
    @Generated
    public ParameterGroupingPostMultiParamGroupsSecondParamGroup setHeaderTwo(String headerTwo) {
        this.headerTwo = headerTwo;
        return this;
    }

    /**
     * Get the queryTwo property: Query parameter with default.
     * 
     * @return the queryTwo value.
     */
    @Generated
    public Integer getQueryTwo() {
        return this.queryTwo;
    }

    /**
     * Set the queryTwo property: Query parameter with default.
     * 
     * @param queryTwo the queryTwo value to set.
     * @return the ParameterGroupingPostMultiParamGroupsSecondParamGroup object itself.
     */
    @Generated
    public ParameterGroupingPostMultiParamGroupsSecondParamGroup setQueryTwo(Integer queryTwo) {
        this.queryTwo = queryTwo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
