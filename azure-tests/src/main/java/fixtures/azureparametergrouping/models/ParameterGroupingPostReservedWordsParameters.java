// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.azureparametergrouping.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Parameter group.
 */
@Fluent
public final class ParameterGroupingPostReservedWordsParameters
    implements JsonSerializable<ParameterGroupingPostReservedWordsParameters> {
    /*
     * 'from' is a reserved word. Pass in 'bob' to pass.
     */
    private String from;

    /*
     * 'accept' is a reserved word. Pass in 'yes' to pass.
     */
    private String accept;

    /**
     * Creates an instance of ParameterGroupingPostReservedWordsParameters class.
     */
    public ParameterGroupingPostReservedWordsParameters() {
    }

    /**
     * Get the from property: 'from' is a reserved word. Pass in 'bob' to pass.
     * 
     * @return the from value.
     */
    public String getFrom() {
        return this.from;
    }

    /**
     * Set the from property: 'from' is a reserved word. Pass in 'bob' to pass.
     * 
     * @param from the from value to set.
     * @return the ParameterGroupingPostReservedWordsParameters object itself.
     */
    public ParameterGroupingPostReservedWordsParameters setFrom(String from) {
        this.from = from;
        return this;
    }

    /**
     * Get the accept property: 'accept' is a reserved word. Pass in 'yes' to pass.
     * 
     * @return the accept value.
     */
    public String getAccept() {
        return this.accept;
    }

    /**
     * Set the accept property: 'accept' is a reserved word. Pass in 'yes' to pass.
     * 
     * @param accept the accept value to set.
     * @return the ParameterGroupingPostReservedWordsParameters object itself.
     */
    public ParameterGroupingPostReservedWordsParameters setAccept(String accept) {
        this.accept = accept;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("from", this.from);
        jsonWriter.writeStringField("accept", this.accept);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParameterGroupingPostReservedWordsParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParameterGroupingPostReservedWordsParameters if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ParameterGroupingPostReservedWordsParameters.
     */
    public static ParameterGroupingPostReservedWordsParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ParameterGroupingPostReservedWordsParameters deserializedParameterGroupingPostReservedWordsParameters
                = new ParameterGroupingPostReservedWordsParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("from".equals(fieldName)) {
                    deserializedParameterGroupingPostReservedWordsParameters.from = reader.getString();
                } else if ("accept".equals(fieldName)) {
                    deserializedParameterGroupingPostReservedWordsParameters.accept = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParameterGroupingPostReservedWordsParameters;
        });
    }
}
