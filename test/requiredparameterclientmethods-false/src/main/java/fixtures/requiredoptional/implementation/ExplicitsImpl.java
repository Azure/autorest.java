// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.requiredoptional.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.CollectionFormat;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import com.azure.core.implementation.serializer.jackson.JacksonAdapter;
import fixtures.requiredoptional.Explicits;
import fixtures.requiredoptional.models.ArrayOptionalWrapper;
import fixtures.requiredoptional.models.ArrayWrapper;
import fixtures.requiredoptional.models.ClassOptionalWrapper;
import fixtures.requiredoptional.models.ClassWrapper;
import fixtures.requiredoptional.models.Error;
import fixtures.requiredoptional.models.ErrorException;
import fixtures.requiredoptional.models.IntOptionalWrapper;
import fixtures.requiredoptional.models.IntWrapper;
import fixtures.requiredoptional.models.Product;
import fixtures.requiredoptional.models.StringOptionalWrapper;
import fixtures.requiredoptional.models.StringWrapper;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Explicits.
 */
public final class ExplicitsImpl implements Explicits {
    /**
     * The proxy service used to perform REST calls.
     */
    private ExplicitsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestRequiredOptionalTestServiceImpl client;

    /**
     * Initializes an instance of ExplicitsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ExplicitsImpl(AutoRestRequiredOptionalTestServiceImpl client) {
        this.service = RestProxy.create(ExplicitsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestRequiredOptionalTestServiceExplicits to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestRequiredOptionalTestServiceExplicits")
    private interface ExplicitsService {
        @Post("reqopt/requied/integer/parameter")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredIntegerParameter(@BodyParam("application/json; charset=utf-8") int bodyParameter);

        @Post("reqopt/optional/integer/parameter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalIntegerParameter(@BodyParam("application/json; charset=utf-8") Integer bodyParameter);

        @Post("reqopt/requied/integer/property")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredIntegerProperty(@BodyParam("application/json; charset=utf-8") IntWrapper bodyParameter);

        @Post("reqopt/optional/integer/property")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalIntegerProperty(@BodyParam("application/json; charset=utf-8") IntOptionalWrapper bodyParameter);

        @Post("reqopt/requied/integer/header")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredIntegerHeader(@HeaderParam("headerParameter") int headerParameter);

        @Post("reqopt/optional/integer/header")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalIntegerHeader(@HeaderParam("headerParameter") Integer headerParameter);

        @Post("reqopt/requied/string/parameter")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredStringParameter(@BodyParam("application/json; charset=utf-8") String bodyParameter);

        @Post("reqopt/optional/string/parameter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalStringParameter(@BodyParam("application/json; charset=utf-8") String bodyParameter);

        @Post("reqopt/requied/string/property")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredStringProperty(@BodyParam("application/json; charset=utf-8") StringWrapper bodyParameter);

        @Post("reqopt/optional/string/property")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalStringProperty(@BodyParam("application/json; charset=utf-8") StringOptionalWrapper bodyParameter);

        @Post("reqopt/requied/string/header")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredStringHeader(@HeaderParam("headerParameter") String headerParameter);

        @Post("reqopt/optional/string/header")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalStringHeader(@HeaderParam("bodyParameter") String bodyParameter);

        @Post("reqopt/requied/class/parameter")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredClassParameter(@BodyParam("application/json; charset=utf-8") Product bodyParameter);

        @Post("reqopt/optional/class/parameter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalClassParameter(@BodyParam("application/json; charset=utf-8") Product bodyParameter);

        @Post("reqopt/requied/class/property")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredClassProperty(@BodyParam("application/json; charset=utf-8") ClassWrapper bodyParameter);

        @Post("reqopt/optional/class/property")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalClassProperty(@BodyParam("application/json; charset=utf-8") ClassOptionalWrapper bodyParameter);

        @Post("reqopt/requied/array/parameter")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredArrayParameter(@BodyParam("application/json; charset=utf-8") List<String> bodyParameter);

        @Post("reqopt/optional/array/parameter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalArrayParameter(@BodyParam("application/json; charset=utf-8") List<String> bodyParameter);

        @Post("reqopt/requied/array/property")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredArrayProperty(@BodyParam("application/json; charset=utf-8") ArrayWrapper bodyParameter);

        @Post("reqopt/optional/array/property")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalArrayProperty(@BodyParam("application/json; charset=utf-8") ArrayOptionalWrapper bodyParameter);

        @Post("reqopt/requied/array/header")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> postRequiredArrayHeader(@HeaderParam("headerParameter") String headerParameter);

        @Post("reqopt/optional/array/header")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptionalArrayHeader(@HeaderParam("headerParameter") String headerParameter);
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredIntegerParameter(int bodyParameter) {
        return postRequiredIntegerParameterAsync(bodyParameter).block();
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredIntegerParameterWithRestResponseAsync(int bodyParameter) {
        return service.postRequiredIntegerParameter(bodyParameter);
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredIntegerParameterAsync(int bodyParameter) {
        return postRequiredIntegerParameterWithRestResponseAsync(bodyParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerParameter(Integer bodyParameter) {
        postOptionalIntegerParameterAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalIntegerParameterWithRestResponseAsync(Integer bodyParameter) {
        return service.postOptionalIntegerParameter(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerParameterAsync(Integer bodyParameter) {
        return postOptionalIntegerParameterWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredIntegerProperty(IntWrapper bodyParameter) {
        return postRequiredIntegerPropertyAsync(bodyParameter).block();
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredIntegerPropertyWithRestResponseAsync(IntWrapper bodyParameter) {
        return service.postRequiredIntegerProperty(bodyParameter);
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredIntegerPropertyAsync(IntWrapper bodyParameter) {
        return postRequiredIntegerPropertyWithRestResponseAsync(bodyParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerProperty(IntOptionalWrapper bodyParameter) {
        postOptionalIntegerPropertyAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalIntegerPropertyWithRestResponseAsync(IntOptionalWrapper bodyParameter) {
        return service.postOptionalIntegerProperty(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerPropertyAsync(IntOptionalWrapper bodyParameter) {
        return postOptionalIntegerPropertyWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredIntegerHeader(int headerParameter) {
        return postRequiredIntegerHeaderAsync(headerParameter).block();
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredIntegerHeaderWithRestResponseAsync(int headerParameter) {
        return service.postRequiredIntegerHeader(headerParameter);
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredIntegerHeaderAsync(int headerParameter) {
        return postRequiredIntegerHeaderWithRestResponseAsync(headerParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalIntegerHeader(Integer headerParameter) {
        postOptionalIntegerHeaderAsync(headerParameter).block();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalIntegerHeaderWithRestResponseAsync(Integer headerParameter) {
        return service.postOptionalIntegerHeader(headerParameter);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalIntegerHeaderAsync(Integer headerParameter) {
        return postOptionalIntegerHeaderWithRestResponseAsync(headerParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredStringParameter(String bodyParameter) {
        return postRequiredStringParameterAsync(bodyParameter).block();
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredStringParameterWithRestResponseAsync(String bodyParameter) {
        return service.postRequiredStringParameter(bodyParameter);
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredStringParameterAsync(String bodyParameter) {
        return postRequiredStringParameterWithRestResponseAsync(bodyParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringParameter(String bodyParameter) {
        postOptionalStringParameterAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalStringParameterWithRestResponseAsync(String bodyParameter) {
        return service.postOptionalStringParameter(bodyParameter);
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringParameterAsync(String bodyParameter) {
        return postOptionalStringParameterWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredStringProperty(StringWrapper bodyParameter) {
        return postRequiredStringPropertyAsync(bodyParameter).block();
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredStringPropertyWithRestResponseAsync(StringWrapper bodyParameter) {
        return service.postRequiredStringProperty(bodyParameter);
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredStringPropertyAsync(StringWrapper bodyParameter) {
        return postRequiredStringPropertyWithRestResponseAsync(bodyParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringProperty(StringOptionalWrapper bodyParameter) {
        postOptionalStringPropertyAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalStringPropertyWithRestResponseAsync(StringOptionalWrapper bodyParameter) {
        return service.postOptionalStringProperty(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringPropertyAsync(StringOptionalWrapper bodyParameter) {
        return postOptionalStringPropertyWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredStringHeader(String headerParameter) {
        return postRequiredStringHeaderAsync(headerParameter).block();
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredStringHeaderWithRestResponseAsync(String headerParameter) {
        return service.postRequiredStringHeader(headerParameter);
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredStringHeaderAsync(String headerParameter) {
        return postRequiredStringHeaderWithRestResponseAsync(headerParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalStringHeader(String bodyParameter) {
        postOptionalStringHeaderAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalStringHeaderWithRestResponseAsync(String bodyParameter) {
        return service.postOptionalStringHeader(bodyParameter);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalStringHeaderAsync(String bodyParameter) {
        return postOptionalStringHeaderWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredClassParameter(Product bodyParameter) {
        return postRequiredClassParameterAsync(bodyParameter).block();
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredClassParameterWithRestResponseAsync(Product bodyParameter) {
        return service.postRequiredClassParameter(bodyParameter);
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredClassParameterAsync(Product bodyParameter) {
        return postRequiredClassParameterWithRestResponseAsync(bodyParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalClassParameter(Product bodyParameter) {
        postOptionalClassParameterAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalClassParameterWithRestResponseAsync(Product bodyParameter) {
        return service.postOptionalClassParameter(bodyParameter);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalClassParameterAsync(Product bodyParameter) {
        return postOptionalClassParameterWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredClassProperty(ClassWrapper bodyParameter) {
        return postRequiredClassPropertyAsync(bodyParameter).block();
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredClassPropertyWithRestResponseAsync(ClassWrapper bodyParameter) {
        return service.postRequiredClassProperty(bodyParameter);
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredClassPropertyAsync(ClassWrapper bodyParameter) {
        return postRequiredClassPropertyWithRestResponseAsync(bodyParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalClassProperty(ClassOptionalWrapper bodyParameter) {
        postOptionalClassPropertyAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalClassPropertyWithRestResponseAsync(ClassOptionalWrapper bodyParameter) {
        return service.postOptionalClassProperty(bodyParameter);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalClassPropertyAsync(ClassOptionalWrapper bodyParameter) {
        return postOptionalClassPropertyWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredArrayParameter(List<String> bodyParameter) {
        return postRequiredArrayParameterAsync(bodyParameter).block();
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredArrayParameterWithRestResponseAsync(List<String> bodyParameter) {
        return service.postRequiredArrayParameter(bodyParameter);
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredArrayParameterAsync(List<String> bodyParameter) {
        return postRequiredArrayParameterWithRestResponseAsync(bodyParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayParameter(List<String> bodyParameter) {
        postOptionalArrayParameterAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalArrayParameterWithRestResponseAsync(List<String> bodyParameter) {
        return service.postOptionalArrayParameter(bodyParameter);
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayParameterAsync(List<String> bodyParameter) {
        return postOptionalArrayParameterWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredArrayProperty(ArrayWrapper bodyParameter) {
        return postRequiredArrayPropertyAsync(bodyParameter).block();
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredArrayPropertyWithRestResponseAsync(ArrayWrapper bodyParameter) {
        return service.postRequiredArrayProperty(bodyParameter);
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredArrayPropertyAsync(ArrayWrapper bodyParameter) {
        return postRequiredArrayPropertyWithRestResponseAsync(bodyParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayProperty(ArrayOptionalWrapper bodyParameter) {
        postOptionalArrayPropertyAsync(bodyParameter).block();
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalArrayPropertyWithRestResponseAsync(ArrayOptionalWrapper bodyParameter) {
        return service.postOptionalArrayProperty(bodyParameter);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayPropertyAsync(ArrayOptionalWrapper bodyParameter) {
        return postOptionalArrayPropertyWithRestResponseAsync(bodyParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error postRequiredArrayHeader(List<String> headerParameter) {
        return postRequiredArrayHeaderAsync(headerParameter).block();
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> postRequiredArrayHeaderWithRestResponseAsync(List<String> headerParameter) {
        String headerParameterConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(headerParameter, CollectionFormat.CSV);
        return service.postRequiredArrayHeader(headerParameterConverted);
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> postRequiredArrayHeaderAsync(List<String> headerParameter) {
        return postRequiredArrayHeaderWithRestResponseAsync(headerParameter)
            .flatMap((SimpleResponse<Error> res) -> Mono.just(res.value()));
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptionalArrayHeader(List<String> headerParameter) {
        postOptionalArrayHeaderAsync(headerParameter).block();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalArrayHeaderWithRestResponseAsync(List<String> headerParameter) {
        String headerParameterConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(headerParameter, CollectionFormat.CSV);
        return service.postOptionalArrayHeader(headerParameterConverted);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalArrayHeaderAsync(List<String> headerParameter) {
        return postOptionalArrayHeaderWithRestResponseAsync(headerParameter)
            .flatMap((VoidResponse res) -> Mono.empty());
    }
}
