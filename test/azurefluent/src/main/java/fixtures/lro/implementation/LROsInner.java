// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.lro.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.OperationDescription;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.Delete;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.ResumeOperation;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import com.microsoft.azure.v3.AzureProxy;
import com.microsoft.azure.v3.CloudException;
import com.microsoft.azure.v3.OperationStatus;
import fixtures.lro.models.LROsDelete202NoRetry204Response;
import fixtures.lro.models.LROsDelete202Retry200Response;
import fixtures.lro.models.LROsDeleteAsyncNoHeaderInRetryResponse;
import fixtures.lro.models.LROsDeleteAsyncNoRetrySucceededResponse;
import fixtures.lro.models.LROsDeleteAsyncRetrycanceledResponse;
import fixtures.lro.models.LROsDeleteAsyncRetryFailedResponse;
import fixtures.lro.models.LROsDeleteAsyncRetrySucceededResponse;
import fixtures.lro.models.LROsDeleteNoHeaderInRetryResponse;
import fixtures.lro.models.LROsDeleteProvisioning202Accepted200SucceededResponse;
import fixtures.lro.models.LROsDeleteProvisioning202Deletingcanceled200Response;
import fixtures.lro.models.LROsDeleteProvisioning202DeletingFailed200Response;
import fixtures.lro.models.LROsPost202NoRetry204Response;
import fixtures.lro.models.LROsPost202Retry200Response;
import fixtures.lro.models.LROsPostAsyncNoRetrySucceededResponse;
import fixtures.lro.models.LROsPostAsyncRetrycanceledResponse;
import fixtures.lro.models.LROsPostAsyncRetryFailedResponse;
import fixtures.lro.models.LROsPostAsyncRetrySucceededResponse;
import fixtures.lro.models.LROsPutAsyncNoHeaderInRetryResponse;
import fixtures.lro.models.LROsPutAsyncNoRetrycanceledResponse;
import fixtures.lro.models.LROsPutAsyncNoRetrySucceededResponse;
import fixtures.lro.models.LROsPutAsyncRetryFailedResponse;
import fixtures.lro.models.LROsPutAsyncRetrySucceededResponse;
import fixtures.lro.models.LROsPutNoHeaderInRetryResponse;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * LROs.
 */
public final class LROsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private LROsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestLongRunningOperationTestServiceImpl client;

    /**
     * Initializes an instance of LROsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public LROsInner(AutoRestLongRunningOperationTestServiceImpl client) {
        this.service = AzureProxy.create(LROsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestLongRunningOperationTestServiceLROs to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestLongRunningOperationTestServiceLROs")
    private interface LROsService {
        @Put("lro/put/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPut200Succeeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ProductInner>> put200Succeeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePut200Succeeded(OperationDescription operationDescription);

        @Put("lro/put/200/succeeded/nostate")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPut200SucceededNoState(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/succeeded/nostate")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ProductInner>> put200SucceededNoState(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/succeeded/nostate")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePut200SucceededNoState(OperationDescription operationDescription);

        @Put("lro/put/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPut202Retry200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ProductInner>> put202Retry200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePut202Retry200(OperationDescription operationDescription);

        @Put("lro/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPut201CreatingSucceeded200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ProductInner>> put201CreatingSucceeded200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePut201CreatingSucceeded200(OperationDescription operationDescription);

        @Put("lro/put/200/updating/succeeded/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPut200UpdatingSucceeded204(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/updating/succeeded/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ProductInner>> put200UpdatingSucceeded204(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/updating/succeeded/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePut200UpdatingSucceeded204(OperationDescription operationDescription);

        @Put("lro/put/201/created/failed/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPut201CreatingFailed200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/201/created/failed/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ProductInner>> put201CreatingFailed200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/201/created/failed/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePut201CreatingFailed200(OperationDescription operationDescription);

        @Put("lro/put/200/accepted/canceled/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPut200Acceptedcanceled200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/accepted/canceled/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ProductInner>> put200Acceptedcanceled200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/accepted/canceled/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePut200Acceptedcanceled200(OperationDescription operationDescription);

        @Put("lro/put/noheader/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPutNoHeaderInRetry(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/noheader/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutNoHeaderInRetryResponse> putNoHeaderInRetry(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/noheader/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePutNoHeaderInRetry(OperationDescription operationDescription);

        @Put("lro/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPutAsyncRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncRetrySucceededResponse> putAsyncRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePutAsyncRetrySucceeded(OperationDescription operationDescription);

        @Put("lro/putasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPutAsyncNoRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncNoRetrySucceededResponse> putAsyncNoRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePutAsyncNoRetrySucceeded(OperationDescription operationDescription);

        @Put("lro/putasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPutAsyncRetryFailed(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncRetryFailedResponse> putAsyncRetryFailed(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePutAsyncRetryFailed(OperationDescription operationDescription);

        @Put("lro/putasync/noretry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPutAsyncNoRetrycanceled(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noretry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncNoRetrycanceledResponse> putAsyncNoRetrycanceled(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noretry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePutAsyncNoRetrycanceled(OperationDescription operationDescription);

        @Put("lro/putasync/noheader/201/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPutAsyncNoHeaderInRetry(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noheader/201/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncNoHeaderInRetryResponse> putAsyncNoHeaderInRetry(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noheader/201/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePutAsyncNoHeaderInRetry(OperationDescription operationDescription);

        @Put("lro/putnonresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<SkuInner>> beginPutNonResource(@BodyParam("application/json; charset=utf-8") SkuInner sku, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putnonresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<SkuInner>> putNonResource(@BodyParam("application/json; charset=utf-8") SkuInner sku, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putnonresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<SkuInner>> resumePutNonResource(OperationDescription operationDescription);

        @Put("lro/putnonresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<SkuInner>> beginPutAsyncNonResource(@BodyParam("application/json; charset=utf-8") SkuInner sku, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putnonresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<SkuInner>> putAsyncNonResource(@BodyParam("application/json; charset=utf-8") SkuInner sku, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putnonresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<SkuInner>> resumePutAsyncNonResource(OperationDescription operationDescription);

        @Put("lro/putsubresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<SubProductInner>> beginPutSubResource(@BodyParam("application/json; charset=utf-8") SubProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putsubresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<SubProductInner>> putSubResource(@BodyParam("application/json; charset=utf-8") SubProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putsubresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<SubProductInner>> resumePutSubResource(OperationDescription operationDescription);

        @Put("lro/putsubresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<SubProductInner>> beginPutAsyncSubResource(@BodyParam("application/json; charset=utf-8") SubProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putsubresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<SubProductInner>> putAsyncSubResource(@BodyParam("application/json; charset=utf-8") SubProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putsubresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<SubProductInner>> resumePutAsyncSubResource(OperationDescription operationDescription);

        @Delete("lro/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginDeleteProvisioning202Accepted200Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteProvisioning202Accepted200SucceededResponse> deleteProvisioning202Accepted200Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumeDeleteProvisioning202Accepted200Succeeded(OperationDescription operationDescription);

        @Delete("lro/delete/provisioning/202/deleting/200/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginDeleteProvisioning202DeletingFailed200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/deleting/200/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteProvisioning202DeletingFailed200Response> deleteProvisioning202DeletingFailed200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/deleting/200/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumeDeleteProvisioning202DeletingFailed200(OperationDescription operationDescription);

        @Delete("lro/delete/provisioning/202/deleting/200/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginDeleteProvisioning202Deletingcanceled200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/deleting/200/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteProvisioning202Deletingcanceled200Response> deleteProvisioning202Deletingcanceled200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/deleting/200/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumeDeleteProvisioning202Deletingcanceled200(OperationDescription operationDescription);

        @Delete("lro/delete/204/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDelete204Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/204/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<VoidResponse> delete204Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/204/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDelete204Succeeded(OperationDescription operationDescription);

        @Delete("lro/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginDelete202Retry200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDelete202Retry200Response> delete202Retry200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumeDelete202Retry200(OperationDescription operationDescription);

        @Delete("lro/delete/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginDelete202NoRetry204(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDelete202NoRetry204Response> delete202NoRetry204(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumeDelete202NoRetry204(OperationDescription operationDescription);

        @Delete("lro/delete/noheader")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteNoHeaderInRetry(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/noheader")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteNoHeaderInRetryResponse> deleteNoHeaderInRetry(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/noheader")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteNoHeaderInRetry(OperationDescription operationDescription);

        @Delete("lro/deleteasync/noheader/202/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncNoHeaderInRetry(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/noheader/202/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncNoHeaderInRetryResponse> deleteAsyncNoHeaderInRetry(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/noheader/202/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncNoHeaderInRetry(OperationDescription operationDescription);

        @Delete("lro/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncRetrySucceededResponse> deleteAsyncRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncRetrySucceeded(OperationDescription operationDescription);

        @Delete("lro/deleteasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncNoRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncNoRetrySucceededResponse> deleteAsyncNoRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncNoRetrySucceeded(OperationDescription operationDescription);

        @Delete("lro/deleteasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncRetryFailed(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncRetryFailedResponse> deleteAsyncRetryFailed(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncRetryFailed(OperationDescription operationDescription);

        @Delete("lro/deleteasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncRetrycanceled(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncRetrycanceledResponse> deleteAsyncRetrycanceled(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncRetrycanceled(OperationDescription operationDescription);

        @Post("lro/post/payload/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<SkuInner>> beginPost200WithPayload(@HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/payload/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<SkuInner>> post200WithPayload(@HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/payload/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<SkuInner>> resumePost200WithPayload(OperationDescription operationDescription);

        @Post("lro/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginPost202Retry200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPost202Retry200Response> post202Retry200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumePost202Retry200(OperationDescription operationDescription);

        @Post("lro/post/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPost202NoRetry204(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPost202NoRetry204Response> post202NoRetry204(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePost202NoRetry204(OperationDescription operationDescription);

        @Post("lro/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPostAsyncRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPostAsyncRetrySucceededResponse> postAsyncRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePostAsyncRetrySucceeded(OperationDescription operationDescription);

        @Post("lro/postasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPostAsyncNoRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPostAsyncNoRetrySucceededResponse> postAsyncNoRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePostAsyncNoRetrySucceeded(OperationDescription operationDescription);

        @Post("lro/postasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginPostAsyncRetryFailed(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPostAsyncRetryFailedResponse> postAsyncRetryFailed(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumePostAsyncRetryFailed(OperationDescription operationDescription);

        @Post("lro/postasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginPostAsyncRetrycanceled(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPostAsyncRetrycanceledResponse> postAsyncRetrycanceled(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumePostAsyncRetrycanceled(OperationDescription operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut200Succeeded() {
        return beginPut200SucceededAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut200SucceededAsync() {
        final ProductInner product = null;
        return service.beginPut200Succeeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut200Succeeded(ProductInner product) {
        return beginPut200SucceededAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut200SucceededAsync(ProductInner product) {
        return service.beginPut200Succeeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put200Succeeded() {
        return put200SucceededAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put200SucceededWithRestResponseAsync() {
        final ProductInner product = null;
        return service.put200Succeeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put200SucceededAsync() {
        return put200SucceededWithRestResponseAsync()
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put200Succeeded(ProductInner product) {
        return put200SucceededAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put200SucceededWithRestResponseAsync(ProductInner product) {
        return service.put200Succeeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put200SucceededAsync(ProductInner product) {
        return put200SucceededWithRestResponseAsync(product)
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePut200Succeeded(OperationDescription operationDescription) {
        return service.resumePut200Succeeded(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut200SucceededNoState() {
        return beginPut200SucceededNoStateAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut200SucceededNoStateAsync() {
        final ProductInner product = null;
        return service.beginPut200SucceededNoState(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut200SucceededNoState(ProductInner product) {
        return beginPut200SucceededNoStateAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut200SucceededNoStateAsync(ProductInner product) {
        return service.beginPut200SucceededNoState(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put200SucceededNoState() {
        return put200SucceededNoStateAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put200SucceededNoStateWithRestResponseAsync() {
        final ProductInner product = null;
        return service.put200SucceededNoState(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put200SucceededNoStateAsync() {
        return put200SucceededNoStateWithRestResponseAsync()
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put200SucceededNoState(ProductInner product) {
        return put200SucceededNoStateAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put200SucceededNoStateWithRestResponseAsync(ProductInner product) {
        return service.put200SucceededNoState(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put200SucceededNoStateAsync(ProductInner product) {
        return put200SucceededNoStateWithRestResponseAsync(product)
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePut200SucceededNoState(OperationDescription operationDescription) {
        return service.resumePut200SucceededNoState(operationDescription);
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut202Retry200() {
        return beginPut202Retry200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut202Retry200Async() {
        final ProductInner product = null;
        return service.beginPut202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut202Retry200(ProductInner product) {
        return beginPut202Retry200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut202Retry200Async(ProductInner product) {
        return service.beginPut202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put202Retry200() {
        return put202Retry200Async().block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put202Retry200WithRestResponseAsync() {
        final ProductInner product = null;
        return service.put202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put202Retry200Async() {
        return put202Retry200WithRestResponseAsync()
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put202Retry200(ProductInner product) {
        return put202Retry200Async(product).block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put202Retry200WithRestResponseAsync(ProductInner product) {
        return service.put202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put202Retry200Async(ProductInner product) {
        return put202Retry200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePut202Retry200(OperationDescription operationDescription) {
        return service.resumePut202Retry200(operationDescription);
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut201CreatingSucceeded200() {
        return beginPut201CreatingSucceeded200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut201CreatingSucceeded200Async() {
        final ProductInner product = null;
        return service.beginPut201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut201CreatingSucceeded200(ProductInner product) {
        return beginPut201CreatingSucceeded200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut201CreatingSucceeded200Async(ProductInner product) {
        return service.beginPut201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put201CreatingSucceeded200() {
        return put201CreatingSucceeded200Async().block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put201CreatingSucceeded200WithRestResponseAsync() {
        final ProductInner product = null;
        return service.put201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put201CreatingSucceeded200Async() {
        return put201CreatingSucceeded200WithRestResponseAsync()
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put201CreatingSucceeded200(ProductInner product) {
        return put201CreatingSucceeded200Async(product).block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put201CreatingSucceeded200WithRestResponseAsync(ProductInner product) {
        return service.put201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put201CreatingSucceeded200Async(ProductInner product) {
        return put201CreatingSucceeded200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePut201CreatingSucceeded200(OperationDescription operationDescription) {
        return service.resumePut201CreatingSucceeded200(operationDescription);
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut200UpdatingSucceeded204() {
        return beginPut200UpdatingSucceeded204Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut200UpdatingSucceeded204Async() {
        final ProductInner product = null;
        return service.beginPut200UpdatingSucceeded204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut200UpdatingSucceeded204(ProductInner product) {
        return beginPut200UpdatingSucceeded204Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut200UpdatingSucceeded204Async(ProductInner product) {
        return service.beginPut200UpdatingSucceeded204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put200UpdatingSucceeded204() {
        return put200UpdatingSucceeded204Async().block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put200UpdatingSucceeded204WithRestResponseAsync() {
        final ProductInner product = null;
        return service.put200UpdatingSucceeded204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put200UpdatingSucceeded204Async() {
        return put200UpdatingSucceeded204WithRestResponseAsync()
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put200UpdatingSucceeded204(ProductInner product) {
        return put200UpdatingSucceeded204Async(product).block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put200UpdatingSucceeded204WithRestResponseAsync(ProductInner product) {
        return service.put200UpdatingSucceeded204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put200UpdatingSucceeded204Async(ProductInner product) {
        return put200UpdatingSucceeded204WithRestResponseAsync(product)
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePut200UpdatingSucceeded204(OperationDescription operationDescription) {
        return service.resumePut200UpdatingSucceeded204(operationDescription);
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut201CreatingFailed200() {
        return beginPut201CreatingFailed200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut201CreatingFailed200Async() {
        final ProductInner product = null;
        return service.beginPut201CreatingFailed200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut201CreatingFailed200(ProductInner product) {
        return beginPut201CreatingFailed200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut201CreatingFailed200Async(ProductInner product) {
        return service.beginPut201CreatingFailed200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put201CreatingFailed200() {
        return put201CreatingFailed200Async().block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put201CreatingFailed200WithRestResponseAsync() {
        final ProductInner product = null;
        return service.put201CreatingFailed200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put201CreatingFailed200Async() {
        return put201CreatingFailed200WithRestResponseAsync()
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put201CreatingFailed200(ProductInner product) {
        return put201CreatingFailed200Async(product).block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put201CreatingFailed200WithRestResponseAsync(ProductInner product) {
        return service.put201CreatingFailed200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put201CreatingFailed200Async(ProductInner product) {
        return put201CreatingFailed200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePut201CreatingFailed200(OperationDescription operationDescription) {
        return service.resumePut201CreatingFailed200(operationDescription);
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut200Acceptedcanceled200() {
        return beginPut200Acceptedcanceled200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut200Acceptedcanceled200Async() {
        final ProductInner product = null;
        return service.beginPut200Acceptedcanceled200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut200Acceptedcanceled200(ProductInner product) {
        return beginPut200Acceptedcanceled200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut200Acceptedcanceled200Async(ProductInner product) {
        return service.beginPut200Acceptedcanceled200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put200Acceptedcanceled200() {
        return put200Acceptedcanceled200Async().block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put200Acceptedcanceled200WithRestResponseAsync() {
        final ProductInner product = null;
        return service.put200Acceptedcanceled200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put200Acceptedcanceled200Async() {
        return put200Acceptedcanceled200WithRestResponseAsync()
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put200Acceptedcanceled200(ProductInner product) {
        return put200Acceptedcanceled200Async(product).block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put200Acceptedcanceled200WithRestResponseAsync(ProductInner product) {
        return service.put200Acceptedcanceled200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put200Acceptedcanceled200Async(ProductInner product) {
        return put200Acceptedcanceled200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePut200Acceptedcanceled200(OperationDescription operationDescription) {
        return service.resumePut200Acceptedcanceled200(operationDescription);
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutNoHeaderInRetry() {
        return beginPutNoHeaderInRetryAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutNoHeaderInRetryAsync() {
        final ProductInner product = null;
        return service.beginPutNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutNoHeaderInRetry(ProductInner product) {
        return beginPutNoHeaderInRetryAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutNoHeaderInRetryAsync(ProductInner product) {
        return service.beginPutNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putNoHeaderInRetry() {
        return putNoHeaderInRetryAsync().block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutNoHeaderInRetryResponse> putNoHeaderInRetryWithRestResponseAsync() {
        final ProductInner product = null;
        return service.putNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putNoHeaderInRetryAsync() {
        return putNoHeaderInRetryWithRestResponseAsync()
            .flatMap((LROsPutNoHeaderInRetryResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putNoHeaderInRetry(ProductInner product) {
        return putNoHeaderInRetryAsync(product).block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutNoHeaderInRetryResponse> putNoHeaderInRetryWithRestResponseAsync(ProductInner product) {
        return service.putNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putNoHeaderInRetryAsync(ProductInner product) {
        return putNoHeaderInRetryWithRestResponseAsync(product)
            .flatMap((LROsPutNoHeaderInRetryResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePutNoHeaderInRetry(OperationDescription operationDescription) {
        return service.resumePutNoHeaderInRetry(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncRetrySucceeded() {
        return beginPutAsyncRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncRetrySucceededAsync() {
        final ProductInner product = null;
        return service.beginPutAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncRetrySucceeded(ProductInner product) {
        return beginPutAsyncRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncRetrySucceededAsync(ProductInner product) {
        return service.beginPutAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncRetrySucceeded() {
        return putAsyncRetrySucceededAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncRetrySucceededResponse> putAsyncRetrySucceededWithRestResponseAsync() {
        final ProductInner product = null;
        return service.putAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncRetrySucceededAsync() {
        return putAsyncRetrySucceededWithRestResponseAsync()
            .flatMap((LROsPutAsyncRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncRetrySucceeded(ProductInner product) {
        return putAsyncRetrySucceededAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncRetrySucceededResponse> putAsyncRetrySucceededWithRestResponseAsync(ProductInner product) {
        return service.putAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncRetrySucceededAsync(ProductInner product) {
        return putAsyncRetrySucceededWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePutAsyncRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePutAsyncRetrySucceeded(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncNoRetrySucceeded() {
        return beginPutAsyncNoRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncNoRetrySucceededAsync() {
        final ProductInner product = null;
        return service.beginPutAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncNoRetrySucceeded(ProductInner product) {
        return beginPutAsyncNoRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncNoRetrySucceededAsync(ProductInner product) {
        return service.beginPutAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncNoRetrySucceeded() {
        return putAsyncNoRetrySucceededAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoRetrySucceededResponse> putAsyncNoRetrySucceededWithRestResponseAsync() {
        final ProductInner product = null;
        return service.putAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncNoRetrySucceededAsync() {
        return putAsyncNoRetrySucceededWithRestResponseAsync()
            .flatMap((LROsPutAsyncNoRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncNoRetrySucceeded(ProductInner product) {
        return putAsyncNoRetrySucceededAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoRetrySucceededResponse> putAsyncNoRetrySucceededWithRestResponseAsync(ProductInner product) {
        return service.putAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncNoRetrySucceededAsync(ProductInner product) {
        return putAsyncNoRetrySucceededWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncNoRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePutAsyncNoRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePutAsyncNoRetrySucceeded(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncRetryFailed() {
        return beginPutAsyncRetryFailedAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncRetryFailedAsync() {
        final ProductInner product = null;
        return service.beginPutAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncRetryFailed(ProductInner product) {
        return beginPutAsyncRetryFailedAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncRetryFailedAsync(ProductInner product) {
        return service.beginPutAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncRetryFailed() {
        return putAsyncRetryFailedAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncRetryFailedResponse> putAsyncRetryFailedWithRestResponseAsync() {
        final ProductInner product = null;
        return service.putAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncRetryFailedAsync() {
        return putAsyncRetryFailedWithRestResponseAsync()
            .flatMap((LROsPutAsyncRetryFailedResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncRetryFailed(ProductInner product) {
        return putAsyncRetryFailedAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncRetryFailedResponse> putAsyncRetryFailedWithRestResponseAsync(ProductInner product) {
        return service.putAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncRetryFailedAsync(ProductInner product) {
        return putAsyncRetryFailedWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncRetryFailedResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePutAsyncRetryFailed(OperationDescription operationDescription) {
        return service.resumePutAsyncRetryFailed(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncNoRetrycanceled() {
        return beginPutAsyncNoRetrycanceledAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncNoRetrycanceledAsync() {
        final ProductInner product = null;
        return service.beginPutAsyncNoRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncNoRetrycanceled(ProductInner product) {
        return beginPutAsyncNoRetrycanceledAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncNoRetrycanceledAsync(ProductInner product) {
        return service.beginPutAsyncNoRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncNoRetrycanceled() {
        return putAsyncNoRetrycanceledAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoRetrycanceledResponse> putAsyncNoRetrycanceledWithRestResponseAsync() {
        final ProductInner product = null;
        return service.putAsyncNoRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncNoRetrycanceledAsync() {
        return putAsyncNoRetrycanceledWithRestResponseAsync()
            .flatMap((LROsPutAsyncNoRetrycanceledResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncNoRetrycanceled(ProductInner product) {
        return putAsyncNoRetrycanceledAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoRetrycanceledResponse> putAsyncNoRetrycanceledWithRestResponseAsync(ProductInner product) {
        return service.putAsyncNoRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncNoRetrycanceledAsync(ProductInner product) {
        return putAsyncNoRetrycanceledWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncNoRetrycanceledResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePutAsyncNoRetrycanceled(OperationDescription operationDescription) {
        return service.resumePutAsyncNoRetrycanceled(operationDescription);
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncNoHeaderInRetry() {
        return beginPutAsyncNoHeaderInRetryAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncNoHeaderInRetryAsync() {
        final ProductInner product = null;
        return service.beginPutAsyncNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncNoHeaderInRetry(ProductInner product) {
        return beginPutAsyncNoHeaderInRetryAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncNoHeaderInRetryAsync(ProductInner product) {
        return service.beginPutAsyncNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncNoHeaderInRetry() {
        return putAsyncNoHeaderInRetryAsync().block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoHeaderInRetryResponse> putAsyncNoHeaderInRetryWithRestResponseAsync() {
        final ProductInner product = null;
        return service.putAsyncNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncNoHeaderInRetryAsync() {
        return putAsyncNoHeaderInRetryWithRestResponseAsync()
            .flatMap((LROsPutAsyncNoHeaderInRetryResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncNoHeaderInRetry(ProductInner product) {
        return putAsyncNoHeaderInRetryAsync(product).block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoHeaderInRetryResponse> putAsyncNoHeaderInRetryWithRestResponseAsync(ProductInner product) {
        return service.putAsyncNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncNoHeaderInRetryAsync(ProductInner product) {
        return putAsyncNoHeaderInRetryWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncNoHeaderInRetryResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePutAsyncNoHeaderInRetry(OperationDescription operationDescription) {
        return service.resumePutAsyncNoHeaderInRetry(operationDescription);
    }

    /**
     * Long running put request with non resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner beginPutNonResource() {
        return beginPutNonResourceAsync().blockLast().result();
    }

    /**
     * Long running put request with non resource.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SkuInner>> beginPutNonResourceAsync() {
        final SkuInner sku = null;
        return service.beginPutNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner beginPutNonResource(SkuInner sku) {
        return beginPutNonResourceAsync(sku).blockLast().result();
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SkuInner>> beginPutNonResourceAsync(SkuInner sku) {
        return service.beginPutNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner putNonResource() {
        return putNonResourceAsync().block();
    }

    /**
     * Long running put request with non resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SkuInner>> putNonResourceWithRestResponseAsync() {
        final SkuInner sku = null;
        return service.putNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SkuInner> putNonResourceAsync() {
        return putNonResourceWithRestResponseAsync()
            .flatMap((SimpleResponse<SkuInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner putNonResource(SkuInner sku) {
        return putNonResourceAsync(sku).block();
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SkuInner>> putNonResourceWithRestResponseAsync(SkuInner sku) {
        return service.putNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SkuInner> putNonResourceAsync(SkuInner sku) {
        return putNonResourceWithRestResponseAsync(sku)
            .flatMap((SimpleResponse<SkuInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with non resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SkuInner>> resumePutNonResource(OperationDescription operationDescription) {
        return service.resumePutNonResource(operationDescription);
    }

    /**
     * Long running put request with non resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner beginPutAsyncNonResource() {
        return beginPutAsyncNonResourceAsync().blockLast().result();
    }

    /**
     * Long running put request with non resource.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SkuInner>> beginPutAsyncNonResourceAsync() {
        final SkuInner sku = null;
        return service.beginPutAsyncNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner beginPutAsyncNonResource(SkuInner sku) {
        return beginPutAsyncNonResourceAsync(sku).blockLast().result();
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SkuInner>> beginPutAsyncNonResourceAsync(SkuInner sku) {
        return service.beginPutAsyncNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner putAsyncNonResource() {
        return putAsyncNonResourceAsync().block();
    }

    /**
     * Long running put request with non resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SkuInner>> putAsyncNonResourceWithRestResponseAsync() {
        final SkuInner sku = null;
        return service.putAsyncNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SkuInner> putAsyncNonResourceAsync() {
        return putAsyncNonResourceWithRestResponseAsync()
            .flatMap((SimpleResponse<SkuInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner putAsyncNonResource(SkuInner sku) {
        return putAsyncNonResourceAsync(sku).block();
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SkuInner>> putAsyncNonResourceWithRestResponseAsync(SkuInner sku) {
        return service.putAsyncNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SkuInner> putAsyncNonResourceAsync(SkuInner sku) {
        return putAsyncNonResourceWithRestResponseAsync(sku)
            .flatMap((SimpleResponse<SkuInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with non resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SkuInner>> resumePutAsyncNonResource(OperationDescription operationDescription) {
        return service.resumePutAsyncNonResource(operationDescription);
    }

    /**
     * Long running put request with sub resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProductInner beginPutSubResource() {
        return beginPutSubResourceAsync().blockLast().result();
    }

    /**
     * Long running put request with sub resource.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProductInner>> beginPutSubResourceAsync() {
        final SubProductInner product = null;
        return service.beginPutSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProductInner beginPutSubResource(SubProductInner product) {
        return beginPutSubResourceAsync(product).blockLast().result();
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProductInner>> beginPutSubResourceAsync(SubProductInner product) {
        return service.beginPutSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProductInner putSubResource() {
        return putSubResourceAsync().block();
    }

    /**
     * Long running put request with sub resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SubProductInner>> putSubResourceWithRestResponseAsync() {
        final SubProductInner product = null;
        return service.putSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubProductInner> putSubResourceAsync() {
        return putSubResourceWithRestResponseAsync()
            .flatMap((SimpleResponse<SubProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProductInner putSubResource(SubProductInner product) {
        return putSubResourceAsync(product).block();
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SubProductInner>> putSubResourceWithRestResponseAsync(SubProductInner product) {
        return service.putSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubProductInner> putSubResourceAsync(SubProductInner product) {
        return putSubResourceWithRestResponseAsync(product)
            .flatMap((SimpleResponse<SubProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with sub resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProductInner>> resumePutSubResource(OperationDescription operationDescription) {
        return service.resumePutSubResource(operationDescription);
    }

    /**
     * Long running put request with sub resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProductInner beginPutAsyncSubResource() {
        return beginPutAsyncSubResourceAsync().blockLast().result();
    }

    /**
     * Long running put request with sub resource.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProductInner>> beginPutAsyncSubResourceAsync() {
        final SubProductInner product = null;
        return service.beginPutAsyncSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProductInner beginPutAsyncSubResource(SubProductInner product) {
        return beginPutAsyncSubResourceAsync(product).blockLast().result();
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProductInner>> beginPutAsyncSubResourceAsync(SubProductInner product) {
        return service.beginPutAsyncSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProductInner putAsyncSubResource() {
        return putAsyncSubResourceAsync().block();
    }

    /**
     * Long running put request with sub resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SubProductInner>> putAsyncSubResourceWithRestResponseAsync() {
        final SubProductInner product = null;
        return service.putAsyncSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubProductInner> putAsyncSubResourceAsync() {
        return putAsyncSubResourceWithRestResponseAsync()
            .flatMap((SimpleResponse<SubProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProductInner putAsyncSubResource(SubProductInner product) {
        return putAsyncSubResourceAsync(product).block();
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SubProductInner>> putAsyncSubResourceWithRestResponseAsync(SubProductInner product) {
        return service.putAsyncSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubProductInner> putAsyncSubResourceAsync(SubProductInner product) {
        return putAsyncSubResourceWithRestResponseAsync(product)
            .flatMap((SimpleResponse<SubProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with sub resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProductInner>> resumePutAsyncSubResource(OperationDescription operationDescription) {
        return service.resumePutAsyncSubResource(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginDeleteProvisioning202Accepted200Succeeded() {
        return beginDeleteProvisioning202Accepted200SucceededAsync().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginDeleteProvisioning202Accepted200SucceededAsync() {
        return service.beginDeleteProvisioning202Accepted200Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner deleteProvisioning202Accepted200Succeeded() {
        return deleteProvisioning202Accepted200SucceededAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteProvisioning202Accepted200SucceededResponse> deleteProvisioning202Accepted200SucceededWithRestResponseAsync() {
        return service.deleteProvisioning202Accepted200Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> deleteProvisioning202Accepted200SucceededAsync() {
        return deleteProvisioning202Accepted200SucceededWithRestResponseAsync()
            .flatMap((LROsDeleteProvisioning202Accepted200SucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumeDeleteProvisioning202Accepted200Succeeded(OperationDescription operationDescription) {
        return service.resumeDeleteProvisioning202Accepted200Succeeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginDeleteProvisioning202DeletingFailed200() {
        return beginDeleteProvisioning202DeletingFailed200Async().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginDeleteProvisioning202DeletingFailed200Async() {
        return service.beginDeleteProvisioning202DeletingFailed200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner deleteProvisioning202DeletingFailed200() {
        return deleteProvisioning202DeletingFailed200Async().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteProvisioning202DeletingFailed200Response> deleteProvisioning202DeletingFailed200WithRestResponseAsync() {
        return service.deleteProvisioning202DeletingFailed200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> deleteProvisioning202DeletingFailed200Async() {
        return deleteProvisioning202DeletingFailed200WithRestResponseAsync()
            .flatMap((LROsDeleteProvisioning202DeletingFailed200Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumeDeleteProvisioning202DeletingFailed200(OperationDescription operationDescription) {
        return service.resumeDeleteProvisioning202DeletingFailed200(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginDeleteProvisioning202Deletingcanceled200() {
        return beginDeleteProvisioning202Deletingcanceled200Async().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginDeleteProvisioning202Deletingcanceled200Async() {
        return service.beginDeleteProvisioning202Deletingcanceled200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner deleteProvisioning202Deletingcanceled200() {
        return deleteProvisioning202Deletingcanceled200Async().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteProvisioning202Deletingcanceled200Response> deleteProvisioning202Deletingcanceled200WithRestResponseAsync() {
        return service.deleteProvisioning202Deletingcanceled200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> deleteProvisioning202Deletingcanceled200Async() {
        return deleteProvisioning202Deletingcanceled200WithRestResponseAsync()
            .flatMap((LROsDeleteProvisioning202Deletingcanceled200Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumeDeleteProvisioning202Deletingcanceled200(OperationDescription operationDescription) {
        return service.resumeDeleteProvisioning202Deletingcanceled200(operationDescription);
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDelete204Succeeded() {
        beginDelete204SucceededAsync().blockLast();
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDelete204SucceededAsync() {
        return service.beginDelete204Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete204Succeeded() {
        delete204SucceededAsync().block();
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> delete204SucceededWithRestResponseAsync() {
        return service.delete204Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete204SucceededAsync() {
        return delete204SucceededWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Long running delete succeeds and returns right away (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDelete204Succeeded(OperationDescription operationDescription) {
        return service.resumeDelete204Succeeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginDelete202Retry200() {
        return beginDelete202Retry200Async().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginDelete202Retry200Async() {
        return service.beginDelete202Retry200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner delete202Retry200() {
        return delete202Retry200Async().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDelete202Retry200Response> delete202Retry200WithRestResponseAsync() {
        return service.delete202Retry200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> delete202Retry200Async() {
        return delete202Retry200WithRestResponseAsync()
            .flatMap((LROsDelete202Retry200Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumeDelete202Retry200(OperationDescription operationDescription) {
        return service.resumeDelete202Retry200(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginDelete202NoRetry204() {
        return beginDelete202NoRetry204Async().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginDelete202NoRetry204Async() {
        return service.beginDelete202NoRetry204(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner delete202NoRetry204() {
        return delete202NoRetry204Async().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDelete202NoRetry204Response> delete202NoRetry204WithRestResponseAsync() {
        return service.delete202NoRetry204(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> delete202NoRetry204Async() {
        return delete202NoRetry204WithRestResponseAsync()
            .flatMap((LROsDelete202NoRetry204Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumeDelete202NoRetry204(OperationDescription operationDescription) {
        return service.resumeDelete202NoRetry204(operationDescription);
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteNoHeaderInRetry() {
        beginDeleteNoHeaderInRetryAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteNoHeaderInRetryAsync() {
        return service.beginDeleteNoHeaderInRetry(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNoHeaderInRetry() {
        deleteNoHeaderInRetryAsync().block();
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteNoHeaderInRetryResponse> deleteNoHeaderInRetryWithRestResponseAsync() {
        return service.deleteNoHeaderInRetry(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteNoHeaderInRetryAsync() {
        return deleteNoHeaderInRetryWithRestResponseAsync()
            .flatMap((LROsDeleteNoHeaderInRetryResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteNoHeaderInRetry(OperationDescription operationDescription) {
        return service.resumeDeleteNoHeaderInRetry(operationDescription);
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncNoHeaderInRetry() {
        beginDeleteAsyncNoHeaderInRetryAsync().blockLast();
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncNoHeaderInRetryAsync() {
        return service.beginDeleteAsyncNoHeaderInRetry(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncNoHeaderInRetry() {
        deleteAsyncNoHeaderInRetryAsync().block();
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncNoHeaderInRetryResponse> deleteAsyncNoHeaderInRetryWithRestResponseAsync() {
        return service.deleteAsyncNoHeaderInRetry(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncNoHeaderInRetryAsync() {
        return deleteAsyncNoHeaderInRetryWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncNoHeaderInRetryResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncNoHeaderInRetry(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncNoHeaderInRetry(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncRetrySucceeded() {
        beginDeleteAsyncRetrySucceededAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncRetrySucceededAsync() {
        return service.beginDeleteAsyncRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncRetrySucceeded() {
        deleteAsyncRetrySucceededAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncRetrySucceededResponse> deleteAsyncRetrySucceededWithRestResponseAsync() {
        return service.deleteAsyncRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncRetrySucceededAsync() {
        return deleteAsyncRetrySucceededWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncRetrySucceededResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncRetrySucceeded(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncRetrySucceeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncNoRetrySucceeded() {
        beginDeleteAsyncNoRetrySucceededAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncNoRetrySucceededAsync() {
        return service.beginDeleteAsyncNoRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncNoRetrySucceeded() {
        deleteAsyncNoRetrySucceededAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncNoRetrySucceededResponse> deleteAsyncNoRetrySucceededWithRestResponseAsync() {
        return service.deleteAsyncNoRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncNoRetrySucceededAsync() {
        return deleteAsyncNoRetrySucceededWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncNoRetrySucceededResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncNoRetrySucceeded(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncNoRetrySucceeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncRetryFailed() {
        beginDeleteAsyncRetryFailedAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncRetryFailedAsync() {
        return service.beginDeleteAsyncRetryFailed(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncRetryFailed() {
        deleteAsyncRetryFailedAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncRetryFailedResponse> deleteAsyncRetryFailedWithRestResponseAsync() {
        return service.deleteAsyncRetryFailed(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncRetryFailedAsync() {
        return deleteAsyncRetryFailedWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncRetryFailedResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncRetryFailed(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncRetryFailed(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncRetrycanceled() {
        beginDeleteAsyncRetrycanceledAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncRetrycanceledAsync() {
        return service.beginDeleteAsyncRetrycanceled(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncRetrycanceled() {
        deleteAsyncRetrycanceledAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncRetrycanceledResponse> deleteAsyncRetrycanceledWithRestResponseAsync() {
        return service.deleteAsyncRetrycanceled(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncRetrycanceledAsync() {
        return deleteAsyncRetrycanceledWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncRetrycanceledResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncRetrycanceled(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncRetrycanceled(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner beginPost200WithPayload() {
        return beginPost200WithPayloadAsync().blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SkuInner>> beginPost200WithPayloadAsync() {
        return service.beginPost200WithPayload(this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SkuInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SkuInner post200WithPayload() {
        return post200WithPayloadAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SkuInner>> post200WithPayloadWithRestResponseAsync() {
        return service.post200WithPayload(this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SkuInner> post200WithPayloadAsync() {
        return post200WithPayloadWithRestResponseAsync()
            .flatMap((SimpleResponse<SkuInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SkuInner>> resumePost200WithPayload(OperationDescription operationDescription) {
        return service.resumePost200WithPayload(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPost202Retry200() {
        beginPost202Retry200Async().blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPost202Retry200Async() {
        final ProductInner product = null;
        return service.beginPost202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPost202Retry200(ProductInner product) {
        beginPost202Retry200Async(product).blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPost202Retry200Async(ProductInner product) {
        return service.beginPost202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post202Retry200() {
        post202Retry200Async().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPost202Retry200Response> post202Retry200WithRestResponseAsync() {
        final ProductInner product = null;
        return service.post202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post202Retry200Async() {
        return post202Retry200WithRestResponseAsync()
            .flatMap((LROsPost202Retry200Response res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post202Retry200(ProductInner product) {
        post202Retry200Async(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPost202Retry200Response> post202Retry200WithRestResponseAsync(ProductInner product) {
        return service.post202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post202Retry200Async(ProductInner product) {
        return post202Retry200WithRestResponseAsync(product)
            .flatMap((LROsPost202Retry200Response res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumePost202Retry200(OperationDescription operationDescription) {
        return service.resumePost202Retry200(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPost202NoRetry204() {
        return beginPost202NoRetry204Async().blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPost202NoRetry204Async() {
        final ProductInner product = null;
        return service.beginPost202NoRetry204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPost202NoRetry204(ProductInner product) {
        return beginPost202NoRetry204Async(product).blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPost202NoRetry204Async(ProductInner product) {
        return service.beginPost202NoRetry204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner post202NoRetry204() {
        return post202NoRetry204Async().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPost202NoRetry204Response> post202NoRetry204WithRestResponseAsync() {
        final ProductInner product = null;
        return service.post202NoRetry204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> post202NoRetry204Async() {
        return post202NoRetry204WithRestResponseAsync()
            .flatMap((LROsPost202NoRetry204Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner post202NoRetry204(ProductInner product) {
        return post202NoRetry204Async(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPost202NoRetry204Response> post202NoRetry204WithRestResponseAsync(ProductInner product) {
        return service.post202NoRetry204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> post202NoRetry204Async(ProductInner product) {
        return post202NoRetry204WithRestResponseAsync(product)
            .flatMap((LROsPost202NoRetry204Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePost202NoRetry204(OperationDescription operationDescription) {
        return service.resumePost202NoRetry204(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPostAsyncRetrySucceeded() {
        return beginPostAsyncRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPostAsyncRetrySucceededAsync() {
        final ProductInner product = null;
        return service.beginPostAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPostAsyncRetrySucceeded(ProductInner product) {
        return beginPostAsyncRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPostAsyncRetrySucceededAsync(ProductInner product) {
        return service.beginPostAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner postAsyncRetrySucceeded() {
        return postAsyncRetrySucceededAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetrySucceededResponse> postAsyncRetrySucceededWithRestResponseAsync() {
        final ProductInner product = null;
        return service.postAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> postAsyncRetrySucceededAsync() {
        return postAsyncRetrySucceededWithRestResponseAsync()
            .flatMap((LROsPostAsyncRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner postAsyncRetrySucceeded(ProductInner product) {
        return postAsyncRetrySucceededAsync(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetrySucceededResponse> postAsyncRetrySucceededWithRestResponseAsync(ProductInner product) {
        return service.postAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> postAsyncRetrySucceededAsync(ProductInner product) {
        return postAsyncRetrySucceededWithRestResponseAsync(product)
            .flatMap((LROsPostAsyncRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePostAsyncRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePostAsyncRetrySucceeded(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPostAsyncNoRetrySucceeded() {
        return beginPostAsyncNoRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPostAsyncNoRetrySucceededAsync() {
        final ProductInner product = null;
        return service.beginPostAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPostAsyncNoRetrySucceeded(ProductInner product) {
        return beginPostAsyncNoRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPostAsyncNoRetrySucceededAsync(ProductInner product) {
        return service.beginPostAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner postAsyncNoRetrySucceeded() {
        return postAsyncNoRetrySucceededAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncNoRetrySucceededResponse> postAsyncNoRetrySucceededWithRestResponseAsync() {
        final ProductInner product = null;
        return service.postAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> postAsyncNoRetrySucceededAsync() {
        return postAsyncNoRetrySucceededWithRestResponseAsync()
            .flatMap((LROsPostAsyncNoRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner postAsyncNoRetrySucceeded(ProductInner product) {
        return postAsyncNoRetrySucceededAsync(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncNoRetrySucceededResponse> postAsyncNoRetrySucceededWithRestResponseAsync(ProductInner product) {
        return service.postAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> postAsyncNoRetrySucceededAsync(ProductInner product) {
        return postAsyncNoRetrySucceededWithRestResponseAsync(product)
            .flatMap((LROsPostAsyncNoRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePostAsyncNoRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePostAsyncNoRetrySucceeded(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRetryFailed() {
        beginPostAsyncRetryFailedAsync().blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRetryFailedAsync() {
        final ProductInner product = null;
        return service.beginPostAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRetryFailed(ProductInner product) {
        beginPostAsyncRetryFailedAsync(product).blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRetryFailedAsync(ProductInner product) {
        return service.beginPostAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRetryFailed() {
        postAsyncRetryFailedAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetryFailedResponse> postAsyncRetryFailedWithRestResponseAsync() {
        final ProductInner product = null;
        return service.postAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRetryFailedAsync() {
        return postAsyncRetryFailedWithRestResponseAsync()
            .flatMap((LROsPostAsyncRetryFailedResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRetryFailed(ProductInner product) {
        postAsyncRetryFailedAsync(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetryFailedResponse> postAsyncRetryFailedWithRestResponseAsync(ProductInner product) {
        return service.postAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRetryFailedAsync(ProductInner product) {
        return postAsyncRetryFailedWithRestResponseAsync(product)
            .flatMap((LROsPostAsyncRetryFailedResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumePostAsyncRetryFailed(OperationDescription operationDescription) {
        return service.resumePostAsyncRetryFailed(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRetrycanceled() {
        beginPostAsyncRetrycanceledAsync().blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRetrycanceledAsync() {
        final ProductInner product = null;
        return service.beginPostAsyncRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRetrycanceled(ProductInner product) {
        beginPostAsyncRetrycanceledAsync(product).blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRetrycanceledAsync(ProductInner product) {
        return service.beginPostAsyncRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRetrycanceled() {
        postAsyncRetrycanceledAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetrycanceledResponse> postAsyncRetrycanceledWithRestResponseAsync() {
        final ProductInner product = null;
        return service.postAsyncRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRetrycanceledAsync() {
        return postAsyncRetrycanceledWithRestResponseAsync()
            .flatMap((LROsPostAsyncRetrycanceledResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRetrycanceled(ProductInner product) {
        postAsyncRetrycanceledAsync(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetrycanceledResponse> postAsyncRetrycanceledWithRestResponseAsync(ProductInner product) {
        return service.postAsyncRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRetrycanceledAsync(ProductInner product) {
        return postAsyncRetrycanceledWithRestResponseAsync(product)
            .flatMap((LROsPostAsyncRetrycanceledResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumePostAsyncRetrycanceled(OperationDescription operationDescription) {
        return service.resumePostAsyncRetrycanceled(operationDescription);
    }
}
