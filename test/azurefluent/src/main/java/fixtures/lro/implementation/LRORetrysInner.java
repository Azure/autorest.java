// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.lro.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.implementation.OperationDescription;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.Delete;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.ResumeOperation;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import com.microsoft.azure.v3.AzureProxy;
import com.microsoft.azure.v3.CloudException;
import com.microsoft.azure.v3.OperationStatus;
import fixtures.lro.models.LRORetrysDelete202Retry200Response;
import fixtures.lro.models.LRORetrysDeleteAsyncRelativeRetrySucceededResponse;
import fixtures.lro.models.LRORetrysDeleteProvisioning202Accepted200SucceededResponse;
import fixtures.lro.models.LRORetrysPost202Retry200Response;
import fixtures.lro.models.LRORetrysPostAsyncRelativeRetrySucceededResponse;
import fixtures.lro.models.LRORetrysPutAsyncRelativeRetrySucceededResponse;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * LRORetrys.
 */
public final class LRORetrysInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private LRORetrysService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestLongRunningOperationTestServiceImpl client;

    /**
     * Initializes an instance of LRORetrysInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public LRORetrysInner(AutoRestLongRunningOperationTestServiceImpl client) {
        this.service = AzureProxy.create(LRORetrysService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestLongRunningOperationTestServiceLRORetrys to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestLongRunningOperationTestServiceLRORetrys")
    private interface LRORetrysService {
        @Put("lro/retryerror/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPut201CreatingSucceeded200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/retryerror/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<ProductInner>> put201CreatingSucceeded200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/retryerror/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePut201CreatingSucceeded200(OperationDescription operationDescription);

        @Put("lro/retryerror/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginPutAsyncRelativeRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/retryerror/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LRORetrysPutAsyncRelativeRetrySucceededResponse> putAsyncRelativeRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/retryerror/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumePutAsyncRelativeRetrySucceeded(OperationDescription operationDescription);

        @Delete("lro/retryerror/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<ProductInner>> beginDeleteProvisioning202Accepted200Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/retryerror/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LRORetrysDeleteProvisioning202Accepted200SucceededResponse> deleteProvisioning202Accepted200Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/retryerror/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<ProductInner>> resumeDeleteProvisioning202Accepted200Succeeded(OperationDescription operationDescription);

        @Delete("lro/retryerror/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDelete202Retry200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/retryerror/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LRORetrysDelete202Retry200Response> delete202Retry200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/retryerror/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDelete202Retry200(OperationDescription operationDescription);

        @Delete("lro/retryerror/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncRelativeRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/retryerror/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LRORetrysDeleteAsyncRelativeRetrySucceededResponse> deleteAsyncRelativeRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/retryerror/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncRelativeRetrySucceeded(OperationDescription operationDescription);

        @Post("lro/retryerror/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginPost202Retry200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/retryerror/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LRORetrysPost202Retry200Response> post202Retry200(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/retryerror/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumePost202Retry200(OperationDescription operationDescription);

        @Post("lro/retryerror/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginPostAsyncRelativeRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/retryerror/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LRORetrysPostAsyncRelativeRetrySucceededResponse> postAsyncRelativeRetrySucceeded(@BodyParam("application/json; charset=utf-8") ProductInner product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/retryerror/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumePostAsyncRelativeRetrySucceeded(OperationDescription operationDescription);
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut201CreatingSucceeded200() {
        return beginPut201CreatingSucceeded200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut201CreatingSucceeded200Async() {
        final ProductInner product = null;
        return service.beginPut201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPut201CreatingSucceeded200(ProductInner product) {
        return beginPut201CreatingSucceeded200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPut201CreatingSucceeded200Async(ProductInner product) {
        return service.beginPut201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put201CreatingSucceeded200() {
        return put201CreatingSucceeded200Async().block();
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put201CreatingSucceeded200WithRestResponseAsync() {
        final ProductInner product = null;
        return service.put201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put201CreatingSucceeded200Async() {
        return put201CreatingSucceeded200WithRestResponseAsync()
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner put201CreatingSucceeded200(ProductInner product) {
        return put201CreatingSucceeded200Async(product).block();
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProductInner>> put201CreatingSucceeded200WithRestResponseAsync(ProductInner product) {
        return service.put201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> put201CreatingSucceeded200Async(ProductInner product) {
        return put201CreatingSucceeded200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<ProductInner> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 500, then a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePut201CreatingSucceeded200(OperationDescription operationDescription) {
        return service.resumePut201CreatingSucceeded200(operationDescription);
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncRelativeRetrySucceeded() {
        return beginPutAsyncRelativeRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncRelativeRetrySucceededAsync() {
        final ProductInner product = null;
        return service.beginPutAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginPutAsyncRelativeRetrySucceeded(ProductInner product) {
        return beginPutAsyncRelativeRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginPutAsyncRelativeRetrySucceededAsync(ProductInner product) {
        return service.beginPutAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncRelativeRetrySucceeded() {
        return putAsyncRelativeRetrySucceededAsync().block();
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysPutAsyncRelativeRetrySucceededResponse> putAsyncRelativeRetrySucceededWithRestResponseAsync() {
        final ProductInner product = null;
        return service.putAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncRelativeRetrySucceededAsync() {
        return putAsyncRelativeRetrySucceededWithRestResponseAsync()
            .flatMap((LRORetrysPutAsyncRelativeRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner putAsyncRelativeRetrySucceeded(ProductInner product) {
        return putAsyncRelativeRetrySucceededAsync(product).block();
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysPutAsyncRelativeRetrySucceededResponse> putAsyncRelativeRetrySucceededWithRestResponseAsync(ProductInner product) {
        return service.putAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> putAsyncRelativeRetrySucceededAsync(ProductInner product) {
        return putAsyncRelativeRetrySucceededWithRestResponseAsync(product)
            .flatMap((LRORetrysPutAsyncRelativeRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 500, then a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumePutAsyncRelativeRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePutAsyncRelativeRetrySucceeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner beginDeleteProvisioning202Accepted200Succeeded() {
        return beginDeleteProvisioning202Accepted200SucceededAsync().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> beginDeleteProvisioning202Accepted200SucceededAsync() {
        return service.beginDeleteProvisioning202Accepted200Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ProductInner object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProductInner deleteProvisioning202Accepted200Succeeded() {
        return deleteProvisioning202Accepted200SucceededAsync().block();
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysDeleteProvisioning202Accepted200SucceededResponse> deleteProvisioning202Accepted200SucceededWithRestResponseAsync() {
        return service.deleteProvisioning202Accepted200Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProductInner> deleteProvisioning202Accepted200SucceededAsync() {
        return deleteProvisioning202Accepted200SucceededWithRestResponseAsync()
            .flatMap((LRORetrysDeleteProvisioning202Accepted200SucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 500, then a  202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<ProductInner>> resumeDeleteProvisioning202Accepted200Succeeded(OperationDescription operationDescription) {
        return service.resumeDeleteProvisioning202Accepted200Succeeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDelete202Retry200() {
        beginDelete202Retry200Async().blockLast();
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDelete202Retry200Async() {
        return service.beginDelete202Retry200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete202Retry200() {
        delete202Retry200Async().block();
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysDelete202Retry200Response> delete202Retry200WithRestResponseAsync() {
        return service.delete202Retry200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete202Retry200Async() {
        return delete202Retry200WithRestResponseAsync()
            .flatMap((LRORetrysDelete202Retry200Response res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDelete202Retry200(OperationDescription operationDescription) {
        return service.resumeDelete202Retry200(operationDescription);
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncRelativeRetrySucceeded() {
        beginDeleteAsyncRelativeRetrySucceededAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncRelativeRetrySucceededAsync() {
        return service.beginDeleteAsyncRelativeRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncRelativeRetrySucceeded() {
        deleteAsyncRelativeRetrySucceededAsync().block();
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysDeleteAsyncRelativeRetrySucceededResponse> deleteAsyncRelativeRetrySucceededWithRestResponseAsync() {
        return service.deleteAsyncRelativeRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncRelativeRetrySucceededAsync() {
        return deleteAsyncRelativeRetrySucceededWithRestResponseAsync()
            .flatMap((LRORetrysDeleteAsyncRelativeRetrySucceededResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 500, then a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncRelativeRetrySucceeded(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncRelativeRetrySucceeded(operationDescription);
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPost202Retry200() {
        beginPost202Retry200Async().blockLast();
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPost202Retry200Async() {
        final ProductInner product = null;
        return service.beginPost202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPost202Retry200(ProductInner product) {
        beginPost202Retry200Async(product).blockLast();
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPost202Retry200Async(ProductInner product) {
        return service.beginPost202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post202Retry200() {
        post202Retry200Async().block();
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysPost202Retry200Response> post202Retry200WithRestResponseAsync() {
        final ProductInner product = null;
        return service.post202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post202Retry200Async() {
        return post202Retry200WithRestResponseAsync()
            .flatMap((LRORetrysPost202Retry200Response res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post202Retry200(ProductInner product) {
        post202Retry200Async(product).block();
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysPost202Retry200Response> post202Retry200WithRestResponseAsync(ProductInner product) {
        return service.post202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post202Retry200Async(ProductInner product) {
        return post202Retry200WithRestResponseAsync(product)
            .flatMap((LRORetrysPost202Retry200Response res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumePost202Retry200(OperationDescription operationDescription) {
        return service.resumePost202Retry200(operationDescription);
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRelativeRetrySucceeded() {
        beginPostAsyncRelativeRetrySucceededAsync().blockLast();
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRelativeRetrySucceededAsync() {
        final ProductInner product = null;
        return service.beginPostAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRelativeRetrySucceeded(ProductInner product) {
        beginPostAsyncRelativeRetrySucceededAsync(product).blockLast();
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRelativeRetrySucceededAsync(ProductInner product) {
        return service.beginPostAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRelativeRetrySucceeded() {
        postAsyncRelativeRetrySucceededAsync().block();
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysPostAsyncRelativeRetrySucceededResponse> postAsyncRelativeRetrySucceededWithRestResponseAsync() {
        final ProductInner product = null;
        return service.postAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRelativeRetrySucceededAsync() {
        return postAsyncRelativeRetrySucceededWithRestResponseAsync()
            .flatMap((LRORetrysPostAsyncRelativeRetrySucceededResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRelativeRetrySucceeded(ProductInner product) {
        postAsyncRelativeRetrySucceededAsync(product).block();
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LRORetrysPostAsyncRelativeRetrySucceededResponse> postAsyncRelativeRetrySucceededWithRestResponseAsync(ProductInner product) {
        return service.postAsyncRelativeRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRelativeRetrySucceededAsync(ProductInner product) {
        return postAsyncRelativeRetrySucceededWithRestResponseAsync(product)
            .flatMap((LRORetrysPostAsyncRelativeRetrySucceededResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 500, then a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumePostAsyncRelativeRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePostAsyncRelativeRetrySucceeded(operationDescription);
    }
}
