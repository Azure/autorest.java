// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.azureparametergrouping.implementation;

import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.PathParam;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.QueryParam;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import com.microsoft.azure.v3.AzureProxy;
import fixtures.azureparametergrouping.ParameterGroupings;
import fixtures.azureparametergrouping.models.ErrorException;
import fixtures.azureparametergrouping.models.FirstParameterGroup;
import fixtures.azureparametergrouping.models.ParameterGroupingsPostMultiParamGroupsSecondParamGroup;
import fixtures.azureparametergrouping.models.ParameterGroupingsPostOptionalParameters;
import fixtures.azureparametergrouping.models.ParameterGroupingsPostRequiredParameters;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ParameterGroupings.
 */
public final class ParameterGroupingsImpl implements ParameterGroupings {
    /**
     * The proxy service used to perform REST calls.
     */
    private ParameterGroupingsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestParameterGroupingTestServiceImpl client;

    /**
     * Initializes an instance of ParameterGroupingsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ParameterGroupingsImpl(AutoRestParameterGroupingTestServiceImpl client) {
        this.service = AzureProxy.create(ParameterGroupingsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestParameterGroupingTestServiceParameterGroupings to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestParameterGroupingTestServiceParameterGroupings")
    private interface ParameterGroupingsService {
        @Post("parameterGrouping/postRequired/{path}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postRequired(@PathParam("path") String path, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") int body, @HeaderParam("customHeader") String customHeader, @QueryParam("query") Integer query);

        @Post("parameterGrouping/postOptional")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postOptional(@HeaderParam("accept-language") String acceptLanguage, @HeaderParam("customHeader") String customHeader, @QueryParam("query") Integer query);

        @Post("parameterGrouping/postMultipleParameterGroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postMultiParamGroups(@HeaderParam("accept-language") String acceptLanguage, @HeaderParam("header-one") String headerOne, @QueryParam("query-one") Integer queryOne, @HeaderParam("header-two") String headerTwo, @QueryParam("query-two") Integer queryTwo);

        @Post("parameterGrouping/sharedParameterGroupObject")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> postSharedParameterGroupObject(@HeaderParam("accept-language") String acceptLanguage, @HeaderParam("header-one") String headerOne, @QueryParam("query-one") Integer queryOne);
    }

    /**
     * Post a bunch of required parameters grouped.
     *
     * @param parameterGroupingsPostRequiredParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRequired(ParameterGroupingsPostRequiredParameters parameterGroupingsPostRequiredParameters) {
        postRequiredAsync(parameterGroupingsPostRequiredParameters).block();
    }

    /**
     * Post a bunch of required parameters grouped.
     *
     * @param parameterGroupingsPostRequiredParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postRequiredWithRestResponseAsync(ParameterGroupingsPostRequiredParameters parameterGroupingsPostRequiredParameters) {
        Integer body = parameterGroupingsPostRequiredParameters.body();
        String customHeader = parameterGroupingsPostRequiredParameters.customHeader();
        Integer query = parameterGroupingsPostRequiredParameters.query();
        String path = parameterGroupingsPostRequiredParameters.path();
        return service.postRequired(path, this.client.getAcceptLanguage(), body, customHeader, query);
    }

    /**
     * Post a bunch of required parameters grouped.
     *
     * @param parameterGroupingsPostRequiredParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postRequiredAsync(ParameterGroupingsPostRequiredParameters parameterGroupingsPostRequiredParameters) {
        return postRequiredWithRestResponseAsync(parameterGroupingsPostRequiredParameters)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post a bunch of optional parameters grouped.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptional() {
        postOptionalAsync().block();
    }

    /**
     * Post a bunch of optional parameters grouped.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalWithRestResponseAsync() {
        final String customHeader = null;
        final Integer query = 30;
        return service.postOptional(this.client.getAcceptLanguage(), customHeader, query);
    }

    /**
     * Post a bunch of optional parameters grouped.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalAsync() {
        return postOptionalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post a bunch of optional parameters grouped.
     *
     * @param parameterGroupingsPostOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postOptional(ParameterGroupingsPostOptionalParameters parameterGroupingsPostOptionalParameters) {
        postOptionalAsync(parameterGroupingsPostOptionalParameters).block();
    }

    /**
     * Post a bunch of optional parameters grouped.
     *
     * @param parameterGroupingsPostOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postOptionalWithRestResponseAsync(ParameterGroupingsPostOptionalParameters parameterGroupingsPostOptionalParameters) {
        String customHeader = null;
        if (parameterGroupingsPostOptionalParameters != null) {
            customHeader = parameterGroupingsPostOptionalParameters.customHeader();
        }
        Integer query = null;
        if (parameterGroupingsPostOptionalParameters != null) {
            query = parameterGroupingsPostOptionalParameters.query();
        }
        return service.postOptional(this.client.getAcceptLanguage(), customHeader, query);
    }

    /**
     * Post a bunch of optional parameters grouped.
     *
     * @param parameterGroupingsPostOptionalParameters Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postOptionalAsync(ParameterGroupingsPostOptionalParameters parameterGroupingsPostOptionalParameters) {
        return postOptionalWithRestResponseAsync(parameterGroupingsPostOptionalParameters)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post parameters from multiple different parameter groups.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postMultiParamGroups() {
        postMultiParamGroupsAsync().block();
    }

    /**
     * Post parameters from multiple different parameter groups.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postMultiParamGroupsWithRestResponseAsync() {
        final String headerOne = null;
        final Integer queryOne = 30;
        final String headerTwo = null;
        final Integer queryTwo = 30;
        return service.postMultiParamGroups(this.client.getAcceptLanguage(), headerOne, queryOne, headerTwo, queryTwo);
    }

    /**
     * Post parameters from multiple different parameter groups.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postMultiParamGroupsAsync() {
        return postMultiParamGroupsWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post parameters from multiple different parameter groups.
     *
     * @param firstParameterGroup Additional parameters for the operation.
     * @param parameterGroupingsPostMultiParamGroupsSecondParamGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postMultiParamGroups(FirstParameterGroup firstParameterGroup, ParameterGroupingsPostMultiParamGroupsSecondParamGroup parameterGroupingsPostMultiParamGroupsSecondParamGroup) {
        postMultiParamGroupsAsync(firstParameterGroup, parameterGroupingsPostMultiParamGroupsSecondParamGroup).block();
    }

    /**
     * Post parameters from multiple different parameter groups.
     *
     * @param firstParameterGroup Additional parameters for the operation.
     * @param parameterGroupingsPostMultiParamGroupsSecondParamGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postMultiParamGroupsWithRestResponseAsync(FirstParameterGroup firstParameterGroup, ParameterGroupingsPostMultiParamGroupsSecondParamGroup parameterGroupingsPostMultiParamGroupsSecondParamGroup) {
        String headerOne = null;
        if (firstParameterGroup != null) {
            headerOne = firstParameterGroup.headerOne();
        }
        Integer queryOne = null;
        if (firstParameterGroup != null) {
            queryOne = firstParameterGroup.queryOne();
        }
        String headerTwo = null;
        if (parameterGroupingsPostMultiParamGroupsSecondParamGroup != null) {
            headerTwo = parameterGroupingsPostMultiParamGroupsSecondParamGroup.headerTwo();
        }
        Integer queryTwo = null;
        if (parameterGroupingsPostMultiParamGroupsSecondParamGroup != null) {
            queryTwo = parameterGroupingsPostMultiParamGroupsSecondParamGroup.queryTwo();
        }
        return service.postMultiParamGroups(this.client.getAcceptLanguage(), headerOne, queryOne, headerTwo, queryTwo);
    }

    /**
     * Post parameters from multiple different parameter groups.
     *
     * @param firstParameterGroup Additional parameters for the operation.
     * @param parameterGroupingsPostMultiParamGroupsSecondParamGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postMultiParamGroupsAsync(FirstParameterGroup firstParameterGroup, ParameterGroupingsPostMultiParamGroupsSecondParamGroup parameterGroupingsPostMultiParamGroupsSecondParamGroup) {
        return postMultiParamGroupsWithRestResponseAsync(firstParameterGroup, parameterGroupingsPostMultiParamGroupsSecondParamGroup)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post parameters with a shared parameter group object.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postSharedParameterGroupObject() {
        postSharedParameterGroupObjectAsync().block();
    }

    /**
     * Post parameters with a shared parameter group object.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postSharedParameterGroupObjectWithRestResponseAsync() {
        final String headerOne = null;
        final Integer queryOne = 30;
        return service.postSharedParameterGroupObject(this.client.getAcceptLanguage(), headerOne, queryOne);
    }

    /**
     * Post parameters with a shared parameter group object.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postSharedParameterGroupObjectAsync() {
        return postSharedParameterGroupObjectWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post parameters with a shared parameter group object.
     *
     * @param firstParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postSharedParameterGroupObject(FirstParameterGroup firstParameterGroup) {
        postSharedParameterGroupObjectAsync(firstParameterGroup).block();
    }

    /**
     * Post parameters with a shared parameter group object.
     *
     * @param firstParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> postSharedParameterGroupObjectWithRestResponseAsync(FirstParameterGroup firstParameterGroup) {
        String headerOne = null;
        if (firstParameterGroup != null) {
            headerOne = firstParameterGroup.headerOne();
        }
        Integer queryOne = null;
        if (firstParameterGroup != null) {
            queryOne = firstParameterGroup.queryOne();
        }
        return service.postSharedParameterGroupObject(this.client.getAcceptLanguage(), headerOne, queryOne);
    }

    /**
     * Post parameters with a shared parameter group object.
     *
     * @param firstParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postSharedParameterGroupObjectAsync(FirstParameterGroup firstParameterGroup) {
        return postSharedParameterGroupObjectWithRestResponseAsync(firstParameterGroup)
            .flatMap((VoidResponse res) -> Mono.empty());
    }
}
