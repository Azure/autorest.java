// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.paging.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.PathParam;
import com.azure.core.implementation.annotation.QueryParam;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import com.microsoft.azure.v3.AzureProxy;
import com.microsoft.azure.v3.CloudException;
import com.microsoft.azure.v3.Page;
import com.microsoft.azure.v3.PagedList;
import fixtures.paging.Pagings;
import fixtures.paging.models.CustomParameterGroup;
import fixtures.paging.models.PageImpl;
import fixtures.paging.models.PageImpl1;
import fixtures.paging.models.PagingsGetMultiplePagesOptions;
import fixtures.paging.models.PagingsGetMultiplePagesWithOffsetNextOptions;
import fixtures.paging.models.PagingsGetMultiplePagesWithOffsetOptions;
import fixtures.paging.models.PagingsGetOdataMultiplePagesOptions;
import fixtures.paging.models.Product;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Pagings.
 */
public final class PagingsImpl implements Pagings {
    /**
     * The proxy service used to perform REST calls.
     */
    private PagingsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestPagingTestServiceImpl client;

    /**
     * Initializes an instance of PagingsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PagingsImpl(AutoRestPagingTestServiceImpl client) {
        this.service = AzureProxy.create(PagingsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestPagingTestServicePagings to be used by the proxy service to
     * perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestPagingTestServicePagings")
    private interface PagingsService {
        @Get("paging/single")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getSinglePages(@HeaderParam("accept-language") String acceptLanguage);

        @Get("paging/multiple")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePages(@HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @Get("paging/multiple/odata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl1<Product>>> getOdataMultiplePages(@HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @Get("paging/multiple/withpath/{offset}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesWithOffset(@PathParam("offset") int offset, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @Get("paging/multiple/retryfirst")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesRetryFirst(@HeaderParam("accept-language") String acceptLanguage);

        @Get("paging/multiple/retrysecond")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesRetrySecond(@HeaderParam("accept-language") String acceptLanguage);

        @Get("paging/single/failure")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getSinglePagesFailure(@HeaderParam("accept-language") String acceptLanguage);

        @Get("paging/multiple/failure")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesFailure(@HeaderParam("accept-language") String acceptLanguage);

        @Get("paging/multiple/failureuri")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesFailureUri(@HeaderParam("accept-language") String acceptLanguage);

        @Get("paging/multiple/fragment/{tenant}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl1<Product>>> getMultiplePagesFragmentNextLink(@PathParam("tenant") String tenant, @QueryParam("api_version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @Get("paging/multiple/fragmentwithgrouping/{tenant}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl1<Product>>> getMultiplePagesFragmentWithGroupingNextLink(@PathParam("tenant") String tenant, @HeaderParam("accept-language") String acceptLanguage, @QueryParam("api_version") String apiVersion);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl1<Product>>> nextFragment(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api_version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl1<Product>>> nextFragmentWithGrouping(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @QueryParam("api_version") String apiVersion);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getSinglePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl1<Product>>> getOdataMultiplePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesWithOffsetNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesRetryFirstNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesRetrySecondNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getSinglePagesFailureNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesFailureNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @Get("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<PageImpl<Product>>> getMultiplePagesFailureUriNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getSinglePages() {
        Page<Product> response = getSinglePagesSinglePageAsync().block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getSinglePagesNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getSinglePagesAsync() {
        return getSinglePagesSinglePageAsync()
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getSinglePagesNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getSinglePagesSinglePageAsync() {
        return service.getSinglePages(this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePages() {
        Page<Product> response = getMultiplePagesSinglePageAsync().block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesAsync() {
        return getMultiplePagesSinglePageAsync()
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesSinglePageAsync() {
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        return service.getMultiplePages(clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePages(String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions) {
        Page<Product> response = getMultiplePagesSinglePageAsync(clientRequestId, pagingsGetMultiplePagesOptions).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesAsync(String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions) {
        return getMultiplePagesSinglePageAsync(clientRequestId, pagingsGetMultiplePagesOptions)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesSinglePageAsync(String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions) {
        Integer maxresults = null;
        if (pagingsGetMultiplePagesOptions != null) {
            maxresults = pagingsGetMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetMultiplePagesOptions != null) {
            timeout = pagingsGetMultiplePagesOptions.timeout();
        }
        return service.getMultiplePages(clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getOdataMultiplePages() {
        Page<Product> response = getOdataMultiplePagesSinglePageAsync().block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getOdataMultiplePagesAsync() {
        return getOdataMultiplePagesSinglePageAsync()
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getOdataMultiplePagesSinglePageAsync() {
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        return service.getOdataMultiplePages(clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl1<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getOdataMultiplePages(String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions) {
        Page<Product> response = getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingsGetOdataMultiplePagesOptions).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getOdataMultiplePagesAsync(String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions) {
        return getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingsGetOdataMultiplePagesOptions)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getOdataMultiplePagesSinglePageAsync(String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions) {
        Integer maxresults = null;
        if (pagingsGetOdataMultiplePagesOptions != null) {
            maxresults = pagingsGetOdataMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetOdataMultiplePagesOptions != null) {
            timeout = pagingsGetOdataMultiplePagesOptions.timeout();
        }
        return service.getOdataMultiplePages(clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl1<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesWithOffset(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions) {
        Page<Product> response = getMultiplePagesWithOffsetSinglePageAsync(pagingsGetMultiplePagesWithOffsetOptions).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions = new PagingsGetMultiplePagesWithOffsetNextOptions();
                pagingsGetMultiplePagesWithOffsetNextOptions.maxresults(pagingsGetMultiplePagesWithOffsetOptions.maxresults());
                pagingsGetMultiplePagesWithOffsetNextOptions.timeout(pagingsGetMultiplePagesWithOffsetOptions.timeout());
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, pagingsGetMultiplePagesWithOffsetNextOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesWithOffsetAsync(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions) {
        return getMultiplePagesWithOffsetSinglePageAsync(pagingsGetMultiplePagesWithOffsetOptions)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions = new PagingsGetMultiplePagesWithOffsetNextOptions();
                pagingsGetMultiplePagesWithOffsetNextOptions.maxresults(pagingsGetMultiplePagesWithOffsetOptions.maxresults());
                pagingsGetMultiplePagesWithOffsetNextOptions.timeout(pagingsGetMultiplePagesWithOffsetOptions.timeout());
                return Flux.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink, null, pagingsGetMultiplePagesWithOffsetNextOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesWithOffsetSinglePageAsync(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions) {
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        Integer offset = pagingsGetMultiplePagesWithOffsetOptions.offset();
        return service.getMultiplePagesWithOffset(offset, clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesWithOffset(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId) {
        Page<Product> response = getMultiplePagesWithOffsetSinglePageAsync(pagingsGetMultiplePagesWithOffsetOptions, clientRequestId).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions = new PagingsGetMultiplePagesWithOffsetNextOptions();
                pagingsGetMultiplePagesWithOffsetNextOptions.maxresults(pagingsGetMultiplePagesWithOffsetOptions.maxresults());
                pagingsGetMultiplePagesWithOffsetNextOptions.timeout(pagingsGetMultiplePagesWithOffsetOptions.timeout());
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesWithOffsetAsync(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId) {
        return getMultiplePagesWithOffsetSinglePageAsync(pagingsGetMultiplePagesWithOffsetOptions, clientRequestId)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions = new PagingsGetMultiplePagesWithOffsetNextOptions();
                pagingsGetMultiplePagesWithOffsetNextOptions.maxresults(pagingsGetMultiplePagesWithOffsetOptions.maxresults());
                pagingsGetMultiplePagesWithOffsetNextOptions.timeout(pagingsGetMultiplePagesWithOffsetOptions.timeout());
                return Flux.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesWithOffsetSinglePageAsync(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId) {
        Integer maxresults = pagingsGetMultiplePagesWithOffsetOptions.maxresults();
        Integer offset = pagingsGetMultiplePagesWithOffsetOptions.offset();
        Integer timeout = pagingsGetMultiplePagesWithOffsetOptions.timeout();
        return service.getMultiplePagesWithOffset(offset, clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesRetryFirst() {
        Page<Product> response = getMultiplePagesRetryFirstSinglePageAsync().block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesRetryFirstAsync() {
        return getMultiplePagesRetryFirstSinglePageAsync()
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesRetryFirstNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesRetryFirstSinglePageAsync() {
        return service.getMultiplePagesRetryFirst(this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesRetrySecond() {
        Page<Product> response = getMultiplePagesRetrySecondSinglePageAsync().block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesRetrySecondAsync() {
        return getMultiplePagesRetrySecondSinglePageAsync()
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesRetrySecondNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesRetrySecondSinglePageAsync() {
        return service.getMultiplePagesRetrySecond(this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getSinglePagesFailure() {
        Page<Product> response = getSinglePagesFailureSinglePageAsync().block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getSinglePagesFailureNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getSinglePagesFailureAsync() {
        return getSinglePagesFailureSinglePageAsync()
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getSinglePagesFailureNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getSinglePagesFailureSinglePageAsync() {
        return service.getSinglePagesFailure(this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesFailure() {
        Page<Product> response = getMultiplePagesFailureSinglePageAsync().block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesFailureNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesFailureAsync() {
        return getMultiplePagesFailureSinglePageAsync()
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesFailureNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesFailureSinglePageAsync() {
        return service.getMultiplePagesFailure(this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesFailureUri() {
        Page<Product> response = getMultiplePagesFailureUriSinglePageAsync().block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesFailureUriAsync() {
        return getMultiplePagesFailureUriSinglePageAsync()
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesFailureUriNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesFailureUriSinglePageAsync() {
        return service.getMultiplePagesFailureUri(this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesFragmentNextLink(String tenant, String apiVersion) {
        Page<Product> response = getMultiplePagesFragmentNextLinkSinglePageAsync(tenant, apiVersion).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextLink) {
                return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).block();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesFragmentNextLinkAsync(String tenant, String apiVersion) {
        return getMultiplePagesFragmentNextLinkSinglePageAsync(tenant, apiVersion)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(nextFragmentAsync(tenant, nextLink, apiVersion));
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesFragmentNextLinkSinglePageAsync(String tenant, String apiVersion) {
        return service.getMultiplePagesFragmentNextLink(tenant, apiVersion, this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl1<Product>> res) -> res.value());
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesFragmentWithGroupingNextLink(CustomParameterGroup customParameterGroup) {
        Page<Product> response = getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(customParameterGroup).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextLink) {
                return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).block();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesFragmentWithGroupingNextLinkAsync(CustomParameterGroup customParameterGroup) {
        return getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(customParameterGroup)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(nextFragmentWithGroupingAsync(nextLink, customParameterGroup));
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(CustomParameterGroup customParameterGroup) {
        String apiVersion = customParameterGroup.apiVersion();
        String tenant = customParameterGroup.tenant();
        return service.getMultiplePagesFragmentWithGroupingNextLink(tenant, this.client.getAcceptLanguage(), apiVersion)
            .map((SimpleResponse<PageImpl1<Product>> res) -> res.value());
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> nextFragment(String tenant, String nextLink, String apiVersion) {
        Page<Product> response = nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextLink) {
                return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).block();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> nextFragmentAsync(String tenant, String nextLink, String apiVersion) {
        return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(nextFragmentAsync(tenant, nextLink1, apiVersion));
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> nextFragmentSinglePageAsync(String tenant, String nextLink, String apiVersion) {
        String nextUrl = String.format("paging/multiple/fragment/%s/%s", tenant, nextLink);
        return service.nextFragment(nextUrl, apiVersion, this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl1<Product>> res) -> res.value());
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> nextFragmentWithGrouping(String nextLink, CustomParameterGroup customParameterGroup) {
        Page<Product> response = nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextLink) {
                return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).block();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> nextFragmentWithGroupingAsync(String nextLink, CustomParameterGroup customParameterGroup) {
        return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(nextFragmentWithGroupingAsync(nextLink1, customParameterGroup));
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> nextFragmentWithGroupingSinglePageAsync(String nextLink, CustomParameterGroup customParameterGroup) {
        String apiVersion = customParameterGroup.apiVersion();
        String tenant = customParameterGroup.tenant();
        String nextUrl = String.format("paging/multiple/fragmentwithgrouping/%s/%s", tenant, nextLink);
        return service.nextFragmentWithGrouping(nextUrl, this.client.getAcceptLanguage(), apiVersion)
            .map((SimpleResponse<PageImpl1<Product>> res) -> res.value());
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getSinglePagesNext(String nextPageLink) {
        Page<Product> response = getSinglePagesNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getSinglePagesNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getSinglePagesNextAsync(String nextPageLink) {
        return getSinglePagesNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getSinglePagesNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getSinglePagesNextSinglePageAsync(String nextPageLink) {
        String nextUrl = String.format("%s", nextPageLink);
        return service.getSinglePagesNext(nextUrl, this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesNext(String nextPageLink) {
        Page<Product> response = getMultiplePagesNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesNextAsync(String nextPageLink) {
        return getMultiplePagesNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink1, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesNextSinglePageAsync(String nextPageLink) {
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesNext(nextUrl, clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesNext(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions) {
        Page<Product> response = getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesNextAsync(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions) {
        return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink1, clientRequestId, pagingsGetMultiplePagesOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesNextSinglePageAsync(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions) {
        Integer maxresults = null;
        if (pagingsGetMultiplePagesOptions != null) {
            maxresults = pagingsGetMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetMultiplePagesOptions != null) {
            timeout = pagingsGetMultiplePagesOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesNext(nextUrl, clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getOdataMultiplePagesNext(String nextPageLink) {
        Page<Product> response = getOdataMultiplePagesNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getOdataMultiplePagesNextAsync(String nextPageLink) {
        return getOdataMultiplePagesNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink1, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getOdataMultiplePagesNextSinglePageAsync(String nextPageLink) {
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getOdataMultiplePagesNext(nextUrl, clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl1<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getOdataMultiplePagesNext(String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions) {
        Page<Product> response = getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getOdataMultiplePagesNextAsync(String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions) {
        return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink1, clientRequestId, pagingsGetOdataMultiplePagesOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getOdataMultiplePagesNextSinglePageAsync(String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions) {
        Integer maxresults = null;
        if (pagingsGetOdataMultiplePagesOptions != null) {
            maxresults = pagingsGetOdataMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetOdataMultiplePagesOptions != null) {
            timeout = pagingsGetOdataMultiplePagesOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getOdataMultiplePagesNext(nextUrl, clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl1<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesWithOffsetNext(String nextPageLink) {
        Page<Product> response = getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesWithOffsetNextAsync(String nextPageLink) {
        return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink1, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesWithOffsetNextSinglePageAsync(String nextPageLink) {
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesWithOffsetNext(nextUrl, clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesWithOffsetNext(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions) {
        Page<Product> response = getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesWithOffsetNextAsync(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions) {
        return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink1, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesWithOffsetNextSinglePageAsync(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions) {
        Integer maxresults = null;
        if (pagingsGetMultiplePagesWithOffsetNextOptions != null) {
            maxresults = pagingsGetMultiplePagesWithOffsetNextOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetMultiplePagesWithOffsetNextOptions != null) {
            timeout = pagingsGetMultiplePagesWithOffsetNextOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesWithOffsetNext(nextUrl, clientRequestId, this.client.getAcceptLanguage(), maxresults, timeout)
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesRetryFirstNext(String nextPageLink) {
        Page<Product> response = getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesRetryFirstNextAsync(String nextPageLink) {
        return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesRetryFirstNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesRetryFirstNextSinglePageAsync(String nextPageLink) {
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesRetryFirstNext(nextUrl, this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesRetrySecondNext(String nextPageLink) {
        Page<Product> response = getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesRetrySecondNextAsync(String nextPageLink) {
        return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesRetrySecondNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesRetrySecondNextSinglePageAsync(String nextPageLink) {
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesRetrySecondNext(nextUrl, this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getSinglePagesFailureNext(String nextPageLink) {
        Page<Product> response = getSinglePagesFailureNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getSinglePagesFailureNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getSinglePagesFailureNextAsync(String nextPageLink) {
        return getSinglePagesFailureNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getSinglePagesFailureNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getSinglePagesFailureNextSinglePageAsync(String nextPageLink) {
        String nextUrl = String.format("%s", nextPageLink);
        return service.getSinglePagesFailureNext(nextUrl, this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesFailureNext(String nextPageLink) {
        Page<Product> response = getMultiplePagesFailureNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesFailureNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesFailureNextAsync(String nextPageLink) {
        return getMultiplePagesFailureNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesFailureNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesFailureNextSinglePageAsync(String nextPageLink) {
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesFailureNext(nextUrl, this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedList<Product> getMultiplePagesFailureUriNext(String nextPageLink) {
        Page<Product> response = getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).block();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public Flux<Page<Product>> getMultiplePagesFailureUriNextAsync(String nextPageLink) {
        return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<Product> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesFailureUriNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Page<Product>> getMultiplePagesFailureUriNextSinglePageAsync(String nextPageLink) {
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesFailureUriNext(nextUrl, this.client.getAcceptLanguage())
            .map((SimpleResponse<PageImpl<Product>> res) -> res.value());
    }
}
