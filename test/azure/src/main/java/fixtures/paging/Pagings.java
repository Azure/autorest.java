// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.paging;

import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.microsoft.azure.v3.Page;
import com.microsoft.azure.v3.PagedList;
import fixtures.paging.models.CustomParameterGroup;
import fixtures.paging.models.PagingsGetMultiplePagesOptions;
import fixtures.paging.models.PagingsGetMultiplePagesWithOffsetNextOptions;
import fixtures.paging.models.PagingsGetMultiplePagesWithOffsetOptions;
import fixtures.paging.models.PagingsGetOdataMultiplePagesOptions;
import fixtures.paging.models.Product;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Pagings.
 */
public interface Pagings {
    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getSinglePages();

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getSinglePagesAsync();

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getSinglePagesSinglePageAsync();

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePages();

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesAsync();

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesSinglePageAsync();

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePages(String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesAsync(String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesSinglePageAsync(String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getOdataMultiplePages();

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getOdataMultiplePagesAsync();

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getOdataMultiplePagesSinglePageAsync();

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getOdataMultiplePages(String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getOdataMultiplePagesAsync(String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getOdataMultiplePagesSinglePageAsync(String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesWithOffset(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesWithOffsetAsync(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesWithOffsetSinglePageAsync(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesWithOffset(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesWithOffsetAsync(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesWithOffsetSinglePageAsync(PagingsGetMultiplePagesWithOffsetOptions pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId);

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesRetryFirst();

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesRetryFirstAsync();

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesRetryFirstSinglePageAsync();

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesRetrySecond();

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesRetrySecondAsync();

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesRetrySecondSinglePageAsync();

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getSinglePagesFailure();

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getSinglePagesFailureAsync();

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getSinglePagesFailureSinglePageAsync();

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesFailure();

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesFailureAsync();

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesFailureSinglePageAsync();

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesFailureUri();

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesFailureUriAsync();

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesFailureUriSinglePageAsync();

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesFragmentNextLink(String tenant, String apiVersion);

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesFragmentNextLinkAsync(String tenant, String apiVersion);

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesFragmentNextLinkSinglePageAsync(String tenant, String apiVersion);

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesFragmentWithGroupingNextLink(CustomParameterGroup customParameterGroup);

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesFragmentWithGroupingNextLinkAsync(CustomParameterGroup customParameterGroup);

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(CustomParameterGroup customParameterGroup);

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> nextFragment(String tenant, String nextLink, String apiVersion);

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> nextFragmentAsync(String tenant, String nextLink, String apiVersion);

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> nextFragmentSinglePageAsync(String tenant, String nextLink, String apiVersion);

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> nextFragmentWithGrouping(String nextLink, CustomParameterGroup customParameterGroup);

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> nextFragmentWithGroupingAsync(String nextLink, CustomParameterGroup customParameterGroup);

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> nextFragmentWithGroupingSinglePageAsync(String nextLink, CustomParameterGroup customParameterGroup);

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getSinglePagesNext(String nextPageLink);

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getSinglePagesNextAsync(String nextPageLink);

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getSinglePagesNextSinglePageAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesNext(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesNextAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesNextSinglePageAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesNext(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesNextAsync(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesNextSinglePageAsync(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptions pagingsGetMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getOdataMultiplePagesNext(String nextPageLink);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getOdataMultiplePagesNextAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getOdataMultiplePagesNextSinglePageAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getOdataMultiplePagesNext(String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getOdataMultiplePagesNextAsync(String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getOdataMultiplePagesNextSinglePageAsync(String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptions pagingsGetOdataMultiplePagesOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesWithOffsetNext(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesWithOffsetNextAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesWithOffsetNextSinglePageAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesWithOffsetNext(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesWithOffsetNextAsync(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions);

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesWithOffsetNextSinglePageAsync(String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptions pagingsGetMultiplePagesWithOffsetNextOptions);

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesRetryFirstNext(String nextPageLink);

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesRetryFirstNextAsync(String nextPageLink);

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesRetryFirstNextSinglePageAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesRetrySecondNext(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesRetrySecondNextAsync(String nextPageLink);

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesRetrySecondNextSinglePageAsync(String nextPageLink);

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getSinglePagesFailureNext(String nextPageLink);

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getSinglePagesFailureNextAsync(String nextPageLink);

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getSinglePagesFailureNextSinglePageAsync(String nextPageLink);

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesFailureNext(String nextPageLink);

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesFailureNextAsync(String nextPageLink);

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesFailureNextSinglePageAsync(String nextPageLink);

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedList<Product> getMultiplePagesFailureUriNext(String nextPageLink);

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    Flux<Page<Product>> getMultiplePagesFailureUriNextAsync(String nextPageLink);

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;Product&gt;&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Page<Product>> getMultiplePagesFailureUriNextSinglePageAsync(String nextPageLink);
}
