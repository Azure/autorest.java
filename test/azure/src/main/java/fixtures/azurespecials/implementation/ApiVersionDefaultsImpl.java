// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.azurespecials.implementation;

import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.QueryParam;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import com.microsoft.azure.v3.AzureProxy;
import fixtures.azurespecials.ApiVersionDefaults;
import fixtures.azurespecials.models.ErrorException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * ApiVersionDefaults.
 */
public final class ApiVersionDefaultsImpl implements ApiVersionDefaults {
    /**
     * The proxy service used to perform REST calls.
     */
    private ApiVersionDefaultsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestAzureSpecialParametersTestClientImpl client;

    /**
     * Initializes an instance of ApiVersionDefaultsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ApiVersionDefaultsImpl(AutoRestAzureSpecialParametersTestClientImpl client) {
        this.service = AzureProxy.create(ApiVersionDefaultsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestAzureSpecialParametersTestClientApiVersionDefaults to be used by
     * the proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestAzureSpecialParametersTestClientApiVersionDefaults")
    private interface ApiVersionDefaultsService {
        @Get("azurespecials/apiVersion/method/string/none/query/global/2015-07-01-preview")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> getMethodGlobalValid(@QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @Get("azurespecials/apiVersion/method/string/none/query/globalNotProvided/2015-07-01-preview")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> getMethodGlobalNotProvidedValid(@QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @Get("azurespecials/apiVersion/path/string/none/query/global/2015-07-01-preview")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> getPathGlobalValid(@QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @Get("azurespecials/apiVersion/swagger/string/none/query/global/2015-07-01-preview")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> getSwaggerGlobalValid(@QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getMethodGlobalValid() {
        getMethodGlobalValidAsync().block();
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> getMethodGlobalValidWithRestResponseAsync() {
        return service.getMethodGlobalValid(this.client.getApiVersion(), this.client.getAcceptLanguage());
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getMethodGlobalValidAsync() {
        return getMethodGlobalValidWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getMethodGlobalNotProvidedValid() {
        getMethodGlobalNotProvidedValidAsync().block();
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> getMethodGlobalNotProvidedValidWithRestResponseAsync() {
        return service.getMethodGlobalNotProvidedValid(this.client.getApiVersion(), this.client.getAcceptLanguage());
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getMethodGlobalNotProvidedValidAsync() {
        return getMethodGlobalNotProvidedValidWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getPathGlobalValid() {
        getPathGlobalValidAsync().block();
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> getPathGlobalValidWithRestResponseAsync() {
        return service.getPathGlobalValid(this.client.getApiVersion(), this.client.getAcceptLanguage());
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getPathGlobalValidAsync() {
        return getPathGlobalValidWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getSwaggerGlobalValid() {
        getSwaggerGlobalValidAsync().block();
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> getSwaggerGlobalValidWithRestResponseAsync() {
        return service.getSwaggerGlobalValid(this.client.getApiVersion(), this.client.getAcceptLanguage());
    }

    /**
     * GET method with api-version modeled in global settings.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getSwaggerGlobalValidAsync() {
        return getSwaggerGlobalValidWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }
}
