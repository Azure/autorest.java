// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.headexceptions.implementation;

import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Head;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import com.microsoft.azure.v3.AzureProxy;
import com.microsoft.azure.v3.CloudException;
import fixtures.headexceptions.HeadExceptions;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * HeadExceptions.
 */
public final class HeadExceptionsImpl implements HeadExceptions {
    /**
     * The proxy service used to perform REST calls.
     */
    private HeadExceptionsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestHeadExceptionTestServiceImpl client;

    /**
     * Initializes an instance of HeadExceptionsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public HeadExceptionsImpl(AutoRestHeadExceptionTestServiceImpl client) {
        this.service = AzureProxy.create(HeadExceptionsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestHeadExceptionTestServiceHeadExceptions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestHeadExceptionTestServiceHeadExceptions")
    private interface HeadExceptionsService {
        @Head("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<VoidResponse> head200(@HeaderParam("accept-language") String acceptLanguage);

        @Head("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<VoidResponse> head204(@HeaderParam("accept-language") String acceptLanguage);

        @Head("http/success/404")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<VoidResponse> head404(@HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Return 200 status code if successful.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head200() {
        head200Async().block();
    }

    /**
     * Return 200 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> head200WithRestResponseAsync() {
        return service.head200(this.client.getAcceptLanguage());
    }

    /**
     * Return 200 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head200Async() {
        return head200WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Return 204 status code if successful.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head204() {
        head204Async().block();
    }

    /**
     * Return 204 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> head204WithRestResponseAsync() {
        return service.head204(this.client.getAcceptLanguage());
    }

    /**
     * Return 204 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head204Async() {
        return head204WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Return 404 status code if successful.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head404() {
        head404Async().block();
    }

    /**
     * Return 404 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> head404WithRestResponseAsync() {
        return service.head404(this.client.getAcceptLanguage());
    }

    /**
     * Return 404 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head404Async() {
        return head404WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }
}
