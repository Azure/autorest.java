// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.lro.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.OperationDescription;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.Delete;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.ResumeOperation;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import com.microsoft.azure.v3.AzureProxy;
import com.microsoft.azure.v3.CloudException;
import com.microsoft.azure.v3.OperationStatus;
import fixtures.lro.LROs;
import fixtures.lro.models.LROsDelete202NoRetry204Response;
import fixtures.lro.models.LROsDelete202Retry200Response;
import fixtures.lro.models.LROsDeleteAsyncNoHeaderInRetryResponse;
import fixtures.lro.models.LROsDeleteAsyncNoRetrySucceededResponse;
import fixtures.lro.models.LROsDeleteAsyncRetrycanceledResponse;
import fixtures.lro.models.LROsDeleteAsyncRetryFailedResponse;
import fixtures.lro.models.LROsDeleteAsyncRetrySucceededResponse;
import fixtures.lro.models.LROsDeleteNoHeaderInRetryResponse;
import fixtures.lro.models.LROsDeleteProvisioning202Accepted200SucceededResponse;
import fixtures.lro.models.LROsDeleteProvisioning202Deletingcanceled200Response;
import fixtures.lro.models.LROsDeleteProvisioning202DeletingFailed200Response;
import fixtures.lro.models.LROsPost202NoRetry204Response;
import fixtures.lro.models.LROsPost202Retry200Response;
import fixtures.lro.models.LROsPostAsyncNoRetrySucceededResponse;
import fixtures.lro.models.LROsPostAsyncRetrycanceledResponse;
import fixtures.lro.models.LROsPostAsyncRetryFailedResponse;
import fixtures.lro.models.LROsPostAsyncRetrySucceededResponse;
import fixtures.lro.models.LROsPutAsyncNoHeaderInRetryResponse;
import fixtures.lro.models.LROsPutAsyncNoRetrycanceledResponse;
import fixtures.lro.models.LROsPutAsyncNoRetrySucceededResponse;
import fixtures.lro.models.LROsPutAsyncRetryFailedResponse;
import fixtures.lro.models.LROsPutAsyncRetrySucceededResponse;
import fixtures.lro.models.LROsPutNoHeaderInRetryResponse;
import fixtures.lro.models.Product;
import fixtures.lro.models.Sku;
import fixtures.lro.models.SubProduct;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * LROs.
 */
public final class LROsImpl implements LROs {
    /**
     * The proxy service used to perform REST calls.
     */
    private LROsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestLongRunningOperationTestServiceImpl client;

    /**
     * Initializes an instance of LROsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public LROsImpl(AutoRestLongRunningOperationTestServiceImpl client) {
        this.service = AzureProxy.create(LROsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestLongRunningOperationTestServiceLROs to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestLongRunningOperationTestServiceLROs")
    private interface LROsService {
        @Put("lro/put/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPut200Succeeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Product>> put200Succeeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePut200Succeeded(OperationDescription operationDescription);

        @Put("lro/put/200/succeeded/nostate")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPut200SucceededNoState(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/succeeded/nostate")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Product>> put200SucceededNoState(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/succeeded/nostate")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePut200SucceededNoState(OperationDescription operationDescription);

        @Put("lro/put/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPut202Retry200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Product>> put202Retry200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePut202Retry200(OperationDescription operationDescription);

        @Put("lro/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPut201CreatingSucceeded200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Product>> put201CreatingSucceeded200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/201/creating/succeeded/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePut201CreatingSucceeded200(OperationDescription operationDescription);

        @Put("lro/put/200/updating/succeeded/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPut200UpdatingSucceeded204(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/updating/succeeded/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Product>> put200UpdatingSucceeded204(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/updating/succeeded/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePut200UpdatingSucceeded204(OperationDescription operationDescription);

        @Put("lro/put/201/created/failed/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPut201CreatingFailed200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/201/created/failed/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Product>> put201CreatingFailed200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/201/created/failed/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePut201CreatingFailed200(OperationDescription operationDescription);

        @Put("lro/put/200/accepted/canceled/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPut200Acceptedcanceled200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/accepted/canceled/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Product>> put200Acceptedcanceled200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/200/accepted/canceled/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePut200Acceptedcanceled200(OperationDescription operationDescription);

        @Put("lro/put/noheader/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPutNoHeaderInRetry(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/noheader/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutNoHeaderInRetryResponse> putNoHeaderInRetry(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/put/noheader/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePutNoHeaderInRetry(OperationDescription operationDescription);

        @Put("lro/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPutAsyncRetrySucceeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncRetrySucceededResponse> putAsyncRetrySucceeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePutAsyncRetrySucceeded(OperationDescription operationDescription);

        @Put("lro/putasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPutAsyncNoRetrySucceeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncNoRetrySucceededResponse> putAsyncNoRetrySucceeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePutAsyncNoRetrySucceeded(OperationDescription operationDescription);

        @Put("lro/putasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPutAsyncRetryFailed(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncRetryFailedResponse> putAsyncRetryFailed(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePutAsyncRetryFailed(OperationDescription operationDescription);

        @Put("lro/putasync/noretry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPutAsyncNoRetrycanceled(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noretry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncNoRetrycanceledResponse> putAsyncNoRetrycanceled(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noretry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePutAsyncNoRetrycanceled(OperationDescription operationDescription);

        @Put("lro/putasync/noheader/201/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPutAsyncNoHeaderInRetry(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noheader/201/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPutAsyncNoHeaderInRetryResponse> putAsyncNoHeaderInRetry(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putasync/noheader/201/200")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePutAsyncNoHeaderInRetry(OperationDescription operationDescription);

        @Put("lro/putnonresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Sku>> beginPutNonResource(@BodyParam("application/json; charset=utf-8") Sku sku, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putnonresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Sku>> putNonResource(@BodyParam("application/json; charset=utf-8") Sku sku, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putnonresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Sku>> resumePutNonResource(OperationDescription operationDescription);

        @Put("lro/putnonresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Sku>> beginPutAsyncNonResource(@BodyParam("application/json; charset=utf-8") Sku sku, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putnonresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Sku>> putAsyncNonResource(@BodyParam("application/json; charset=utf-8") Sku sku, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putnonresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Sku>> resumePutAsyncNonResource(OperationDescription operationDescription);

        @Put("lro/putsubresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<SubProduct>> beginPutSubResource(@BodyParam("application/json; charset=utf-8") SubProduct product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putsubresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<SubProduct>> putSubResource(@BodyParam("application/json; charset=utf-8") SubProduct product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putsubresource/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<SubProduct>> resumePutSubResource(OperationDescription operationDescription);

        @Put("lro/putsubresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<SubProduct>> beginPutAsyncSubResource(@BodyParam("application/json; charset=utf-8") SubProduct product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putsubresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<SubProduct>> putAsyncSubResource(@BodyParam("application/json; charset=utf-8") SubProduct product, @HeaderParam("accept-language") String acceptLanguage);

        @Put("lro/putsubresourceasync/202/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<SubProduct>> resumePutAsyncSubResource(OperationDescription operationDescription);

        @Delete("lro/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginDeleteProvisioning202Accepted200Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteProvisioning202Accepted200SucceededResponse> deleteProvisioning202Accepted200Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/accepted/200/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumeDeleteProvisioning202Accepted200Succeeded(OperationDescription operationDescription);

        @Delete("lro/delete/provisioning/202/deleting/200/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginDeleteProvisioning202DeletingFailed200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/deleting/200/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteProvisioning202DeletingFailed200Response> deleteProvisioning202DeletingFailed200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/deleting/200/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumeDeleteProvisioning202DeletingFailed200(OperationDescription operationDescription);

        @Delete("lro/delete/provisioning/202/deleting/200/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginDeleteProvisioning202Deletingcanceled200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/deleting/200/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteProvisioning202Deletingcanceled200Response> deleteProvisioning202Deletingcanceled200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/provisioning/202/deleting/200/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumeDeleteProvisioning202Deletingcanceled200(OperationDescription operationDescription);

        @Delete("lro/delete/204/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDelete204Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/204/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<VoidResponse> delete204Succeeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/204/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDelete204Succeeded(OperationDescription operationDescription);

        @Delete("lro/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginDelete202Retry200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDelete202Retry200Response> delete202Retry200(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumeDelete202Retry200(OperationDescription operationDescription);

        @Delete("lro/delete/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginDelete202NoRetry204(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDelete202NoRetry204Response> delete202NoRetry204(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumeDelete202NoRetry204(OperationDescription operationDescription);

        @Delete("lro/delete/noheader")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteNoHeaderInRetry(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/noheader")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteNoHeaderInRetryResponse> deleteNoHeaderInRetry(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/delete/noheader")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteNoHeaderInRetry(OperationDescription operationDescription);

        @Delete("lro/deleteasync/noheader/202/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncNoHeaderInRetry(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/noheader/202/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncNoHeaderInRetryResponse> deleteAsyncNoHeaderInRetry(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/noheader/202/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncNoHeaderInRetry(OperationDescription operationDescription);

        @Delete("lro/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncRetrySucceededResponse> deleteAsyncRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncRetrySucceeded(OperationDescription operationDescription);

        @Delete("lro/deleteasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncNoRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncNoRetrySucceededResponse> deleteAsyncNoRetrySucceeded(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncNoRetrySucceeded(OperationDescription operationDescription);

        @Delete("lro/deleteasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncRetryFailed(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncRetryFailedResponse> deleteAsyncRetryFailed(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncRetryFailed(OperationDescription operationDescription);

        @Delete("lro/deleteasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginDeleteAsyncRetrycanceled(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsDeleteAsyncRetrycanceledResponse> deleteAsyncRetrycanceled(@HeaderParam("accept-language") String acceptLanguage);

        @Delete("lro/deleteasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumeDeleteAsyncRetrycanceled(OperationDescription operationDescription);

        @Post("lro/post/payload/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Sku>> beginPost200WithPayload(@HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/payload/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<SimpleResponse<Sku>> post200WithPayload(@HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/payload/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Sku>> resumePost200WithPayload(OperationDescription operationDescription);

        @Post("lro/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginPost202Retry200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPost202Retry200Response> post202Retry200(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/202/retry/200")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumePost202Retry200(OperationDescription operationDescription);

        @Post("lro/post/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPost202NoRetry204(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPost202NoRetry204Response> post202NoRetry204(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/post/202/noretry/204")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePost202NoRetry204(OperationDescription operationDescription);

        @Post("lro/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPostAsyncRetrySucceeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPostAsyncRetrySucceededResponse> postAsyncRetrySucceeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePostAsyncRetrySucceeded(OperationDescription operationDescription);

        @Post("lro/postasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Product>> beginPostAsyncNoRetrySucceeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPostAsyncNoRetrySucceededResponse> postAsyncNoRetrySucceeded(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/noretry/succeeded")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Product>> resumePostAsyncNoRetrySucceeded(OperationDescription operationDescription);

        @Post("lro/postasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginPostAsyncRetryFailed(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPostAsyncRetryFailedResponse> postAsyncRetryFailed(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/failed")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumePostAsyncRetryFailed(OperationDescription operationDescription);

        @Post("lro/postasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Flux<OperationStatus<Void>> beginPostAsyncRetrycanceled(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<LROsPostAsyncRetrycanceledResponse> postAsyncRetrycanceled(@BodyParam("application/json; charset=utf-8") Product product, @HeaderParam("accept-language") String acceptLanguage);

        @Post("lro/postasync/retry/canceled")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Flux<OperationStatus<Void>> resumePostAsyncRetrycanceled(OperationDescription operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut200Succeeded() {
        return beginPut200SucceededAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut200SucceededAsync() {
        final Product product = null;
        return service.beginPut200Succeeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut200Succeeded(Product product) {
        return beginPut200SucceededAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut200SucceededAsync(Product product) {
        return service.beginPut200Succeeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put200Succeeded() {
        return put200SucceededAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put200SucceededWithRestResponseAsync() {
        final Product product = null;
        return service.put200Succeeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put200SucceededAsync() {
        return put200SucceededWithRestResponseAsync()
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put200Succeeded(Product product) {
        return put200SucceededAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put200SucceededWithRestResponseAsync(Product product) {
        return service.put200Succeeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put200SucceededAsync(Product product) {
        return put200SucceededWithRestResponseAsync(product)
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Succeeded’. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePut200Succeeded(OperationDescription operationDescription) {
        return service.resumePut200Succeeded(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut200SucceededNoState() {
        return beginPut200SucceededNoStateAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut200SucceededNoStateAsync() {
        final Product product = null;
        return service.beginPut200SucceededNoState(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut200SucceededNoState(Product product) {
        return beginPut200SucceededNoStateAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut200SucceededNoStateAsync(Product product) {
        return service.beginPut200SucceededNoState(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put200SucceededNoState() {
        return put200SucceededNoStateAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put200SucceededNoStateWithRestResponseAsync() {
        final Product product = null;
        return service.put200SucceededNoState(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put200SucceededNoStateAsync() {
        return put200SucceededNoStateWithRestResponseAsync()
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put200SucceededNoState(Product product) {
        return put200SucceededNoStateAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put200SucceededNoStateWithRestResponseAsync(Product product) {
        return service.put200SucceededNoState(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put200SucceededNoStateAsync(Product product) {
        return put200SucceededNoStateWithRestResponseAsync(product)
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that does not contain ProvisioningState=’Succeeded’. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePut200SucceededNoState(OperationDescription operationDescription) {
        return service.resumePut200SucceededNoState(operationDescription);
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut202Retry200() {
        return beginPut202Retry200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut202Retry200Async() {
        final Product product = null;
        return service.beginPut202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut202Retry200(Product product) {
        return beginPut202Retry200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut202Retry200Async(Product product) {
        return service.beginPut202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put202Retry200() {
        return put202Retry200Async().block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put202Retry200WithRestResponseAsync() {
        final Product product = null;
        return service.put202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put202Retry200Async() {
        return put202Retry200WithRestResponseAsync()
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put202Retry200(Product product) {
        return put202Retry200Async(product).block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put202Retry200WithRestResponseAsync(Product product) {
        return service.put202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put202Retry200Async(Product product) {
        return put202Retry200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request, with a location header that points to a polling URL that returns a 200 and an entity that doesn't contains ProvisioningState (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePut202Retry200(OperationDescription operationDescription) {
        return service.resumePut202Retry200(operationDescription);
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut201CreatingSucceeded200() {
        return beginPut201CreatingSucceeded200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut201CreatingSucceeded200Async() {
        final Product product = null;
        return service.beginPut201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut201CreatingSucceeded200(Product product) {
        return beginPut201CreatingSucceeded200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut201CreatingSucceeded200Async(Product product) {
        return service.beginPut201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put201CreatingSucceeded200() {
        return put201CreatingSucceeded200Async().block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put201CreatingSucceeded200WithRestResponseAsync() {
        final Product product = null;
        return service.put201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put201CreatingSucceeded200Async() {
        return put201CreatingSucceeded200WithRestResponseAsync()
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put201CreatingSucceeded200(Product product) {
        return put201CreatingSucceeded200Async(product).block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put201CreatingSucceeded200WithRestResponseAsync(Product product) {
        return service.put201CreatingSucceeded200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put201CreatingSucceeded200Async(Product product) {
        return put201CreatingSucceeded200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePut201CreatingSucceeded200(OperationDescription operationDescription) {
        return service.resumePut201CreatingSucceeded200(operationDescription);
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut200UpdatingSucceeded204() {
        return beginPut200UpdatingSucceeded204Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut200UpdatingSucceeded204Async() {
        final Product product = null;
        return service.beginPut200UpdatingSucceeded204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut200UpdatingSucceeded204(Product product) {
        return beginPut200UpdatingSucceeded204Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut200UpdatingSucceeded204Async(Product product) {
        return service.beginPut200UpdatingSucceeded204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put200UpdatingSucceeded204() {
        return put200UpdatingSucceeded204Async().block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put200UpdatingSucceeded204WithRestResponseAsync() {
        final Product product = null;
        return service.put200UpdatingSucceeded204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put200UpdatingSucceeded204Async() {
        return put200UpdatingSucceeded204WithRestResponseAsync()
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put200UpdatingSucceeded204(Product product) {
        return put200UpdatingSucceeded204Async(product).block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put200UpdatingSucceeded204WithRestResponseAsync(Product product) {
        return service.put200UpdatingSucceeded204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put200UpdatingSucceeded204Async(Product product) {
        return put200UpdatingSucceeded204WithRestResponseAsync(product)
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Updating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePut200UpdatingSucceeded204(OperationDescription operationDescription) {
        return service.resumePut200UpdatingSucceeded204(operationDescription);
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut201CreatingFailed200() {
        return beginPut201CreatingFailed200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut201CreatingFailed200Async() {
        final Product product = null;
        return service.beginPut201CreatingFailed200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut201CreatingFailed200(Product product) {
        return beginPut201CreatingFailed200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut201CreatingFailed200Async(Product product) {
        return service.beginPut201CreatingFailed200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put201CreatingFailed200() {
        return put201CreatingFailed200Async().block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put201CreatingFailed200WithRestResponseAsync() {
        final Product product = null;
        return service.put201CreatingFailed200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put201CreatingFailed200Async() {
        return put201CreatingFailed200WithRestResponseAsync()
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put201CreatingFailed200(Product product) {
        return put201CreatingFailed200Async(product).block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put201CreatingFailed200WithRestResponseAsync(Product product) {
        return service.put201CreatingFailed200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put201CreatingFailed200Async(Product product) {
        return put201CreatingFailed200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Created’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePut201CreatingFailed200(OperationDescription operationDescription) {
        return service.resumePut201CreatingFailed200(operationDescription);
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut200Acceptedcanceled200() {
        return beginPut200Acceptedcanceled200Async().blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut200Acceptedcanceled200Async() {
        final Product product = null;
        return service.beginPut200Acceptedcanceled200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPut200Acceptedcanceled200(Product product) {
        return beginPut200Acceptedcanceled200Async(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPut200Acceptedcanceled200Async(Product product) {
        return service.beginPut200Acceptedcanceled200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put200Acceptedcanceled200() {
        return put200Acceptedcanceled200Async().block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put200Acceptedcanceled200WithRestResponseAsync() {
        final Product product = null;
        return service.put200Acceptedcanceled200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put200Acceptedcanceled200Async() {
        return put200Acceptedcanceled200WithRestResponseAsync()
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product put200Acceptedcanceled200(Product product) {
        return put200Acceptedcanceled200Async(product).block();
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> put200Acceptedcanceled200WithRestResponseAsync(Product product) {
        return service.put200Acceptedcanceled200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> put200Acceptedcanceled200Async(Product product) {
        return put200Acceptedcanceled200WithRestResponseAsync(product)
            .flatMap((SimpleResponse<Product> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 201 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePut200Acceptedcanceled200(OperationDescription operationDescription) {
        return service.resumePut200Acceptedcanceled200(operationDescription);
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutNoHeaderInRetry() {
        return beginPutNoHeaderInRetryAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutNoHeaderInRetryAsync() {
        final Product product = null;
        return service.beginPutNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutNoHeaderInRetry(Product product) {
        return beginPutNoHeaderInRetryAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutNoHeaderInRetryAsync(Product product) {
        return service.beginPutNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putNoHeaderInRetry() {
        return putNoHeaderInRetryAsync().block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutNoHeaderInRetryResponse> putNoHeaderInRetryWithRestResponseAsync() {
        final Product product = null;
        return service.putNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putNoHeaderInRetryAsync() {
        return putNoHeaderInRetryWithRestResponseAsync()
            .flatMap((LROsPutNoHeaderInRetryResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putNoHeaderInRetry(Product product) {
        return putNoHeaderInRetryAsync(product).block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutNoHeaderInRetryResponse> putNoHeaderInRetryWithRestResponseAsync(Product product) {
        return service.putNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putNoHeaderInRetryAsync(Product product) {
        return putNoHeaderInRetryWithRestResponseAsync(product)
            .flatMap((LROsPutNoHeaderInRetryResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request with location header. Subsequent calls to operation status do not contain location header. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePutNoHeaderInRetry(OperationDescription operationDescription) {
        return service.resumePutNoHeaderInRetry(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncRetrySucceeded() {
        return beginPutAsyncRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncRetrySucceededAsync() {
        final Product product = null;
        return service.beginPutAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncRetrySucceeded(Product product) {
        return beginPutAsyncRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncRetrySucceededAsync(Product product) {
        return service.beginPutAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncRetrySucceeded() {
        return putAsyncRetrySucceededAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncRetrySucceededResponse> putAsyncRetrySucceededWithRestResponseAsync() {
        final Product product = null;
        return service.putAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncRetrySucceededAsync() {
        return putAsyncRetrySucceededWithRestResponseAsync()
            .flatMap((LROsPutAsyncRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncRetrySucceeded(Product product) {
        return putAsyncRetrySucceededAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncRetrySucceededResponse> putAsyncRetrySucceededWithRestResponseAsync(Product product) {
        return service.putAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncRetrySucceededAsync(Product product) {
        return putAsyncRetrySucceededWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePutAsyncRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePutAsyncRetrySucceeded(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncNoRetrySucceeded() {
        return beginPutAsyncNoRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncNoRetrySucceededAsync() {
        final Product product = null;
        return service.beginPutAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncNoRetrySucceeded(Product product) {
        return beginPutAsyncNoRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncNoRetrySucceededAsync(Product product) {
        return service.beginPutAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncNoRetrySucceeded() {
        return putAsyncNoRetrySucceededAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoRetrySucceededResponse> putAsyncNoRetrySucceededWithRestResponseAsync() {
        final Product product = null;
        return service.putAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncNoRetrySucceededAsync() {
        return putAsyncNoRetrySucceededWithRestResponseAsync()
            .flatMap((LROsPutAsyncNoRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncNoRetrySucceeded(Product product) {
        return putAsyncNoRetrySucceededAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoRetrySucceededResponse> putAsyncNoRetrySucceededWithRestResponseAsync(Product product) {
        return service.putAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncNoRetrySucceededAsync(Product product) {
        return putAsyncNoRetrySucceededWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncNoRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePutAsyncNoRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePutAsyncNoRetrySucceeded(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncRetryFailed() {
        return beginPutAsyncRetryFailedAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncRetryFailedAsync() {
        final Product product = null;
        return service.beginPutAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncRetryFailed(Product product) {
        return beginPutAsyncRetryFailedAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncRetryFailedAsync(Product product) {
        return service.beginPutAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncRetryFailed() {
        return putAsyncRetryFailedAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncRetryFailedResponse> putAsyncRetryFailedWithRestResponseAsync() {
        final Product product = null;
        return service.putAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncRetryFailedAsync() {
        return putAsyncRetryFailedWithRestResponseAsync()
            .flatMap((LROsPutAsyncRetryFailedResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncRetryFailed(Product product) {
        return putAsyncRetryFailedAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncRetryFailedResponse> putAsyncRetryFailedWithRestResponseAsync(Product product) {
        return service.putAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncRetryFailedAsync(Product product) {
        return putAsyncRetryFailedWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncRetryFailedResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePutAsyncRetryFailed(OperationDescription operationDescription) {
        return service.resumePutAsyncRetryFailed(operationDescription);
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncNoRetrycanceled() {
        return beginPutAsyncNoRetrycanceledAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncNoRetrycanceledAsync() {
        final Product product = null;
        return service.beginPutAsyncNoRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncNoRetrycanceled(Product product) {
        return beginPutAsyncNoRetrycanceledAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncNoRetrycanceledAsync(Product product) {
        return service.beginPutAsyncNoRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncNoRetrycanceled() {
        return putAsyncNoRetrycanceledAsync().block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoRetrycanceledResponse> putAsyncNoRetrycanceledWithRestResponseAsync() {
        final Product product = null;
        return service.putAsyncNoRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncNoRetrycanceledAsync() {
        return putAsyncNoRetrycanceledWithRestResponseAsync()
            .flatMap((LROsPutAsyncNoRetrycanceledResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncNoRetrycanceled(Product product) {
        return putAsyncNoRetrycanceledAsync(product).block();
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoRetrycanceledResponse> putAsyncNoRetrycanceledWithRestResponseAsync(Product product) {
        return service.putAsyncNoRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncNoRetrycanceledAsync(Product product) {
        return putAsyncNoRetrycanceledWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncNoRetrycanceledResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 200 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePutAsyncNoRetrycanceled(OperationDescription operationDescription) {
        return service.resumePutAsyncNoRetrycanceled(operationDescription);
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncNoHeaderInRetry() {
        return beginPutAsyncNoHeaderInRetryAsync().blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncNoHeaderInRetryAsync() {
        final Product product = null;
        return service.beginPutAsyncNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPutAsyncNoHeaderInRetry(Product product) {
        return beginPutAsyncNoHeaderInRetryAsync(product).blockLast().result();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPutAsyncNoHeaderInRetryAsync(Product product) {
        return service.beginPutAsyncNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncNoHeaderInRetry() {
        return putAsyncNoHeaderInRetryAsync().block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoHeaderInRetryResponse> putAsyncNoHeaderInRetryWithRestResponseAsync() {
        final Product product = null;
        return service.putAsyncNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncNoHeaderInRetryAsync() {
        return putAsyncNoHeaderInRetryWithRestResponseAsync()
            .flatMap((LROsPutAsyncNoHeaderInRetryResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product putAsyncNoHeaderInRetry(Product product) {
        return putAsyncNoHeaderInRetryAsync(product).block();
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPutAsyncNoHeaderInRetryResponse> putAsyncNoHeaderInRetryWithRestResponseAsync(Product product) {
        return service.putAsyncNoHeaderInRetry(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> putAsyncNoHeaderInRetryAsync(Product product) {
        return putAsyncNoHeaderInRetryWithRestResponseAsync(product)
            .flatMap((LROsPutAsyncNoHeaderInRetryResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request, service returns a 202 to the initial request with Azure-AsyncOperation header. Subsequent calls to operation status do not contain Azure-AsyncOperation header. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePutAsyncNoHeaderInRetry(OperationDescription operationDescription) {
        return service.resumePutAsyncNoHeaderInRetry(operationDescription);
    }

    /**
     * Long running put request with non resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku beginPutNonResource() {
        return beginPutNonResourceAsync().blockLast().result();
    }

    /**
     * Long running put request with non resource.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Sku>> beginPutNonResourceAsync() {
        final Sku sku = null;
        return service.beginPutNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku beginPutNonResource(Sku sku) {
        return beginPutNonResourceAsync(sku).blockLast().result();
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Sku>> beginPutNonResourceAsync(Sku sku) {
        return service.beginPutNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku putNonResource() {
        return putNonResourceAsync().block();
    }

    /**
     * Long running put request with non resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Sku>> putNonResourceWithRestResponseAsync() {
        final Sku sku = null;
        return service.putNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Sku> putNonResourceAsync() {
        return putNonResourceWithRestResponseAsync()
            .flatMap((SimpleResponse<Sku> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku putNonResource(Sku sku) {
        return putNonResourceAsync(sku).block();
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Sku>> putNonResourceWithRestResponseAsync(Sku sku) {
        return service.putNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Sku> putNonResourceAsync(Sku sku) {
        return putNonResourceWithRestResponseAsync(sku)
            .flatMap((SimpleResponse<Sku> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with non resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Sku>> resumePutNonResource(OperationDescription operationDescription) {
        return service.resumePutNonResource(operationDescription);
    }

    /**
     * Long running put request with non resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku beginPutAsyncNonResource() {
        return beginPutAsyncNonResourceAsync().blockLast().result();
    }

    /**
     * Long running put request with non resource.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Sku>> beginPutAsyncNonResourceAsync() {
        final Sku sku = null;
        return service.beginPutAsyncNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku beginPutAsyncNonResource(Sku sku) {
        return beginPutAsyncNonResourceAsync(sku).blockLast().result();
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Sku>> beginPutAsyncNonResourceAsync(Sku sku) {
        return service.beginPutAsyncNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku putAsyncNonResource() {
        return putAsyncNonResourceAsync().block();
    }

    /**
     * Long running put request with non resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Sku>> putAsyncNonResourceWithRestResponseAsync() {
        final Sku sku = null;
        return service.putAsyncNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Sku> putAsyncNonResourceAsync() {
        return putAsyncNonResourceWithRestResponseAsync()
            .flatMap((SimpleResponse<Sku> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku putAsyncNonResource(Sku sku) {
        return putAsyncNonResourceAsync(sku).block();
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Sku>> putAsyncNonResourceWithRestResponseAsync(Sku sku) {
        return service.putAsyncNonResource(sku, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with non resource.
     *
     * @param sku Sku to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Sku> putAsyncNonResourceAsync(Sku sku) {
        return putAsyncNonResourceWithRestResponseAsync(sku)
            .flatMap((SimpleResponse<Sku> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with non resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Sku>> resumePutAsyncNonResource(OperationDescription operationDescription) {
        return service.resumePutAsyncNonResource(operationDescription);
    }

    /**
     * Long running put request with sub resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProduct object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProduct beginPutSubResource() {
        return beginPutSubResourceAsync().blockLast().result();
    }

    /**
     * Long running put request with sub resource.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProduct>> beginPutSubResourceAsync() {
        final SubProduct product = null;
        return service.beginPutSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProduct object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProduct beginPutSubResource(SubProduct product) {
        return beginPutSubResourceAsync(product).blockLast().result();
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProduct>> beginPutSubResourceAsync(SubProduct product) {
        return service.beginPutSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProduct object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProduct putSubResource() {
        return putSubResourceAsync().block();
    }

    /**
     * Long running put request with sub resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SubProduct>> putSubResourceWithRestResponseAsync() {
        final SubProduct product = null;
        return service.putSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubProduct> putSubResourceAsync() {
        return putSubResourceWithRestResponseAsync()
            .flatMap((SimpleResponse<SubProduct> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProduct object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProduct putSubResource(SubProduct product) {
        return putSubResourceAsync(product).block();
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SubProduct>> putSubResourceWithRestResponseAsync(SubProduct product) {
        return service.putSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubProduct> putSubResourceAsync(SubProduct product) {
        return putSubResourceWithRestResponseAsync(product)
            .flatMap((SimpleResponse<SubProduct> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with sub resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProduct>> resumePutSubResource(OperationDescription operationDescription) {
        return service.resumePutSubResource(operationDescription);
    }

    /**
     * Long running put request with sub resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProduct object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProduct beginPutAsyncSubResource() {
        return beginPutAsyncSubResourceAsync().blockLast().result();
    }

    /**
     * Long running put request with sub resource.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProduct>> beginPutAsyncSubResourceAsync() {
        final SubProduct product = null;
        return service.beginPutAsyncSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProduct object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProduct beginPutAsyncSubResource(SubProduct product) {
        return beginPutAsyncSubResourceAsync(product).blockLast().result();
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProduct>> beginPutAsyncSubResourceAsync(SubProduct product) {
        return service.beginPutAsyncSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProduct object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProduct putAsyncSubResource() {
        return putAsyncSubResourceAsync().block();
    }

    /**
     * Long running put request with sub resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SubProduct>> putAsyncSubResourceWithRestResponseAsync() {
        final SubProduct product = null;
        return service.putAsyncSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubProduct> putAsyncSubResourceAsync() {
        return putAsyncSubResourceWithRestResponseAsync()
            .flatMap((SimpleResponse<SubProduct> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SubProduct object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubProduct putAsyncSubResource(SubProduct product) {
        return putAsyncSubResourceAsync(product).block();
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SubProduct>> putAsyncSubResourceWithRestResponseAsync(SubProduct product) {
        return service.putAsyncSubResource(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running put request with sub resource.
     *
     * @param product Sub Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubProduct> putAsyncSubResourceAsync(SubProduct product) {
        return putAsyncSubResourceWithRestResponseAsync(product)
            .flatMap((SimpleResponse<SubProduct> res) -> Mono.just(res.value()));
    }

    /**
     * Long running put request with sub resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<SubProduct>> resumePutAsyncSubResource(OperationDescription operationDescription) {
        return service.resumePutAsyncSubResource(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginDeleteProvisioning202Accepted200Succeeded() {
        return beginDeleteProvisioning202Accepted200SucceededAsync().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginDeleteProvisioning202Accepted200SucceededAsync() {
        return service.beginDeleteProvisioning202Accepted200Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product deleteProvisioning202Accepted200Succeeded() {
        return deleteProvisioning202Accepted200SucceededAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteProvisioning202Accepted200SucceededResponse> deleteProvisioning202Accepted200SucceededWithRestResponseAsync() {
        return service.deleteProvisioning202Accepted200Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> deleteProvisioning202Accepted200SucceededAsync() {
        return deleteProvisioning202Accepted200SucceededWithRestResponseAsync()
            .flatMap((LROsDeleteProvisioning202Accepted200SucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Accepted’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumeDeleteProvisioning202Accepted200Succeeded(OperationDescription operationDescription) {
        return service.resumeDeleteProvisioning202Accepted200Succeeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginDeleteProvisioning202DeletingFailed200() {
        return beginDeleteProvisioning202DeletingFailed200Async().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginDeleteProvisioning202DeletingFailed200Async() {
        return service.beginDeleteProvisioning202DeletingFailed200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product deleteProvisioning202DeletingFailed200() {
        return deleteProvisioning202DeletingFailed200Async().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteProvisioning202DeletingFailed200Response> deleteProvisioning202DeletingFailed200WithRestResponseAsync() {
        return service.deleteProvisioning202DeletingFailed200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> deleteProvisioning202DeletingFailed200Async() {
        return deleteProvisioning202DeletingFailed200WithRestResponseAsync()
            .flatMap((LROsDeleteProvisioning202DeletingFailed200Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Failed’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumeDeleteProvisioning202DeletingFailed200(OperationDescription operationDescription) {
        return service.resumeDeleteProvisioning202DeletingFailed200(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginDeleteProvisioning202Deletingcanceled200() {
        return beginDeleteProvisioning202Deletingcanceled200Async().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginDeleteProvisioning202Deletingcanceled200Async() {
        return service.beginDeleteProvisioning202Deletingcanceled200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product deleteProvisioning202Deletingcanceled200() {
        return deleteProvisioning202Deletingcanceled200Async().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteProvisioning202Deletingcanceled200Response> deleteProvisioning202Deletingcanceled200WithRestResponseAsync() {
        return service.deleteProvisioning202Deletingcanceled200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> deleteProvisioning202Deletingcanceled200Async() {
        return deleteProvisioning202Deletingcanceled200WithRestResponseAsync()
            .flatMap((LROsDeleteProvisioning202Deletingcanceled200Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’.  Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Canceled’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumeDeleteProvisioning202Deletingcanceled200(OperationDescription operationDescription) {
        return service.resumeDeleteProvisioning202Deletingcanceled200(operationDescription);
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDelete204Succeeded() {
        beginDelete204SucceededAsync().blockLast();
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDelete204SucceededAsync() {
        return service.beginDelete204Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete204Succeeded() {
        delete204SucceededAsync().block();
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> delete204SucceededWithRestResponseAsync() {
        return service.delete204Succeeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete succeeds and returns right away.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete204SucceededAsync() {
        return delete204SucceededWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Long running delete succeeds and returns right away (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDelete204Succeeded(OperationDescription operationDescription) {
        return service.resumeDelete204Succeeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginDelete202Retry200() {
        return beginDelete202Retry200Async().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginDelete202Retry200Async() {
        return service.beginDelete202Retry200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product delete202Retry200() {
        return delete202Retry200Async().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDelete202Retry200Response> delete202Retry200WithRestResponseAsync() {
        return service.delete202Retry200(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> delete202Retry200Async() {
        return delete202Retry200WithRestResponseAsync()
            .flatMap((LROsDelete202Retry200Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumeDelete202Retry200(OperationDescription operationDescription) {
        return service.resumeDelete202Retry200(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginDelete202NoRetry204() {
        return beginDelete202NoRetry204Async().blockLast().result();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginDelete202NoRetry204Async() {
        return service.beginDelete202NoRetry204(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product delete202NoRetry204() {
        return delete202NoRetry204Async().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDelete202NoRetry204Response> delete202NoRetry204WithRestResponseAsync() {
        return service.delete202NoRetry204(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> delete202NoRetry204Async() {
        return delete202NoRetry204WithRestResponseAsync()
            .flatMap((LROsDelete202NoRetry204Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Polls return this value until the last poll returns a ‘200’ with ProvisioningState=’Succeeded’ (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumeDelete202NoRetry204(OperationDescription operationDescription) {
        return service.resumeDelete202NoRetry204(operationDescription);
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteNoHeaderInRetry() {
        beginDeleteNoHeaderInRetryAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteNoHeaderInRetryAsync() {
        return service.beginDeleteNoHeaderInRetry(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNoHeaderInRetry() {
        deleteNoHeaderInRetryAsync().block();
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteNoHeaderInRetryResponse> deleteNoHeaderInRetryWithRestResponseAsync() {
        return service.deleteNoHeaderInRetry(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteNoHeaderInRetryAsync() {
        return deleteNoHeaderInRetryWithRestResponseAsync()
            .flatMap((LROsDeleteNoHeaderInRetryResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a location header in the initial request. Subsequent calls to operation status do not contain location header. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteNoHeaderInRetry(OperationDescription operationDescription) {
        return service.resumeDeleteNoHeaderInRetry(operationDescription);
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncNoHeaderInRetry() {
        beginDeleteAsyncNoHeaderInRetryAsync().blockLast();
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncNoHeaderInRetryAsync() {
        return service.beginDeleteAsyncNoHeaderInRetry(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncNoHeaderInRetry() {
        deleteAsyncNoHeaderInRetryAsync().block();
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncNoHeaderInRetryResponse> deleteAsyncNoHeaderInRetryWithRestResponseAsync() {
        return service.deleteAsyncNoHeaderInRetry(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncNoHeaderInRetryAsync() {
        return deleteAsyncNoHeaderInRetryWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncNoHeaderInRetryResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns an Azure-AsyncOperation header in the initial request. Subsequent calls to operation status do not contain Azure-AsyncOperation header. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncNoHeaderInRetry(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncNoHeaderInRetry(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncRetrySucceeded() {
        beginDeleteAsyncRetrySucceededAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncRetrySucceededAsync() {
        return service.beginDeleteAsyncRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncRetrySucceeded() {
        deleteAsyncRetrySucceededAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncRetrySucceededResponse> deleteAsyncRetrySucceededWithRestResponseAsync() {
        return service.deleteAsyncRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncRetrySucceededAsync() {
        return deleteAsyncRetrySucceededWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncRetrySucceededResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncRetrySucceeded(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncRetrySucceeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncNoRetrySucceeded() {
        beginDeleteAsyncNoRetrySucceededAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncNoRetrySucceededAsync() {
        return service.beginDeleteAsyncNoRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncNoRetrySucceeded() {
        deleteAsyncNoRetrySucceededAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncNoRetrySucceededResponse> deleteAsyncNoRetrySucceededWithRestResponseAsync() {
        return service.deleteAsyncNoRetrySucceeded(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncNoRetrySucceededAsync() {
        return deleteAsyncNoRetrySucceededWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncNoRetrySucceededResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncNoRetrySucceeded(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncNoRetrySucceeded(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncRetryFailed() {
        beginDeleteAsyncRetryFailedAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncRetryFailedAsync() {
        return service.beginDeleteAsyncRetryFailed(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncRetryFailed() {
        deleteAsyncRetryFailedAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncRetryFailedResponse> deleteAsyncRetryFailedWithRestResponseAsync() {
        return service.deleteAsyncRetryFailed(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncRetryFailedAsync() {
        return deleteAsyncRetryFailedWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncRetryFailedResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncRetryFailed(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncRetryFailed(operationDescription);
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginDeleteAsyncRetrycanceled() {
        beginDeleteAsyncRetrycanceledAsync().blockLast();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginDeleteAsyncRetrycanceledAsync() {
        return service.beginDeleteAsyncRetrycanceled(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAsyncRetrycanceled() {
        deleteAsyncRetrycanceledAsync().block();
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsDeleteAsyncRetrycanceledResponse> deleteAsyncRetrycanceledWithRestResponseAsync() {
        return service.deleteAsyncRetrycanceled(this.client.getAcceptLanguage());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsyncRetrycanceledAsync() {
        return deleteAsyncRetrycanceledWithRestResponseAsync()
            .flatMap((LROsDeleteAsyncRetrycanceledResponse res) -> Mono.empty());
    }

    /**
     * Long running delete request, service returns a 202 to the initial request. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumeDeleteAsyncRetrycanceled(OperationDescription operationDescription) {
        return service.resumeDeleteAsyncRetrycanceled(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku beginPost200WithPayload() {
        return beginPost200WithPayloadAsync().blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Sku>> beginPost200WithPayloadAsync() {
        return service.beginPost200WithPayload(this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Sku object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Sku post200WithPayload() {
        return post200WithPayloadAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Sku>> post200WithPayloadWithRestResponseAsync() {
        return service.post200WithPayload(this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Sku> post200WithPayloadAsync() {
        return post200WithPayloadWithRestResponseAsync()
            .flatMap((SimpleResponse<Sku> res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header. Poll returns a 200 with a response body after success. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Sku>> resumePost200WithPayload(OperationDescription operationDescription) {
        return service.resumePost200WithPayload(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPost202Retry200() {
        beginPost202Retry200Async().blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPost202Retry200Async() {
        final Product product = null;
        return service.beginPost202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPost202Retry200(Product product) {
        beginPost202Retry200Async(product).blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPost202Retry200Async(Product product) {
        return service.beginPost202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post202Retry200() {
        post202Retry200Async().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPost202Retry200Response> post202Retry200WithRestResponseAsync() {
        final Product product = null;
        return service.post202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post202Retry200Async() {
        return post202Retry200WithRestResponseAsync()
            .flatMap((LROsPost202Retry200Response res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post202Retry200(Product product) {
        post202Retry200Async(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPost202Retry200Response> post202Retry200WithRestResponseAsync(Product product) {
        return service.post202Retry200(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post202Retry200Async(Product product) {
        return post202Retry200WithRestResponseAsync(product)
            .flatMap((LROsPost202Retry200Response res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' and 'Retry-After' headers, Polls return a 200 with a response body after success (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumePost202Retry200(OperationDescription operationDescription) {
        return service.resumePost202Retry200(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPost202NoRetry204() {
        return beginPost202NoRetry204Async().blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPost202NoRetry204Async() {
        final Product product = null;
        return service.beginPost202NoRetry204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPost202NoRetry204(Product product) {
        return beginPost202NoRetry204Async(product).blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPost202NoRetry204Async(Product product) {
        return service.beginPost202NoRetry204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product post202NoRetry204() {
        return post202NoRetry204Async().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPost202NoRetry204Response> post202NoRetry204WithRestResponseAsync() {
        final Product product = null;
        return service.post202NoRetry204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> post202NoRetry204Async() {
        return post202NoRetry204WithRestResponseAsync()
            .flatMap((LROsPost202NoRetry204Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product post202NoRetry204(Product product) {
        return post202NoRetry204Async(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPost202NoRetry204Response> post202NoRetry204WithRestResponseAsync(Product product) {
        return service.post202NoRetry204(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> post202NoRetry204Async(Product product) {
        return post202NoRetry204WithRestResponseAsync(product)
            .flatMap((LROsPost202NoRetry204Response res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with 'Location' header, 204 with noresponse body after success (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePost202NoRetry204(OperationDescription operationDescription) {
        return service.resumePost202NoRetry204(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPostAsyncRetrySucceeded() {
        return beginPostAsyncRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPostAsyncRetrySucceededAsync() {
        final Product product = null;
        return service.beginPostAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPostAsyncRetrySucceeded(Product product) {
        return beginPostAsyncRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPostAsyncRetrySucceededAsync(Product product) {
        return service.beginPostAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product postAsyncRetrySucceeded() {
        return postAsyncRetrySucceededAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetrySucceededResponse> postAsyncRetrySucceededWithRestResponseAsync() {
        final Product product = null;
        return service.postAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> postAsyncRetrySucceededAsync() {
        return postAsyncRetrySucceededWithRestResponseAsync()
            .flatMap((LROsPostAsyncRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product postAsyncRetrySucceeded(Product product) {
        return postAsyncRetrySucceededAsync(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetrySucceededResponse> postAsyncRetrySucceededWithRestResponseAsync(Product product) {
        return service.postAsyncRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> postAsyncRetrySucceededAsync(Product product) {
        return postAsyncRetrySucceededWithRestResponseAsync(product)
            .flatMap((LROsPostAsyncRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePostAsyncRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePostAsyncRetrySucceeded(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPostAsyncNoRetrySucceeded() {
        return beginPostAsyncNoRetrySucceededAsync().blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPostAsyncNoRetrySucceededAsync() {
        final Product product = null;
        return service.beginPostAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product beginPostAsyncNoRetrySucceeded(Product product) {
        return beginPostAsyncNoRetrySucceededAsync(product).blockLast().result();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> beginPostAsyncNoRetrySucceededAsync(Product product) {
        return service.beginPostAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product postAsyncNoRetrySucceeded() {
        return postAsyncNoRetrySucceededAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncNoRetrySucceededResponse> postAsyncNoRetrySucceededWithRestResponseAsync() {
        final Product product = null;
        return service.postAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> postAsyncNoRetrySucceededAsync() {
        return postAsyncNoRetrySucceededWithRestResponseAsync()
            .flatMap((LROsPostAsyncNoRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product postAsyncNoRetrySucceeded(Product product) {
        return postAsyncNoRetrySucceededAsync(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncNoRetrySucceededResponse> postAsyncNoRetrySucceededWithRestResponseAsync(Product product) {
        return service.postAsyncNoRetrySucceeded(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> postAsyncNoRetrySucceededAsync(Product product) {
        return postAsyncNoRetrySucceededWithRestResponseAsync(product)
            .flatMap((LROsPostAsyncNoRetrySucceededResponse res) -> Mono.just(res.value()));
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Product>> resumePostAsyncNoRetrySucceeded(OperationDescription operationDescription) {
        return service.resumePostAsyncNoRetrySucceeded(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRetryFailed() {
        beginPostAsyncRetryFailedAsync().blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRetryFailedAsync() {
        final Product product = null;
        return service.beginPostAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRetryFailed(Product product) {
        beginPostAsyncRetryFailedAsync(product).blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRetryFailedAsync(Product product) {
        return service.beginPostAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRetryFailed() {
        postAsyncRetryFailedAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetryFailedResponse> postAsyncRetryFailedWithRestResponseAsync() {
        final Product product = null;
        return service.postAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRetryFailedAsync() {
        return postAsyncRetryFailedWithRestResponseAsync()
            .flatMap((LROsPostAsyncRetryFailedResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRetryFailed(Product product) {
        postAsyncRetryFailedAsync(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetryFailedResponse> postAsyncRetryFailedWithRestResponseAsync(Product product) {
        return service.postAsyncRetryFailed(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRetryFailedAsync(Product product) {
        return postAsyncRetryFailedWithRestResponseAsync(product)
            .flatMap((LROsPostAsyncRetryFailedResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumePostAsyncRetryFailed(OperationDescription operationDescription) {
        return service.resumePostAsyncRetryFailed(operationDescription);
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRetrycanceled() {
        beginPostAsyncRetrycanceledAsync().blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRetrycanceledAsync() {
        final Product product = null;
        return service.beginPostAsyncRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginPostAsyncRetrycanceled(Product product) {
        beginPostAsyncRetrycanceledAsync(product).blockLast();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> beginPostAsyncRetrycanceledAsync(Product product) {
        return service.beginPostAsyncRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRetrycanceled() {
        postAsyncRetrycanceledAsync().block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetrycanceledResponse> postAsyncRetrycanceledWithRestResponseAsync() {
        final Product product = null;
        return service.postAsyncRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRetrycanceledAsync() {
        return postAsyncRetrycanceledWithRestResponseAsync()
            .flatMap((LROsPostAsyncRetrycanceledResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postAsyncRetrycanceled(Product product) {
        postAsyncRetrycanceledAsync(product).block();
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LROsPostAsyncRetrycanceledResponse> postAsyncRetrycanceledWithRestResponseAsync(Product product) {
        return service.postAsyncRetrycanceled(product, this.client.getAcceptLanguage());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status.
     *
     * @param product Product to put.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> postAsyncRetrycanceledAsync(Product product) {
        return postAsyncRetrycanceledWithRestResponseAsync(product)
            .flatMap((LROsPostAsyncRetrycanceledResponse res) -> Mono.empty());
    }

    /**
     * Long running post request, service returns a 202 to the initial request, with an entity that contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation header for operation status (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<OperationStatus<Void>> resumePostAsyncRetrycanceled(OperationDescription operationDescription) {
        return service.resumePostAsyncRetrycanceled(operationDescription);
    }
}
