// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.bodyduration;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceMethod;
import java.time.Duration;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Durations.
 */
public interface Durations {
    /**
     * Get null duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Duration object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Duration getNull();

    /**
     * Get null duration value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Duration>> getNullWithRestResponseAsync();

    /**
     * Get null duration value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Duration> getNullAsync();

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Duration value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putPositiveDuration(Duration durationBody);

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Duration value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putPositiveDurationWithRestResponseAsync(Duration durationBody);

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Duration value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putPositiveDurationAsync(Duration durationBody);

    /**
     * Get a positive duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Duration object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Duration getPositiveDuration();

    /**
     * Get a positive duration value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Duration>> getPositiveDurationWithRestResponseAsync();

    /**
     * Get a positive duration value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Duration> getPositiveDurationAsync();

    /**
     * Get an invalid duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Duration object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Duration getInvalid();

    /**
     * Get an invalid duration value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Duration>> getInvalidWithRestResponseAsync();

    /**
     * Get an invalid duration value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Duration> getInvalidAsync();
}
