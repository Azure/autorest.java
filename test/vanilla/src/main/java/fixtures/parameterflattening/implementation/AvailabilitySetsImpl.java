// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.parameterflattening.implementation;

import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.Validator;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Patch;
import com.azure.core.implementation.annotation.PathParam;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import fixtures.parameterflattening.AvailabilitySets;
import fixtures.parameterflattening.models.AvailabilitySetUpdateParameters;
import java.util.Map;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * AvailabilitySets.
 */
public final class AvailabilitySetsImpl implements AvailabilitySets {
    /**
     * The proxy service used to perform REST calls.
     */
    private AvailabilitySetsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestParameterFlatteningImpl client;

    /**
     * Initializes an instance of AvailabilitySetsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public AvailabilitySetsImpl(AutoRestParameterFlatteningImpl client) {
        this.service = RestProxy.create(AvailabilitySetsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestParameterFlatteningAvailabilitySets to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestParameterFlatteningAvailabilitySets")
    private interface AvailabilitySetsService {
        @Patch("parameterFlattening/{resourceGroupName}/{availabilitySetName}")
        @ExpectedResponses({200})
        Mono<VoidResponse> update(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("availabilitySetName") String avset, @BodyParam("application/json; charset=utf-8") AvailabilitySetUpdateParameters tags);
    }

    /**
     * Updates the tags for an availability set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param avset The name of the storage availability set.
     * @param tags A set of tags. A description about the set of tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String resourceGroupName, String avset, Map<String, String> tags) {
        updateAsync(resourceGroupName, avset, tags).block();
    }

    /**
     * Updates the tags for an availability set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param avset The name of the storage availability set.
     * @param tags A set of tags. A description about the set of tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> updateWithRestResponseAsync(String resourceGroupName, String avset, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (avset == null) {
            throw new IllegalArgumentException("Parameter avset is required and cannot be null.");
        }
        if (tags == null) {
            throw new IllegalArgumentException("Parameter tags is required and cannot be null.");
        }
        Validator.validate(tags);
        AvailabilitySetUpdateParameters tags1 = new AvailabilitySetUpdateParameters();
        tags1.tags(tags);
        return service.update(resourceGroupName, avset, tags1);
    }

    /**
     * Updates the tags for an availability set.
     *
     * @param resourceGroupName The name of the resource group.
     * @param avset The name of the storage availability set.
     * @param tags A set of tags. A description about the set of tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateAsync(String resourceGroupName, String avset, Map<String, String> tags) {
        return updateWithRestResponseAsync(resourceGroupName, avset, tags)
            .flatMap((VoidResponse res) -> Mono.empty());
    }
}
