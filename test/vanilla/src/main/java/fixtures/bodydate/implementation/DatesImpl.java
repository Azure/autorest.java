/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydate.implementation;

import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import fixtures.bodydate.Dates;
import fixtures.bodydate.models.ErrorException;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.time.LocalDate;

/**
 * An instance of this class provides access to all the operations defined in
 * Dates.
 */
public final class DatesImpl implements Dates {
    /**
     * The proxy service used to perform REST calls.
     */
    private DatesService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestDateTestServiceImpl client;

    /**
     * Initializes an instance of DatesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public DatesImpl(AutoRestDateTestServiceImpl client) {
        this.service = RestProxy.create(DatesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Dates to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface DatesService {
        @GET("date/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<LocalDate>> getNull();

        @GET("date/invaliddate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<LocalDate>> getInvalidDate();

        @GET("date/overflowdate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<LocalDate>> getOverflowDate();

        @GET("date/underflowdate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<LocalDate>> getUnderflowDate();

        @PUT("date/max")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putMaxDate(@BodyParam("application/json; charset=utf-8") LocalDate dateBody);

        @GET("date/max")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<LocalDate>> getMaxDate();

        @PUT("date/min")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putMinDate(@BodyParam("application/json; charset=utf-8") LocalDate dateBody);

        @GET("date/min")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<LocalDate>> getMinDate();
    }

    /**
     * Get null date value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LocalDate object if successful.
     */
    public LocalDate getNull() {
        return getNullAsync().blockingGet();
    }

    /**
     * Get null date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<LocalDate> getNullAsync(ServiceCallback<LocalDate> serviceCallback) {
        return ServiceFuture.fromBody(getNullAsync(), serviceCallback);
    }

    /**
     * Get null date value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<LocalDate>> getNullWithRestResponseAsync() {
        return service.getNull();
    }

    /**
     * Get null date value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<LocalDate> getNullAsync() {
        return getNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<LocalDate> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get invalid date value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LocalDate object if successful.
     */
    public LocalDate getInvalidDate() {
        return getInvalidDateAsync().blockingGet();
    }

    /**
     * Get invalid date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<LocalDate> getInvalidDateAsync(ServiceCallback<LocalDate> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidDateAsync(), serviceCallback);
    }

    /**
     * Get invalid date value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<LocalDate>> getInvalidDateWithRestResponseAsync() {
        return service.getInvalidDate();
    }

    /**
     * Get invalid date value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<LocalDate> getInvalidDateAsync() {
        return getInvalidDateWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<LocalDate> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get overflow date value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LocalDate object if successful.
     */
    public LocalDate getOverflowDate() {
        return getOverflowDateAsync().blockingGet();
    }

    /**
     * Get overflow date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<LocalDate> getOverflowDateAsync(ServiceCallback<LocalDate> serviceCallback) {
        return ServiceFuture.fromBody(getOverflowDateAsync(), serviceCallback);
    }

    /**
     * Get overflow date value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<LocalDate>> getOverflowDateWithRestResponseAsync() {
        return service.getOverflowDate();
    }

    /**
     * Get overflow date value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<LocalDate> getOverflowDateAsync() {
        return getOverflowDateWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<LocalDate> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get underflow date value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LocalDate object if successful.
     */
    public LocalDate getUnderflowDate() {
        return getUnderflowDateAsync().blockingGet();
    }

    /**
     * Get underflow date value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<LocalDate> getUnderflowDateAsync(ServiceCallback<LocalDate> serviceCallback) {
        return ServiceFuture.fromBody(getUnderflowDateAsync(), serviceCallback);
    }

    /**
     * Get underflow date value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<LocalDate>> getUnderflowDateWithRestResponseAsync() {
        return service.getUnderflowDate();
    }

    /**
     * Get underflow date value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<LocalDate> getUnderflowDateAsync() {
        return getUnderflowDateWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<LocalDate> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putMaxDate(@NonNull LocalDate dateBody) {
        putMaxDateAsync(dateBody).blockingAwait();
    }

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putMaxDateAsync(@NonNull LocalDate dateBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putMaxDateAsync(dateBody), serviceCallback);
    }

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putMaxDateWithRestResponseAsync(@NonNull LocalDate dateBody) {
        if (dateBody == null) {
            throw new IllegalArgumentException("Parameter dateBody is required and cannot be null.");
        }
        return service.putMaxDate(dateBody);
    }

    /**
     * Put max date value 9999-12-31.
     *
     * @param dateBody the LocalDate value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putMaxDateAsync(@NonNull LocalDate dateBody) {
        return putMaxDateWithRestResponseAsync(dateBody)
            .ignoreElement();
    }

    /**
     * Get max date value 9999-12-31.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LocalDate object if successful.
     */
    public LocalDate getMaxDate() {
        return getMaxDateAsync().blockingGet();
    }

    /**
     * Get max date value 9999-12-31.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<LocalDate> getMaxDateAsync(ServiceCallback<LocalDate> serviceCallback) {
        return ServiceFuture.fromBody(getMaxDateAsync(), serviceCallback);
    }

    /**
     * Get max date value 9999-12-31.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<LocalDate>> getMaxDateWithRestResponseAsync() {
        return service.getMaxDate();
    }

    /**
     * Get max date value 9999-12-31.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<LocalDate> getMaxDateAsync() {
        return getMaxDateWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<LocalDate> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putMinDate(@NonNull LocalDate dateBody) {
        putMinDateAsync(dateBody).blockingAwait();
    }

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putMinDateAsync(@NonNull LocalDate dateBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putMinDateAsync(dateBody), serviceCallback);
    }

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putMinDateWithRestResponseAsync(@NonNull LocalDate dateBody) {
        if (dateBody == null) {
            throw new IllegalArgumentException("Parameter dateBody is required and cannot be null.");
        }
        return service.putMinDate(dateBody);
    }

    /**
     * Put min date value 0000-01-01.
     *
     * @param dateBody the LocalDate value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putMinDateAsync(@NonNull LocalDate dateBody) {
        return putMinDateWithRestResponseAsync(dateBody)
            .ignoreElement();
    }

    /**
     * Get min date value 0000-01-01.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LocalDate object if successful.
     */
    public LocalDate getMinDate() {
        return getMinDateAsync().blockingGet();
    }

    /**
     * Get min date value 0000-01-01.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<LocalDate> getMinDateAsync(ServiceCallback<LocalDate> serviceCallback) {
        return ServiceFuture.fromBody(getMinDateAsync(), serviceCallback);
    }

    /**
     * Get min date value 0000-01-01.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<LocalDate>> getMinDateWithRestResponseAsync() {
        return service.getMinDate();
    }

    /**
     * Get min date value 0000-01-01.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<LocalDate> getMinDateAsync() {
        return getMinDateWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<LocalDate> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }
}
