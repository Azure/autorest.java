/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodycomplex.implementation;

import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import fixtures.bodycomplex.Primitives;
import fixtures.bodycomplex.models.BooleanWrapper;
import fixtures.bodycomplex.models.ByteWrapper;
import fixtures.bodycomplex.models.Datetimerfc1123Wrapper;
import fixtures.bodycomplex.models.DatetimeWrapper;
import fixtures.bodycomplex.models.DateWrapper;
import fixtures.bodycomplex.models.DoubleWrapper;
import fixtures.bodycomplex.models.DurationWrapper;
import fixtures.bodycomplex.models.ErrorException;
import fixtures.bodycomplex.models.FloatWrapper;
import fixtures.bodycomplex.models.IntWrapper;
import fixtures.bodycomplex.models.LongWrapper;
import fixtures.bodycomplex.models.StringWrapper;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Primitives.
 */
public final class PrimitivesImpl implements Primitives {
    /**
     * The proxy service used to perform REST calls.
     */
    private PrimitivesService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestComplexTestServiceImpl client;

    /**
     * Initializes an instance of PrimitivesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PrimitivesImpl(AutoRestComplexTestServiceImpl client) {
        this.service = RestProxy.create(PrimitivesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Primitives to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface PrimitivesService {
        @GET("complex/primitive/integer")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<IntWrapper>> getInt();

        @PUT("complex/primitive/integer")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putInt(@BodyParam("application/json; charset=utf-8") IntWrapper complexBody);

        @GET("complex/primitive/long")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<LongWrapper>> getLong();

        @PUT("complex/primitive/long")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putLong(@BodyParam("application/json; charset=utf-8") LongWrapper complexBody);

        @GET("complex/primitive/float")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<FloatWrapper>> getFloat();

        @PUT("complex/primitive/float")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putFloat(@BodyParam("application/json; charset=utf-8") FloatWrapper complexBody);

        @GET("complex/primitive/double")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<DoubleWrapper>> getDouble();

        @PUT("complex/primitive/double")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDouble(@BodyParam("application/json; charset=utf-8") DoubleWrapper complexBody);

        @GET("complex/primitive/bool")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<BooleanWrapper>> getBool();

        @PUT("complex/primitive/bool")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putBool(@BodyParam("application/json; charset=utf-8") BooleanWrapper complexBody);

        @GET("complex/primitive/string")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<StringWrapper>> getString();

        @PUT("complex/primitive/string")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putString(@BodyParam("application/json; charset=utf-8") StringWrapper complexBody);

        @GET("complex/primitive/date")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<DateWrapper>> getDate();

        @PUT("complex/primitive/date")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDate(@BodyParam("application/json; charset=utf-8") DateWrapper complexBody);

        @GET("complex/primitive/datetime")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<DatetimeWrapper>> getDateTime();

        @PUT("complex/primitive/datetime")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDateTime(@BodyParam("application/json; charset=utf-8") DatetimeWrapper complexBody);

        @GET("complex/primitive/datetimerfc1123")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Datetimerfc1123Wrapper>> getDateTimeRfc1123();

        @PUT("complex/primitive/datetimerfc1123")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDateTimeRfc1123(@BodyParam("application/json; charset=utf-8") Datetimerfc1123Wrapper complexBody);

        @GET("complex/primitive/duration")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<DurationWrapper>> getDuration();

        @PUT("complex/primitive/duration")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDuration(@BodyParam("application/json; charset=utf-8") DurationWrapper complexBody);

        @GET("complex/primitive/byte")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<ByteWrapper>> getByte();

        @PUT("complex/primitive/byte")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putByte(@BodyParam("application/json; charset=utf-8") ByteWrapper complexBody);
    }

    /**
     * Get complex types with integer properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the IntWrapper object if successful.
     */
    public IntWrapper getInt() {
        return getIntAsync().blockingGet();
    }

    /**
     * Get complex types with integer properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<IntWrapper> getIntAsync(ServiceCallback<IntWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getIntAsync(), serviceCallback);
    }

    /**
     * Get complex types with integer properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<IntWrapper>> getIntWithRestResponseAsync() {
        return service.getInt();
    }

    /**
     * Get complex types with integer properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<IntWrapper> getIntAsync() {
        return getIntWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<IntWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with integer properties.
     *
     * @param complexBody Please put -1 and 2.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putInt(@NonNull IntWrapper complexBody) {
        putIntAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with integer properties.
     *
     * @param complexBody Please put -1 and 2.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putIntAsync(@NonNull IntWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putIntAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with integer properties.
     *
     * @param complexBody Please put -1 and 2.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putIntWithRestResponseAsync(@NonNull IntWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putInt(complexBody);
    }

    /**
     * Put complex types with integer properties.
     *
     * @param complexBody Please put -1 and 2.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putIntAsync(@NonNull IntWrapper complexBody) {
        return putIntWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with long properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LongWrapper object if successful.
     */
    public LongWrapper getLong() {
        return getLongAsync().blockingGet();
    }

    /**
     * Get complex types with long properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<LongWrapper> getLongAsync(ServiceCallback<LongWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getLongAsync(), serviceCallback);
    }

    /**
     * Get complex types with long properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<LongWrapper>> getLongWithRestResponseAsync() {
        return service.getLong();
    }

    /**
     * Get complex types with long properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<LongWrapper> getLongAsync() {
        return getLongWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<LongWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with long properties.
     *
     * @param complexBody Please put 1099511627775 and -999511627788.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putLong(@NonNull LongWrapper complexBody) {
        putLongAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with long properties.
     *
     * @param complexBody Please put 1099511627775 and -999511627788.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putLongAsync(@NonNull LongWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putLongAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with long properties.
     *
     * @param complexBody Please put 1099511627775 and -999511627788.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putLongWithRestResponseAsync(@NonNull LongWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putLong(complexBody);
    }

    /**
     * Put complex types with long properties.
     *
     * @param complexBody Please put 1099511627775 and -999511627788.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putLongAsync(@NonNull LongWrapper complexBody) {
        return putLongWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with float properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FloatWrapper object if successful.
     */
    public FloatWrapper getFloat() {
        return getFloatAsync().blockingGet();
    }

    /**
     * Get complex types with float properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<FloatWrapper> getFloatAsync(ServiceCallback<FloatWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getFloatAsync(), serviceCallback);
    }

    /**
     * Get complex types with float properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<FloatWrapper>> getFloatWithRestResponseAsync() {
        return service.getFloat();
    }

    /**
     * Get complex types with float properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<FloatWrapper> getFloatAsync() {
        return getFloatWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<FloatWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with float properties.
     *
     * @param complexBody Please put 1.05 and -0.003.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putFloat(@NonNull FloatWrapper complexBody) {
        putFloatAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with float properties.
     *
     * @param complexBody Please put 1.05 and -0.003.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putFloatAsync(@NonNull FloatWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putFloatAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with float properties.
     *
     * @param complexBody Please put 1.05 and -0.003.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putFloatWithRestResponseAsync(@NonNull FloatWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putFloat(complexBody);
    }

    /**
     * Put complex types with float properties.
     *
     * @param complexBody Please put 1.05 and -0.003.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putFloatAsync(@NonNull FloatWrapper complexBody) {
        return putFloatWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with double properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DoubleWrapper object if successful.
     */
    public DoubleWrapper getDouble() {
        return getDoubleAsync().blockingGet();
    }

    /**
     * Get complex types with double properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<DoubleWrapper> getDoubleAsync(ServiceCallback<DoubleWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getDoubleAsync(), serviceCallback);
    }

    /**
     * Get complex types with double properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<DoubleWrapper>> getDoubleWithRestResponseAsync() {
        return service.getDouble();
    }

    /**
     * Get complex types with double properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<DoubleWrapper> getDoubleAsync() {
        return getDoubleWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<DoubleWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with double properties.
     *
     * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDouble(@NonNull DoubleWrapper complexBody) {
        putDoubleAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with double properties.
     *
     * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDoubleAsync(@NonNull DoubleWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDoubleAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with double properties.
     *
     * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDoubleWithRestResponseAsync(@NonNull DoubleWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putDouble(complexBody);
    }

    /**
     * Put complex types with double properties.
     *
     * @param complexBody Please put 3e-100 and -0.000000000000000000000000000000000000000000000000000000005.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDoubleAsync(@NonNull DoubleWrapper complexBody) {
        return putDoubleWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with bool properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BooleanWrapper object if successful.
     */
    public BooleanWrapper getBool() {
        return getBoolAsync().blockingGet();
    }

    /**
     * Get complex types with bool properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<BooleanWrapper> getBoolAsync(ServiceCallback<BooleanWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getBoolAsync(), serviceCallback);
    }

    /**
     * Get complex types with bool properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<BooleanWrapper>> getBoolWithRestResponseAsync() {
        return service.getBool();
    }

    /**
     * Get complex types with bool properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<BooleanWrapper> getBoolAsync() {
        return getBoolWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<BooleanWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with bool properties.
     *
     * @param complexBody Please put true and false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBool(@NonNull BooleanWrapper complexBody) {
        putBoolAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with bool properties.
     *
     * @param complexBody Please put true and false.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBoolAsync(@NonNull BooleanWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBoolAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with bool properties.
     *
     * @param complexBody Please put true and false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putBoolWithRestResponseAsync(@NonNull BooleanWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putBool(complexBody);
    }

    /**
     * Put complex types with bool properties.
     *
     * @param complexBody Please put true and false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putBoolAsync(@NonNull BooleanWrapper complexBody) {
        return putBoolWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with string properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the StringWrapper object if successful.
     */
    public StringWrapper getString() {
        return getStringAsync().blockingGet();
    }

    /**
     * Get complex types with string properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<StringWrapper> getStringAsync(ServiceCallback<StringWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getStringAsync(), serviceCallback);
    }

    /**
     * Get complex types with string properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<StringWrapper>> getStringWithRestResponseAsync() {
        return service.getString();
    }

    /**
     * Get complex types with string properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<StringWrapper> getStringAsync() {
        return getStringWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<StringWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with string properties.
     *
     * @param complexBody Please put 'goodrequest', '', and null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putString(@NonNull StringWrapper complexBody) {
        putStringAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with string properties.
     *
     * @param complexBody Please put 'goodrequest', '', and null.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putStringAsync(@NonNull StringWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putStringAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with string properties.
     *
     * @param complexBody Please put 'goodrequest', '', and null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putStringWithRestResponseAsync(@NonNull StringWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putString(complexBody);
    }

    /**
     * Put complex types with string properties.
     *
     * @param complexBody Please put 'goodrequest', '', and null.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putStringAsync(@NonNull StringWrapper complexBody) {
        return putStringWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with date properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DateWrapper object if successful.
     */
    public DateWrapper getDate() {
        return getDateAsync().blockingGet();
    }

    /**
     * Get complex types with date properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<DateWrapper> getDateAsync(ServiceCallback<DateWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getDateAsync(), serviceCallback);
    }

    /**
     * Get complex types with date properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<DateWrapper>> getDateWithRestResponseAsync() {
        return service.getDate();
    }

    /**
     * Get complex types with date properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<DateWrapper> getDateAsync() {
        return getDateWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<DateWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with date properties.
     *
     * @param complexBody Please put '0001-01-01' and '2016-02-29'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDate(@NonNull DateWrapper complexBody) {
        putDateAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with date properties.
     *
     * @param complexBody Please put '0001-01-01' and '2016-02-29'.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDateAsync(@NonNull DateWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with date properties.
     *
     * @param complexBody Please put '0001-01-01' and '2016-02-29'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDateWithRestResponseAsync(@NonNull DateWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putDate(complexBody);
    }

    /**
     * Put complex types with date properties.
     *
     * @param complexBody Please put '0001-01-01' and '2016-02-29'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDateAsync(@NonNull DateWrapper complexBody) {
        return putDateWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with datetime properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DatetimeWrapper object if successful.
     */
    public DatetimeWrapper getDateTime() {
        return getDateTimeAsync().blockingGet();
    }

    /**
     * Get complex types with datetime properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<DatetimeWrapper> getDateTimeAsync(ServiceCallback<DatetimeWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeAsync(), serviceCallback);
    }

    /**
     * Get complex types with datetime properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<DatetimeWrapper>> getDateTimeWithRestResponseAsync() {
        return service.getDateTime();
    }

    /**
     * Get complex types with datetime properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<DatetimeWrapper> getDateTimeAsync() {
        return getDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<DatetimeWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with datetime properties.
     *
     * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDateTime(@NonNull DatetimeWrapper complexBody) {
        putDateTimeAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with datetime properties.
     *
     * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDateTimeAsync(@NonNull DatetimeWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateTimeAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with datetime properties.
     *
     * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDateTimeWithRestResponseAsync(@NonNull DatetimeWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putDateTime(complexBody);
    }

    /**
     * Put complex types with datetime properties.
     *
     * @param complexBody Please put '0001-01-01T12:00:00-04:00' and '2015-05-18T11:38:00-08:00'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDateTimeAsync(@NonNull DatetimeWrapper complexBody) {
        return putDateTimeWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with datetimeRfc1123 properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Datetimerfc1123Wrapper object if successful.
     */
    public Datetimerfc1123Wrapper getDateTimeRfc1123() {
        return getDateTimeRfc1123Async().blockingGet();
    }

    /**
     * Get complex types with datetimeRfc1123 properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Datetimerfc1123Wrapper> getDateTimeRfc1123Async(ServiceCallback<Datetimerfc1123Wrapper> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeRfc1123Async(), serviceCallback);
    }

    /**
     * Get complex types with datetimeRfc1123 properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Datetimerfc1123Wrapper>> getDateTimeRfc1123WithRestResponseAsync() {
        return service.getDateTimeRfc1123();
    }

    /**
     * Get complex types with datetimeRfc1123 properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Datetimerfc1123Wrapper> getDateTimeRfc1123Async() {
        return getDateTimeRfc1123WithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Datetimerfc1123Wrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with datetimeRfc1123 properties.
     *
     * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDateTimeRfc1123(@NonNull Datetimerfc1123Wrapper complexBody) {
        putDateTimeRfc1123Async(complexBody).blockingAwait();
    }

    /**
     * Put complex types with datetimeRfc1123 properties.
     *
     * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDateTimeRfc1123Async(@NonNull Datetimerfc1123Wrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateTimeRfc1123Async(complexBody), serviceCallback);
    }

    /**
     * Put complex types with datetimeRfc1123 properties.
     *
     * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDateTimeRfc1123WithRestResponseAsync(@NonNull Datetimerfc1123Wrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putDateTimeRfc1123(complexBody);
    }

    /**
     * Put complex types with datetimeRfc1123 properties.
     *
     * @param complexBody Please put 'Mon, 01 Jan 0001 12:00:00 GMT' and 'Mon, 18 May 2015 11:38:00 GMT'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDateTimeRfc1123Async(@NonNull Datetimerfc1123Wrapper complexBody) {
        return putDateTimeRfc1123WithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with duration properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DurationWrapper object if successful.
     */
    public DurationWrapper getDuration() {
        return getDurationAsync().blockingGet();
    }

    /**
     * Get complex types with duration properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<DurationWrapper> getDurationAsync(ServiceCallback<DurationWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getDurationAsync(), serviceCallback);
    }

    /**
     * Get complex types with duration properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<DurationWrapper>> getDurationWithRestResponseAsync() {
        return service.getDuration();
    }

    /**
     * Get complex types with duration properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<DurationWrapper> getDurationAsync() {
        return getDurationWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<DurationWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with duration properties.
     *
     * @param complexBody Please put 'P123DT22H14M12.011S'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDuration(@NonNull DurationWrapper complexBody) {
        putDurationAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with duration properties.
     *
     * @param complexBody Please put 'P123DT22H14M12.011S'.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDurationAsync(@NonNull DurationWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDurationAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with duration properties.
     *
     * @param complexBody Please put 'P123DT22H14M12.011S'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDurationWithRestResponseAsync(@NonNull DurationWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putDuration(complexBody);
    }

    /**
     * Put complex types with duration properties.
     *
     * @param complexBody Please put 'P123DT22H14M12.011S'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDurationAsync(@NonNull DurationWrapper complexBody) {
        return putDurationWithRestResponseAsync(complexBody)
            .toCompletable();
    }

    /**
     * Get complex types with byte properties.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ByteWrapper object if successful.
     */
    public ByteWrapper getByte() {
        return getByteAsync().blockingGet();
    }

    /**
     * Get complex types with byte properties.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<ByteWrapper> getByteAsync(ServiceCallback<ByteWrapper> serviceCallback) {
        return ServiceFuture.fromBody(getByteAsync(), serviceCallback);
    }

    /**
     * Get complex types with byte properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<ByteWrapper>> getByteWithRestResponseAsync() {
        return service.getByte();
    }

    /**
     * Get complex types with byte properties.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<ByteWrapper> getByteAsync() {
        return getByteWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<ByteWrapper> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put complex types with byte properties.
     *
     * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putByte(@NonNull ByteWrapper complexBody) {
        putByteAsync(complexBody).blockingAwait();
    }

    /**
     * Put complex types with byte properties.
     *
     * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putByteAsync(@NonNull ByteWrapper complexBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putByteAsync(complexBody), serviceCallback);
    }

    /**
     * Put complex types with byte properties.
     *
     * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putByteWithRestResponseAsync(@NonNull ByteWrapper complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putByte(complexBody);
    }

    /**
     * Put complex types with byte properties.
     *
     * @param complexBody Please put non-ascii byte string hex(FF FE FD FC 00 FA F9 F8 F7 F6).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putByteAsync(@NonNull ByteWrapper complexBody) {
        return putByteWithRestResponseAsync(complexBody)
            .toCompletable();
    }
}
