// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.bodycomplex.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.Validator;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.bodycomplex.Polymorphicrecursives;
import fixtures.bodycomplex.models.ErrorException;
import fixtures.bodycomplex.models.Fish;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Polymorphicrecursives.
 */
public final class PolymorphicrecursivesImpl implements Polymorphicrecursives {
    /**
     * The proxy service used to perform REST calls.
     */
    private PolymorphicrecursivesService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestComplexTestServiceImpl client;

    /**
     * Initializes an instance of PolymorphicrecursivesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PolymorphicrecursivesImpl(AutoRestComplexTestServiceImpl client) {
        this.service = RestProxy.create(PolymorphicrecursivesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestComplexTestServicePolymorphicrecursives to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestComplexTestServicePolymorphicrecursives")
    private interface PolymorphicrecursivesService {
        @Get("complex/polymorphicrecursive/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Fish>> getValid();

        @Put("complex/polymorphicrecursive/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putValid(@BodyParam("application/json; charset=utf-8") Fish complexBody);
    }

    /**
     * Get complex types that are polymorphic and have recursive references.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Fish object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Fish getValid() {
        return getValidAsync().block();
    }

    /**
     * Get complex types that are polymorphic and have recursive references.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Fish>> getValidWithRestResponseAsync() {
        return service.getValid();
    }

    /**
     * Get complex types that are polymorphic and have recursive references.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Fish> getValidAsync() {
        return getValidWithRestResponseAsync()
            .flatMap((SimpleResponse<Fish> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put complex types that are polymorphic and have recursive references.
     *
     * @param complexBody Please put a salmon that looks like this:
     * {
     *     "fishtype": "salmon",
     *     "species": "king",
     *     "length": 1,
     *     "age": 1,
     *     "location": "alaska",
     *     "iswild": true,
     *     "siblings": [
     *         {
     *             "fishtype": "shark",
     *             "species": "predator",
     *             "length": 20,
     *             "age": 6,
     *             "siblings": [
     *                 {
     *                     "fishtype": "salmon",
     *                     "species": "coho",
     *                     "length": 2,
     *                     "age": 2,
     *                     "location": "atlantic",
     *                     "iswild": true,
     *                     "siblings": [
     *                         {
     *                             "fishtype": "shark",
     *                             "species": "predator",
     *                             "length": 20,
     *                             "age": 6
     *                         },
     *                         {
     *                             "fishtype": "sawshark",
     *                             "species": "dangerous",
     *                             "length": 10,
     *                             "age": 105
     *                         }
     *                     ]
     *                 },
     *                 {
     *                     "fishtype": "sawshark",
     *                     "species": "dangerous",
     *                     "length": 10,
     *                     "age": 105
     *                 }
     *             ]
     *         },
     *         {
     *             "fishtype": "sawshark",
     *             "species": "dangerous",
     *             "length": 10,
     *             "age": 105
     *         }
     *     ]
     * }.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putValid(Fish complexBody) {
        putValidAsync(complexBody).block();
    }

    /**
     * Put complex types that are polymorphic and have recursive references.
     *
     * @param complexBody Please put a salmon that looks like this:
     * {
     *     "fishtype": "salmon",
     *     "species": "king",
     *     "length": 1,
     *     "age": 1,
     *     "location": "alaska",
     *     "iswild": true,
     *     "siblings": [
     *         {
     *             "fishtype": "shark",
     *             "species": "predator",
     *             "length": 20,
     *             "age": 6,
     *             "siblings": [
     *                 {
     *                     "fishtype": "salmon",
     *                     "species": "coho",
     *                     "length": 2,
     *                     "age": 2,
     *                     "location": "atlantic",
     *                     "iswild": true,
     *                     "siblings": [
     *                         {
     *                             "fishtype": "shark",
     *                             "species": "predator",
     *                             "length": 20,
     *                             "age": 6
     *                         },
     *                         {
     *                             "fishtype": "sawshark",
     *                             "species": "dangerous",
     *                             "length": 10,
     *                             "age": 105
     *                         }
     *                     ]
     *                 },
     *                 {
     *                     "fishtype": "sawshark",
     *                     "species": "dangerous",
     *                     "length": 10,
     *                     "age": 105
     *                 }
     *             ]
     *         },
     *         {
     *             "fishtype": "sawshark",
     *             "species": "dangerous",
     *             "length": 10,
     *             "age": 105
     *         }
     *     ]
     * }.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putValidWithRestResponseAsync(Fish complexBody) {
        if (complexBody == null) {
            throw new IllegalArgumentException("Parameter complexBody is required and cannot be null.");
        }
        Validator.validate(complexBody);
        return service.putValid(complexBody);
    }

    /**
     * Put complex types that are polymorphic and have recursive references.
     *
     * @param complexBody Please put a salmon that looks like this:
     * {
     *     "fishtype": "salmon",
     *     "species": "king",
     *     "length": 1,
     *     "age": 1,
     *     "location": "alaska",
     *     "iswild": true,
     *     "siblings": [
     *         {
     *             "fishtype": "shark",
     *             "species": "predator",
     *             "length": 20,
     *             "age": 6,
     *             "siblings": [
     *                 {
     *                     "fishtype": "salmon",
     *                     "species": "coho",
     *                     "length": 2,
     *                     "age": 2,
     *                     "location": "atlantic",
     *                     "iswild": true,
     *                     "siblings": [
     *                         {
     *                             "fishtype": "shark",
     *                             "species": "predator",
     *                             "length": 20,
     *                             "age": 6
     *                         },
     *                         {
     *                             "fishtype": "sawshark",
     *                             "species": "dangerous",
     *                             "length": 10,
     *                             "age": 105
     *                         }
     *                     ]
     *                 },
     *                 {
     *                     "fishtype": "sawshark",
     *                     "species": "dangerous",
     *                     "length": 10,
     *                     "age": 105
     *                 }
     *             ]
     *         },
     *         {
     *             "fishtype": "sawshark",
     *             "species": "dangerous",
     *             "length": 10,
     *             "age": 105
     *         }
     *     ]
     * }.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putValidAsync(Fish complexBody) {
        return putValidWithRestResponseAsync(complexBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }
}
