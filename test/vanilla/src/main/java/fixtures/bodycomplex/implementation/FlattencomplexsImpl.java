/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodycomplex.implementation;

import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.Host;
import fixtures.bodycomplex.Flattencomplexs;
import fixtures.bodycomplex.models.MyBaseType;
import io.reactivex.Maybe;
import io.reactivex.Single;

/**
 * An instance of this class provides access to all the operations defined in
 * Flattencomplexs.
 */
public final class FlattencomplexsImpl implements Flattencomplexs {
    /**
     * The proxy service used to perform REST calls.
     */
    private FlattencomplexsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestComplexTestServiceImpl client;

    /**
     * Initializes an instance of FlattencomplexsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public FlattencomplexsImpl(AutoRestComplexTestServiceImpl client) {
        this.service = RestProxy.create(FlattencomplexsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Flattencomplexs to be used
     * by the proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface FlattencomplexsService {
        @GET("complex/flatten/valid")
        @ExpectedResponses({200})
        Single<BodyResponse<MyBaseType>> getValid();
    }

    /**
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the MyBaseType object if successful.
     */
    public MyBaseType getValid() {
        return getValidAsync().blockingGet();
    }

    /**
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<MyBaseType> getValidAsync(ServiceCallback<MyBaseType> serviceCallback) {
        return ServiceFuture.fromBody(getValidAsync(), serviceCallback);
    }

    /**
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<MyBaseType>> getValidWithRestResponseAsync() {
        return service.getValid();
    }

    /**
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<MyBaseType> getValidAsync() {
        return getValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<MyBaseType> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }
}
