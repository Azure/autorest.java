// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.http;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceMethod;
import fixtures.http.models.A;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * MultipleResponses.
 */
public interface MultipleResponses {
    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200Model204NoModelDefaultError200Valid();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200Model204NoModelDefaultError200ValidWithRestResponseAsync();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200Model204NoModelDefaultError200ValidAsync();

    /**
     * Send a 204 response with no payload.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200Model204NoModelDefaultError204Valid();

    /**
     * Send a 204 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200Model204NoModelDefaultError204ValidWithRestResponseAsync();

    /**
     * Send a 204 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200Model204NoModelDefaultError204ValidAsync();

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200Model204NoModelDefaultError201Invalid();

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200Model204NoModelDefaultError201InvalidWithRestResponseAsync();

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200Model204NoModelDefaultError201InvalidAsync();

    /**
     * Send a 202 response with no payload:.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200Model204NoModelDefaultError202None();

    /**
     * Send a 202 response with no payload:.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200Model204NoModelDefaultError202NoneWithRestResponseAsync();

    /**
     * Send a 202 response with no payload:.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200Model204NoModelDefaultError202NoneAsync();

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200Model204NoModelDefaultError400Valid();

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200Model204NoModelDefaultError400ValidWithRestResponseAsync();

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200Model204NoModelDefaultError400ValidAsync();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200Model201ModelDefaultError200Valid();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200Model201ModelDefaultError200ValidWithRestResponseAsync();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200Model201ModelDefaultError200ValidAsync();

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200Model201ModelDefaultError201Valid();

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200Model201ModelDefaultError201ValidWithRestResponseAsync();

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200Model201ModelDefaultError201ValidAsync();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200Model201ModelDefaultError400Valid();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200Model201ModelDefaultError400ValidWithRestResponseAsync();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200Model201ModelDefaultError400ValidAsync();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object get200ModelA201ModelC404ModelDDefaultError200Valid();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Object>> get200ModelA201ModelC404ModelDDefaultError200ValidWithRestResponseAsync();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Object> get200ModelA201ModelC404ModelDDefaultError200ValidAsync();

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object get200ModelA201ModelC404ModelDDefaultError201Valid();

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Object>> get200ModelA201ModelC404ModelDDefaultError201ValidWithRestResponseAsync();

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Object> get200ModelA201ModelC404ModelDDefaultError201ValidAsync();

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object get200ModelA201ModelC404ModelDDefaultError404Valid();

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Object>> get200ModelA201ModelC404ModelDDefaultError404ValidWithRestResponseAsync();

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Object> get200ModelA201ModelC404ModelDDefaultError404ValidAsync();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Object get200ModelA201ModelC404ModelDDefaultError400Valid();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Object>> get200ModelA201ModelC404ModelDDefaultError400ValidWithRestResponseAsync();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Object> get200ModelA201ModelC404ModelDDefaultError400ValidAsync();

    /**
     * Send a 202 response with no payload.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void get202None204NoneDefaultError202None();

    /**
     * Send a 202 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> get202None204NoneDefaultError202NoneWithRestResponseAsync();

    /**
     * Send a 202 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> get202None204NoneDefaultError202NoneAsync();

    /**
     * Send a 204 response with no payload.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void get202None204NoneDefaultError204None();

    /**
     * Send a 204 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> get202None204NoneDefaultError204NoneWithRestResponseAsync();

    /**
     * Send a 204 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> get202None204NoneDefaultError204NoneAsync();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void get202None204NoneDefaultError400Valid();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> get202None204NoneDefaultError400ValidWithRestResponseAsync();

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> get202None204NoneDefaultError400ValidAsync();

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void get202None204NoneDefaultNone202Invalid();

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> get202None204NoneDefaultNone202InvalidWithRestResponseAsync();

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> get202None204NoneDefaultNone202InvalidAsync();

    /**
     * Send a 204 response with no payload.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void get202None204NoneDefaultNone204None();

    /**
     * Send a 204 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> get202None204NoneDefaultNone204NoneWithRestResponseAsync();

    /**
     * Send a 204 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> get202None204NoneDefaultNone204NoneAsync();

    /**
     * Send a 400 response with no payload.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void get202None204NoneDefaultNone400None();

    /**
     * Send a 400 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> get202None204NoneDefaultNone400NoneWithRestResponseAsync();

    /**
     * Send a 400 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> get202None204NoneDefaultNone400NoneAsync();

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void get202None204NoneDefaultNone400Invalid();

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> get202None204NoneDefaultNone400InvalidWithRestResponseAsync();

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> get202None204NoneDefaultNone400InvalidAsync();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws AException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A getDefaultModelA200Valid();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> getDefaultModelA200ValidWithRestResponseAsync();

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> getDefaultModelA200ValidAsync();

    /**
     * Send a 200 response with no payload.
     *
     * @throws AException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A getDefaultModelA200None();

    /**
     * Send a 200 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> getDefaultModelA200NoneWithRestResponseAsync();

    /**
     * Send a 200 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> getDefaultModelA200NoneAsync();

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws AException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A getDefaultModelA400Valid();

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> getDefaultModelA400ValidWithRestResponseAsync();

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> getDefaultModelA400ValidAsync();

    /**
     * Send a 400 response with no payload.
     *
     * @throws AException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A getDefaultModelA400None();

    /**
     * Send a 400 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> getDefaultModelA400NoneWithRestResponseAsync();

    /**
     * Send a 400 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> getDefaultModelA400NoneAsync();

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getDefaultNone200Invalid();

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> getDefaultNone200InvalidWithRestResponseAsync();

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> getDefaultNone200InvalidAsync();

    /**
     * Send a 200 response with no payload.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getDefaultNone200None();

    /**
     * Send a 200 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> getDefaultNone200NoneWithRestResponseAsync();

    /**
     * Send a 200 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> getDefaultNone200NoneAsync();

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getDefaultNone400Invalid();

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> getDefaultNone400InvalidWithRestResponseAsync();

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> getDefaultNone400InvalidAsync();

    /**
     * Send a 400 response with no payload.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getDefaultNone400None();

    /**
     * Send a 400 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> getDefaultNone400NoneWithRestResponseAsync();

    /**
     * Send a 400 response with no payload.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> getDefaultNone400NoneAsync();

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200ModelA200None();

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200ModelA200NoneWithRestResponseAsync();

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200ModelA200NoneAsync();

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200ModelA200Valid();

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200ModelA200ValidWithRestResponseAsync();

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200ModelA200ValidAsync();

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200ModelA200Invalid();

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200ModelA200InvalidWithRestResponseAsync();

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200ModelA200InvalidAsync();

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200ModelA400None();

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200ModelA400NoneWithRestResponseAsync();

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200ModelA400NoneAsync();

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200ModelA400Valid();

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200ModelA400ValidWithRestResponseAsync();

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200ModelA400ValidAsync();

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200ModelA400Invalid();

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200ModelA400InvalidWithRestResponseAsync();

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200ModelA400InvalidAsync();

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    A get200ModelA202Valid();

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<A>> get200ModelA202ValidWithRestResponseAsync();

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<A> get200ModelA202ValidAsync();
}
