// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.http.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.Delete;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.Head;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.http.HttpServerFailures;
import fixtures.http.models.Error;
import fixtures.http.models.ErrorException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * HttpServerFailures.
 */
public final class HttpServerFailuresImpl implements HttpServerFailures {
    /**
     * The proxy service used to perform REST calls.
     */
    private HttpServerFailuresService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpServerFailuresImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public HttpServerFailuresImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(HttpServerFailuresService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestHttpInfrastructureTestServiceHttpServerFailures to be used by
     * the proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestHttpInfrastructureTestServiceHttpServerFailures")
    private interface HttpServerFailuresService {
        @Head("http/failure/server/501")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> head501();

        @Get("http/failure/server/501")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> get501();

        @Post("http/failure/server/505")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> post505(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Delete("http/failure/server/505")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Error>> delete505(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error head501() {
        return head501Async().block();
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> head501WithRestResponseAsync() {
        return service.head501();
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> head501Async() {
        return head501WithRestResponseAsync()
            .flatMap((SimpleResponse<Error> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error get501() {
        return get501Async().block();
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> get501WithRestResponseAsync() {
        return service.get501();
    }

    /**
     * Return 501 status code - should be represented in the client as an error.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> get501Async() {
        return get501WithRestResponseAsync()
            .flatMap((SimpleResponse<Error> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error post505() {
        return post505Async().block();
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> post505WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post505(booleanValue);
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> post505Async() {
        return post505WithRestResponseAsync()
            .flatMap((SimpleResponse<Error> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error post505(Boolean booleanValue) {
        return post505Async(booleanValue).block();
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> post505WithRestResponseAsync(Boolean booleanValue) {
        return service.post505(booleanValue);
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> post505Async(Boolean booleanValue) {
        return post505WithRestResponseAsync(booleanValue)
            .flatMap((SimpleResponse<Error> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error delete505() {
        return delete505Async().block();
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> delete505WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete505(booleanValue);
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> delete505Async() {
        return delete505WithRestResponseAsync()
            .flatMap((SimpleResponse<Error> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Error delete505(Boolean booleanValue) {
        return delete505Async(booleanValue).block();
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Error>> delete505WithRestResponseAsync(Boolean booleanValue) {
        return service.delete505(booleanValue);
    }

    /**
     * Return 505 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Error> delete505Async(Boolean booleanValue) {
        return delete505WithRestResponseAsync(booleanValue)
            .flatMap((SimpleResponse<Error> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }
}
