// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.http.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.Delete;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.Head;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Patch;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.http.HttpSuccess;
import fixtures.http.models.ErrorException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * HttpSuccess.
 */
public final class HttpSuccessImpl implements HttpSuccess {
    /**
     * The proxy service used to perform REST calls.
     */
    private HttpSuccessService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpSuccessImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public HttpSuccessImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(HttpSuccessService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestHttpInfrastructureTestServiceHttpSuccess to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestHttpInfrastructureTestServiceHttpSuccess")
    private interface HttpSuccessService {
        @Head("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> head200();

        @Get("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Boolean>> get200();

        @Put("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> put200(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Patch("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> patch200(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Post("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> post200(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Delete("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> delete200(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Put("http/success/201")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> put201(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Post("http/success/201")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> post201(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Put("http/success/202")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> put202(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Patch("http/success/202")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> patch202(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Post("http/success/202")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> post202(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Delete("http/success/202")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> delete202(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Head("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> head204();

        @Put("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> put204(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Patch("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> patch204(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Post("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> post204(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Delete("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> delete204(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Head("http/success/404")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> head404();
    }

    /**
     * Return 200 status code if successful.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head200() {
        head200Async().block();
    }

    /**
     * Return 200 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> head200WithRestResponseAsync() {
        return service.head200();
    }

    /**
     * Return 200 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head200Async() {
        return head200WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get 200 success.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean get200() {
        return get200Async().block();
    }

    /**
     * Get 200 success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Boolean>> get200WithRestResponseAsync() {
        return service.get200();
    }

    /**
     * Get 200 success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> get200Async() {
        return get200WithRestResponseAsync()
            .flatMap((SimpleResponse<Boolean> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put200() {
        put200Async().block();
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> put200WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put200(booleanValue);
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put200Async() {
        return put200WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put200(Boolean booleanValue) {
        put200Async(booleanValue).block();
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> put200WithRestResponseAsync(Boolean booleanValue) {
        return service.put200(booleanValue);
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put200Async(Boolean booleanValue) {
        return put200WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch200() {
        patch200Async().block();
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> patch200WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch200(booleanValue);
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch200Async() {
        return patch200WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch200(Boolean booleanValue) {
        patch200Async(booleanValue).block();
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> patch200WithRestResponseAsync(Boolean booleanValue) {
        return service.patch200(booleanValue);
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch200Async(Boolean booleanValue) {
        return patch200WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post200() {
        post200Async().block();
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> post200WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post200(booleanValue);
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post200Async() {
        return post200WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post200(Boolean booleanValue) {
        post200Async(booleanValue).block();
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> post200WithRestResponseAsync(Boolean booleanValue) {
        return service.post200(booleanValue);
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post200Async(Boolean booleanValue) {
        return post200WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete200() {
        delete200Async().block();
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> delete200WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete200(booleanValue);
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete200Async() {
        return delete200WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete200(Boolean booleanValue) {
        delete200Async(booleanValue).block();
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> delete200WithRestResponseAsync(Boolean booleanValue) {
        return service.delete200(booleanValue);
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete200Async(Boolean booleanValue) {
        return delete200WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put201() {
        put201Async().block();
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> put201WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put201(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put201Async() {
        return put201WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put201(Boolean booleanValue) {
        put201Async(booleanValue).block();
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> put201WithRestResponseAsync(Boolean booleanValue) {
        return service.put201(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put201Async(Boolean booleanValue) {
        return put201WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post201() {
        post201Async().block();
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> post201WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post201(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post201Async() {
        return post201WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post201(Boolean booleanValue) {
        post201Async(booleanValue).block();
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> post201WithRestResponseAsync(Boolean booleanValue) {
        return service.post201(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post201Async(Boolean booleanValue) {
        return post201WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put202() {
        put202Async().block();
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> put202WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put202(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put202Async() {
        return put202WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put202(Boolean booleanValue) {
        put202Async(booleanValue).block();
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> put202WithRestResponseAsync(Boolean booleanValue) {
        return service.put202(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put202Async(Boolean booleanValue) {
        return put202WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch202() {
        patch202Async().block();
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> patch202WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch202(booleanValue);
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch202Async() {
        return patch202WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch202(Boolean booleanValue) {
        patch202Async(booleanValue).block();
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> patch202WithRestResponseAsync(Boolean booleanValue) {
        return service.patch202(booleanValue);
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch202Async(Boolean booleanValue) {
        return patch202WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post202() {
        post202Async().block();
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> post202WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post202(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post202Async() {
        return post202WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post202(Boolean booleanValue) {
        post202Async(booleanValue).block();
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> post202WithRestResponseAsync(Boolean booleanValue) {
        return service.post202(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post202Async(Boolean booleanValue) {
        return post202WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete202() {
        delete202Async().block();
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> delete202WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete202(booleanValue);
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete202Async() {
        return delete202WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete202(Boolean booleanValue) {
        delete202Async(booleanValue).block();
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> delete202WithRestResponseAsync(Boolean booleanValue) {
        return service.delete202(booleanValue);
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete202Async(Boolean booleanValue) {
        return delete202WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Return 204 status code if successful.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head204() {
        head204Async().block();
    }

    /**
     * Return 204 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> head204WithRestResponseAsync() {
        return service.head204();
    }

    /**
     * Return 204 status code if successful.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head204Async() {
        return head204WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put204() {
        put204Async().block();
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> put204WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put204(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put204Async() {
        return put204WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void put204(Boolean booleanValue) {
        put204Async(booleanValue).block();
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> put204WithRestResponseAsync(Boolean booleanValue) {
        return service.put204(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> put204Async(Boolean booleanValue) {
        return put204WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch204() {
        patch204Async().block();
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> patch204WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch204(booleanValue);
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch204Async() {
        return patch204WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch204(Boolean booleanValue) {
        patch204Async(booleanValue).block();
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> patch204WithRestResponseAsync(Boolean booleanValue) {
        return service.patch204(booleanValue);
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patch204Async(Boolean booleanValue) {
        return patch204WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post204() {
        post204Async().block();
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> post204WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post204(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post204Async() {
        return post204WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void post204(Boolean booleanValue) {
        post204Async(booleanValue).block();
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> post204WithRestResponseAsync(Boolean booleanValue) {
        return service.post204(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> post204Async(Boolean booleanValue) {
        return post204WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete204() {
        delete204Async().block();
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> delete204WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete204(booleanValue);
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete204Async() {
        return delete204WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete204(Boolean booleanValue) {
        delete204Async(booleanValue).block();
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> delete204WithRestResponseAsync(Boolean booleanValue) {
        return service.delete204(booleanValue);
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete204Async(Boolean booleanValue) {
        return delete204WithRestResponseAsync(booleanValue)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Return 404 status code.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void head404() {
        head404Async().block();
    }

    /**
     * Return 404 status code.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> head404WithRestResponseAsync() {
        return service.head404();
    }

    /**
     * Return 404 status code.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> head404Async() {
        return head404WithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }
}
