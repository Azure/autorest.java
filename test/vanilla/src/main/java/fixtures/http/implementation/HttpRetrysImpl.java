/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HEAD;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PATCH;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import fixtures.http.HttpRetrys;
import fixtures.http.models.ErrorException;
import io.reactivex.Completable;
import io.reactivex.Single;

/**
 * An instance of this class provides access to all the operations defined in
 * HttpRetrys.
 */
public final class HttpRetrysImpl implements HttpRetrys {
    /**
     * The proxy service used to perform REST calls.
     */
    private HttpRetrysService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpRetrysImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public HttpRetrysImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(HttpRetrysService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for HttpRetrys to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface HttpRetrysService {
        @HEAD("http/retry/408")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> head408();

        @PUT("http/retry/500")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> put500(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @PATCH("http/retry/500")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> patch500(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @GET("http/retry/502")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> get502();

        @POST("http/retry/503")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> post503(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @DELETE("http/retry/503")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> delete503(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @PUT("http/retry/504")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> put504(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @PATCH("http/retry/504")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> patch504(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);
    }

    /**
     * Return 408 status code, then 200 after retry.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void head408() {
        head408Async().blockingAwait();
    }

    /**
     * Return 408 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> head408Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(head408Async(), serviceCallback);
    }

    /**
     * Return 408 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> head408WithRestResponseAsync() {
        return service.head408();
    }

    /**
     * Return 408 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable head408Async() {
        return head408WithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void put500() {
        put500Async().blockingAwait();
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> put500Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put500Async(), serviceCallback);
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> put500WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put500(booleanValue);
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable put500Async() {
        return put500WithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void put500(Boolean booleanValue) {
        put500Async(booleanValue).blockingAwait();
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> put500Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put500Async(booleanValue), serviceCallback);
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> put500WithRestResponseAsync(Boolean booleanValue) {
        return service.put500(booleanValue);
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable put500Async(Boolean booleanValue) {
        return put500WithRestResponseAsync(booleanValue)
            .ignoreElement();
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch500() {
        patch500Async().blockingAwait();
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patch500Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch500Async(), serviceCallback);
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> patch500WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch500(booleanValue);
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable patch500Async() {
        return patch500WithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch500(Boolean booleanValue) {
        patch500Async(booleanValue).blockingAwait();
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patch500Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch500Async(booleanValue), serviceCallback);
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> patch500WithRestResponseAsync(Boolean booleanValue) {
        return service.patch500(booleanValue);
    }

    /**
     * Return 500 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable patch500Async(Boolean booleanValue) {
        return patch500WithRestResponseAsync(booleanValue)
            .ignoreElement();
    }

    /**
     * Return 502 status code, then 200 after retry.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get502() {
        get502Async().blockingAwait();
    }

    /**
     * Return 502 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get502Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get502Async(), serviceCallback);
    }

    /**
     * Return 502 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> get502WithRestResponseAsync() {
        return service.get502();
    }

    /**
     * Return 502 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable get502Async() {
        return get502WithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void post503() {
        post503Async().blockingAwait();
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> post503Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post503Async(), serviceCallback);
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> post503WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post503(booleanValue);
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable post503Async() {
        return post503WithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void post503(Boolean booleanValue) {
        post503Async(booleanValue).blockingAwait();
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> post503Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post503Async(booleanValue), serviceCallback);
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> post503WithRestResponseAsync(Boolean booleanValue) {
        return service.post503(booleanValue);
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable post503Async(Boolean booleanValue) {
        return post503WithRestResponseAsync(booleanValue)
            .ignoreElement();
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete503() {
        delete503Async().blockingAwait();
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> delete503Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete503Async(), serviceCallback);
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> delete503WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete503(booleanValue);
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable delete503Async() {
        return delete503WithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete503(Boolean booleanValue) {
        delete503Async(booleanValue).blockingAwait();
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> delete503Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete503Async(booleanValue), serviceCallback);
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> delete503WithRestResponseAsync(Boolean booleanValue) {
        return service.delete503(booleanValue);
    }

    /**
     * Return 503 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable delete503Async(Boolean booleanValue) {
        return delete503WithRestResponseAsync(booleanValue)
            .ignoreElement();
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void put504() {
        put504Async().blockingAwait();
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> put504Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put504Async(), serviceCallback);
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> put504WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put504(booleanValue);
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable put504Async() {
        return put504WithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void put504(Boolean booleanValue) {
        put504Async(booleanValue).blockingAwait();
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> put504Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put504Async(booleanValue), serviceCallback);
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> put504WithRestResponseAsync(Boolean booleanValue) {
        return service.put504(booleanValue);
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable put504Async(Boolean booleanValue) {
        return put504WithRestResponseAsync(booleanValue)
            .ignoreElement();
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch504() {
        patch504Async().blockingAwait();
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patch504Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch504Async(), serviceCallback);
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> patch504WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch504(booleanValue);
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable patch504Async() {
        return patch504WithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch504(Boolean booleanValue) {
        patch504Async(booleanValue).blockingAwait();
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patch504Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch504Async(booleanValue), serviceCallback);
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> patch504WithRestResponseAsync(Boolean booleanValue) {
        return service.patch504(booleanValue);
    }

    /**
     * Return 504 status code, then 200 after retry.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable patch504Async(Boolean booleanValue) {
        return patch504WithRestResponseAsync(booleanValue)
            .ignoreElement();
    }
}
