/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import retrofit2.Retrofit;
import fixtures.http.HttpClientFailures;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import fixtures.http.models.Error;
import fixtures.http.models.ErrorException;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpClientFailures.
 */
public class HttpClientFailuresImpl implements HttpClientFailures {
    /** The Retrofit service to perform REST calls. */
    private HttpClientFailuresService service;
    /** The service client containing this operation class. */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpClientFailures.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public HttpClientFailuresImpl(Retrofit retrofit, AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = retrofit.create(HttpClientFailuresService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for HttpClientFailures to be
     * used by Retrofit to perform actually REST calls.
     */
    interface HttpClientFailuresService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures head400" })
        @HEAD("http/failure/client/400")
        Observable<Response<Void>> head400();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures get400" })
        @GET("http/failure/client/400")
        Observable<Response<ResponseBody>> get400();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures put400" })
        @PUT("http/failure/client/400")
        Observable<Response<ResponseBody>> put400(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures patch400" })
        @PATCH("http/failure/client/400")
        Observable<Response<ResponseBody>> patch400(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures post400" })
        @POST("http/failure/client/400")
        Observable<Response<ResponseBody>> post400(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures delete400" })
        @HTTP(path = "http/failure/client/400", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete400(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures head401" })
        @HEAD("http/failure/client/401")
        Observable<Response<Void>> head401();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures get402" })
        @GET("http/failure/client/402")
        Observable<Response<ResponseBody>> get402();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures get403" })
        @GET("http/failure/client/403")
        Observable<Response<ResponseBody>> get403();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures put404" })
        @PUT("http/failure/client/404")
        Observable<Response<ResponseBody>> put404(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures patch405" })
        @PATCH("http/failure/client/405")
        Observable<Response<ResponseBody>> patch405(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures post406" })
        @POST("http/failure/client/406")
        Observable<Response<ResponseBody>> post406(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures delete407" })
        @HTTP(path = "http/failure/client/407", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete407(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures put409" })
        @PUT("http/failure/client/409")
        Observable<Response<ResponseBody>> put409(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures head410" })
        @HEAD("http/failure/client/410")
        Observable<Response<Void>> head410();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures get411" })
        @GET("http/failure/client/411")
        Observable<Response<ResponseBody>> get411();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures get412" })
        @GET("http/failure/client/412")
        Observable<Response<ResponseBody>> get412();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures put413" })
        @PUT("http/failure/client/413")
        Observable<Response<ResponseBody>> put413(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures patch414" })
        @PATCH("http/failure/client/414")
        Observable<Response<ResponseBody>> patch414(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures post415" })
        @POST("http/failure/client/415")
        Observable<Response<ResponseBody>> post415(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures get416" })
        @GET("http/failure/client/416")
        Observable<Response<ResponseBody>> get416();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures delete417" })
        @HTTP(path = "http/failure/client/417", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete417(@Body Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpClientFailures head429" })
        @HEAD("http/failure/client/429")
        Observable<Response<Void>> head429();

    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error head400() {
        return head400WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> head400Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(head400WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> head400Async() {
        return head400WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> head400WithServiceResponseAsync() {
        return service.head400()
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<Void> response) {
                    try {
                        ServiceResponse<Error> clientResponse = head400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> head400Delegate(Response<Void> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get400() {
        return get400WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get400Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(get400WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> get400Async() {
        return get400WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> get400WithServiceResponseAsync() {
        return service.get400()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = get400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> get400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put400() {
        return put400WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put400Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(put400WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> put400Async() {
        return put400WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> put400WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.put400(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = put400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put400(Boolean booleanValue) {
        return put400WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put400Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(put400WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> put400Async(Boolean booleanValue) {
        return put400WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> put400WithServiceResponseAsync(Boolean booleanValue) {
        return service.put400(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = put400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> put400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch400() {
        return patch400WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch400Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(patch400WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> patch400Async() {
        return patch400WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> patch400WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch400(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = patch400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch400(Boolean booleanValue) {
        return patch400WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch400Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(patch400WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> patch400Async(Boolean booleanValue) {
        return patch400WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> patch400WithServiceResponseAsync(Boolean booleanValue) {
        return service.patch400(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = patch400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> patch400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post400() {
        return post400WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post400Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(post400WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> post400Async() {
        return post400WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> post400WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.post400(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = post400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post400(Boolean booleanValue) {
        return post400WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post400Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(post400WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> post400Async(Boolean booleanValue) {
        return post400WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> post400WithServiceResponseAsync(Boolean booleanValue) {
        return service.post400(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = post400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> post400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete400() {
        return delete400WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete400Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(delete400WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> delete400Async() {
        return delete400WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> delete400WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete400(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = delete400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete400(Boolean booleanValue) {
        return delete400WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete400Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(delete400WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> delete400Async(Boolean booleanValue) {
        return delete400WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> delete400WithServiceResponseAsync(Boolean booleanValue) {
        return service.delete400(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = delete400Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> delete400Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error head401() {
        return head401WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> head401Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(head401WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> head401Async() {
        return head401WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> head401WithServiceResponseAsync() {
        return service.head401()
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<Void> response) {
                    try {
                        ServiceResponse<Error> clientResponse = head401Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> head401Delegate(Response<Void> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get402() {
        return get402WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get402Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(get402WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> get402Async() {
        return get402WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> get402WithServiceResponseAsync() {
        return service.get402()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = get402Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> get402Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get403() {
        return get403WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get403Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(get403WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> get403Async() {
        return get403WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> get403WithServiceResponseAsync() {
        return service.get403()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = get403Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> get403Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put404() {
        return put404WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put404Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(put404WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> put404Async() {
        return put404WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> put404WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.put404(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = put404Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put404(Boolean booleanValue) {
        return put404WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put404Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(put404WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> put404Async(Boolean booleanValue) {
        return put404WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> put404WithServiceResponseAsync(Boolean booleanValue) {
        return service.put404(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = put404Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> put404Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch405() {
        return patch405WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch405Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(patch405WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> patch405Async() {
        return patch405WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> patch405WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch405(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = patch405Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch405(Boolean booleanValue) {
        return patch405WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch405Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(patch405WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> patch405Async(Boolean booleanValue) {
        return patch405WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> patch405WithServiceResponseAsync(Boolean booleanValue) {
        return service.patch405(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = patch405Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> patch405Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post406() {
        return post406WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post406Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(post406WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> post406Async() {
        return post406WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> post406WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.post406(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = post406Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post406(Boolean booleanValue) {
        return post406WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post406Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(post406WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> post406Async(Boolean booleanValue) {
        return post406WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> post406WithServiceResponseAsync(Boolean booleanValue) {
        return service.post406(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = post406Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> post406Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete407() {
        return delete407WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete407Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(delete407WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> delete407Async() {
        return delete407WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> delete407WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete407(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = delete407Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete407(Boolean booleanValue) {
        return delete407WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete407Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(delete407WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> delete407Async(Boolean booleanValue) {
        return delete407WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> delete407WithServiceResponseAsync(Boolean booleanValue) {
        return service.delete407(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = delete407Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> delete407Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put409() {
        return put409WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put409Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(put409WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> put409Async() {
        return put409WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> put409WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.put409(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = put409Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put409(Boolean booleanValue) {
        return put409WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put409Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(put409WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> put409Async(Boolean booleanValue) {
        return put409WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> put409WithServiceResponseAsync(Boolean booleanValue) {
        return service.put409(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = put409Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> put409Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error head410() {
        return head410WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> head410Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(head410WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> head410Async() {
        return head410WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> head410WithServiceResponseAsync() {
        return service.head410()
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<Void> response) {
                    try {
                        ServiceResponse<Error> clientResponse = head410Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> head410Delegate(Response<Void> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get411() {
        return get411WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get411Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(get411WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> get411Async() {
        return get411WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> get411WithServiceResponseAsync() {
        return service.get411()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = get411Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> get411Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get412() {
        return get412WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get412Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(get412WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> get412Async() {
        return get412WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> get412WithServiceResponseAsync() {
        return service.get412()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = get412Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> get412Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put413() {
        return put413WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put413Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(put413WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> put413Async() {
        return put413WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> put413WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.put413(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = put413Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put413(Boolean booleanValue) {
        return put413WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put413Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(put413WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> put413Async(Boolean booleanValue) {
        return put413WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> put413WithServiceResponseAsync(Boolean booleanValue) {
        return service.put413(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = put413Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> put413Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch414() {
        return patch414WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch414Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(patch414WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> patch414Async() {
        return patch414WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> patch414WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch414(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = patch414Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch414(Boolean booleanValue) {
        return patch414WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch414Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(patch414WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> patch414Async(Boolean booleanValue) {
        return patch414WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> patch414WithServiceResponseAsync(Boolean booleanValue) {
        return service.patch414(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = patch414Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> patch414Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post415() {
        return post415WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post415Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(post415WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> post415Async() {
        return post415WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> post415WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.post415(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = post415Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post415(Boolean booleanValue) {
        return post415WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post415Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(post415WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> post415Async(Boolean booleanValue) {
        return post415WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> post415WithServiceResponseAsync(Boolean booleanValue) {
        return service.post415(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = post415Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> post415Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get416() {
        return get416WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get416Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(get416WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> get416Async() {
        return get416WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> get416WithServiceResponseAsync() {
        return service.get416()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = get416Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> get416Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete417() {
        return delete417WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete417Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(delete417WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> delete417Async() {
        return delete417WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> delete417WithServiceResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete417(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = delete417Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete417(Boolean booleanValue) {
        return delete417WithServiceResponseAsync(booleanValue).toBlocking().single().body();
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete417Async(Boolean booleanValue, final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(delete417WithServiceResponseAsync(booleanValue), serviceCallback);
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> delete417Async(Boolean booleanValue) {
        return delete417WithServiceResponseAsync(booleanValue).map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> delete417WithServiceResponseAsync(Boolean booleanValue) {
        return service.delete417(booleanValue)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Error> clientResponse = delete417Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> delete417Delegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error head429() {
        return head429WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> head429Async(final ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromResponse(head429WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<Error> head429Async() {
        return head429WithServiceResponseAsync().map(new Func1<ServiceResponse<Error>, Error>() {
            @Override
            public Error call(ServiceResponse<Error> response) {
                return response.body();
            }
        });
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Error object
     */
    public Observable<ServiceResponse<Error>> head429WithServiceResponseAsync() {
        return service.head429()
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponse<Error>>>() {
                @Override
                public Observable<ServiceResponse<Error>> call(Response<Void> response) {
                    try {
                        ServiceResponse<Error> clientResponse = head429Delegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Error> head429Delegate(Response<Void> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Error, ErrorException>newInstance(this.client.serializerAdapter())
                .registerError(ErrorException.class)
                .buildEmpty(response);
    }

}
