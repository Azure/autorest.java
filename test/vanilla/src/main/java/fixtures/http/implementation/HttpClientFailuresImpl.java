/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import com.microsoft.rest.RestProxy;
import com.microsoft.rest.RestResponse;
import fixtures.http.HttpClientFailures;
import com.microsoft.rest.annotations.BodyParam;
import com.microsoft.rest.annotations.DELETE;
import com.microsoft.rest.annotations.ExpectedResponses;
import com.microsoft.rest.annotations.GET;
import com.microsoft.rest.annotations.HEAD;
import com.microsoft.rest.annotations.Headers;
import com.microsoft.rest.annotations.Host;
import com.microsoft.rest.annotations.PATCH;
import com.microsoft.rest.annotations.POST;
import com.microsoft.rest.annotations.PUT;
import com.microsoft.rest.annotations.UnexpectedResponseExceptionType;
import com.microsoft.rest.http.HttpClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import fixtures.http.models.Error;
import fixtures.http.models.ErrorException;
import java.io.IOException;
import rx.functions.Func1;
import rx.Observable;
import rx.Single;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpClientFailures.
 */
public class HttpClientFailuresImpl implements HttpClientFailures {
    /** The RestProxy service to perform REST calls. */
    private HttpClientFailuresService service;
    /** The service client containing this operation class. */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpClientFailures.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public HttpClientFailuresImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(HttpClientFailuresService.class, client.restClient().baseURL(), client.httpClient(), client.serializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HttpClientFailures to be
     * used by RestProxy to perform REST calls.
    */
    @Host("http://localhost")
    interface HttpClientFailuresService {
        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures head400" })
        @HEAD("http/failure/client/400")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> head400();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures get400" })
        @GET("http/failure/client/400")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> get400();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures put400" })
        @PUT("http/failure/client/400")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> put400(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures patch400" })
        @PATCH("http/failure/client/400")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> patch400(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures post400" })
        @POST("http/failure/client/400")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> post400(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures delete400" })
        @DELETE("http/failure/client/400")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> delete400(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures head401" })
        @HEAD("http/failure/client/401")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> head401();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures get402" })
        @GET("http/failure/client/402")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> get402();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures get403" })
        @GET("http/failure/client/403")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> get403();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures put404" })
        @PUT("http/failure/client/404")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> put404(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures patch405" })
        @PATCH("http/failure/client/405")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> patch405(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures post406" })
        @POST("http/failure/client/406")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> post406(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures delete407" })
        @DELETE("http/failure/client/407")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> delete407(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures put409" })
        @PUT("http/failure/client/409")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> put409(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures head410" })
        @HEAD("http/failure/client/410")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> head410();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures get411" })
        @GET("http/failure/client/411")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> get411();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures get412" })
        @GET("http/failure/client/412")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> get412();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures put413" })
        @PUT("http/failure/client/413")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> put413(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures patch414" })
        @PATCH("http/failure/client/414")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> patch414(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures post415" })
        @POST("http/failure/client/415")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> post415(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures get416" })
        @GET("http/failure/client/416")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> get416();

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures delete417" })
        @DELETE("http/failure/client/417")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> delete417(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @Headers({ "x-ms-logging-context: fixtures.http.HttpClientFailures head429" })
        @HEAD("http/failure/client/429")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Error>> head429();

    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error head400() {
        return head400Async().toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> head400Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(head400Async(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> head400WithRestResponseAsync() {
        return service.head400();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> head400Async() {
        return head400WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get400() {
        return get400Async().toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get400Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(get400Async(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> get400WithRestResponseAsync() {
        return service.get400();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> get400Async() {
        return get400WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put400() {
        return put400Async().toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put400Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(put400Async(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> put400WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put400(booleanValue);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> put400Async() {
        return put400WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put400(Boolean booleanValue) {
        return put400Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put400Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(put400Async(booleanValue), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> put400WithRestResponseAsync(Boolean booleanValue) {
        return service.put400(booleanValue);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> put400Async(Boolean booleanValue) {
        return put400WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch400() {
        return patch400Async().toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch400Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(patch400Async(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> patch400WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch400(booleanValue);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> patch400Async() {
        return patch400WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch400(Boolean booleanValue) {
        return patch400Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch400Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(patch400Async(booleanValue), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> patch400WithRestResponseAsync(Boolean booleanValue) {
        return service.patch400(booleanValue);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> patch400Async(Boolean booleanValue) {
        return patch400WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post400() {
        return post400Async().toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post400Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(post400Async(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> post400WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post400(booleanValue);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> post400Async() {
        return post400WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post400(Boolean booleanValue) {
        return post400Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post400Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(post400Async(booleanValue), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> post400WithRestResponseAsync(Boolean booleanValue) {
        return service.post400(booleanValue);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> post400Async(Boolean booleanValue) {
        return post400WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete400() {
        return delete400Async().toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete400Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(delete400Async(), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> delete400WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete400(booleanValue);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> delete400Async() {
        return delete400WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete400(Boolean booleanValue) {
        return delete400Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete400Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(delete400Async(booleanValue), serviceCallback);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> delete400WithRestResponseAsync(Boolean booleanValue) {
        return service.delete400(booleanValue);
    }

    /**
     * Return 400 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> delete400Async(Boolean booleanValue) {
        return delete400WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error head401() {
        return head401Async().toBlocking().value();
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> head401Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(head401Async(), serviceCallback);
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> head401WithRestResponseAsync() {
        return service.head401();
    }

    /**
     * Return 401 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> head401Async() {
        return head401WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get402() {
        return get402Async().toBlocking().value();
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get402Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(get402Async(), serviceCallback);
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> get402WithRestResponseAsync() {
        return service.get402();
    }

    /**
     * Return 402 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> get402Async() {
        return get402WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get403() {
        return get403Async().toBlocking().value();
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get403Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(get403Async(), serviceCallback);
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> get403WithRestResponseAsync() {
        return service.get403();
    }

    /**
     * Return 403 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> get403Async() {
        return get403WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put404() {
        return put404Async().toBlocking().value();
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put404Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(put404Async(), serviceCallback);
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> put404WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put404(booleanValue);
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> put404Async() {
        return put404WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put404(Boolean booleanValue) {
        return put404Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put404Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(put404Async(booleanValue), serviceCallback);
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> put404WithRestResponseAsync(Boolean booleanValue) {
        return service.put404(booleanValue);
    }

    /**
     * Return 404 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> put404Async(Boolean booleanValue) {
        return put404WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch405() {
        return patch405Async().toBlocking().value();
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch405Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(patch405Async(), serviceCallback);
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> patch405WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch405(booleanValue);
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> patch405Async() {
        return patch405WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch405(Boolean booleanValue) {
        return patch405Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch405Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(patch405Async(booleanValue), serviceCallback);
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> patch405WithRestResponseAsync(Boolean booleanValue) {
        return service.patch405(booleanValue);
    }

    /**
     * Return 405 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> patch405Async(Boolean booleanValue) {
        return patch405WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post406() {
        return post406Async().toBlocking().value();
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post406Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(post406Async(), serviceCallback);
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> post406WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post406(booleanValue);
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> post406Async() {
        return post406WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post406(Boolean booleanValue) {
        return post406Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post406Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(post406Async(booleanValue), serviceCallback);
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> post406WithRestResponseAsync(Boolean booleanValue) {
        return service.post406(booleanValue);
    }

    /**
     * Return 406 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> post406Async(Boolean booleanValue) {
        return post406WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete407() {
        return delete407Async().toBlocking().value();
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete407Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(delete407Async(), serviceCallback);
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> delete407WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete407(booleanValue);
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> delete407Async() {
        return delete407WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete407(Boolean booleanValue) {
        return delete407Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete407Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(delete407Async(booleanValue), serviceCallback);
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> delete407WithRestResponseAsync(Boolean booleanValue) {
        return service.delete407(booleanValue);
    }

    /**
     * Return 407 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> delete407Async(Boolean booleanValue) {
        return delete407WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put409() {
        return put409Async().toBlocking().value();
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put409Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(put409Async(), serviceCallback);
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> put409WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put409(booleanValue);
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> put409Async() {
        return put409WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put409(Boolean booleanValue) {
        return put409Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put409Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(put409Async(booleanValue), serviceCallback);
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> put409WithRestResponseAsync(Boolean booleanValue) {
        return service.put409(booleanValue);
    }

    /**
     * Return 409 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> put409Async(Boolean booleanValue) {
        return put409WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error head410() {
        return head410Async().toBlocking().value();
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> head410Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(head410Async(), serviceCallback);
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> head410WithRestResponseAsync() {
        return service.head410();
    }

    /**
     * Return 410 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> head410Async() {
        return head410WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get411() {
        return get411Async().toBlocking().value();
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get411Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(get411Async(), serviceCallback);
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> get411WithRestResponseAsync() {
        return service.get411();
    }

    /**
     * Return 411 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> get411Async() {
        return get411WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get412() {
        return get412Async().toBlocking().value();
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get412Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(get412Async(), serviceCallback);
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> get412WithRestResponseAsync() {
        return service.get412();
    }

    /**
     * Return 412 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> get412Async() {
        return get412WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put413() {
        return put413Async().toBlocking().value();
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put413Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(put413Async(), serviceCallback);
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> put413WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put413(booleanValue);
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> put413Async() {
        return put413WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error put413(Boolean booleanValue) {
        return put413Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> put413Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(put413Async(booleanValue), serviceCallback);
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> put413WithRestResponseAsync(Boolean booleanValue) {
        return service.put413(booleanValue);
    }

    /**
     * Return 413 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> put413Async(Boolean booleanValue) {
        return put413WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch414() {
        return patch414Async().toBlocking().value();
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch414Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(patch414Async(), serviceCallback);
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> patch414WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch414(booleanValue);
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> patch414Async() {
        return patch414WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error patch414(Boolean booleanValue) {
        return patch414Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> patch414Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(patch414Async(booleanValue), serviceCallback);
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> patch414WithRestResponseAsync(Boolean booleanValue) {
        return service.patch414(booleanValue);
    }

    /**
     * Return 414 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> patch414Async(Boolean booleanValue) {
        return patch414WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post415() {
        return post415Async().toBlocking().value();
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post415Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(post415Async(), serviceCallback);
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> post415WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post415(booleanValue);
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> post415Async() {
        return post415WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error post415(Boolean booleanValue) {
        return post415Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> post415Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(post415Async(booleanValue), serviceCallback);
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> post415WithRestResponseAsync(Boolean booleanValue) {
        return service.post415(booleanValue);
    }

    /**
     * Return 415 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> post415Async(Boolean booleanValue) {
        return post415WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error get416() {
        return get416Async().toBlocking().value();
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> get416Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(get416Async(), serviceCallback);
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> get416WithRestResponseAsync() {
        return service.get416();
    }

    /**
     * Return 416 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> get416Async() {
        return get416WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete417() {
        return delete417Async().toBlocking().value();
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete417Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(delete417Async(), serviceCallback);
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> delete417WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete417(booleanValue);
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> delete417Async() {
        return delete417WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error delete417(Boolean booleanValue) {
        return delete417Async(booleanValue).toBlocking().value();
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> delete417Async(Boolean booleanValue, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(delete417Async(booleanValue), serviceCallback);
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> delete417WithRestResponseAsync(Boolean booleanValue) {
        return service.delete417(booleanValue);
    }

    /**
     * Return 417 status code - should be represented in the client as an error.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> delete417Async(Boolean booleanValue) {
        return delete417WithRestResponseAsync(booleanValue)
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Error object if successful.
     */
    public Error head429() {
        return head429Async().toBlocking().value();
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Error> head429Async(ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(head429Async(), serviceCallback);
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<RestResponse<Void, Error>> head429WithRestResponseAsync() {
        return service.head429();
    }

    /**
     * Return 429 status code - should be represented in the client as an error.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Error> object
     */
    public Single<Error> head429Async() {
        return head429WithRestResponseAsync()
            .map(new Func1<RestResponse<Void, Error>, Error>() { public Error call(RestResponse<Void, Error> restResponse) { return restResponse.body(); } });
        }


}
