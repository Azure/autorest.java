// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.http.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.http.HttpFailures;
import fixtures.http.models.ErrorException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * HttpFailures.
 */
public final class HttpFailuresImpl implements HttpFailures {
    /**
     * The proxy service used to perform REST calls.
     */
    private HttpFailuresService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpFailuresImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public HttpFailuresImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(HttpFailuresService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestHttpInfrastructureTestServiceHttpFailures to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestHttpInfrastructureTestServiceHttpFailures")
    private interface HttpFailuresService {
        @Get("http/failure/emptybody/error")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Boolean>> getEmptyError();

        @Get("http/failure/nomodel/error")
        @ExpectedResponses({200})
        Mono<SimpleResponse<Boolean>> getNoModelError();

        @Get("http/failure/nomodel/empty")
        @ExpectedResponses({200})
        Mono<SimpleResponse<Boolean>> getNoModelEmpty();
    }

    /**
     * Get empty error form server.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean getEmptyError() {
        return getEmptyErrorAsync().block();
    }

    /**
     * Get empty error form server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Boolean>> getEmptyErrorWithRestResponseAsync() {
        return service.getEmptyError();
    }

    /**
     * Get empty error form server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> getEmptyErrorAsync() {
        return getEmptyErrorWithRestResponseAsync()
            .flatMap((SimpleResponse<Boolean> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get empty error form server.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean getNoModelError() {
        return getNoModelErrorAsync().block();
    }

    /**
     * Get empty error form server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Boolean>> getNoModelErrorWithRestResponseAsync() {
        return service.getNoModelError();
    }

    /**
     * Get empty error form server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> getNoModelErrorAsync() {
        return getNoModelErrorWithRestResponseAsync()
            .flatMap((SimpleResponse<Boolean> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get empty response from server.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean getNoModelEmpty() {
        return getNoModelEmptyAsync().block();
    }

    /**
     * Get empty response from server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Boolean>> getNoModelEmptyWithRestResponseAsync() {
        return service.getNoModelEmpty();
    }

    /**
     * Get empty response from server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> getNoModelEmptyAsync() {
        return getNoModelEmptyWithRestResponseAsync()
            .flatMap((SimpleResponse<Boolean> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }
}
