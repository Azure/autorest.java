/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import retrofit2.Retrofit;
import fixtures.http.MultipleResponses;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import fixtures.http.models.A;
import fixtures.http.models.B;
import fixtures.http.models.C;
import fixtures.http.models.D;
import fixtures.http.models.ErrorException;
import fixtures.http.models.MyException;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MultipleResponses.
 */
public class MultipleResponsesImpl implements MultipleResponses {
    /** The Retrofit service to perform REST calls. */
    private MultipleResponsesService service;
    /** The service client containing this operation class. */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of MultipleResponses.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MultipleResponsesImpl(Retrofit retrofit, AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = retrofit.create(MultipleResponsesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MultipleResponses to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MultipleResponsesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError200Valid" })
        @GET("http/payloads/200/A/204/none/default/Error/response/200/valid")
        Observable<Response<ResponseBody>> get200Model204NoModelDefaultError200Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError204Valid" })
        @GET("http/payloads/200/A/204/none/default/Error/response/204/none")
        Observable<Response<ResponseBody>> get200Model204NoModelDefaultError204Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError201Invalid" })
        @GET("http/payloads/200/A/204/none/default/Error/response/201/valid")
        Observable<Response<ResponseBody>> get200Model204NoModelDefaultError201Invalid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError202None" })
        @GET("http/payloads/200/A/204/none/default/Error/response/202/none")
        Observable<Response<ResponseBody>> get200Model204NoModelDefaultError202None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError400Valid" })
        @GET("http/payloads/200/A/204/none/default/Error/response/400/valid")
        Observable<Response<ResponseBody>> get200Model204NoModelDefaultError400Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200Model201ModelDefaultError200Valid" })
        @GET("http/payloads/200/A/201/B/default/Error/response/200/valid")
        Observable<Response<ResponseBody>> get200Model201ModelDefaultError200Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200Model201ModelDefaultError201Valid" })
        @GET("http/payloads/200/A/201/B/default/Error/response/201/valid")
        Observable<Response<ResponseBody>> get200Model201ModelDefaultError201Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200Model201ModelDefaultError400Valid" })
        @GET("http/payloads/200/A/201/B/default/Error/response/400/valid")
        Observable<Response<ResponseBody>> get200Model201ModelDefaultError400Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA201ModelC404ModelDDefaultError200Valid" })
        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/200/valid")
        Observable<Response<ResponseBody>> get200ModelA201ModelC404ModelDDefaultError200Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA201ModelC404ModelDDefaultError201Valid" })
        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/201/valid")
        Observable<Response<ResponseBody>> get200ModelA201ModelC404ModelDDefaultError201Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA201ModelC404ModelDDefaultError404Valid" })
        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/404/valid")
        Observable<Response<ResponseBody>> get200ModelA201ModelC404ModelDDefaultError404Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA201ModelC404ModelDDefaultError400Valid" })
        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/400/valid")
        Observable<Response<ResponseBody>> get200ModelA201ModelC404ModelDDefaultError400Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultError202None" })
        @GET("http/payloads/202/none/204/none/default/Error/response/202/none")
        Observable<Response<ResponseBody>> get202None204NoneDefaultError202None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultError204None" })
        @GET("http/payloads/202/none/204/none/default/Error/response/204/none")
        Observable<Response<ResponseBody>> get202None204NoneDefaultError204None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultError400Valid" })
        @GET("http/payloads/202/none/204/none/default/Error/response/400/valid")
        Observable<Response<ResponseBody>> get202None204NoneDefaultError400Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultNone202Invalid" })
        @GET("http/payloads/202/none/204/none/default/none/response/202/invalid")
        Observable<Response<ResponseBody>> get202None204NoneDefaultNone202Invalid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultNone204None" })
        @GET("http/payloads/202/none/204/none/default/none/response/204/none")
        Observable<Response<ResponseBody>> get202None204NoneDefaultNone204None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultNone400None" })
        @GET("http/payloads/202/none/204/none/default/none/response/400/none")
        Observable<Response<ResponseBody>> get202None204NoneDefaultNone400None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultNone400Invalid" })
        @GET("http/payloads/202/none/204/none/default/none/response/400/invalid")
        Observable<Response<ResponseBody>> get202None204NoneDefaultNone400Invalid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultModelA200Valid" })
        @GET("http/payloads/default/A/response/200/valid")
        Observable<Response<ResponseBody>> getDefaultModelA200Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultModelA200None" })
        @GET("http/payloads/default/A/response/200/none")
        Observable<Response<ResponseBody>> getDefaultModelA200None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultModelA400Valid" })
        @GET("http/payloads/default/A/response/400/valid")
        Observable<Response<ResponseBody>> getDefaultModelA400Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultModelA400None" })
        @GET("http/payloads/default/A/response/400/none")
        Observable<Response<ResponseBody>> getDefaultModelA400None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultNone200Invalid" })
        @GET("http/payloads/default/none/response/200/invalid")
        Observable<Response<ResponseBody>> getDefaultNone200Invalid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultNone200None" })
        @GET("http/payloads/default/none/response/200/none")
        Observable<Response<ResponseBody>> getDefaultNone200None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultNone400Invalid" })
        @GET("http/payloads/default/none/response/400/invalid")
        Observable<Response<ResponseBody>> getDefaultNone400Invalid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultNone400None" })
        @GET("http/payloads/default/none/response/400/none")
        Observable<Response<ResponseBody>> getDefaultNone400None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA200None" })
        @GET("http/payloads/200/A/response/200/none")
        Observable<Response<ResponseBody>> get200ModelA200None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA200Valid" })
        @GET("http/payloads/200/A/response/200/valid")
        Observable<Response<ResponseBody>> get200ModelA200Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA200Invalid" })
        @GET("http/payloads/200/A/response/200/invalid")
        Observable<Response<ResponseBody>> get200ModelA200Invalid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA400None" })
        @GET("http/payloads/200/A/response/400/none")
        Observable<Response<ResponseBody>> get200ModelA400None();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA400Valid" })
        @GET("http/payloads/200/A/response/400/valid")
        Observable<Response<ResponseBody>> get200ModelA400Valid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA400Invalid" })
        @GET("http/payloads/200/A/response/400/invalid")
        Observable<Response<ResponseBody>> get200ModelA400Invalid();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA202Valid" })
        @GET("http/payloads/200/A/response/202/valid")
        Observable<Response<ResponseBody>> get200ModelA202Valid();

    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError200Valid() {
        return get200Model204NoModelDefaultError200ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200Model204NoModelDefaultError200ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200Model204NoModelDefaultError200ValidAsync() {
        return get200Model204NoModelDefaultError200ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200Model204NoModelDefaultError200ValidWithServiceResponseAsync() {
        return service.get200Model204NoModelDefaultError200Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200Model204NoModelDefaultError200ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError200ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError204Valid() {
        return get200Model204NoModelDefaultError204ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError204ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200Model204NoModelDefaultError204ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200Model204NoModelDefaultError204ValidAsync() {
        return get200Model204NoModelDefaultError204ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200Model204NoModelDefaultError204ValidWithServiceResponseAsync() {
        return service.get200Model204NoModelDefaultError204Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200Model204NoModelDefaultError204ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError204ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError201Invalid() {
        return get200Model204NoModelDefaultError201InvalidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError201InvalidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200Model204NoModelDefaultError201InvalidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200Model204NoModelDefaultError201InvalidAsync() {
        return get200Model204NoModelDefaultError201InvalidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200Model204NoModelDefaultError201InvalidWithServiceResponseAsync() {
        return service.get200Model204NoModelDefaultError201Invalid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200Model204NoModelDefaultError201InvalidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError201InvalidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError202None() {
        return get200Model204NoModelDefaultError202NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError202NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200Model204NoModelDefaultError202NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200Model204NoModelDefaultError202NoneAsync() {
        return get200Model204NoModelDefaultError202NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200Model204NoModelDefaultError202NoneWithServiceResponseAsync() {
        return service.get200Model204NoModelDefaultError202None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200Model204NoModelDefaultError202NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError202NoneDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError400Valid() {
        return get200Model204NoModelDefaultError400ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200Model204NoModelDefaultError400ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200Model204NoModelDefaultError400ValidAsync() {
        return get200Model204NoModelDefaultError400ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200Model204NoModelDefaultError400ValidWithServiceResponseAsync() {
        return service.get200Model204NoModelDefaultError400Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200Model204NoModelDefaultError400ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200Model204NoModelDefaultError400ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError200Valid() {
        return get200Model201ModelDefaultError200ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model201ModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200Model201ModelDefaultError200ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200Model201ModelDefaultError200ValidAsync() {
        return get200Model201ModelDefaultError200ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200Model201ModelDefaultError200ValidWithServiceResponseAsync() {
        return service.get200Model201ModelDefaultError200Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200Model201ModelDefaultError200ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200Model201ModelDefaultError200ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(201, new TypeToken<B>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError201Valid() {
        return get200Model201ModelDefaultError201ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model201ModelDefaultError201ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200Model201ModelDefaultError201ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200Model201ModelDefaultError201ValidAsync() {
        return get200Model201ModelDefaultError201ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200Model201ModelDefaultError201ValidWithServiceResponseAsync() {
        return service.get200Model201ModelDefaultError201Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200Model201ModelDefaultError201ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200Model201ModelDefaultError201ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(201, new TypeToken<B>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError400Valid() {
        return get200Model201ModelDefaultError400ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model201ModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200Model201ModelDefaultError400ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200Model201ModelDefaultError400ValidAsync() {
        return get200Model201ModelDefaultError400ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200Model201ModelDefaultError400ValidWithServiceResponseAsync() {
        return service.get200Model201ModelDefaultError400Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200Model201ModelDefaultError400ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200Model201ModelDefaultError400ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(201, new TypeToken<B>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError200Valid() {
        return get200ModelA201ModelC404ModelDDefaultError200ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError200ValidAsync(final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA201ModelC404ModelDDefaultError200ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> get200ModelA201ModelC404ModelDDefaultError200ValidAsync() {
        return get200ModelA201ModelC404ModelDDefaultError200ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> get200ModelA201ModelC404ModelDDefaultError200ValidWithServiceResponseAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError200Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError200ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(201, new TypeToken<C>() { }.getType())
                .register(404, new TypeToken<D>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError201Valid() {
        return get200ModelA201ModelC404ModelDDefaultError201ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError201ValidAsync(final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA201ModelC404ModelDDefaultError201ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> get200ModelA201ModelC404ModelDDefaultError201ValidAsync() {
        return get200ModelA201ModelC404ModelDDefaultError201ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> get200ModelA201ModelC404ModelDDefaultError201ValidWithServiceResponseAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError201Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError201ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(201, new TypeToken<C>() { }.getType())
                .register(404, new TypeToken<D>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError404Valid() {
        return get200ModelA201ModelC404ModelDDefaultError404ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError404ValidAsync(final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA201ModelC404ModelDDefaultError404ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> get200ModelA201ModelC404ModelDDefaultError404ValidAsync() {
        return get200ModelA201ModelC404ModelDDefaultError404ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> get200ModelA201ModelC404ModelDDefaultError404ValidWithServiceResponseAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError404Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError404ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(201, new TypeToken<C>() { }.getType())
                .register(404, new TypeToken<D>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError400Valid() {
        return get200ModelA201ModelC404ModelDDefaultError400ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError400ValidAsync(final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA201ModelC404ModelDDefaultError400ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> get200ModelA201ModelC404ModelDDefaultError400ValidAsync() {
        return get200ModelA201ModelC404ModelDDefaultError400ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> get200ModelA201ModelC404ModelDDefaultError400ValidWithServiceResponseAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError400Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> get200ModelA201ModelC404ModelDDefaultError400ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .register(201, new TypeToken<C>() { }.getType())
                .register(404, new TypeToken<D>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 202 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultError202None() {
        get202None204NoneDefaultError202NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 202 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultError202NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(get202None204NoneDefaultError202NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> get202None204NoneDefaultError202NoneAsync() {
        return get202None204NoneDefaultError202NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 202 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> get202None204NoneDefaultError202NoneWithServiceResponseAsync() {
        return service.get202None204NoneDefaultError202None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = get202None204NoneDefaultError202NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> get202None204NoneDefaultError202NoneDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultError204None() {
        get202None204NoneDefaultError204NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultError204NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(get202None204NoneDefaultError204NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> get202None204NoneDefaultError204NoneAsync() {
        return get202None204NoneDefaultError204NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> get202None204NoneDefaultError204NoneWithServiceResponseAsync() {
        return service.get202None204NoneDefaultError204None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = get202None204NoneDefaultError204NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> get202None204NoneDefaultError204NoneDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultError400Valid() {
        get202None204NoneDefaultError400ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultError400ValidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(get202None204NoneDefaultError400ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> get202None204NoneDefaultError400ValidAsync() {
        return get202None204NoneDefaultError400ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> get202None204NoneDefaultError400ValidWithServiceResponseAsync() {
        return service.get202None204NoneDefaultError400Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = get202None204NoneDefaultError400ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> get202None204NoneDefaultError400ValidDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultNone202Invalid() {
        get202None204NoneDefaultNone202InvalidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone202InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(get202None204NoneDefaultNone202InvalidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> get202None204NoneDefaultNone202InvalidAsync() {
        return get202None204NoneDefaultNone202InvalidWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> get202None204NoneDefaultNone202InvalidWithServiceResponseAsync() {
        return service.get202None204NoneDefaultNone202Invalid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = get202None204NoneDefaultNone202InvalidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone202InvalidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultNone204None() {
        get202None204NoneDefaultNone204NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone204NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(get202None204NoneDefaultNone204NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> get202None204NoneDefaultNone204NoneAsync() {
        return get202None204NoneDefaultNone204NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> get202None204NoneDefaultNone204NoneWithServiceResponseAsync() {
        return service.get202None204NoneDefaultNone204None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = get202None204NoneDefaultNone204NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone204NoneDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultNone400None() {
        get202None204NoneDefaultNone400NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(get202None204NoneDefaultNone400NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> get202None204NoneDefaultNone400NoneAsync() {
        return get202None204NoneDefaultNone400NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> get202None204NoneDefaultNone400NoneWithServiceResponseAsync() {
        return service.get202None204NoneDefaultNone400None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = get202None204NoneDefaultNone400NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone400NoneDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultNone400Invalid() {
        get202None204NoneDefaultNone400InvalidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(get202None204NoneDefaultNone400InvalidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> get202None204NoneDefaultNone400InvalidAsync() {
        return get202None204NoneDefaultNone400InvalidWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> get202None204NoneDefaultNone400InvalidWithServiceResponseAsync() {
        return service.get202None204NoneDefaultNone400Invalid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = get202None204NoneDefaultNone400InvalidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> get202None204NoneDefaultNone400InvalidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A getDefaultModelA200Valid() {
        return getDefaultModelA200ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> getDefaultModelA200ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultModelA200ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> getDefaultModelA200ValidAsync() {
        return getDefaultModelA200ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> getDefaultModelA200ValidWithServiceResponseAsync() {
        return service.getDefaultModelA200Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = getDefaultModelA200ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> getDefaultModelA200ValidDelegate(Response<ResponseBody> response) throws MyException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, MyException>newInstance(this.client.serializerAdapter())
                .registerError(MyException.class)
                .build(response);
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A getDefaultModelA200None() {
        return getDefaultModelA200NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> getDefaultModelA200NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultModelA200NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> getDefaultModelA200NoneAsync() {
        return getDefaultModelA200NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> getDefaultModelA200NoneWithServiceResponseAsync() {
        return service.getDefaultModelA200None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = getDefaultModelA200NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> getDefaultModelA200NoneDelegate(Response<ResponseBody> response) throws MyException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, MyException>newInstance(this.client.serializerAdapter())
                .registerError(MyException.class)
                .build(response);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A getDefaultModelA400Valid() {
        return getDefaultModelA400ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> getDefaultModelA400ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultModelA400ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> getDefaultModelA400ValidAsync() {
        return getDefaultModelA400ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> getDefaultModelA400ValidWithServiceResponseAsync() {
        return service.getDefaultModelA400Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = getDefaultModelA400ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> getDefaultModelA400ValidDelegate(Response<ResponseBody> response) throws MyException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, MyException>newInstance(this.client.serializerAdapter())
                .registerError(MyException.class)
                .build(response);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A getDefaultModelA400None() {
        return getDefaultModelA400NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> getDefaultModelA400NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultModelA400NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> getDefaultModelA400NoneAsync() {
        return getDefaultModelA400NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> getDefaultModelA400NoneWithServiceResponseAsync() {
        return service.getDefaultModelA400None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = getDefaultModelA400NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> getDefaultModelA400NoneDelegate(Response<ResponseBody> response) throws MyException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, MyException>newInstance(this.client.serializerAdapter())
                .registerError(MyException.class)
                .build(response);
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getDefaultNone200Invalid() {
        getDefaultNone200InvalidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getDefaultNone200InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultNone200InvalidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> getDefaultNone200InvalidAsync() {
        return getDefaultNone200InvalidWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> getDefaultNone200InvalidWithServiceResponseAsync() {
        return service.getDefaultNone200Invalid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = getDefaultNone200InvalidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> getDefaultNone200InvalidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .build(response);
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getDefaultNone200None() {
        getDefaultNone200NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getDefaultNone200NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultNone200NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> getDefaultNone200NoneAsync() {
        return getDefaultNone200NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> getDefaultNone200NoneWithServiceResponseAsync() {
        return service.getDefaultNone200None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = getDefaultNone200NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> getDefaultNone200NoneDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .build(response);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getDefaultNone400Invalid() {
        getDefaultNone400InvalidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultNone400InvalidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> getDefaultNone400InvalidAsync() {
        return getDefaultNone400InvalidWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> getDefaultNone400InvalidWithServiceResponseAsync() {
        return service.getDefaultNone400Invalid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = getDefaultNone400InvalidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> getDefaultNone400InvalidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .build(response);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getDefaultNone400None() {
        getDefaultNone400NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultNone400NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> getDefaultNone400NoneAsync() {
        return getDefaultNone400NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> getDefaultNone400NoneWithServiceResponseAsync() {
        return service.getDefaultNone400None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = getDefaultNone400NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> getDefaultNone400NoneDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .build(response);
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA200None() {
        return get200ModelA200NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA200NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA200NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200ModelA200NoneAsync() {
        return get200ModelA200NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200ModelA200NoneWithServiceResponseAsync() {
        return service.get200ModelA200None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200ModelA200NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200ModelA200NoneDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .build(response);
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA200Valid() {
        return get200ModelA200ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA200ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA200ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200ModelA200ValidAsync() {
        return get200ModelA200ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200ModelA200ValidWithServiceResponseAsync() {
        return service.get200ModelA200Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200ModelA200ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200ModelA200ValidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .build(response);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA200Invalid() {
        return get200ModelA200InvalidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA200InvalidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA200InvalidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200ModelA200InvalidAsync() {
        return get200ModelA200InvalidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200ModelA200InvalidWithServiceResponseAsync() {
        return service.get200ModelA200Invalid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200ModelA200InvalidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200ModelA200InvalidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .build(response);
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA400None() {
        return get200ModelA400NoneWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA400NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA400NoneWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200ModelA400NoneAsync() {
        return get200ModelA400NoneWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200ModelA400NoneWithServiceResponseAsync() {
        return service.get200ModelA400None()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200ModelA400NoneDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200ModelA400NoneDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .build(response);
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA400Valid() {
        return get200ModelA400ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA400ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA400ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200ModelA400ValidAsync() {
        return get200ModelA400ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200ModelA400ValidWithServiceResponseAsync() {
        return service.get200ModelA400Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200ModelA400ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200ModelA400ValidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .build(response);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA400Invalid() {
        return get200ModelA400InvalidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA400InvalidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA400InvalidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200ModelA400InvalidAsync() {
        return get200ModelA400InvalidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200ModelA400InvalidWithServiceResponseAsync() {
        return service.get200ModelA400Invalid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200ModelA400InvalidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200ModelA400InvalidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .build(response);
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA202Valid() {
        return get200ModelA202ValidWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA202ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromResponse(get200ModelA202ValidWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<A> get200ModelA202ValidAsync() {
        return get200ModelA202ValidWithServiceResponseAsync().map(new Func1<ServiceResponse<A>, A>() {
            @Override
            public A call(ServiceResponse<A> response) {
                return response.body();
            }
        });
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Observable<ServiceResponse<A>> get200ModelA202ValidWithServiceResponseAsync() {
        return service.get200ModelA202Valid()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<A>>>() {
                @Override
                public Observable<ServiceResponse<A>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<A> clientResponse = get200ModelA202ValidDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<A> get200ModelA202ValidDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.client.restClient().responseBuilderFactory().<A, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<A>() { }.getType())
                .build(response);
    }

}
