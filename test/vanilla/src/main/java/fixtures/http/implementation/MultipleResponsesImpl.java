/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import fixtures.http.MultipleResponses;
import fixtures.http.models.A;
import fixtures.http.models.AException;
import fixtures.http.models.ErrorException;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;

/**
 * An instance of this class provides access to all the operations defined in
 * MultipleResponses.
 */
public final class MultipleResponsesImpl implements MultipleResponses {
    /**
     * The proxy service used to perform REST calls.
     */
    private MultipleResponsesService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of MultipleResponsesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public MultipleResponsesImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(MultipleResponsesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for MultipleResponses to be used
     * by the proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface MultipleResponsesService {
        @GET("http/payloads/200/A/204/none/default/Error/response/200/valid")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<A>> get200Model204NoModelDefaultError200Valid();

        @GET("http/payloads/200/A/204/none/default/Error/response/204/none")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<A>> get200Model204NoModelDefaultError204Valid();

        @GET("http/payloads/200/A/204/none/default/Error/response/201/valid")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<A>> get200Model204NoModelDefaultError201Invalid();

        @GET("http/payloads/200/A/204/none/default/Error/response/202/none")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<A>> get200Model204NoModelDefaultError202None();

        @GET("http/payloads/200/A/204/none/default/Error/response/400/valid")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<A>> get200Model204NoModelDefaultError400Valid();

        @GET("http/payloads/200/A/201/B/default/Error/response/200/valid")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<A>> get200Model201ModelDefaultError200Valid();

        @GET("http/payloads/200/A/201/B/default/Error/response/201/valid")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<A>> get200Model201ModelDefaultError201Valid();

        @GET("http/payloads/200/A/201/B/default/Error/response/400/valid")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<A>> get200Model201ModelDefaultError400Valid();

        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/200/valid")
        @ExpectedResponses({200, 201, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Object>> get200ModelA201ModelC404ModelDDefaultError200Valid();

        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/201/valid")
        @ExpectedResponses({200, 201, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Object>> get200ModelA201ModelC404ModelDDefaultError201Valid();

        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/404/valid")
        @ExpectedResponses({200, 201, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Object>> get200ModelA201ModelC404ModelDDefaultError404Valid();

        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/400/valid")
        @ExpectedResponses({200, 201, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Object>> get200ModelA201ModelC404ModelDDefaultError400Valid();

        @GET("http/payloads/202/none/204/none/default/Error/response/202/none")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> get202None204NoneDefaultError202None();

        @GET("http/payloads/202/none/204/none/default/Error/response/204/none")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> get202None204NoneDefaultError204None();

        @GET("http/payloads/202/none/204/none/default/Error/response/400/valid")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> get202None204NoneDefaultError400Valid();

        @GET("http/payloads/202/none/204/none/default/none/response/202/invalid")
        @ExpectedResponses({202, 204})
        Single<VoidResponse> get202None204NoneDefaultNone202Invalid();

        @GET("http/payloads/202/none/204/none/default/none/response/204/none")
        @ExpectedResponses({202, 204})
        Single<VoidResponse> get202None204NoneDefaultNone204None();

        @GET("http/payloads/202/none/204/none/default/none/response/400/none")
        @ExpectedResponses({202, 204})
        Single<VoidResponse> get202None204NoneDefaultNone400None();

        @GET("http/payloads/202/none/204/none/default/none/response/400/invalid")
        @ExpectedResponses({202, 204})
        Single<VoidResponse> get202None204NoneDefaultNone400Invalid();

        @GET("http/payloads/default/A/response/200/valid")
        @UnexpectedResponseExceptionType(AException.class)
        Single<BodyResponse<A>> getDefaultModelA200Valid();

        @GET("http/payloads/default/A/response/200/none")
        @UnexpectedResponseExceptionType(AException.class)
        Single<BodyResponse<A>> getDefaultModelA200None();

        @GET("http/payloads/default/A/response/400/valid")
        @UnexpectedResponseExceptionType(AException.class)
        Single<BodyResponse<A>> getDefaultModelA400Valid();

        @GET("http/payloads/default/A/response/400/none")
        @UnexpectedResponseExceptionType(AException.class)
        Single<BodyResponse<A>> getDefaultModelA400None();

        @GET("http/payloads/default/none/response/200/invalid")
        Single<VoidResponse> getDefaultNone200Invalid();

        @GET("http/payloads/default/none/response/200/none")
        Single<VoidResponse> getDefaultNone200None();

        @GET("http/payloads/default/none/response/400/invalid")
        Single<VoidResponse> getDefaultNone400Invalid();

        @GET("http/payloads/default/none/response/400/none")
        Single<VoidResponse> getDefaultNone400None();

        @GET("http/payloads/200/A/response/200/none")
        @ExpectedResponses({200})
        Single<BodyResponse<A>> get200ModelA200None();

        @GET("http/payloads/200/A/response/200/valid")
        @ExpectedResponses({200})
        Single<BodyResponse<A>> get200ModelA200Valid();

        @GET("http/payloads/200/A/response/200/invalid")
        @ExpectedResponses({200})
        Single<BodyResponse<A>> get200ModelA200Invalid();

        @GET("http/payloads/200/A/response/400/none")
        @ExpectedResponses({200})
        Single<BodyResponse<A>> get200ModelA400None();

        @GET("http/payloads/200/A/response/400/valid")
        @ExpectedResponses({200})
        Single<BodyResponse<A>> get200ModelA400Valid();

        @GET("http/payloads/200/A/response/400/invalid")
        @ExpectedResponses({200})
        Single<BodyResponse<A>> get200ModelA400Invalid();

        @GET("http/payloads/200/A/response/202/valid")
        @ExpectedResponses({200})
        Single<BodyResponse<A>> get200ModelA202Valid();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError200Valid() {
        return get200Model204NoModelDefaultError200ValidAsync().blockingGet();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError200ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200Model204NoModelDefaultError200ValidWithRestResponseAsync() {
        return service.get200Model204NoModelDefaultError200Valid();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200Model204NoModelDefaultError200ValidAsync() {
        return get200Model204NoModelDefaultError200ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError204Valid() {
        return get200Model204NoModelDefaultError204ValidAsync().blockingGet();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError204ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError204ValidAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200Model204NoModelDefaultError204ValidWithRestResponseAsync() {
        return service.get200Model204NoModelDefaultError204Valid();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200Model204NoModelDefaultError204ValidAsync() {
        return get200Model204NoModelDefaultError204ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError201Invalid() {
        return get200Model204NoModelDefaultError201InvalidAsync().blockingGet();
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError201InvalidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError201InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200Model204NoModelDefaultError201InvalidWithRestResponseAsync() {
        return service.get200Model204NoModelDefaultError201Invalid();
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200Model204NoModelDefaultError201InvalidAsync() {
        return get200Model204NoModelDefaultError201InvalidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError202None() {
        return get200Model204NoModelDefaultError202NoneAsync().blockingGet();
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError202NoneAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError202NoneAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200Model204NoModelDefaultError202NoneWithRestResponseAsync() {
        return service.get200Model204NoModelDefaultError202None();
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200Model204NoModelDefaultError202NoneAsync() {
        return get200Model204NoModelDefaultError202NoneWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError400Valid() {
        return get200Model204NoModelDefaultError400ValidAsync().blockingGet();
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError400ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200Model204NoModelDefaultError400ValidWithRestResponseAsync() {
        return service.get200Model204NoModelDefaultError400Valid();
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200Model204NoModelDefaultError400ValidAsync() {
        return get200Model204NoModelDefaultError400ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError200Valid() {
        return get200Model201ModelDefaultError200ValidAsync().blockingGet();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200Model201ModelDefaultError200ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model201ModelDefaultError200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200Model201ModelDefaultError200ValidWithRestResponseAsync() {
        return service.get200Model201ModelDefaultError200Valid();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200Model201ModelDefaultError200ValidAsync() {
        return get200Model201ModelDefaultError200ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError201Valid() {
        return get200Model201ModelDefaultError201ValidAsync().blockingGet();
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200Model201ModelDefaultError201ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model201ModelDefaultError201ValidAsync(), serviceCallback);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200Model201ModelDefaultError201ValidWithRestResponseAsync() {
        return service.get200Model201ModelDefaultError201Valid();
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200Model201ModelDefaultError201ValidAsync() {
        return get200Model201ModelDefaultError201ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError400Valid() {
        return get200Model201ModelDefaultError400ValidAsync().blockingGet();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200Model201ModelDefaultError400ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model201ModelDefaultError400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200Model201ModelDefaultError400ValidWithRestResponseAsync() {
        return service.get200Model201ModelDefaultError400Valid();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200Model201ModelDefaultError400ValidAsync() {
        return get200Model201ModelDefaultError400ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError200Valid() {
        return get200ModelA201ModelC404ModelDDefaultError200ValidAsync().blockingGet();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError200ValidAsync(ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA201ModelC404ModelDDefaultError200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Object>> get200ModelA201ModelC404ModelDDefaultError200ValidWithRestResponseAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError200Valid();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Object> get200ModelA201ModelC404ModelDDefaultError200ValidAsync() {
        return get200ModelA201ModelC404ModelDDefaultError200ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Object> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError201Valid() {
        return get200ModelA201ModelC404ModelDDefaultError201ValidAsync().blockingGet();
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError201ValidAsync(ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA201ModelC404ModelDDefaultError201ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Object>> get200ModelA201ModelC404ModelDDefaultError201ValidWithRestResponseAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError201Valid();
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Object> get200ModelA201ModelC404ModelDDefaultError201ValidAsync() {
        return get200ModelA201ModelC404ModelDDefaultError201ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Object> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError404Valid() {
        return get200ModelA201ModelC404ModelDDefaultError404ValidAsync().blockingGet();
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError404ValidAsync(ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA201ModelC404ModelDDefaultError404ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Object>> get200ModelA201ModelC404ModelDDefaultError404ValidWithRestResponseAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError404Valid();
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Object> get200ModelA201ModelC404ModelDDefaultError404ValidAsync() {
        return get200ModelA201ModelC404ModelDDefaultError404ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Object> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError400Valid() {
        return get200ModelA201ModelC404ModelDDefaultError400ValidAsync().blockingGet();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError400ValidAsync(ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA201ModelC404ModelDDefaultError400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Object>> get200ModelA201ModelC404ModelDDefaultError400ValidWithRestResponseAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError400Valid();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Object> get200ModelA201ModelC404ModelDDefaultError400ValidAsync() {
        return get200ModelA201ModelC404ModelDDefaultError400ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Object> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 202 response with no payload.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get202None204NoneDefaultError202None() {
        get202None204NoneDefaultError202NoneAsync().blockingAwait();
    }

    /**
     * Send a 202 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get202None204NoneDefaultError202NoneAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultError202NoneAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> get202None204NoneDefaultError202NoneWithRestResponseAsync() {
        return service.get202None204NoneDefaultError202None();
    }

    /**
     * Send a 202 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable get202None204NoneDefaultError202NoneAsync() {
        return get202None204NoneDefaultError202NoneWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get202None204NoneDefaultError204None() {
        get202None204NoneDefaultError204NoneAsync().blockingAwait();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get202None204NoneDefaultError204NoneAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultError204NoneAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> get202None204NoneDefaultError204NoneWithRestResponseAsync() {
        return service.get202None204NoneDefaultError204None();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable get202None204NoneDefaultError204NoneAsync() {
        return get202None204NoneDefaultError204NoneWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get202None204NoneDefaultError400Valid() {
        get202None204NoneDefaultError400ValidAsync().blockingAwait();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get202None204NoneDefaultError400ValidAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultError400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> get202None204NoneDefaultError400ValidWithRestResponseAsync() {
        return service.get202None204NoneDefaultError400Valid();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable get202None204NoneDefaultError400ValidAsync() {
        return get202None204NoneDefaultError400ValidWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get202None204NoneDefaultNone202Invalid() {
        get202None204NoneDefaultNone202InvalidAsync().blockingAwait();
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone202InvalidAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultNone202InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> get202None204NoneDefaultNone202InvalidWithRestResponseAsync() {
        return service.get202None204NoneDefaultNone202Invalid();
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable get202None204NoneDefaultNone202InvalidAsync() {
        return get202None204NoneDefaultNone202InvalidWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get202None204NoneDefaultNone204None() {
        get202None204NoneDefaultNone204NoneAsync().blockingAwait();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone204NoneAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultNone204NoneAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> get202None204NoneDefaultNone204NoneWithRestResponseAsync() {
        return service.get202None204NoneDefaultNone204None();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable get202None204NoneDefaultNone204NoneAsync() {
        return get202None204NoneDefaultNone204NoneWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get202None204NoneDefaultNone400None() {
        get202None204NoneDefaultNone400NoneAsync().blockingAwait();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone400NoneAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultNone400NoneAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> get202None204NoneDefaultNone400NoneWithRestResponseAsync() {
        return service.get202None204NoneDefaultNone400None();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable get202None204NoneDefaultNone400NoneAsync() {
        return get202None204NoneDefaultNone400NoneWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get202None204NoneDefaultNone400Invalid() {
        get202None204NoneDefaultNone400InvalidAsync().blockingAwait();
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone400InvalidAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultNone400InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> get202None204NoneDefaultNone400InvalidWithRestResponseAsync() {
        return service.get202None204NoneDefaultNone400Invalid();
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable get202None204NoneDefaultNone400InvalidAsync() {
        return get202None204NoneDefaultNone400InvalidWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws AException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A getDefaultModelA200Valid() {
        return getDefaultModelA200ValidAsync().blockingGet();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> getDefaultModelA200ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultModelA200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> getDefaultModelA200ValidWithRestResponseAsync() {
        return service.getDefaultModelA200Valid();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> getDefaultModelA200ValidAsync() {
        return getDefaultModelA200ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws AException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A getDefaultModelA200None() {
        return getDefaultModelA200NoneAsync().blockingGet();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> getDefaultModelA200NoneAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultModelA200NoneAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> getDefaultModelA200NoneWithRestResponseAsync() {
        return service.getDefaultModelA200None();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> getDefaultModelA200NoneAsync() {
        return getDefaultModelA200NoneWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws AException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A getDefaultModelA400Valid() {
        return getDefaultModelA400ValidAsync().blockingGet();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> getDefaultModelA400ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultModelA400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> getDefaultModelA400ValidWithRestResponseAsync() {
        return service.getDefaultModelA400Valid();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> getDefaultModelA400ValidAsync() {
        return getDefaultModelA400ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws AException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A getDefaultModelA400None() {
        return getDefaultModelA400NoneAsync().blockingGet();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> getDefaultModelA400NoneAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultModelA400NoneAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> getDefaultModelA400NoneWithRestResponseAsync() {
        return service.getDefaultModelA400None();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> getDefaultModelA400NoneAsync() {
        return getDefaultModelA400NoneWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getDefaultNone200Invalid() {
        getDefaultNone200InvalidAsync().blockingAwait();
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> getDefaultNone200InvalidAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultNone200InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> getDefaultNone200InvalidWithRestResponseAsync() {
        return service.getDefaultNone200Invalid();
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable getDefaultNone200InvalidAsync() {
        return getDefaultNone200InvalidWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getDefaultNone200None() {
        getDefaultNone200NoneAsync().blockingAwait();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> getDefaultNone200NoneAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultNone200NoneAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> getDefaultNone200NoneWithRestResponseAsync() {
        return service.getDefaultNone200None();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable getDefaultNone200NoneAsync() {
        return getDefaultNone200NoneWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getDefaultNone400Invalid() {
        getDefaultNone400InvalidAsync().blockingAwait();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> getDefaultNone400InvalidAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultNone400InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> getDefaultNone400InvalidWithRestResponseAsync() {
        return service.getDefaultNone400Invalid();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable getDefaultNone400InvalidAsync() {
        return getDefaultNone400InvalidWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getDefaultNone400None() {
        getDefaultNone400NoneAsync().blockingAwait();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> getDefaultNone400NoneAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultNone400NoneAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> getDefaultNone400NoneWithRestResponseAsync() {
        return service.getDefaultNone400None();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable getDefaultNone400NoneAsync() {
        return getDefaultNone400NoneWithRestResponseAsync()
            .ignoreElement();
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200ModelA200None() {
        return get200ModelA200NoneAsync().blockingGet();
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200ModelA200NoneAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA200NoneAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200ModelA200NoneWithRestResponseAsync() {
        return service.get200ModelA200None();
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200ModelA200NoneAsync() {
        return get200ModelA200NoneWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200ModelA200Valid() {
        return get200ModelA200ValidAsync().blockingGet();
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200ModelA200ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200ModelA200ValidWithRestResponseAsync() {
        return service.get200ModelA200Valid();
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200ModelA200ValidAsync() {
        return get200ModelA200ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200ModelA200Invalid() {
        return get200ModelA200InvalidAsync().blockingGet();
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200ModelA200InvalidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA200InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200ModelA200InvalidWithRestResponseAsync() {
        return service.get200ModelA200Invalid();
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200ModelA200InvalidAsync() {
        return get200ModelA200InvalidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200ModelA400None() {
        return get200ModelA400NoneAsync().blockingGet();
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200ModelA400NoneAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA400NoneAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200ModelA400NoneWithRestResponseAsync() {
        return service.get200ModelA400None();
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200ModelA400NoneAsync() {
        return get200ModelA400NoneWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200ModelA400Valid() {
        return get200ModelA400ValidAsync().blockingGet();
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200ModelA400ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200ModelA400ValidWithRestResponseAsync() {
        return service.get200ModelA400Valid();
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200ModelA400ValidAsync() {
        return get200ModelA400ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200ModelA400Invalid() {
        return get200ModelA400InvalidAsync().blockingGet();
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200ModelA400InvalidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA400InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200ModelA400InvalidWithRestResponseAsync() {
        return service.get200ModelA400Invalid();
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200ModelA400InvalidAsync() {
        return get200ModelA400InvalidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the A object if successful.
     */
    public A get200ModelA202Valid() {
        return get200ModelA202ValidAsync().blockingGet();
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<A> get200ModelA202ValidAsync(ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA202ValidAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<A>> get200ModelA202ValidWithRestResponseAsync() {
        return service.get200ModelA202Valid();
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<A> get200ModelA202ValidAsync() {
        return get200ModelA202ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<A> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }
}
