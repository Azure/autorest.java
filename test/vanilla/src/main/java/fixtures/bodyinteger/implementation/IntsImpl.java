// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.bodyinteger.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.UnixTime;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ReturnValueWireType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.bodyinteger.Ints;
import fixtures.bodyinteger.models.ErrorException;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Ints.
 */
public final class IntsImpl implements Ints {
    /**
     * The proxy service used to perform REST calls.
     */
    private IntsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestIntegerTestServiceImpl client;

    /**
     * Initializes an instance of IntsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public IntsImpl(AutoRestIntegerTestServiceImpl client) {
        this.service = RestProxy.create(IntsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestIntegerTestServiceInts to be used by the proxy service to
     * perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestIntegerTestServiceInts")
    private interface IntsService {
        @Get("int/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Integer>> getNull();

        @Get("int/invalid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Integer>> getInvalid();

        @Get("int/overflowint32")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Integer>> getOverflowInt32();

        @Get("int/underflowint32")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Integer>> getUnderflowInt32();

        @Get("int/overflowint64")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Long>> getOverflowInt64();

        @Get("int/underflowint64")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Long>> getUnderflowInt64();

        @Put("int/max/32")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putMax32(@BodyParam("application/json; charset=utf-8") int intBody);

        @Put("int/max/64")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putMax64(@BodyParam("application/json; charset=utf-8") long intBody);

        @Put("int/min/32")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putMin32(@BodyParam("application/json; charset=utf-8") int intBody);

        @Put("int/min/64")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putMin64(@BodyParam("application/json; charset=utf-8") long intBody);

        @Get("int/unixtime")
        @ExpectedResponses({200})
        @ReturnValueWireType(UnixTime.class)
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<OffsetDateTime>> getUnixTime();

        @Put("int/unixtime")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putUnixTimeDate(@BodyParam("application/json; charset=utf-8") long intBody);

        @Get("int/invalidunixtime")
        @ExpectedResponses({200})
        @ReturnValueWireType(UnixTime.class)
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<OffsetDateTime>> getInvalidUnixTime();

        @Get("int/nullunixtime")
        @ExpectedResponses({200})
        @ReturnValueWireType(UnixTime.class)
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<OffsetDateTime>> getNullUnixTime();
    }

    /**
     * Get null Int value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public int getNull() {
        return getNullAsync().block();
    }

    /**
     * Get null Int value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Integer>> getNullWithRestResponseAsync() {
        return service.getNull();
    }

    /**
     * Get null Int value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Integer> getNullAsync() {
        return getNullWithRestResponseAsync()
            .flatMap((SimpleResponse<Integer> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get invalid Int value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public int getInvalid() {
        return getInvalidAsync().block();
    }

    /**
     * Get invalid Int value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Integer>> getInvalidWithRestResponseAsync() {
        return service.getInvalid();
    }

    /**
     * Get invalid Int value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Integer> getInvalidAsync() {
        return getInvalidWithRestResponseAsync()
            .flatMap((SimpleResponse<Integer> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get overflow Int32 value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public int getOverflowInt32() {
        return getOverflowInt32Async().block();
    }

    /**
     * Get overflow Int32 value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Integer>> getOverflowInt32WithRestResponseAsync() {
        return service.getOverflowInt32();
    }

    /**
     * Get overflow Int32 value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Integer> getOverflowInt32Async() {
        return getOverflowInt32WithRestResponseAsync()
            .flatMap((SimpleResponse<Integer> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get underflow Int32 value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public int getUnderflowInt32() {
        return getUnderflowInt32Async().block();
    }

    /**
     * Get underflow Int32 value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Integer>> getUnderflowInt32WithRestResponseAsync() {
        return service.getUnderflowInt32();
    }

    /**
     * Get underflow Int32 value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Integer> getUnderflowInt32Async() {
        return getUnderflowInt32WithRestResponseAsync()
            .flatMap((SimpleResponse<Integer> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get overflow Int64 value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the long object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public long getOverflowInt64() {
        return getOverflowInt64Async().block();
    }

    /**
     * Get overflow Int64 value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Long>> getOverflowInt64WithRestResponseAsync() {
        return service.getOverflowInt64();
    }

    /**
     * Get overflow Int64 value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Long> getOverflowInt64Async() {
        return getOverflowInt64WithRestResponseAsync()
            .flatMap((SimpleResponse<Long> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get underflow Int64 value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the long object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public long getUnderflowInt64() {
        return getUnderflowInt64Async().block();
    }

    /**
     * Get underflow Int64 value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Long>> getUnderflowInt64WithRestResponseAsync() {
        return service.getUnderflowInt64();
    }

    /**
     * Get underflow Int64 value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Long> getUnderflowInt64Async() {
        return getUnderflowInt64WithRestResponseAsync()
            .flatMap((SimpleResponse<Long> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put max int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putMax32(int intBody) {
        putMax32Async(intBody).block();
    }

    /**
     * Put max int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putMax32WithRestResponseAsync(int intBody) {
        return service.putMax32(intBody);
    }

    /**
     * Put max int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putMax32Async(int intBody) {
        return putMax32WithRestResponseAsync(intBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put max int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putMax64(long intBody) {
        putMax64Async(intBody).block();
    }

    /**
     * Put max int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putMax64WithRestResponseAsync(long intBody) {
        return service.putMax64(intBody);
    }

    /**
     * Put max int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putMax64Async(long intBody) {
        return putMax64WithRestResponseAsync(intBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put min int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putMin32(int intBody) {
        putMin32Async(intBody).block();
    }

    /**
     * Put min int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putMin32WithRestResponseAsync(int intBody) {
        return service.putMin32(intBody);
    }

    /**
     * Put min int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putMin32Async(int intBody) {
        return putMin32WithRestResponseAsync(intBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Put min int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putMin64(long intBody) {
        putMin64Async(intBody).block();
    }

    /**
     * Put min int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putMin64WithRestResponseAsync(long intBody) {
        return service.putMin64(intBody);
    }

    /**
     * Put min int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putMin64Async(long intBody) {
        return putMin64WithRestResponseAsync(intBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get datetime encoded as Unix time value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OffsetDateTime getUnixTime() {
        return getUnixTimeAsync().block();
    }

    /**
     * Get datetime encoded as Unix time value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OffsetDateTime>> getUnixTimeWithRestResponseAsync() {
        return service.getUnixTime();
    }

    /**
     * Get datetime encoded as Unix time value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OffsetDateTime> getUnixTimeAsync() {
        return getUnixTimeWithRestResponseAsync()
            .flatMap((SimpleResponse<OffsetDateTime> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put datetime encoded as Unix time.
     *
     * @param intBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putUnixTimeDate(OffsetDateTime intBody) {
        putUnixTimeDateAsync(intBody).block();
    }

    /**
     * Put datetime encoded as Unix time.
     *
     * @param intBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putUnixTimeDateWithRestResponseAsync(OffsetDateTime intBody) {
        long intBodyConverted = intBody.toEpochSecond();
        return service.putUnixTimeDate(intBodyConverted);
    }

    /**
     * Put datetime encoded as Unix time.
     *
     * @param intBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putUnixTimeDateAsync(OffsetDateTime intBody) {
        return putUnixTimeDateWithRestResponseAsync(intBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get invalid Unix time value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OffsetDateTime getInvalidUnixTime() {
        return getInvalidUnixTimeAsync().block();
    }

    /**
     * Get invalid Unix time value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OffsetDateTime>> getInvalidUnixTimeWithRestResponseAsync() {
        return service.getInvalidUnixTime();
    }

    /**
     * Get invalid Unix time value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OffsetDateTime> getInvalidUnixTimeAsync() {
        return getInvalidUnixTimeWithRestResponseAsync()
            .flatMap((SimpleResponse<OffsetDateTime> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get null Unix time value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OffsetDateTime getNullUnixTime() {
        return getNullUnixTimeAsync().block();
    }

    /**
     * Get null Unix time value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OffsetDateTime>> getNullUnixTimeWithRestResponseAsync() {
        return service.getNullUnixTime();
    }

    /**
     * Get null Unix time value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OffsetDateTime> getNullUnixTimeAsync() {
        return getNullUnixTimeWithRestResponseAsync()
            .flatMap((SimpleResponse<OffsetDateTime> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }
}
