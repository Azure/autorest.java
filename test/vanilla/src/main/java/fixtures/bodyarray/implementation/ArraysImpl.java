/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyarray.implementation;

import com.microsoft.rest.RestProxy;
import fixtures.bodyarray.Arrays;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.annotations.BodyParam;
import com.microsoft.rest.annotations.ExpectedResponses;
import com.microsoft.rest.annotations.GET;
import com.microsoft.rest.annotations.Headers;
import com.microsoft.rest.annotations.Host;
import com.microsoft.rest.annotations.PUT;
import com.microsoft.rest.annotations.ReturnValueWireType;
import com.microsoft.rest.annotations.UnexpectedResponseExceptionType;
import com.microsoft.rest.Base64Url;
import com.microsoft.rest.DateTimeRfc1123;
import com.microsoft.rest.http.HttpClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.Validator;
import fixtures.bodyarray.models.ErrorException;
import fixtures.bodyarray.models.Product;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.Period;
import rx.functions.Func1;
import rx.Observable;
import rx.Single;

/**
 * An instance of this class provides access to all the operations defined
 * in Arrays.
 */
public class ArraysImpl implements Arrays {
    /** The RestProxy service to perform REST calls. */
    private ArraysService service;
    /** The service client containing this operation class. */
    private AutoRestSwaggerBATArrayServiceImpl client;

    /**
     * Initializes an instance of Arrays.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ArraysImpl(AutoRestSwaggerBATArrayServiceImpl client) {
        this.service = RestProxy.create(ArraysService.class, client.restClient().baseURL(), client.httpClient(), client.serializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for Arrays to be
     * used by RestProxy to perform REST calls.
    */
    @Host("http://localhost")
    interface ArraysService {
        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getNull" })
        @GET("array/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Integer>> getNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getInvalid" })
        @GET("array/invalid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Integer>> getInvalid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getEmpty" })
        @GET("array/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Integer>> getEmpty();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putEmpty" })
        @PUT("array/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putEmpty(@BodyParam("application/json; charset=utf-8") List<String> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getBooleanTfft" })
        @GET("array/prim/boolean/tfft")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Boolean>> getBooleanTfft();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putBooleanTfft" })
        @PUT("array/prim/boolean/tfft")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putBooleanTfft(@BodyParam("application/json; charset=utf-8") List<Boolean> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getBooleanInvalidNull" })
        @GET("array/prim/boolean/true.null.false")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Boolean>> getBooleanInvalidNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getBooleanInvalidString" })
        @GET("array/prim/boolean/true.boolean.false")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Boolean>> getBooleanInvalidString();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getIntegerValid" })
        @GET("array/prim/integer/1.-1.3.300")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Integer>> getIntegerValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putIntegerValid" })
        @PUT("array/prim/integer/1.-1.3.300")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putIntegerValid(@BodyParam("application/json; charset=utf-8") List<Integer> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getIntInvalidNull" })
        @GET("array/prim/integer/1.null.zero")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Integer>> getIntInvalidNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getIntInvalidString" })
        @GET("array/prim/integer/1.integer.0")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Integer>> getIntInvalidString();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getLongValid" })
        @GET("array/prim/long/1.-1.3.300")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Long>> getLongValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putLongValid" })
        @PUT("array/prim/long/1.-1.3.300")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putLongValid(@BodyParam("application/json; charset=utf-8") List<Long> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getLongInvalidNull" })
        @GET("array/prim/long/1.null.zero")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Long>> getLongInvalidNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getLongInvalidString" })
        @GET("array/prim/long/1.integer.0")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Long>> getLongInvalidString();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getFloatValid" })
        @GET("array/prim/float/0--0.01-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Double>> getFloatValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putFloatValid" })
        @PUT("array/prim/float/0--0.01-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putFloatValid(@BodyParam("application/json; charset=utf-8") List<Double> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getFloatInvalidNull" })
        @GET("array/prim/float/0.0-null-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Double>> getFloatInvalidNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getFloatInvalidString" })
        @GET("array/prim/float/1.number.0")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Double>> getFloatInvalidString();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDoubleValid" })
        @GET("array/prim/double/0--0.01-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Double>> getDoubleValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putDoubleValid" })
        @PUT("array/prim/double/0--0.01-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putDoubleValid(@BodyParam("application/json; charset=utf-8") List<Double> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDoubleInvalidNull" })
        @GET("array/prim/double/0.0-null-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Double>> getDoubleInvalidNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDoubleInvalidString" })
        @GET("array/prim/double/1.number.0")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Double>> getDoubleInvalidString();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getStringValid" })
        @GET("array/prim/string/foo1.foo2.foo3")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<String>> getStringValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putStringValid" })
        @PUT("array/prim/string/foo1.foo2.foo3")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putStringValid(@BodyParam("application/json; charset=utf-8") List<String> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getStringWithNull" })
        @GET("array/prim/string/foo.null.foo2")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<String>> getStringWithNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getStringWithInvalid" })
        @GET("array/prim/string/foo.123.foo2")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<String>> getStringWithInvalid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getUuidValid" })
        @GET("array/prim/uuid/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<UUID>> getUuidValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putUuidValid" })
        @PUT("array/prim/uuid/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putUuidValid(@BodyParam("application/json; charset=utf-8") List<UUID> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getUuidInvalidChars" })
        @GET("array/prim/uuid/invalidchars")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<UUID>> getUuidInvalidChars();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDateValid" })
        @GET("array/prim/date/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<LocalDate>> getDateValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putDateValid" })
        @PUT("array/prim/date/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putDateValid(@BodyParam("application/json; charset=utf-8") List<LocalDate> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDateInvalidNull" })
        @GET("array/prim/date/invalidnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<LocalDate>> getDateInvalidNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDateInvalidChars" })
        @GET("array/prim/date/invalidchars")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<LocalDate>> getDateInvalidChars();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDateTimeValid" })
        @GET("array/prim/date-time/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<DateTime>> getDateTimeValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putDateTimeValid" })
        @PUT("array/prim/date-time/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putDateTimeValid(@BodyParam("application/json; charset=utf-8") List<DateTime> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDateTimeInvalidNull" })
        @GET("array/prim/date-time/invalidnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<DateTime>> getDateTimeInvalidNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDateTimeInvalidChars" })
        @GET("array/prim/date-time/invalidchars")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<DateTime>> getDateTimeInvalidChars();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDateTimeRfc1123Valid" })
        @GET("array/prim/date-time-rfc1123/valid")
        @ExpectedResponses({200})
        @ReturnValueWireType(DateTimeRfc1123.class)
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<DateTime>> getDateTimeRfc1123Valid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putDateTimeRfc1123Valid" })
        @PUT("array/prim/date-time-rfc1123/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putDateTimeRfc1123Valid(@BodyParam("application/json; charset=utf-8") List<DateTimeRfc1123> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDurationValid" })
        @GET("array/prim/duration/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Period>> getDurationValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putDurationValid" })
        @PUT("array/prim/duration/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putDurationValid(@BodyParam("application/json; charset=utf-8") List<Period> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getByteValid" })
        @GET("array/prim/byte/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<byte[]>> getByteValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putByteValid" })
        @PUT("array/prim/byte/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putByteValid(@BodyParam("application/json; charset=utf-8") List<byte[]> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getByteInvalidNull" })
        @GET("array/prim/byte/invalidnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<byte[]>> getByteInvalidNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getBase64Url" })
        @GET("array/prim/base64url/valid")
        @ExpectedResponses({200})
        @ReturnValueWireType(Base64Url.class)
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<byte[]>> getBase64Url();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getComplexNull" })
        @GET("array/complex/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Product>> getComplexNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getComplexEmpty" })
        @GET("array/complex/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Product>> getComplexEmpty();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getComplexItemNull" })
        @GET("array/complex/itemnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Product>> getComplexItemNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getComplexItemEmpty" })
        @GET("array/complex/itemempty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Product>> getComplexItemEmpty();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getComplexValid" })
        @GET("array/complex/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Product>> getComplexValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putComplexValid" })
        @PUT("array/complex/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putComplexValid(@BodyParam("application/json; charset=utf-8") List<Product> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getArrayNull" })
        @GET("array/array/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<List<String>>> getArrayNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getArrayEmpty" })
        @GET("array/array/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<List<String>>> getArrayEmpty();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getArrayItemNull" })
        @GET("array/array/itemnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<List<String>>> getArrayItemNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getArrayItemEmpty" })
        @GET("array/array/itemempty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<List<String>>> getArrayItemEmpty();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getArrayValid" })
        @GET("array/array/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<List<String>>> getArrayValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putArrayValid" })
        @PUT("array/array/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putArrayValid(@BodyParam("application/json; charset=utf-8") List<List<String>> arrayBody);

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDictionaryNull" })
        @GET("array/dictionary/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Map<String, String>>> getDictionaryNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDictionaryEmpty" })
        @GET("array/dictionary/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Map<String, String>>> getDictionaryEmpty();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDictionaryItemNull" })
        @GET("array/dictionary/itemnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Map<String, String>>> getDictionaryItemNull();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDictionaryItemEmpty" })
        @GET("array/dictionary/itemempty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Map<String, String>>> getDictionaryItemEmpty();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays getDictionaryValid" })
        @GET("array/dictionary/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<List<Map<String, String>>> getDictionaryValid();

        @Headers({ "x-ms-logging-context: fixtures.bodyarray.Arrays putDictionaryValid" })
        @PUT("array/dictionary/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putDictionaryValid(@BodyParam("application/json; charset=utf-8") List<Map<String, String>> arrayBody);

    }

    /**
     * Get null array value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Integer&gt; object if successful.
     */
    public List<Integer> getNull() {
        return getNullAsync().toBlocking().value();
    }

    /**
     * Get null array value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Integer>> getNullAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getNullAsync(), serviceCallback);
    }

    /**
     * Get null array value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Integer&gt; object
     */
    public Single<List<Integer>> getNullAsync() {
        return service.getNull();
    }


    /**
     * Get invalid array [1, 2, 3.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Integer&gt; object if successful.
     */
    public List<Integer> getInvalid() {
        return getInvalidAsync().toBlocking().value();
    }

    /**
     * Get invalid array [1, 2, 3.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Integer>> getInvalidAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidAsync(), serviceCallback);
    }

    /**
     * Get invalid array [1, 2, 3.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Integer&gt; object
     */
    public Single<List<Integer>> getInvalidAsync() {
        return service.getInvalid();
    }


    /**
     * Get empty array value [].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Integer&gt; object if successful.
     */
    public List<Integer> getEmpty() {
        return getEmptyAsync().toBlocking().value();
    }

    /**
     * Get empty array value [].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Integer>> getEmptyAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyAsync(), serviceCallback);
    }

    /**
     * Get empty array value [].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Integer&gt; object
     */
    public Single<List<Integer>> getEmptyAsync() {
        return service.getEmpty();
    }


    /**
     * Set array value empty [].
     *
     * @param arrayBody the List&lt;String&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putEmpty(List<String> arrayBody) {
        putEmptyAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value empty [].
     *
     * @param arrayBody the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putEmptyAsync(List<String> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putEmptyAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value empty [].
     *
     * @param arrayBody the List&lt;String&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putEmptyAsync(List<String> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putEmpty(arrayBody);
    }


    /**
     * Get boolean array value [true, false, false, true].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Boolean&gt; object if successful.
     */
    public List<Boolean> getBooleanTfft() {
        return getBooleanTfftAsync().toBlocking().value();
    }

    /**
     * Get boolean array value [true, false, false, true].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Boolean>> getBooleanTfftAsync(final ServiceCallback<List<Boolean>> serviceCallback) {
        return ServiceFuture.fromBody(getBooleanTfftAsync(), serviceCallback);
    }

    /**
     * Get boolean array value [true, false, false, true].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Boolean&gt; object
     */
    public Single<List<Boolean>> getBooleanTfftAsync() {
        return service.getBooleanTfft();
    }


    /**
     * Set array value empty [true, false, false, true].
     *
     * @param arrayBody the List&lt;Boolean&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putBooleanTfft(List<Boolean> arrayBody) {
        putBooleanTfftAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value empty [true, false, false, true].
     *
     * @param arrayBody the List&lt;Boolean&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBooleanTfftAsync(List<Boolean> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBooleanTfftAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value empty [true, false, false, true].
     *
     * @param arrayBody the List&lt;Boolean&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putBooleanTfftAsync(List<Boolean> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putBooleanTfft(arrayBody);
    }


    /**
     * Get boolean array value [true, null, false].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Boolean&gt; object if successful.
     */
    public List<Boolean> getBooleanInvalidNull() {
        return getBooleanInvalidNullAsync().toBlocking().value();
    }

    /**
     * Get boolean array value [true, null, false].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Boolean>> getBooleanInvalidNullAsync(final ServiceCallback<List<Boolean>> serviceCallback) {
        return ServiceFuture.fromBody(getBooleanInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get boolean array value [true, null, false].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Boolean&gt; object
     */
    public Single<List<Boolean>> getBooleanInvalidNullAsync() {
        return service.getBooleanInvalidNull();
    }


    /**
     * Get boolean array value [true, 'boolean', false].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Boolean&gt; object if successful.
     */
    public List<Boolean> getBooleanInvalidString() {
        return getBooleanInvalidStringAsync().toBlocking().value();
    }

    /**
     * Get boolean array value [true, 'boolean', false].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Boolean>> getBooleanInvalidStringAsync(final ServiceCallback<List<Boolean>> serviceCallback) {
        return ServiceFuture.fromBody(getBooleanInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get boolean array value [true, 'boolean', false].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Boolean&gt; object
     */
    public Single<List<Boolean>> getBooleanInvalidStringAsync() {
        return service.getBooleanInvalidString();
    }


    /**
     * Get integer array value [1, -1, 3, 300].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Integer&gt; object if successful.
     */
    public List<Integer> getIntegerValid() {
        return getIntegerValidAsync().toBlocking().value();
    }

    /**
     * Get integer array value [1, -1, 3, 300].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Integer>> getIntegerValidAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getIntegerValidAsync(), serviceCallback);
    }

    /**
     * Get integer array value [1, -1, 3, 300].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Integer&gt; object
     */
    public Single<List<Integer>> getIntegerValidAsync() {
        return service.getIntegerValid();
    }


    /**
     * Set array value empty [1, -1, 3, 300].
     *
     * @param arrayBody the List&lt;Integer&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putIntegerValid(List<Integer> arrayBody) {
        putIntegerValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value empty [1, -1, 3, 300].
     *
     * @param arrayBody the List&lt;Integer&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putIntegerValidAsync(List<Integer> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putIntegerValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value empty [1, -1, 3, 300].
     *
     * @param arrayBody the List&lt;Integer&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putIntegerValidAsync(List<Integer> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putIntegerValid(arrayBody);
    }


    /**
     * Get integer array value [1, null, 0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Integer&gt; object if successful.
     */
    public List<Integer> getIntInvalidNull() {
        return getIntInvalidNullAsync().toBlocking().value();
    }

    /**
     * Get integer array value [1, null, 0].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Integer>> getIntInvalidNullAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getIntInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get integer array value [1, null, 0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Integer&gt; object
     */
    public Single<List<Integer>> getIntInvalidNullAsync() {
        return service.getIntInvalidNull();
    }


    /**
     * Get integer array value [1, 'integer', 0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Integer&gt; object if successful.
     */
    public List<Integer> getIntInvalidString() {
        return getIntInvalidStringAsync().toBlocking().value();
    }

    /**
     * Get integer array value [1, 'integer', 0].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Integer>> getIntInvalidStringAsync(final ServiceCallback<List<Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getIntInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get integer array value [1, 'integer', 0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Integer&gt; object
     */
    public Single<List<Integer>> getIntInvalidStringAsync() {
        return service.getIntInvalidString();
    }


    /**
     * Get integer array value [1, -1, 3, 300].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Long&gt; object if successful.
     */
    public List<Long> getLongValid() {
        return getLongValidAsync().toBlocking().value();
    }

    /**
     * Get integer array value [1, -1, 3, 300].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Long>> getLongValidAsync(final ServiceCallback<List<Long>> serviceCallback) {
        return ServiceFuture.fromBody(getLongValidAsync(), serviceCallback);
    }

    /**
     * Get integer array value [1, -1, 3, 300].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Long&gt; object
     */
    public Single<List<Long>> getLongValidAsync() {
        return service.getLongValid();
    }


    /**
     * Set array value empty [1, -1, 3, 300].
     *
     * @param arrayBody the List&lt;Long&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putLongValid(List<Long> arrayBody) {
        putLongValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value empty [1, -1, 3, 300].
     *
     * @param arrayBody the List&lt;Long&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putLongValidAsync(List<Long> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putLongValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value empty [1, -1, 3, 300].
     *
     * @param arrayBody the List&lt;Long&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putLongValidAsync(List<Long> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putLongValid(arrayBody);
    }


    /**
     * Get long array value [1, null, 0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Long&gt; object if successful.
     */
    public List<Long> getLongInvalidNull() {
        return getLongInvalidNullAsync().toBlocking().value();
    }

    /**
     * Get long array value [1, null, 0].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Long>> getLongInvalidNullAsync(final ServiceCallback<List<Long>> serviceCallback) {
        return ServiceFuture.fromBody(getLongInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get long array value [1, null, 0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Long&gt; object
     */
    public Single<List<Long>> getLongInvalidNullAsync() {
        return service.getLongInvalidNull();
    }


    /**
     * Get long array value [1, 'integer', 0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Long&gt; object if successful.
     */
    public List<Long> getLongInvalidString() {
        return getLongInvalidStringAsync().toBlocking().value();
    }

    /**
     * Get long array value [1, 'integer', 0].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Long>> getLongInvalidStringAsync(final ServiceCallback<List<Long>> serviceCallback) {
        return ServiceFuture.fromBody(getLongInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get long array value [1, 'integer', 0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Long&gt; object
     */
    public Single<List<Long>> getLongInvalidStringAsync() {
        return service.getLongInvalidString();
    }


    /**
     * Get float array value [0, -0.01, 1.2e20].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Double&gt; object if successful.
     */
    public List<Double> getFloatValid() {
        return getFloatValidAsync().toBlocking().value();
    }

    /**
     * Get float array value [0, -0.01, 1.2e20].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Double>> getFloatValidAsync(final ServiceCallback<List<Double>> serviceCallback) {
        return ServiceFuture.fromBody(getFloatValidAsync(), serviceCallback);
    }

    /**
     * Get float array value [0, -0.01, 1.2e20].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Double&gt; object
     */
    public Single<List<Double>> getFloatValidAsync() {
        return service.getFloatValid();
    }


    /**
     * Set array value [0, -0.01, 1.2e20].
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putFloatValid(List<Double> arrayBody) {
        putFloatValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value [0, -0.01, 1.2e20].
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putFloatValidAsync(List<Double> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putFloatValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value [0, -0.01, 1.2e20].
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putFloatValidAsync(List<Double> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putFloatValid(arrayBody);
    }


    /**
     * Get float array value [0.0, null, -1.2e20].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Double&gt; object if successful.
     */
    public List<Double> getFloatInvalidNull() {
        return getFloatInvalidNullAsync().toBlocking().value();
    }

    /**
     * Get float array value [0.0, null, -1.2e20].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Double>> getFloatInvalidNullAsync(final ServiceCallback<List<Double>> serviceCallback) {
        return ServiceFuture.fromBody(getFloatInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get float array value [0.0, null, -1.2e20].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Double&gt; object
     */
    public Single<List<Double>> getFloatInvalidNullAsync() {
        return service.getFloatInvalidNull();
    }


    /**
     * Get boolean array value [1.0, 'number', 0.0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Double&gt; object if successful.
     */
    public List<Double> getFloatInvalidString() {
        return getFloatInvalidStringAsync().toBlocking().value();
    }

    /**
     * Get boolean array value [1.0, 'number', 0.0].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Double>> getFloatInvalidStringAsync(final ServiceCallback<List<Double>> serviceCallback) {
        return ServiceFuture.fromBody(getFloatInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get boolean array value [1.0, 'number', 0.0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Double&gt; object
     */
    public Single<List<Double>> getFloatInvalidStringAsync() {
        return service.getFloatInvalidString();
    }


    /**
     * Get float array value [0, -0.01, 1.2e20].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Double&gt; object if successful.
     */
    public List<Double> getDoubleValid() {
        return getDoubleValidAsync().toBlocking().value();
    }

    /**
     * Get float array value [0, -0.01, 1.2e20].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Double>> getDoubleValidAsync(final ServiceCallback<List<Double>> serviceCallback) {
        return ServiceFuture.fromBody(getDoubleValidAsync(), serviceCallback);
    }

    /**
     * Get float array value [0, -0.01, 1.2e20].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Double&gt; object
     */
    public Single<List<Double>> getDoubleValidAsync() {
        return service.getDoubleValid();
    }


    /**
     * Set array value [0, -0.01, 1.2e20].
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putDoubleValid(List<Double> arrayBody) {
        putDoubleValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value [0, -0.01, 1.2e20].
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putDoubleValidAsync(List<Double> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDoubleValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value [0, -0.01, 1.2e20].
     *
     * @param arrayBody the List&lt;Double&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putDoubleValidAsync(List<Double> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDoubleValid(arrayBody);
    }


    /**
     * Get float array value [0.0, null, -1.2e20].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Double&gt; object if successful.
     */
    public List<Double> getDoubleInvalidNull() {
        return getDoubleInvalidNullAsync().toBlocking().value();
    }

    /**
     * Get float array value [0.0, null, -1.2e20].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Double>> getDoubleInvalidNullAsync(final ServiceCallback<List<Double>> serviceCallback) {
        return ServiceFuture.fromBody(getDoubleInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get float array value [0.0, null, -1.2e20].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Double&gt; object
     */
    public Single<List<Double>> getDoubleInvalidNullAsync() {
        return service.getDoubleInvalidNull();
    }


    /**
     * Get boolean array value [1.0, 'number', 0.0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Double&gt; object if successful.
     */
    public List<Double> getDoubleInvalidString() {
        return getDoubleInvalidStringAsync().toBlocking().value();
    }

    /**
     * Get boolean array value [1.0, 'number', 0.0].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Double>> getDoubleInvalidStringAsync(final ServiceCallback<List<Double>> serviceCallback) {
        return ServiceFuture.fromBody(getDoubleInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get boolean array value [1.0, 'number', 0.0].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Double&gt; object
     */
    public Single<List<Double>> getDoubleInvalidStringAsync() {
        return service.getDoubleInvalidString();
    }


    /**
     * Get string array value ['foo1', 'foo2', 'foo3'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> getStringValid() {
        return getStringValidAsync().toBlocking().value();
    }

    /**
     * Get string array value ['foo1', 'foo2', 'foo3'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<String>> getStringValidAsync(final ServiceCallback<List<String>> serviceCallback) {
        return ServiceFuture.fromBody(getStringValidAsync(), serviceCallback);
    }

    /**
     * Get string array value ['foo1', 'foo2', 'foo3'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    public Single<List<String>> getStringValidAsync() {
        return service.getStringValid();
    }


    /**
     * Set array value ['foo1', 'foo2', 'foo3'].
     *
     * @param arrayBody the List&lt;String&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putStringValid(List<String> arrayBody) {
        putStringValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value ['foo1', 'foo2', 'foo3'].
     *
     * @param arrayBody the List&lt;String&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putStringValidAsync(List<String> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putStringValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value ['foo1', 'foo2', 'foo3'].
     *
     * @param arrayBody the List&lt;String&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putStringValidAsync(List<String> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putStringValid(arrayBody);
    }


    /**
     * Get string array value ['foo', null, 'foo2'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> getStringWithNull() {
        return getStringWithNullAsync().toBlocking().value();
    }

    /**
     * Get string array value ['foo', null, 'foo2'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<String>> getStringWithNullAsync(final ServiceCallback<List<String>> serviceCallback) {
        return ServiceFuture.fromBody(getStringWithNullAsync(), serviceCallback);
    }

    /**
     * Get string array value ['foo', null, 'foo2'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    public Single<List<String>> getStringWithNullAsync() {
        return service.getStringWithNull();
    }


    /**
     * Get string array value ['foo', 123, 'foo2'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> getStringWithInvalid() {
        return getStringWithInvalidAsync().toBlocking().value();
    }

    /**
     * Get string array value ['foo', 123, 'foo2'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<String>> getStringWithInvalidAsync(final ServiceCallback<List<String>> serviceCallback) {
        return ServiceFuture.fromBody(getStringWithInvalidAsync(), serviceCallback);
    }

    /**
     * Get string array value ['foo', 123, 'foo2'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;String&gt; object
     */
    public Single<List<String>> getStringWithInvalidAsync() {
        return service.getStringWithInvalid();
    }


    /**
     * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UUID&gt; object if successful.
     */
    public List<UUID> getUuidValid() {
        return getUuidValidAsync().toBlocking().value();
    }

    /**
     * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<UUID>> getUuidValidAsync(final ServiceCallback<List<UUID>> serviceCallback) {
        return ServiceFuture.fromBody(getUuidValidAsync(), serviceCallback);
    }

    /**
     * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UUID&gt; object
     */
    public Single<List<UUID>> getUuidValidAsync() {
        return service.getUuidValid();
    }


    /**
     * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
     *
     * @param arrayBody the List&lt;UUID&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putUuidValid(List<UUID> arrayBody) {
        putUuidValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
     *
     * @param arrayBody the List&lt;UUID&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putUuidValidAsync(List<UUID> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putUuidValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
     *
     * @param arrayBody the List&lt;UUID&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putUuidValidAsync(List<UUID> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putUuidValid(arrayBody);
    }


    /**
     * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UUID&gt; object if successful.
     */
    public List<UUID> getUuidInvalidChars() {
        return getUuidInvalidCharsAsync().toBlocking().value();
    }

    /**
     * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<UUID>> getUuidInvalidCharsAsync(final ServiceCallback<List<UUID>> serviceCallback) {
        return ServiceFuture.fromBody(getUuidInvalidCharsAsync(), serviceCallback);
    }

    /**
     * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UUID&gt; object
     */
    public Single<List<UUID>> getUuidInvalidCharsAsync() {
        return service.getUuidInvalidChars();
    }


    /**
     * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LocalDate&gt; object if successful.
     */
    public List<LocalDate> getDateValid() {
        return getDateValidAsync().toBlocking().value();
    }

    /**
     * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LocalDate>> getDateValidAsync(final ServiceCallback<List<LocalDate>> serviceCallback) {
        return ServiceFuture.fromBody(getDateValidAsync(), serviceCallback);
    }

    /**
     * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LocalDate&gt; object
     */
    public Single<List<LocalDate>> getDateValidAsync() {
        return service.getDateValid();
    }


    /**
     * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].
     *
     * @param arrayBody the List&lt;LocalDate&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putDateValid(List<LocalDate> arrayBody) {
        putDateValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].
     *
     * @param arrayBody the List&lt;LocalDate&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putDateValidAsync(List<LocalDate> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].
     *
     * @param arrayBody the List&lt;LocalDate&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putDateValidAsync(List<LocalDate> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDateValid(arrayBody);
    }


    /**
     * Get date array value ['2012-01-01', null, '1776-07-04'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LocalDate&gt; object if successful.
     */
    public List<LocalDate> getDateInvalidNull() {
        return getDateInvalidNullAsync().toBlocking().value();
    }

    /**
     * Get date array value ['2012-01-01', null, '1776-07-04'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LocalDate>> getDateInvalidNullAsync(final ServiceCallback<List<LocalDate>> serviceCallback) {
        return ServiceFuture.fromBody(getDateInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get date array value ['2012-01-01', null, '1776-07-04'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LocalDate&gt; object
     */
    public Single<List<LocalDate>> getDateInvalidNullAsync() {
        return service.getDateInvalidNull();
    }


    /**
     * Get date array value ['2011-03-22', 'date'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LocalDate&gt; object if successful.
     */
    public List<LocalDate> getDateInvalidChars() {
        return getDateInvalidCharsAsync().toBlocking().value();
    }

    /**
     * Get date array value ['2011-03-22', 'date'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<LocalDate>> getDateInvalidCharsAsync(final ServiceCallback<List<LocalDate>> serviceCallback) {
        return ServiceFuture.fromBody(getDateInvalidCharsAsync(), serviceCallback);
    }

    /**
     * Get date array value ['2011-03-22', 'date'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LocalDate&gt; object
     */
    public Single<List<LocalDate>> getDateInvalidCharsAsync() {
        return service.getDateInvalidChars();
    }


    /**
     * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DateTime&gt; object if successful.
     */
    public List<DateTime> getDateTimeValid() {
        return getDateTimeValidAsync().toBlocking().value();
    }

    /**
     * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DateTime>> getDateTimeValidAsync(final ServiceCallback<List<DateTime>> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeValidAsync(), serviceCallback);
    }

    /**
     * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DateTime&gt; object
     */
    public Single<List<DateTime>> getDateTimeValidAsync() {
        return service.getDateTimeValid();
    }


    /**
     * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
     *
     * @param arrayBody the List&lt;DateTime&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putDateTimeValid(List<DateTime> arrayBody) {
        putDateTimeValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
     *
     * @param arrayBody the List&lt;DateTime&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putDateTimeValidAsync(List<DateTime> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateTimeValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
     *
     * @param arrayBody the List&lt;DateTime&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putDateTimeValidAsync(List<DateTime> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDateTimeValid(arrayBody);
    }


    /**
     * Get date array value ['2000-12-01t00:00:01z', null].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DateTime&gt; object if successful.
     */
    public List<DateTime> getDateTimeInvalidNull() {
        return getDateTimeInvalidNullAsync().toBlocking().value();
    }

    /**
     * Get date array value ['2000-12-01t00:00:01z', null].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DateTime>> getDateTimeInvalidNullAsync(final ServiceCallback<List<DateTime>> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get date array value ['2000-12-01t00:00:01z', null].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DateTime&gt; object
     */
    public Single<List<DateTime>> getDateTimeInvalidNullAsync() {
        return service.getDateTimeInvalidNull();
    }


    /**
     * Get date array value ['2000-12-01t00:00:01z', 'date-time'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DateTime&gt; object if successful.
     */
    public List<DateTime> getDateTimeInvalidChars() {
        return getDateTimeInvalidCharsAsync().toBlocking().value();
    }

    /**
     * Get date array value ['2000-12-01t00:00:01z', 'date-time'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DateTime>> getDateTimeInvalidCharsAsync(final ServiceCallback<List<DateTime>> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeInvalidCharsAsync(), serviceCallback);
    }

    /**
     * Get date array value ['2000-12-01t00:00:01z', 'date-time'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DateTime&gt; object
     */
    public Single<List<DateTime>> getDateTimeInvalidCharsAsync() {
        return service.getDateTimeInvalidChars();
    }


    /**
     * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DateTime&gt; object if successful.
     */
    public List<DateTime> getDateTimeRfc1123Valid() {
        return getDateTimeRfc1123ValidAsync().toBlocking().value();
    }

    /**
     * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DateTime>> getDateTimeRfc1123ValidAsync(final ServiceCallback<List<DateTime>> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeRfc1123ValidAsync(), serviceCallback);
    }

    /**
     * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DateTime&gt; object
     */
    public Single<List<DateTime>> getDateTimeRfc1123ValidAsync() {
        return service.getDateTimeRfc1123Valid();
    }


    /**
     * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
     *
     * @param arrayBody the List&lt;DateTimeRfc1123&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putDateTimeRfc1123Valid(List<DateTime> arrayBody) {
        putDateTimeRfc1123ValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
     *
     * @param arrayBody the List&lt;DateTimeRfc1123&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putDateTimeRfc1123ValidAsync(List<DateTime> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateTimeRfc1123ValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
     *
     * @param arrayBody the List&lt;DateTimeRfc1123&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putDateTimeRfc1123ValidAsync(List<DateTime> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        List<DateTimeRfc1123> arrayBodyConverted = new ArrayList<DateTimeRfc1123>();
        for (DateTime item : arrayBody) {
            DateTimeRfc1123 value = new DateTimeRfc1123(item);
            arrayBodyConverted.add(value);
        }
        return service.putDateTimeRfc1123Valid(arrayBodyConverted);
    }


    /**
     * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Period&gt; object if successful.
     */
    public List<Period> getDurationValid() {
        return getDurationValidAsync().toBlocking().value();
    }

    /**
     * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Period>> getDurationValidAsync(final ServiceCallback<List<Period>> serviceCallback) {
        return ServiceFuture.fromBody(getDurationValidAsync(), serviceCallback);
    }

    /**
     * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Period&gt; object
     */
    public Single<List<Period>> getDurationValidAsync() {
        return service.getDurationValid();
    }


    /**
     * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
     *
     * @param arrayBody the List&lt;Period&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putDurationValid(List<Period> arrayBody) {
        putDurationValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
     *
     * @param arrayBody the List&lt;Period&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putDurationValidAsync(List<Period> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDurationValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
     *
     * @param arrayBody the List&lt;Period&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putDurationValidAsync(List<Period> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDurationValid(arrayBody);
    }


    /**
     * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;byte[]&gt; object if successful.
     */
    public List<byte[]> getByteValid() {
        return getByteValidAsync().toBlocking().value();
    }

    /**
     * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<byte[]>> getByteValidAsync(final ServiceCallback<List<byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getByteValidAsync(), serviceCallback);
    }

    /**
     * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;byte[]&gt; object
     */
    public Single<List<byte[]>> getByteValidAsync() {
        return service.getByteValid();
    }


    /**
     * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64.
     *
     * @param arrayBody the List&lt;byte[]&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putByteValid(List<byte[]> arrayBody) {
        putByteValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64.
     *
     * @param arrayBody the List&lt;byte[]&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putByteValidAsync(List<byte[]> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putByteValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64.
     *
     * @param arrayBody the List&lt;byte[]&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putByteValidAsync(List<byte[]> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putByteValid(arrayBody);
    }


    /**
     * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;byte[]&gt; object if successful.
     */
    public List<byte[]> getByteInvalidNull() {
        return getByteInvalidNullAsync().toBlocking().value();
    }

    /**
     * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<byte[]>> getByteInvalidNullAsync(final ServiceCallback<List<byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getByteInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;byte[]&gt; object
     */
    public Single<List<byte[]>> getByteInvalidNullAsync() {
        return service.getByteInvalidNull();
    }


    /**
     * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;byte[]&gt; object if successful.
     */
    public List<byte[]> getBase64Url() {
        return getBase64UrlAsync().toBlocking().value();
    }

    /**
     * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<byte[]>> getBase64UrlAsync(final ServiceCallback<List<byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getBase64UrlAsync(), serviceCallback);
    }

    /**
     * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;byte[]&gt; object
     */
    public Single<List<byte[]>> getBase64UrlAsync() {
        return service.getBase64Url();
    }


    /**
     * Get array of complex type null value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Product&gt; object if successful.
     */
    public List<Product> getComplexNull() {
        return getComplexNullAsync().toBlocking().value();
    }

    /**
     * Get array of complex type null value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Product>> getComplexNullAsync(final ServiceCallback<List<Product>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexNullAsync(), serviceCallback);
    }

    /**
     * Get array of complex type null value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Single<List<Product>> getComplexNullAsync() {
        return service.getComplexNull();
    }


    /**
     * Get empty array of complex type [].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Product&gt; object if successful.
     */
    public List<Product> getComplexEmpty() {
        return getComplexEmptyAsync().toBlocking().value();
    }

    /**
     * Get empty array of complex type [].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Product>> getComplexEmptyAsync(final ServiceCallback<List<Product>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexEmptyAsync(), serviceCallback);
    }

    /**
     * Get empty array of complex type [].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Single<List<Product>> getComplexEmptyAsync() {
        return service.getComplexEmpty();
    }


    /**
     * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Product&gt; object if successful.
     */
    public List<Product> getComplexItemNull() {
        return getComplexItemNullAsync().toBlocking().value();
    }

    /**
     * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Product>> getComplexItemNullAsync(final ServiceCallback<List<Product>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexItemNullAsync(), serviceCallback);
    }

    /**
     * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Single<List<Product>> getComplexItemNullAsync() {
        return service.getComplexItemNull();
    }


    /**
     * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Product&gt; object if successful.
     */
    public List<Product> getComplexItemEmpty() {
        return getComplexItemEmptyAsync().toBlocking().value();
    }

    /**
     * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Product>> getComplexItemEmptyAsync(final ServiceCallback<List<Product>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexItemEmptyAsync(), serviceCallback);
    }

    /**
     * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Single<List<Product>> getComplexItemEmptyAsync() {
        return service.getComplexItemEmpty();
    }


    /**
     * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Product&gt; object if successful.
     */
    public List<Product> getComplexValid() {
        return getComplexValidAsync().toBlocking().value();
    }

    /**
     * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Product>> getComplexValidAsync(final ServiceCallback<List<Product>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexValidAsync(), serviceCallback);
    }

    /**
     * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Product&gt; object
     */
    public Single<List<Product>> getComplexValidAsync() {
        return service.getComplexValid();
    }


    /**
     * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
     *
     * @param arrayBody the List&lt;Product&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putComplexValid(List<Product> arrayBody) {
        putComplexValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
     *
     * @param arrayBody the List&lt;Product&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putComplexValidAsync(List<Product> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putComplexValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
     *
     * @param arrayBody the List&lt;Product&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putComplexValidAsync(List<Product> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putComplexValid(arrayBody);
    }


    /**
     * Get a null array.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     */
    public List<List<String>> getArrayNull() {
        return getArrayNullAsync().toBlocking().value();
    }

    /**
     * Get a null array.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<List<String>>> getArrayNullAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayNullAsync(), serviceCallback);
    }

    /**
     * Get a null array.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;List&lt;String&gt;&gt; object
     */
    public Single<List<List<String>>> getArrayNullAsync() {
        return service.getArrayNull();
    }


    /**
     * Get an empty array [].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     */
    public List<List<String>> getArrayEmpty() {
        return getArrayEmptyAsync().toBlocking().value();
    }

    /**
     * Get an empty array [].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<List<String>>> getArrayEmptyAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayEmptyAsync(), serviceCallback);
    }

    /**
     * Get an empty array [].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;List&lt;String&gt;&gt; object
     */
    public Single<List<List<String>>> getArrayEmptyAsync() {
        return service.getArrayEmpty();
    }


    /**
     * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     */
    public List<List<String>> getArrayItemNull() {
        return getArrayItemNullAsync().toBlocking().value();
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<List<String>>> getArrayItemNullAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayItemNullAsync(), serviceCallback);
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;List&lt;String&gt;&gt; object
     */
    public Single<List<List<String>>> getArrayItemNullAsync() {
        return service.getArrayItemNull();
    }


    /**
     * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     */
    public List<List<String>> getArrayItemEmpty() {
        return getArrayItemEmptyAsync().toBlocking().value();
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<List<String>>> getArrayItemEmptyAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayItemEmptyAsync(), serviceCallback);
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;List&lt;String&gt;&gt; object
     */
    public Single<List<List<String>>> getArrayItemEmptyAsync() {
        return service.getArrayItemEmpty();
    }


    /**
     * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;List&lt;String&gt;&gt; object if successful.
     */
    public List<List<String>> getArrayValid() {
        return getArrayValidAsync().toBlocking().value();
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<List<String>>> getArrayValidAsync(final ServiceCallback<List<List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayValidAsync(), serviceCallback);
    }

    /**
     * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;List&lt;String&gt;&gt; object
     */
    public Single<List<List<String>>> getArrayValidAsync() {
        return service.getArrayValid();
    }


    /**
     * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
     *
     * @param arrayBody the List&lt;List&lt;String&gt;&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putArrayValid(List<List<String>> arrayBody) {
        putArrayValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
     *
     * @param arrayBody the List&lt;List&lt;String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putArrayValidAsync(List<List<String>> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putArrayValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
     *
     * @param arrayBody the List&lt;List&lt;String&gt;&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putArrayValidAsync(List<List<String>> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putArrayValid(arrayBody);
    }


    /**
     * Get an array of Dictionaries with value null.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     */
    public List<Map<String, String>> getDictionaryNull() {
        return getDictionaryNullAsync().toBlocking().value();
    }

    /**
     * Get an array of Dictionaries with value null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Map<String, String>>> getDictionaryNullAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryNullAsync(), serviceCallback);
    }

    /**
     * Get an array of Dictionaries with value null.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Map&lt;String, String&gt;&gt; object
     */
    public Single<List<Map<String, String>>> getDictionaryNullAsync() {
        return service.getDictionaryNull();
    }


    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     */
    public List<Map<String, String>> getDictionaryEmpty() {
        return getDictionaryEmptyAsync().toBlocking().value();
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Map<String, String>>> getDictionaryEmptyAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryEmptyAsync(), serviceCallback);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Map&lt;String, String&gt;&gt; object
     */
    public Single<List<Map<String, String>>> getDictionaryEmptyAsync() {
        return service.getDictionaryEmpty();
    }


    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     */
    public List<Map<String, String>> getDictionaryItemNull() {
        return getDictionaryItemNullAsync().toBlocking().value();
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Map<String, String>>> getDictionaryItemNullAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryItemNullAsync(), serviceCallback);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Map&lt;String, String&gt;&gt; object
     */
    public Single<List<Map<String, String>>> getDictionaryItemNullAsync() {
        return service.getDictionaryItemNull();
    }


    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     */
    public List<Map<String, String>> getDictionaryItemEmpty() {
        return getDictionaryItemEmptyAsync().toBlocking().value();
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Map<String, String>>> getDictionaryItemEmptyAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryItemEmptyAsync(), serviceCallback);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Map&lt;String, String&gt;&gt; object
     */
    public Single<List<Map<String, String>>> getDictionaryItemEmptyAsync() {
        return service.getDictionaryItemEmpty();
    }


    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Map&lt;String, String&gt;&gt; object if successful.
     */
    public List<Map<String, String>> getDictionaryValid() {
        return getDictionaryValidAsync().toBlocking().value();
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Map<String, String>>> getDictionaryValidAsync(final ServiceCallback<List<Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryValidAsync(), serviceCallback);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Map&lt;String, String&gt;&gt; object
     */
    public Single<List<Map<String, String>>> getDictionaryValidAsync() {
        return service.getDictionaryValid();
    }


    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param arrayBody the List&lt;Map&lt;String, String&gt;&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putDictionaryValid(List<Map<String, String>> arrayBody) {
        putDictionaryValidAsync(arrayBody).toBlocking().value();
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param arrayBody the List&lt;Map&lt;String, String&gt;&gt; value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putDictionaryValidAsync(List<Map<String, String>> arrayBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDictionaryValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param arrayBody the List&lt;Map&lt;String, String&gt;&gt; value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putDictionaryValidAsync(List<Map<String, String>> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDictionaryValid(arrayBody);
    }


}
