// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.bodynumber.implementation;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.bodynumber.Numbers;
import fixtures.bodynumber.models.ErrorException;
import java.math.BigDecimal;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Numbers.
 */
public final class NumbersImpl implements Numbers {
    /**
     * The proxy service used to perform REST calls.
     */
    private NumbersService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestNumberTestServiceImpl client;

    /**
     * Initializes an instance of NumbersImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public NumbersImpl(AutoRestNumberTestServiceImpl client) {
        this.service = RestProxy.create(NumbersService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestNumberTestServiceNumbers to be used by the proxy service to
     * perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestNumberTestServiceNumbers")
    private interface NumbersService {
        @Get("number/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getNull();

        @Get("number/invalidfloat")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getInvalidFloat();

        @Get("number/invaliddouble")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getInvalidDouble();

        @Get("number/invaliddecimal")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<BigDecimal>> getInvalidDecimal();

        @Put("number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigFloat(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Get("number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getBigFloat();

        @Put("number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDouble(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Get("number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getBigDouble();

        @Put("number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDoublePositiveDecimal(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Get("number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getBigDoublePositiveDecimal();

        @Put("number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDoubleNegativeDecimal(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Get("number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getBigDoubleNegativeDecimal();

        @Put("number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Get("number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<BigDecimal>> getBigDecimal();

        @Put("number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDecimalPositiveDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Get("number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<BigDecimal>> getBigDecimalPositiveDecimal();

        @Put("number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDecimalNegativeDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Get("number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<BigDecimal>> getBigDecimalNegativeDecimal();

        @Put("number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putSmallFloat(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Get("number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getSmallFloat();

        @Put("number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putSmallDouble(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Get("number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Double>> getSmallDouble();

        @Put("number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putSmallDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Get("number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<BigDecimal>> getSmallDecimal();
    }

    /**
     * Get null Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getNull() {
        return getNullAsync().block();
    }

    /**
     * Get null Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getNullWithRestResponseAsync() {
        return service.getNull();
    }

    /**
     * Get null Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getNullAsync() {
        return getNullWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getInvalidFloat() {
        return getInvalidFloatAsync().block();
    }

    /**
     * Get invalid float Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getInvalidFloatWithRestResponseAsync() {
        return service.getInvalidFloat();
    }

    /**
     * Get invalid float Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getInvalidFloatAsync() {
        return getInvalidFloatWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getInvalidDouble() {
        return getInvalidDoubleAsync().block();
    }

    /**
     * Get invalid double Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getInvalidDoubleWithRestResponseAsync() {
        return service.getInvalidDouble();
    }

    /**
     * Get invalid double Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getInvalidDoubleAsync() {
        return getInvalidDoubleWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getInvalidDecimal() {
        return getInvalidDecimalAsync().block();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BigDecimal>> getInvalidDecimalWithRestResponseAsync() {
        return service.getInvalidDecimal();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getInvalidDecimalAsync() {
        return getInvalidDecimalWithRestResponseAsync()
            .flatMap((SimpleResponse<BigDecimal> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigFloat(double numberBody) {
        putBigFloatAsync(numberBody).block();
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putBigFloatWithRestResponseAsync(double numberBody) {
        return service.putBigFloat(numberBody);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigFloatAsync(double numberBody) {
        return putBigFloatWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getBigFloat() {
        return getBigFloatAsync().block();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getBigFloatWithRestResponseAsync() {
        return service.getBigFloat();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getBigFloatAsync() {
        return getBigFloatWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDouble(double numberBody) {
        putBigDoubleAsync(numberBody).block();
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putBigDoubleWithRestResponseAsync(double numberBody) {
        return service.putBigDouble(numberBody);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDoubleAsync(double numberBody) {
        return putBigDoubleWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getBigDouble() {
        return getBigDoubleAsync().block();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getBigDoubleWithRestResponseAsync() {
        return service.getBigDouble();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getBigDoubleAsync() {
        return getBigDoubleWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDoublePositiveDecimal() {
        putBigDoublePositiveDecimalAsync().block();
    }

    /**
     * Put big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putBigDoublePositiveDecimalWithRestResponseAsync() {
        final double numberBody = 99999999.99;
        return service.putBigDoublePositiveDecimal(numberBody);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDoublePositiveDecimalAsync() {
        return putBigDoublePositiveDecimalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getBigDoublePositiveDecimal() {
        return getBigDoublePositiveDecimalAsync().block();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getBigDoublePositiveDecimalWithRestResponseAsync() {
        return service.getBigDoublePositiveDecimal();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getBigDoublePositiveDecimalAsync() {
        return getBigDoublePositiveDecimalWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDoubleNegativeDecimal() {
        putBigDoubleNegativeDecimalAsync().block();
    }

    /**
     * Put big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putBigDoubleNegativeDecimalWithRestResponseAsync() {
        final double numberBody = -99999999.99;
        return service.putBigDoubleNegativeDecimal(numberBody);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDoubleNegativeDecimalAsync() {
        return putBigDoubleNegativeDecimalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getBigDoubleNegativeDecimal() {
        return getBigDoubleNegativeDecimalAsync().block();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getBigDoubleNegativeDecimalWithRestResponseAsync() {
        return service.getBigDoubleNegativeDecimal();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getBigDoubleNegativeDecimalAsync() {
        return getBigDoubleNegativeDecimalWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDecimal(BigDecimal numberBody) {
        putBigDecimalAsync(numberBody).block();
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putBigDecimalWithRestResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimal(numberBody);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDecimalAsync(BigDecimal numberBody) {
        return putBigDecimalWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getBigDecimal() {
        return getBigDecimalAsync().block();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BigDecimal>> getBigDecimalWithRestResponseAsync() {
        return service.getBigDecimal();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getBigDecimalAsync() {
        return getBigDecimalWithRestResponseAsync()
            .flatMap((SimpleResponse<BigDecimal> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDecimalPositiveDecimal() {
        putBigDecimalPositiveDecimalAsync().block();
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putBigDecimalPositiveDecimalWithRestResponseAsync() {
        final BigDecimal numberBody = new BigDecimal("99999999.99");
        return service.putBigDecimalPositiveDecimal(numberBody);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDecimalPositiveDecimalAsync() {
        return putBigDecimalPositiveDecimalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getBigDecimalPositiveDecimal() {
        return getBigDecimalPositiveDecimalAsync().block();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BigDecimal>> getBigDecimalPositiveDecimalWithRestResponseAsync() {
        return service.getBigDecimalPositiveDecimal();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getBigDecimalPositiveDecimalAsync() {
        return getBigDecimalPositiveDecimalWithRestResponseAsync()
            .flatMap((SimpleResponse<BigDecimal> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putBigDecimalNegativeDecimal() {
        putBigDecimalNegativeDecimalAsync().block();
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putBigDecimalNegativeDecimalWithRestResponseAsync() {
        final BigDecimal numberBody = new BigDecimal("-99999999.99");
        return service.putBigDecimalNegativeDecimal(numberBody);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putBigDecimalNegativeDecimalAsync() {
        return putBigDecimalNegativeDecimalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getBigDecimalNegativeDecimal() {
        return getBigDecimalNegativeDecimalAsync().block();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BigDecimal>> getBigDecimalNegativeDecimalWithRestResponseAsync() {
        return service.getBigDecimalNegativeDecimal();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getBigDecimalNegativeDecimalAsync() {
        return getBigDecimalNegativeDecimalWithRestResponseAsync()
            .flatMap((SimpleResponse<BigDecimal> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putSmallFloat(double numberBody) {
        putSmallFloatAsync(numberBody).block();
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putSmallFloatWithRestResponseAsync(double numberBody) {
        return service.putSmallFloat(numberBody);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putSmallFloatAsync(double numberBody) {
        return putSmallFloatWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getSmallFloat() {
        return getSmallFloatAsync().block();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getSmallFloatWithRestResponseAsync() {
        return service.getSmallFloat();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getSmallFloatAsync() {
        return getSmallFloatWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putSmallDouble(double numberBody) {
        putSmallDoubleAsync(numberBody).block();
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putSmallDoubleWithRestResponseAsync(double numberBody) {
        return service.putSmallDouble(numberBody);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putSmallDoubleAsync(double numberBody) {
        return putSmallDoubleWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public double getSmallDouble() {
        return getSmallDoubleAsync().block();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Double>> getSmallDoubleWithRestResponseAsync() {
        return service.getSmallDouble();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Double> getSmallDoubleAsync() {
        return getSmallDoubleWithRestResponseAsync()
            .flatMap((SimpleResponse<Double> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putSmallDecimal(BigDecimal numberBody) {
        putSmallDecimalAsync(numberBody).block();
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> putSmallDecimalWithRestResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putSmallDecimal(numberBody);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> putSmallDecimalAsync(BigDecimal numberBody) {
        return putSmallDecimalWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BigDecimal getSmallDecimal() {
        return getSmallDecimalAsync().block();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BigDecimal>> getSmallDecimalWithRestResponseAsync() {
        return service.getSmallDecimal();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BigDecimal> getSmallDecimalAsync() {
        return getSmallDecimalWithRestResponseAsync()
            .flatMap((SimpleResponse<BigDecimal> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }
}
