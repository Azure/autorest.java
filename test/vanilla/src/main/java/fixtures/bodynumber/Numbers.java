/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodynumber;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import fixtures.bodynumber.models.ErrorException;
import java.io.IOException;
import java.math.BigDecimal;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Numbers.
 */
public interface Numbers {
    /**
     * Get null Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getNull();

    /**
     * Get null Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getNullAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get null Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getNullAsync();

    /**
     * Get null Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getNullWithServiceResponseAsync();

    /**
     * Get invalid float Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getInvalidFloat();

    /**
     * Get invalid float Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getInvalidFloatAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get invalid float Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getInvalidFloatAsync();

    /**
     * Get invalid float Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getInvalidFloatWithServiceResponseAsync();

    /**
     * Get invalid double Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getInvalidDouble();

    /**
     * Get invalid double Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getInvalidDoubleAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get invalid double Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getInvalidDoubleAsync();

    /**
     * Get invalid double Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getInvalidDoubleWithServiceResponseAsync();

    /**
     * Get invalid decimal Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    BigDecimal getInvalidDecimal();

    /**
     * Get invalid decimal Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BigDecimal> getInvalidDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get invalid decimal Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<BigDecimal> getInvalidDecimalAsync();

    /**
     * Get invalid decimal Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<ServiceResponse<BigDecimal>> getInvalidDecimalWithServiceResponseAsync();

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putBigFloat(double numberBody);

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putBigFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putBigFloatAsync(double numberBody);

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putBigFloatWithServiceResponseAsync(double numberBody);

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getBigFloat();

    /**
     * Get big float value 3.402823e+20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getBigFloatAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getBigFloatAsync();

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getBigFloatWithServiceResponseAsync();

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putBigDouble(double numberBody);

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putBigDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putBigDoubleAsync(double numberBody);

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putBigDoubleWithServiceResponseAsync(double numberBody);

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getBigDouble();

    /**
     * Get big double value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getBigDoubleAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getBigDoubleAsync();

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getBigDoubleWithServiceResponseAsync();

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putBigDoublePositiveDecimal(double numberBody);

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putBigDoublePositiveDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putBigDoublePositiveDecimalAsync(double numberBody);

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putBigDoublePositiveDecimalWithServiceResponseAsync(double numberBody);

    /**
     * Get big double value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getBigDoublePositiveDecimal();

    /**
     * Get big double value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getBigDoublePositiveDecimalAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getBigDoublePositiveDecimalAsync();

    /**
     * Get big double value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getBigDoublePositiveDecimalWithServiceResponseAsync();

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putBigDoubleNegativeDecimal(double numberBody);

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putBigDoubleNegativeDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putBigDoubleNegativeDecimalAsync(double numberBody);

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putBigDoubleNegativeDecimalWithServiceResponseAsync(double numberBody);

    /**
     * Get big double value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getBigDoubleNegativeDecimal();

    /**
     * Get big double value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getBigDoubleNegativeDecimalAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getBigDoubleNegativeDecimalAsync();

    /**
     * Get big double value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getBigDoubleNegativeDecimalWithServiceResponseAsync();

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putBigDecimal(BigDecimal numberBody);

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putBigDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putBigDecimalAsync(BigDecimal numberBody);

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putBigDecimalWithServiceResponseAsync(BigDecimal numberBody);

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    BigDecimal getBigDecimal();

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BigDecimal> getBigDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<BigDecimal> getBigDecimalAsync();

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<ServiceResponse<BigDecimal>> getBigDecimalWithServiceResponseAsync();

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putBigDecimalPositiveDecimal(BigDecimal numberBody);

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putBigDecimalPositiveDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putBigDecimalPositiveDecimalAsync(BigDecimal numberBody);

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putBigDecimalPositiveDecimalWithServiceResponseAsync(BigDecimal numberBody);

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    BigDecimal getBigDecimalPositiveDecimal();

    /**
     * Get big decimal value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BigDecimal> getBigDecimalPositiveDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<BigDecimal> getBigDecimalPositiveDecimalAsync();

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<ServiceResponse<BigDecimal>> getBigDecimalPositiveDecimalWithServiceResponseAsync();

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putBigDecimalNegativeDecimal(BigDecimal numberBody);

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putBigDecimalNegativeDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putBigDecimalNegativeDecimalAsync(BigDecimal numberBody);

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putBigDecimalNegativeDecimalWithServiceResponseAsync(BigDecimal numberBody);

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    BigDecimal getBigDecimalNegativeDecimal();

    /**
     * Get big decimal value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BigDecimal> getBigDecimalNegativeDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<BigDecimal> getBigDecimalNegativeDecimalAsync();

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<ServiceResponse<BigDecimal>> getBigDecimalNegativeDecimalWithServiceResponseAsync();

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putSmallFloat(double numberBody);

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putSmallFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putSmallFloatAsync(double numberBody);

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putSmallFloatWithServiceResponseAsync(double numberBody);

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getSmallFloat();

    /**
     * Get big double value 3.402823e-20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getSmallFloatAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getSmallFloatAsync();

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getSmallFloatWithServiceResponseAsync();

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putSmallDouble(double numberBody);

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putSmallDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putSmallDoubleAsync(double numberBody);

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putSmallDoubleWithServiceResponseAsync(double numberBody);

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    double getSmallDouble();

    /**
     * Get big double value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Double> getSmallDoubleAsync(final ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<Double> getSmallDoubleAsync();

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the double object
     */
    Observable<ServiceResponse<Double>> getSmallDoubleWithServiceResponseAsync();

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void putSmallDecimal(BigDecimal numberBody);

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> putSmallDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback);

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> putSmallDecimalAsync(BigDecimal numberBody);

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> putSmallDecimalWithServiceResponseAsync(BigDecimal numberBody);

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    BigDecimal getSmallDecimal();

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BigDecimal> getSmallDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<BigDecimal> getSmallDecimalAsync();

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    Observable<ServiceResponse<BigDecimal>> getSmallDecimalWithServiceResponseAsync();

}
