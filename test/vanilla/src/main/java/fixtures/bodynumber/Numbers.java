// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.bodynumber;

import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceMethod;
import java.math.BigDecimal;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Numbers.
 */
public interface Numbers {
    /**
     * Get null Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getNull();

    /**
     * Get null Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getNullWithRestResponseAsync();

    /**
     * Get null Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getNullAsync();

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getInvalidFloat();

    /**
     * Get invalid float Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getInvalidFloatWithRestResponseAsync();

    /**
     * Get invalid float Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getInvalidFloatAsync();

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getInvalidDouble();

    /**
     * Get invalid double Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getInvalidDoubleWithRestResponseAsync();

    /**
     * Get invalid double Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getInvalidDoubleAsync();

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDecimal getInvalidDecimal();

    /**
     * Get invalid decimal Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<BigDecimal>> getInvalidDecimalWithRestResponseAsync();

    /**
     * Get invalid decimal Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<BigDecimal> getInvalidDecimalAsync();

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putBigFloat(double numberBody);

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putBigFloatWithRestResponseAsync(double numberBody);

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putBigFloatAsync(double numberBody);

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getBigFloat();

    /**
     * Get big float value 3.402823e+20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getBigFloatWithRestResponseAsync();

    /**
     * Get big float value 3.402823e+20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getBigFloatAsync();

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putBigDouble(double numberBody);

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putBigDoubleWithRestResponseAsync(double numberBody);

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putBigDoubleAsync(double numberBody);

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getBigDouble();

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getBigDoubleWithRestResponseAsync();

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getBigDoubleAsync();

    /**
     * Put big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putBigDoublePositiveDecimal();

    /**
     * Put big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putBigDoublePositiveDecimalWithRestResponseAsync();

    /**
     * Put big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putBigDoublePositiveDecimalAsync();

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getBigDoublePositiveDecimal();

    /**
     * Get big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getBigDoublePositiveDecimalWithRestResponseAsync();

    /**
     * Get big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getBigDoublePositiveDecimalAsync();

    /**
     * Put big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putBigDoubleNegativeDecimal();

    /**
     * Put big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putBigDoubleNegativeDecimalWithRestResponseAsync();

    /**
     * Put big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putBigDoubleNegativeDecimalAsync();

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getBigDoubleNegativeDecimal();

    /**
     * Get big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getBigDoubleNegativeDecimalWithRestResponseAsync();

    /**
     * Get big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getBigDoubleNegativeDecimalAsync();

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putBigDecimal(BigDecimal numberBody);

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putBigDecimalWithRestResponseAsync(BigDecimal numberBody);

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putBigDecimalAsync(BigDecimal numberBody);

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDecimal getBigDecimal();

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<BigDecimal>> getBigDecimalWithRestResponseAsync();

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<BigDecimal> getBigDecimalAsync();

    /**
     * Put big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putBigDecimalPositiveDecimal();

    /**
     * Put big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putBigDecimalPositiveDecimalWithRestResponseAsync();

    /**
     * Put big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putBigDecimalPositiveDecimalAsync();

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDecimal getBigDecimalPositiveDecimal();

    /**
     * Get big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<BigDecimal>> getBigDecimalPositiveDecimalWithRestResponseAsync();

    /**
     * Get big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<BigDecimal> getBigDecimalPositiveDecimalAsync();

    /**
     * Put big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putBigDecimalNegativeDecimal();

    /**
     * Put big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putBigDecimalNegativeDecimalWithRestResponseAsync();

    /**
     * Put big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putBigDecimalNegativeDecimalAsync();

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDecimal getBigDecimalNegativeDecimal();

    /**
     * Get big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<BigDecimal>> getBigDecimalNegativeDecimalWithRestResponseAsync();

    /**
     * Get big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<BigDecimal> getBigDecimalNegativeDecimalAsync();

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putSmallFloat(double numberBody);

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putSmallFloatWithRestResponseAsync(double numberBody);

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putSmallFloatAsync(double numberBody);

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getSmallFloat();

    /**
     * Get big double value 3.402823e-20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getSmallFloatWithRestResponseAsync();

    /**
     * Get big double value 3.402823e-20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getSmallFloatAsync();

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putSmallDouble(double numberBody);

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putSmallDoubleWithRestResponseAsync(double numberBody);

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putSmallDoubleAsync(double numberBody);

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    double getSmallDouble();

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<Double>> getSmallDoubleWithRestResponseAsync();

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Double> getSmallDoubleAsync();

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void putSmallDecimal(BigDecimal numberBody);

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<VoidResponse> putSmallDecimalWithRestResponseAsync(BigDecimal numberBody);

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Void> putSmallDecimalAsync(BigDecimal numberBody);

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    BigDecimal getSmallDecimal();

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<SimpleResponse<BigDecimal>> getSmallDecimalWithRestResponseAsync();

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<BigDecimal> getSmallDecimalAsync();
}
