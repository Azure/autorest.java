// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.bodyfile.implementation;

import com.azure.core.http.rest.StreamResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.bodyfile.Files;
import fixtures.bodyfile.models.ErrorException;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Files.
 */
public final class FilesImpl implements Files {
    /**
     * The proxy service used to perform REST calls.
     */
    private FilesService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestSwaggerBATFileServiceImpl client;

    /**
     * Initializes an instance of FilesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public FilesImpl(AutoRestSwaggerBATFileServiceImpl client) {
        this.service = RestProxy.create(FilesService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestSwaggerBATFileServiceFiles to be used by the proxy service to
     * perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestSwaggerBATFileServiceFiles")
    private interface FilesService {
        @Get("files/stream/nonempty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<StreamResponse> getFile();

        @Get("files/stream/verylarge")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<StreamResponse> getFileLarge();

        @Get("files/stream/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<StreamResponse> getEmptyFile();
    }

    /**
     * Get file.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> getFile() {
        return getFileAsync().block();
    }

    /**
     * Get file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getFileWithRestResponseAsync() {
        return service.getFile();
    }

    /**
     * Get file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> getFileAsync() {
        return getFileWithRestResponseAsync()
            .flatMap((StreamResponse res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get a large file.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> getFileLarge() {
        return getFileLargeAsync().block();
    }

    /**
     * Get a large file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getFileLargeWithRestResponseAsync() {
        return service.getFileLarge();
    }

    /**
     * Get a large file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> getFileLargeAsync() {
        return getFileLargeWithRestResponseAsync()
            .flatMap((StreamResponse res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Get empty file.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> getEmptyFile() {
        return getEmptyFileAsync().block();
    }

    /**
     * Get empty file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getEmptyFileWithRestResponseAsync() {
        return service.getEmptyFile();
    }

    /**
     * Get empty file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> getEmptyFileAsync() {
        return getEmptyFileWithRestResponseAsync()
            .flatMap((StreamResponse res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }
}
