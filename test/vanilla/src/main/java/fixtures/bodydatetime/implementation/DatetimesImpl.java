/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydatetime.implementation;

import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import fixtures.bodydatetime.Datetimes;
import fixtures.bodydatetime.models.ErrorException;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.time.OffsetDateTime;

/**
 * An instance of this class provides access to all the operations defined in
 * Datetimes.
 */
public final class DatetimesImpl implements Datetimes {
    /**
     * The proxy service used to perform REST calls.
     */
    private DatetimesService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestDateTimeTestServiceImpl client;

    /**
     * Initializes an instance of DatetimesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public DatetimesImpl(AutoRestDateTimeTestServiceImpl client) {
        this.service = RestProxy.create(DatetimesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Datetimes to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface DatetimesService {
        @GET("datetime/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getNull();

        @GET("datetime/invalid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getInvalid();

        @GET("datetime/overflow")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getOverflow();

        @GET("datetime/underflow")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getUnderflow();

        @PUT("datetime/max/utc")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putUtcMaxDateTime(@BodyParam("application/json; charset=utf-8") OffsetDateTime datetimeBody);

        @GET("datetime/max/utc/lowercase")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getUtcLowercaseMaxDateTime();

        @GET("datetime/max/utc/uppercase")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getUtcUppercaseMaxDateTime();

        @PUT("datetime/max/localpositiveoffset")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putLocalPositiveOffsetMaxDateTime(@BodyParam("application/json; charset=utf-8") OffsetDateTime datetimeBody);

        @GET("datetime/max/localpositiveoffset/lowercase")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getLocalPositiveOffsetLowercaseMaxDateTime();

        @GET("datetime/max/localpositiveoffset/uppercase")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getLocalPositiveOffsetUppercaseMaxDateTime();

        @PUT("datetime/max/localnegativeoffset")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putLocalNegativeOffsetMaxDateTime(@BodyParam("application/json; charset=utf-8") OffsetDateTime datetimeBody);

        @GET("datetime/max/localnegativeoffset/uppercase")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getLocalNegativeOffsetUppercaseMaxDateTime();

        @GET("datetime/max/localnegativeoffset/lowercase")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getLocalNegativeOffsetLowercaseMaxDateTime();

        @PUT("datetime/min/utc")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putUtcMinDateTime(@BodyParam("application/json; charset=utf-8") OffsetDateTime datetimeBody);

        @GET("datetime/min/utc")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getUtcMinDateTime();

        @PUT("datetime/min/localpositiveoffset")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putLocalPositiveOffsetMinDateTime(@BodyParam("application/json; charset=utf-8") OffsetDateTime datetimeBody);

        @GET("datetime/min/localpositiveoffset")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getLocalPositiveOffsetMinDateTime();

        @PUT("datetime/min/localnegativeoffset")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putLocalNegativeOffsetMinDateTime(@BodyParam("application/json; charset=utf-8") OffsetDateTime datetimeBody);

        @GET("datetime/min/localnegativeoffset")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<OffsetDateTime>> getLocalNegativeOffsetMinDateTime();
    }

    /**
     * Get null datetime value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getNull() {
        return getNullAsync().blockingGet();
    }

    /**
     * Get null datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getNullAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getNullAsync(), serviceCallback);
    }

    /**
     * Get null datetime value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getNullWithRestResponseAsync() {
        return service.getNull();
    }

    /**
     * Get null datetime value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getNullAsync() {
        return getNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get invalid datetime value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getInvalid() {
        return getInvalidAsync().blockingGet();
    }

    /**
     * Get invalid datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getInvalidAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidAsync(), serviceCallback);
    }

    /**
     * Get invalid datetime value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getInvalidWithRestResponseAsync() {
        return service.getInvalid();
    }

    /**
     * Get invalid datetime value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getInvalidAsync() {
        return getInvalidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get overflow datetime value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getOverflow() {
        return getOverflowAsync().blockingGet();
    }

    /**
     * Get overflow datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getOverflowAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getOverflowAsync(), serviceCallback);
    }

    /**
     * Get overflow datetime value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getOverflowWithRestResponseAsync() {
        return service.getOverflow();
    }

    /**
     * Get overflow datetime value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getOverflowAsync() {
        return getOverflowWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get underflow datetime value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getUnderflow() {
        return getUnderflowAsync().blockingGet();
    }

    /**
     * Get underflow datetime value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getUnderflowAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getUnderflowAsync(), serviceCallback);
    }

    /**
     * Get underflow datetime value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getUnderflowWithRestResponseAsync() {
        return service.getUnderflow();
    }

    /**
     * Get underflow datetime value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getUnderflowAsync() {
        return getUnderflowWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putUtcMaxDateTime(@NonNull OffsetDateTime datetimeBody) {
        putUtcMaxDateTimeAsync(datetimeBody).blockingAwait();
    }

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putUtcMaxDateTimeAsync(@NonNull OffsetDateTime datetimeBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putUtcMaxDateTimeAsync(datetimeBody), serviceCallback);
    }

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putUtcMaxDateTimeWithRestResponseAsync(@NonNull OffsetDateTime datetimeBody) {
        if (datetimeBody == null) {
            throw new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.");
        }
        return service.putUtcMaxDateTime(datetimeBody);
    }

    /**
     * Put max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putUtcMaxDateTimeAsync(@NonNull OffsetDateTime datetimeBody) {
        return putUtcMaxDateTimeWithRestResponseAsync(datetimeBody)
            .toCompletable();
    }

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getUtcLowercaseMaxDateTime() {
        return getUtcLowercaseMaxDateTimeAsync().blockingGet();
    }

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getUtcLowercaseMaxDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getUtcLowercaseMaxDateTimeAsync(), serviceCallback);
    }

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getUtcLowercaseMaxDateTimeWithRestResponseAsync() {
        return service.getUtcLowercaseMaxDateTime();
    }

    /**
     * Get max datetime value 9999-12-31t23:59:59.9999999z.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getUtcLowercaseMaxDateTimeAsync() {
        return getUtcLowercaseMaxDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getUtcUppercaseMaxDateTime() {
        return getUtcUppercaseMaxDateTimeAsync().blockingGet();
    }

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getUtcUppercaseMaxDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getUtcUppercaseMaxDateTimeAsync(), serviceCallback);
    }

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getUtcUppercaseMaxDateTimeWithRestResponseAsync() {
        return service.getUtcUppercaseMaxDateTime();
    }

    /**
     * Get max datetime value 9999-12-31T23:59:59.9999999Z.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getUtcUppercaseMaxDateTimeAsync() {
        return getUtcUppercaseMaxDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putLocalPositiveOffsetMaxDateTime(@NonNull OffsetDateTime datetimeBody) {
        putLocalPositiveOffsetMaxDateTimeAsync(datetimeBody).blockingAwait();
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putLocalPositiveOffsetMaxDateTimeAsync(@NonNull OffsetDateTime datetimeBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putLocalPositiveOffsetMaxDateTimeAsync(datetimeBody), serviceCallback);
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putLocalPositiveOffsetMaxDateTimeWithRestResponseAsync(@NonNull OffsetDateTime datetimeBody) {
        if (datetimeBody == null) {
            throw new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.");
        }
        return service.putLocalPositiveOffsetMaxDateTime(datetimeBody);
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putLocalPositiveOffsetMaxDateTimeAsync(@NonNull OffsetDateTime datetimeBody) {
        return putLocalPositiveOffsetMaxDateTimeWithRestResponseAsync(datetimeBody)
            .toCompletable();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getLocalPositiveOffsetLowercaseMaxDateTime() {
        return getLocalPositiveOffsetLowercaseMaxDateTimeAsync().blockingGet();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getLocalPositiveOffsetLowercaseMaxDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getLocalPositiveOffsetLowercaseMaxDateTimeAsync(), serviceCallback);
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getLocalPositiveOffsetLowercaseMaxDateTimeWithRestResponseAsync() {
        return service.getLocalPositiveOffsetLowercaseMaxDateTime();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999+14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getLocalPositiveOffsetLowercaseMaxDateTimeAsync() {
        return getLocalPositiveOffsetLowercaseMaxDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getLocalPositiveOffsetUppercaseMaxDateTime() {
        return getLocalPositiveOffsetUppercaseMaxDateTimeAsync().blockingGet();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getLocalPositiveOffsetUppercaseMaxDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getLocalPositiveOffsetUppercaseMaxDateTimeAsync(), serviceCallback);
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getLocalPositiveOffsetUppercaseMaxDateTimeWithRestResponseAsync() {
        return service.getLocalPositiveOffsetUppercaseMaxDateTime();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999+14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getLocalPositiveOffsetUppercaseMaxDateTimeAsync() {
        return getLocalPositiveOffsetUppercaseMaxDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putLocalNegativeOffsetMaxDateTime(@NonNull OffsetDateTime datetimeBody) {
        putLocalNegativeOffsetMaxDateTimeAsync(datetimeBody).blockingAwait();
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putLocalNegativeOffsetMaxDateTimeAsync(@NonNull OffsetDateTime datetimeBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putLocalNegativeOffsetMaxDateTimeAsync(datetimeBody), serviceCallback);
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putLocalNegativeOffsetMaxDateTimeWithRestResponseAsync(@NonNull OffsetDateTime datetimeBody) {
        if (datetimeBody == null) {
            throw new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.");
        }
        return service.putLocalNegativeOffsetMaxDateTime(datetimeBody);
    }

    /**
     * Put max datetime value with positive numoffset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putLocalNegativeOffsetMaxDateTimeAsync(@NonNull OffsetDateTime datetimeBody) {
        return putLocalNegativeOffsetMaxDateTimeWithRestResponseAsync(datetimeBody)
            .toCompletable();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getLocalNegativeOffsetUppercaseMaxDateTime() {
        return getLocalNegativeOffsetUppercaseMaxDateTimeAsync().blockingGet();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getLocalNegativeOffsetUppercaseMaxDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getLocalNegativeOffsetUppercaseMaxDateTimeAsync(), serviceCallback);
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getLocalNegativeOffsetUppercaseMaxDateTimeWithRestResponseAsync() {
        return service.getLocalNegativeOffsetUppercaseMaxDateTime();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31T23:59:59.9999999-14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getLocalNegativeOffsetUppercaseMaxDateTimeAsync() {
        return getLocalNegativeOffsetUppercaseMaxDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getLocalNegativeOffsetLowercaseMaxDateTime() {
        return getLocalNegativeOffsetLowercaseMaxDateTimeAsync().blockingGet();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getLocalNegativeOffsetLowercaseMaxDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getLocalNegativeOffsetLowercaseMaxDateTimeAsync(), serviceCallback);
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getLocalNegativeOffsetLowercaseMaxDateTimeWithRestResponseAsync() {
        return service.getLocalNegativeOffsetLowercaseMaxDateTime();
    }

    /**
     * Get max datetime value with positive num offset 9999-12-31t23:59:59.9999999-14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getLocalNegativeOffsetLowercaseMaxDateTimeAsync() {
        return getLocalNegativeOffsetLowercaseMaxDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00Z.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putUtcMinDateTime(@NonNull OffsetDateTime datetimeBody) {
        putUtcMinDateTimeAsync(datetimeBody).blockingAwait();
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00Z.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putUtcMinDateTimeAsync(@NonNull OffsetDateTime datetimeBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putUtcMinDateTimeAsync(datetimeBody), serviceCallback);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00Z.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putUtcMinDateTimeWithRestResponseAsync(@NonNull OffsetDateTime datetimeBody) {
        if (datetimeBody == null) {
            throw new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.");
        }
        return service.putUtcMinDateTime(datetimeBody);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00Z.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putUtcMinDateTimeAsync(@NonNull OffsetDateTime datetimeBody) {
        return putUtcMinDateTimeWithRestResponseAsync(datetimeBody)
            .toCompletable();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00Z.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getUtcMinDateTime() {
        return getUtcMinDateTimeAsync().blockingGet();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00Z.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getUtcMinDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getUtcMinDateTimeAsync(), serviceCallback);
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00Z.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getUtcMinDateTimeWithRestResponseAsync() {
        return service.getUtcMinDateTime();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00Z.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getUtcMinDateTimeAsync() {
        return getUtcMinDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putLocalPositiveOffsetMinDateTime(@NonNull OffsetDateTime datetimeBody) {
        putLocalPositiveOffsetMinDateTimeAsync(datetimeBody).blockingAwait();
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putLocalPositiveOffsetMinDateTimeAsync(@NonNull OffsetDateTime datetimeBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putLocalPositiveOffsetMinDateTimeAsync(datetimeBody), serviceCallback);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putLocalPositiveOffsetMinDateTimeWithRestResponseAsync(@NonNull OffsetDateTime datetimeBody) {
        if (datetimeBody == null) {
            throw new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.");
        }
        return service.putLocalPositiveOffsetMinDateTime(datetimeBody);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putLocalPositiveOffsetMinDateTimeAsync(@NonNull OffsetDateTime datetimeBody) {
        return putLocalPositiveOffsetMinDateTimeWithRestResponseAsync(datetimeBody)
            .toCompletable();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getLocalPositiveOffsetMinDateTime() {
        return getLocalPositiveOffsetMinDateTimeAsync().blockingGet();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getLocalPositiveOffsetMinDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getLocalPositiveOffsetMinDateTimeAsync(), serviceCallback);
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getLocalPositiveOffsetMinDateTimeWithRestResponseAsync() {
        return service.getLocalPositiveOffsetMinDateTime();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00+14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getLocalPositiveOffsetMinDateTimeAsync() {
        return getLocalPositiveOffsetMinDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putLocalNegativeOffsetMinDateTime(@NonNull OffsetDateTime datetimeBody) {
        putLocalNegativeOffsetMinDateTimeAsync(datetimeBody).blockingAwait();
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putLocalNegativeOffsetMinDateTimeAsync(@NonNull OffsetDateTime datetimeBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putLocalNegativeOffsetMinDateTimeAsync(datetimeBody), serviceCallback);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putLocalNegativeOffsetMinDateTimeWithRestResponseAsync(@NonNull OffsetDateTime datetimeBody) {
        if (datetimeBody == null) {
            throw new IllegalArgumentException("Parameter datetimeBody is required and cannot be null.");
        }
        return service.putLocalNegativeOffsetMinDateTime(datetimeBody);
    }

    /**
     * Put min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param datetimeBody the OffsetDateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putLocalNegativeOffsetMinDateTimeAsync(@NonNull OffsetDateTime datetimeBody) {
        return putLocalNegativeOffsetMinDateTimeWithRestResponseAsync(datetimeBody)
            .toCompletable();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the OffsetDateTime object if successful.
     */
    public OffsetDateTime getLocalNegativeOffsetMinDateTime() {
        return getLocalNegativeOffsetMinDateTimeAsync().blockingGet();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<OffsetDateTime> getLocalNegativeOffsetMinDateTimeAsync(ServiceCallback<OffsetDateTime> serviceCallback) {
        return ServiceFuture.fromBody(getLocalNegativeOffsetMinDateTimeAsync(), serviceCallback);
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<OffsetDateTime>> getLocalNegativeOffsetMinDateTimeWithRestResponseAsync() {
        return service.getLocalNegativeOffsetMinDateTime();
    }

    /**
     * Get min datetime value 0001-01-01T00:00:00-14:00.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<OffsetDateTime> getLocalNegativeOffsetMinDateTimeAsync() {
        return getLocalNegativeOffsetMinDateTimeWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<OffsetDateTime> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }
}
