// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.bodyformdata;

import com.azure.core.http.rest.StreamResponse;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceMethod;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Formdatas.
 */
public interface Formdatas {
    /**
     * Upload file.
     *
     * @param fileContent File to upload.
     * @param fileName File name to upload. Name has to be spelled exactly as written here.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Flux<ByteBuffer> uploadFile(Flux<ByteBuffer> fileContent, String fileName);

    /**
     * Upload file.
     *
     * @param fileContent File to upload.
     * @param fileName File name to upload. Name has to be spelled exactly as written here.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<StreamResponse> uploadFileWithRestResponseAsync(Flux<ByteBuffer> fileContent, String fileName);

    /**
     * Upload file.
     *
     * @param fileContent File to upload.
     * @param fileName File name to upload. Name has to be spelled exactly as written here.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Flux<ByteBuffer>> uploadFileAsync(Flux<ByteBuffer> fileContent, String fileName);

    /**
     * Upload file.
     *
     * @param contentLength The content length.
     * @param fileContent File to upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Flux<ByteBuffer> uploadFileViaBody(long contentLength, Flux<ByteBuffer> fileContent);

    /**
     * Upload file.
     *
     * @param contentLength The content length.
     * @param fileContent File to upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<StreamResponse> uploadFileViaBodyWithRestResponseAsync(long contentLength, Flux<ByteBuffer> fileContent);

    /**
     * Upload file.
     *
     * @param contentLength The content length.
     * @param fileContent File to upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Flux<ByteBuffer>> uploadFileViaBodyAsync(long contentLength, Flux<ByteBuffer> fileContent);
}
