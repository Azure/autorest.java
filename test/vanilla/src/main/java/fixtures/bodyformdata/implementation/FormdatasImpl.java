// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.bodyformdata.implementation;

import com.azure.core.http.rest.StreamResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.FormParam;
import com.azure.core.implementation.annotation.HeaderParam;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.bodyformdata.Formdatas;
import fixtures.bodyformdata.models.ErrorException;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Formdatas.
 */
public final class FormdatasImpl implements Formdatas {
    /**
     * The proxy service used to perform REST calls.
     */
    private FormdatasService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestSwaggerBATFormDataServiceImpl client;

    /**
     * Initializes an instance of FormdatasImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public FormdatasImpl(AutoRestSwaggerBATFormDataServiceImpl client) {
        this.service = RestProxy.create(FormdatasService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * AutoRestSwaggerBATFormDataServiceFormdatas to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestSwaggerBATFormDataServiceFormdatas")
    private interface FormdatasService {
        // @Multipart not supported by RestProxy
        @Post("formdata/stream/uploadfile")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<StreamResponse> uploadFile(@FormParam("fileContent") Flux<ByteBuffer> fileContent, @FormParam("fileName") String fileName);

        @Put("formdata/stream/uploadfile")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<StreamResponse> uploadFileViaBody(@HeaderParam("Content-Length") long contentLength, @BodyParam("application/octet-stream") Flux<ByteBuffer> fileContent);
    }

    /**
     * Upload file.
     *
     * @param fileContent File to upload.
     * @param fileName File name to upload. Name has to be spelled exactly as written here.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> uploadFile(Flux<ByteBuffer> fileContent, String fileName) {
        return uploadFileAsync(fileContent, fileName).block();
    }

    /**
     * Upload file.
     *
     * @param fileContent File to upload.
     * @param fileName File name to upload. Name has to be spelled exactly as written here.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> uploadFileWithRestResponseAsync(Flux<ByteBuffer> fileContent, String fileName) {
        if (fileContent == null) {
            throw new IllegalArgumentException("Parameter fileContent is required and cannot be null.");
        }
        if (fileName == null) {
            throw new IllegalArgumentException("Parameter fileName is required and cannot be null.");
        }
        return service.uploadFile(fileContent, fileName);
    }

    /**
     * Upload file.
     *
     * @param fileContent File to upload.
     * @param fileName File name to upload. Name has to be spelled exactly as written here.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> uploadFileAsync(Flux<ByteBuffer> fileContent, String fileName) {
        return uploadFileWithRestResponseAsync(fileContent, fileName)
            .flatMap((StreamResponse res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Upload file.
     *
     * @param contentLength The content length.
     * @param fileContent File to upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> uploadFileViaBody(long contentLength, Flux<ByteBuffer> fileContent) {
        return uploadFileViaBodyAsync(contentLength, fileContent).block();
    }

    /**
     * Upload file.
     *
     * @param contentLength The content length.
     * @param fileContent File to upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> uploadFileViaBodyWithRestResponseAsync(long contentLength, Flux<ByteBuffer> fileContent) {
        if (fileContent == null) {
            throw new IllegalArgumentException("Parameter fileContent is required and cannot be null.");
        }
        return service.uploadFileViaBody(contentLength, fileContent);
    }

    /**
     * Upload file.
     *
     * @param contentLength The content length.
     * @param fileContent File to upload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Flux<ByteBuffer>> uploadFileViaBodyAsync(long contentLength, Flux<ByteBuffer> fileContent) {
        return uploadFileViaBodyWithRestResponseAsync(contentLength, fileContent)
            .flatMap((StreamResponse res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }
}
