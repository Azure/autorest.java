/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodydictionary.implementation;

import com.microsoft.rest.v2.Base64Url;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.DateTimeRfc1123;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.ReturnValueWireType;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import fixtures.bodydictionary.Dictionarys;
import fixtures.bodydictionary.models.ErrorException;
import fixtures.bodydictionary.models.Widget;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.time.Duration;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * An instance of this class provides access to all the operations defined in
 * Dictionarys.
 */
public final class DictionarysImpl implements Dictionarys {
    /**
     * The proxy service used to perform REST calls.
     */
    private DictionarysService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestSwaggerBATdictionaryServiceImpl client;

    /**
     * Initializes an instance of DictionarysImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public DictionarysImpl(AutoRestSwaggerBATdictionaryServiceImpl client) {
        this.service = RestProxy.create(DictionarysService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Dictionarys to be used by
     * the proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface DictionarysService {
        @GET("dictionary/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Integer>>> getNull();

        @GET("dictionary/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Integer>>> getEmpty();

        @PUT("dictionary/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putEmpty(@BodyParam("application/json; charset=utf-8") Map<String, String> arrayBody);

        @GET("dictionary/nullvalue")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, String>>> getNullValue();

        @GET("dictionary/nullkey")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, String>>> getNullKey();

        @GET("dictionary/keyemptystring")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, String>>> getEmptyStringKey();

        @GET("dictionary/invalid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, String>>> getInvalid();

        @GET("dictionary/prim/boolean/tfft")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Boolean>>> getBooleanTfft();

        @PUT("dictionary/prim/boolean/tfft")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putBooleanTfft(@BodyParam("application/json; charset=utf-8") Map<String, Boolean> arrayBody);

        @GET("dictionary/prim/boolean/true.null.false")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Boolean>>> getBooleanInvalidNull();

        @GET("dictionary/prim/boolean/true.boolean.false")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Boolean>>> getBooleanInvalidString();

        @GET("dictionary/prim/integer/1.-1.3.300")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Integer>>> getIntegerValid();

        @PUT("dictionary/prim/integer/1.-1.3.300")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putIntegerValid(@BodyParam("application/json; charset=utf-8") Map<String, Integer> arrayBody);

        @GET("dictionary/prim/integer/1.null.zero")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Integer>>> getIntInvalidNull();

        @GET("dictionary/prim/integer/1.integer.0")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Integer>>> getIntInvalidString();

        @GET("dictionary/prim/long/1.-1.3.300")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Long>>> getLongValid();

        @PUT("dictionary/prim/long/1.-1.3.300")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putLongValid(@BodyParam("application/json; charset=utf-8") Map<String, Long> arrayBody);

        @GET("dictionary/prim/long/1.null.zero")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Long>>> getLongInvalidNull();

        @GET("dictionary/prim/long/1.integer.0")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Long>>> getLongInvalidString();

        @GET("dictionary/prim/float/0--0.01-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Double>>> getFloatValid();

        @PUT("dictionary/prim/float/0--0.01-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putFloatValid(@BodyParam("application/json; charset=utf-8") Map<String, Double> arrayBody);

        @GET("dictionary/prim/float/0.0-null-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Double>>> getFloatInvalidNull();

        @GET("dictionary/prim/float/1.number.0")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Double>>> getFloatInvalidString();

        @GET("dictionary/prim/double/0--0.01-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Double>>> getDoubleValid();

        @PUT("dictionary/prim/double/0--0.01-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDoubleValid(@BodyParam("application/json; charset=utf-8") Map<String, Double> arrayBody);

        @GET("dictionary/prim/double/0.0-null-1.2e20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Double>>> getDoubleInvalidNull();

        @GET("dictionary/prim/double/1.number.0")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Double>>> getDoubleInvalidString();

        @GET("dictionary/prim/string/foo1.foo2.foo3")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, String>>> getStringValid();

        @PUT("dictionary/prim/string/foo1.foo2.foo3")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putStringValid(@BodyParam("application/json; charset=utf-8") Map<String, String> arrayBody);

        @GET("dictionary/prim/string/foo.null.foo2")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, String>>> getStringWithNull();

        @GET("dictionary/prim/string/foo.123.foo2")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, String>>> getStringWithInvalid();

        @GET("dictionary/prim/date/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, LocalDate>>> getDateValid();

        @PUT("dictionary/prim/date/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDateValid(@BodyParam("application/json; charset=utf-8") Map<String, LocalDate> arrayBody);

        @GET("dictionary/prim/date/invalidnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, LocalDate>>> getDateInvalidNull();

        @GET("dictionary/prim/date/invalidchars")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, LocalDate>>> getDateInvalidChars();

        @GET("dictionary/prim/date-time/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, OffsetDateTime>>> getDateTimeValid();

        @PUT("dictionary/prim/date-time/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDateTimeValid(@BodyParam("application/json; charset=utf-8") Map<String, OffsetDateTime> arrayBody);

        @GET("dictionary/prim/date-time/invalidnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, OffsetDateTime>>> getDateTimeInvalidNull();

        @GET("dictionary/prim/date-time/invalidchars")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, OffsetDateTime>>> getDateTimeInvalidChars();

        @GET("dictionary/prim/date-time-rfc1123/valid")
        @ExpectedResponses({200})
        @ReturnValueWireType(DateTimeRfc1123.class)
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, OffsetDateTime>>> getDateTimeRfc1123Valid();

        @PUT("dictionary/prim/date-time-rfc1123/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDateTimeRfc1123Valid(@BodyParam("application/json; charset=utf-8") Map<String, DateTimeRfc1123> arrayBody);

        @GET("dictionary/prim/duration/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Duration>>> getDurationValid();

        @PUT("dictionary/prim/duration/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDurationValid(@BodyParam("application/json; charset=utf-8") Map<String, Duration> arrayBody);

        @GET("dictionary/prim/byte/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, byte[]>>> getByteValid();

        @PUT("dictionary/prim/byte/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putByteValid(@BodyParam("application/json; charset=utf-8") Map<String, byte[]> arrayBody);

        @GET("dictionary/prim/byte/invalidnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, byte[]>>> getByteInvalidNull();

        @GET("dictionary/prim/base64url/valid")
        @ExpectedResponses({200})
        @ReturnValueWireType(Base64Url.class)
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, byte[]>>> getBase64Url();

        @GET("dictionary/complex/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Widget>>> getComplexNull();

        @GET("dictionary/complex/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Widget>>> getComplexEmpty();

        @GET("dictionary/complex/itemnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Widget>>> getComplexItemNull();

        @GET("dictionary/complex/itemempty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Widget>>> getComplexItemEmpty();

        @GET("dictionary/complex/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Widget>>> getComplexValid();

        @PUT("dictionary/complex/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putComplexValid(@BodyParam("application/json; charset=utf-8") Map<String, Widget> arrayBody);

        @GET("dictionary/array/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, List<String>>>> getArrayNull();

        @GET("dictionary/array/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, List<String>>>> getArrayEmpty();

        @GET("dictionary/array/itemnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, List<String>>>> getArrayItemNull();

        @GET("dictionary/array/itemempty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, List<String>>>> getArrayItemEmpty();

        @GET("dictionary/array/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, List<String>>>> getArrayValid();

        @PUT("dictionary/array/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putArrayValid(@BodyParam("application/json; charset=utf-8") Map<String, List<String>> arrayBody);

        @GET("dictionary/dictionary/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryNull();

        @GET("dictionary/dictionary/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryEmpty();

        @GET("dictionary/dictionary/itemnull")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryItemNull();

        @GET("dictionary/dictionary/itemempty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryItemEmpty();

        @GET("dictionary/dictionary/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryValid();

        @PUT("dictionary/dictionary/valid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> putDictionaryValid(@BodyParam("application/json; charset=utf-8") Map<String, Map<String, String>> arrayBody);
    }

    /**
     * Get null dictionary value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Integer&gt; object if successful.
     */
    public Map<String, Integer> getNull() {
        return getNullAsync().blockingGet();
    }

    /**
     * Get null dictionary value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Integer>> getNullAsync(ServiceCallback<Map<String, Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getNullAsync(), serviceCallback);
    }

    /**
     * Get null dictionary value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Integer>>> getNullWithRestResponseAsync() {
        return service.getNull();
    }

    /**
     * Get null dictionary value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Integer>> getNullAsync() {
        return getNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Integer>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get empty dictionary value {}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Integer&gt; object if successful.
     */
    public Map<String, Integer> getEmpty() {
        return getEmptyAsync().blockingGet();
    }

    /**
     * Get empty dictionary value {}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Integer>> getEmptyAsync(ServiceCallback<Map<String, Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyAsync(), serviceCallback);
    }

    /**
     * Get empty dictionary value {}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Integer>>> getEmptyWithRestResponseAsync() {
        return service.getEmpty();
    }

    /**
     * Get empty dictionary value {}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Integer>> getEmptyAsync() {
        return getEmptyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Integer>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value empty {}.
     *
     * @param arrayBody the Map&lt;String, String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putEmpty(@NonNull Map<String, String> arrayBody) {
        putEmptyAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value empty {}.
     *
     * @param arrayBody the Map&lt;String, String&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putEmptyAsync(@NonNull Map<String, String> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putEmptyAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value empty {}.
     *
     * @param arrayBody the Map&lt;String, String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putEmptyWithRestResponseAsync(@NonNull Map<String, String> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putEmpty(arrayBody);
    }

    /**
     * Set dictionary value empty {}.
     *
     * @param arrayBody the Map&lt;String, String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putEmptyAsync(@NonNull Map<String, String> arrayBody) {
        return putEmptyWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get Dictionary with null value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, String&gt; object if successful.
     */
    public Map<String, String> getNullValue() {
        return getNullValueAsync().blockingGet();
    }

    /**
     * Get Dictionary with null value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, String>> getNullValueAsync(ServiceCallback<Map<String, String>> serviceCallback) {
        return ServiceFuture.fromBody(getNullValueAsync(), serviceCallback);
    }

    /**
     * Get Dictionary with null value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, String>>> getNullValueWithRestResponseAsync() {
        return service.getNullValue();
    }

    /**
     * Get Dictionary with null value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, String>> getNullValueAsync() {
        return getNullValueWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get Dictionary with null key.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, String&gt; object if successful.
     */
    public Map<String, String> getNullKey() {
        return getNullKeyAsync().blockingGet();
    }

    /**
     * Get Dictionary with null key.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, String>> getNullKeyAsync(ServiceCallback<Map<String, String>> serviceCallback) {
        return ServiceFuture.fromBody(getNullKeyAsync(), serviceCallback);
    }

    /**
     * Get Dictionary with null key.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, String>>> getNullKeyWithRestResponseAsync() {
        return service.getNullKey();
    }

    /**
     * Get Dictionary with null key.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, String>> getNullKeyAsync() {
        return getNullKeyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get Dictionary with key as empty string.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, String&gt; object if successful.
     */
    public Map<String, String> getEmptyStringKey() {
        return getEmptyStringKeyAsync().blockingGet();
    }

    /**
     * Get Dictionary with key as empty string.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, String>> getEmptyStringKeyAsync(ServiceCallback<Map<String, String>> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyStringKeyAsync(), serviceCallback);
    }

    /**
     * Get Dictionary with key as empty string.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, String>>> getEmptyStringKeyWithRestResponseAsync() {
        return service.getEmptyStringKey();
    }

    /**
     * Get Dictionary with key as empty string.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, String>> getEmptyStringKeyAsync() {
        return getEmptyStringKeyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get invalid Dictionary value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, String&gt; object if successful.
     */
    public Map<String, String> getInvalid() {
        return getInvalidAsync().blockingGet();
    }

    /**
     * Get invalid Dictionary value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, String>> getInvalidAsync(ServiceCallback<Map<String, String>> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidAsync(), serviceCallback);
    }

    /**
     * Get invalid Dictionary value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, String>>> getInvalidWithRestResponseAsync() {
        return service.getInvalid();
    }

    /**
     * Get invalid Dictionary value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, String>> getInvalidAsync() {
        return getInvalidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Boolean&gt; object if successful.
     */
    public Map<String, Boolean> getBooleanTfft() {
        return getBooleanTfftAsync().blockingGet();
    }

    /**
     * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Boolean>> getBooleanTfftAsync(ServiceCallback<Map<String, Boolean>> serviceCallback) {
        return ServiceFuture.fromBody(getBooleanTfftAsync(), serviceCallback);
    }

    /**
     * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Boolean>>> getBooleanTfftWithRestResponseAsync() {
        return service.getBooleanTfft();
    }

    /**
     * Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Boolean>> getBooleanTfftAsync() {
        return getBooleanTfftWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Boolean>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }.
     *
     * @param arrayBody the Map&lt;String, Boolean&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBooleanTfft(@NonNull Map<String, Boolean> arrayBody) {
        putBooleanTfftAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }.
     *
     * @param arrayBody the Map&lt;String, Boolean&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBooleanTfftAsync(@NonNull Map<String, Boolean> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBooleanTfftAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }.
     *
     * @param arrayBody the Map&lt;String, Boolean&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putBooleanTfftWithRestResponseAsync(@NonNull Map<String, Boolean> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putBooleanTfft(arrayBody);
    }

    /**
     * Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }.
     *
     * @param arrayBody the Map&lt;String, Boolean&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putBooleanTfftAsync(@NonNull Map<String, Boolean> arrayBody) {
        return putBooleanTfftWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get boolean dictionary value {"0": true, "1": null, "2": false }.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Boolean&gt; object if successful.
     */
    public Map<String, Boolean> getBooleanInvalidNull() {
        return getBooleanInvalidNullAsync().blockingGet();
    }

    /**
     * Get boolean dictionary value {"0": true, "1": null, "2": false }.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Boolean>> getBooleanInvalidNullAsync(ServiceCallback<Map<String, Boolean>> serviceCallback) {
        return ServiceFuture.fromBody(getBooleanInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get boolean dictionary value {"0": true, "1": null, "2": false }.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Boolean>>> getBooleanInvalidNullWithRestResponseAsync() {
        return service.getBooleanInvalidNull();
    }

    /**
     * Get boolean dictionary value {"0": true, "1": null, "2": false }.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Boolean>> getBooleanInvalidNullAsync() {
        return getBooleanInvalidNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Boolean>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Boolean&gt; object if successful.
     */
    public Map<String, Boolean> getBooleanInvalidString() {
        return getBooleanInvalidStringAsync().blockingGet();
    }

    /**
     * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Boolean>> getBooleanInvalidStringAsync(ServiceCallback<Map<String, Boolean>> serviceCallback) {
        return ServiceFuture.fromBody(getBooleanInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Boolean>>> getBooleanInvalidStringWithRestResponseAsync() {
        return service.getBooleanInvalidString();
    }

    /**
     * Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Boolean>> getBooleanInvalidStringAsync() {
        return getBooleanInvalidStringWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Boolean>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Integer&gt; object if successful.
     */
    public Map<String, Integer> getIntegerValid() {
        return getIntegerValidAsync().blockingGet();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Integer>> getIntegerValidAsync(ServiceCallback<Map<String, Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getIntegerValidAsync(), serviceCallback);
    }

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Integer>>> getIntegerValidWithRestResponseAsync() {
        return service.getIntegerValid();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Integer>> getIntegerValidAsync() {
        return getIntegerValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Integer>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param arrayBody the Map&lt;String, Integer&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putIntegerValid(@NonNull Map<String, Integer> arrayBody) {
        putIntegerValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param arrayBody the Map&lt;String, Integer&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putIntegerValidAsync(@NonNull Map<String, Integer> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putIntegerValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param arrayBody the Map&lt;String, Integer&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putIntegerValidWithRestResponseAsync(@NonNull Map<String, Integer> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putIntegerValid(arrayBody);
    }

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param arrayBody the Map&lt;String, Integer&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putIntegerValidAsync(@NonNull Map<String, Integer> arrayBody) {
        return putIntegerValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": null, "2": 0}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Integer&gt; object if successful.
     */
    public Map<String, Integer> getIntInvalidNull() {
        return getIntInvalidNullAsync().blockingGet();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": null, "2": 0}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Integer>> getIntInvalidNullAsync(ServiceCallback<Map<String, Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getIntInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get integer dictionary value {"0": 1, "1": null, "2": 0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Integer>>> getIntInvalidNullWithRestResponseAsync() {
        return service.getIntInvalidNull();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": null, "2": 0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Integer>> getIntInvalidNullAsync() {
        return getIntInvalidNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Integer>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Integer&gt; object if successful.
     */
    public Map<String, Integer> getIntInvalidString() {
        return getIntInvalidStringAsync().blockingGet();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Integer>> getIntInvalidStringAsync(ServiceCallback<Map<String, Integer>> serviceCallback) {
        return ServiceFuture.fromBody(getIntInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Integer>>> getIntInvalidStringWithRestResponseAsync() {
        return service.getIntInvalidString();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": "integer", "2": 0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Integer>> getIntInvalidStringAsync() {
        return getIntInvalidStringWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Integer>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Long&gt; object if successful.
     */
    public Map<String, Long> getLongValid() {
        return getLongValidAsync().blockingGet();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Long>> getLongValidAsync(ServiceCallback<Map<String, Long>> serviceCallback) {
        return ServiceFuture.fromBody(getLongValidAsync(), serviceCallback);
    }

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Long>>> getLongValidWithRestResponseAsync() {
        return service.getLongValid();
    }

    /**
     * Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Long>> getLongValidAsync() {
        return getLongValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Long>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param arrayBody the Map&lt;String, Long&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putLongValid(@NonNull Map<String, Long> arrayBody) {
        putLongValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param arrayBody the Map&lt;String, Long&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putLongValidAsync(@NonNull Map<String, Long> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putLongValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param arrayBody the Map&lt;String, Long&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putLongValidWithRestResponseAsync(@NonNull Map<String, Long> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putLongValid(arrayBody);
    }

    /**
     * Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.
     *
     * @param arrayBody the Map&lt;String, Long&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putLongValidAsync(@NonNull Map<String, Long> arrayBody) {
        return putLongValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get long dictionary value {"0": 1, "1": null, "2": 0}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Long&gt; object if successful.
     */
    public Map<String, Long> getLongInvalidNull() {
        return getLongInvalidNullAsync().blockingGet();
    }

    /**
     * Get long dictionary value {"0": 1, "1": null, "2": 0}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Long>> getLongInvalidNullAsync(ServiceCallback<Map<String, Long>> serviceCallback) {
        return ServiceFuture.fromBody(getLongInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get long dictionary value {"0": 1, "1": null, "2": 0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Long>>> getLongInvalidNullWithRestResponseAsync() {
        return service.getLongInvalidNull();
    }

    /**
     * Get long dictionary value {"0": 1, "1": null, "2": 0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Long>> getLongInvalidNullAsync() {
        return getLongInvalidNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Long>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get long dictionary value {"0": 1, "1": "integer", "2": 0}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Long&gt; object if successful.
     */
    public Map<String, Long> getLongInvalidString() {
        return getLongInvalidStringAsync().blockingGet();
    }

    /**
     * Get long dictionary value {"0": 1, "1": "integer", "2": 0}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Long>> getLongInvalidStringAsync(ServiceCallback<Map<String, Long>> serviceCallback) {
        return ServiceFuture.fromBody(getLongInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get long dictionary value {"0": 1, "1": "integer", "2": 0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Long>>> getLongInvalidStringWithRestResponseAsync() {
        return service.getLongInvalidString();
    }

    /**
     * Get long dictionary value {"0": 1, "1": "integer", "2": 0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Long>> getLongInvalidStringAsync() {
        return getLongInvalidStringWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Long>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Double&gt; object if successful.
     */
    public Map<String, Double> getFloatValid() {
        return getFloatValidAsync().blockingGet();
    }

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Double>> getFloatValidAsync(ServiceCallback<Map<String, Double>> serviceCallback) {
        return ServiceFuture.fromBody(getFloatValidAsync(), serviceCallback);
    }

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Double>>> getFloatValidWithRestResponseAsync() {
        return service.getFloatValid();
    }

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Double>> getFloatValidAsync() {
        return getFloatValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Double>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param arrayBody the Map&lt;String, Double&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putFloatValid(@NonNull Map<String, Double> arrayBody) {
        putFloatValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param arrayBody the Map&lt;String, Double&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putFloatValidAsync(@NonNull Map<String, Double> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putFloatValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param arrayBody the Map&lt;String, Double&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putFloatValidWithRestResponseAsync(@NonNull Map<String, Double> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putFloatValid(arrayBody);
    }

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param arrayBody the Map&lt;String, Double&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putFloatValidAsync(@NonNull Map<String, Double> arrayBody) {
        return putFloatValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Double&gt; object if successful.
     */
    public Map<String, Double> getFloatInvalidNull() {
        return getFloatInvalidNullAsync().blockingGet();
    }

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Double>> getFloatInvalidNullAsync(ServiceCallback<Map<String, Double>> serviceCallback) {
        return ServiceFuture.fromBody(getFloatInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Double>>> getFloatInvalidNullWithRestResponseAsync() {
        return service.getFloatInvalidNull();
    }

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Double>> getFloatInvalidNullAsync() {
        return getFloatInvalidNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Double>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Double&gt; object if successful.
     */
    public Map<String, Double> getFloatInvalidString() {
        return getFloatInvalidStringAsync().blockingGet();
    }

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Double>> getFloatInvalidStringAsync(ServiceCallback<Map<String, Double>> serviceCallback) {
        return ServiceFuture.fromBody(getFloatInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Double>>> getFloatInvalidStringWithRestResponseAsync() {
        return service.getFloatInvalidString();
    }

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Double>> getFloatInvalidStringAsync() {
        return getFloatInvalidStringWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Double>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Double&gt; object if successful.
     */
    public Map<String, Double> getDoubleValid() {
        return getDoubleValidAsync().blockingGet();
    }

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Double>> getDoubleValidAsync(ServiceCallback<Map<String, Double>> serviceCallback) {
        return ServiceFuture.fromBody(getDoubleValidAsync(), serviceCallback);
    }

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Double>>> getDoubleValidWithRestResponseAsync() {
        return service.getDoubleValid();
    }

    /**
     * Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Double>> getDoubleValidAsync() {
        return getDoubleValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Double>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param arrayBody the Map&lt;String, Double&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDoubleValid(@NonNull Map<String, Double> arrayBody) {
        putDoubleValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param arrayBody the Map&lt;String, Double&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDoubleValidAsync(@NonNull Map<String, Double> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDoubleValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param arrayBody the Map&lt;String, Double&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDoubleValidWithRestResponseAsync(@NonNull Map<String, Double> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDoubleValid(arrayBody);
    }

    /**
     * Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.
     *
     * @param arrayBody the Map&lt;String, Double&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDoubleValidAsync(@NonNull Map<String, Double> arrayBody) {
        return putDoubleValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Double&gt; object if successful.
     */
    public Map<String, Double> getDoubleInvalidNull() {
        return getDoubleInvalidNullAsync().blockingGet();
    }

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Double>> getDoubleInvalidNullAsync(ServiceCallback<Map<String, Double>> serviceCallback) {
        return ServiceFuture.fromBody(getDoubleInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Double>>> getDoubleInvalidNullWithRestResponseAsync() {
        return service.getDoubleInvalidNull();
    }

    /**
     * Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Double>> getDoubleInvalidNullAsync() {
        return getDoubleInvalidNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Double>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Double&gt; object if successful.
     */
    public Map<String, Double> getDoubleInvalidString() {
        return getDoubleInvalidStringAsync().blockingGet();
    }

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Double>> getDoubleInvalidStringAsync(ServiceCallback<Map<String, Double>> serviceCallback) {
        return ServiceFuture.fromBody(getDoubleInvalidStringAsync(), serviceCallback);
    }

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Double>>> getDoubleInvalidStringWithRestResponseAsync() {
        return service.getDoubleInvalidString();
    }

    /**
     * Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Double>> getDoubleInvalidStringAsync() {
        return getDoubleInvalidStringWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Double>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, String&gt; object if successful.
     */
    public Map<String, String> getStringValid() {
        return getStringValidAsync().blockingGet();
    }

    /**
     * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, String>> getStringValidAsync(ServiceCallback<Map<String, String>> serviceCallback) {
        return ServiceFuture.fromBody(getStringValidAsync(), serviceCallback);
    }

    /**
     * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, String>>> getStringValidWithRestResponseAsync() {
        return service.getStringValid();
    }

    /**
     * Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, String>> getStringValidAsync() {
        return getStringValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.
     *
     * @param arrayBody the Map&lt;String, String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putStringValid(@NonNull Map<String, String> arrayBody) {
        putStringValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.
     *
     * @param arrayBody the Map&lt;String, String&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putStringValidAsync(@NonNull Map<String, String> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putStringValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.
     *
     * @param arrayBody the Map&lt;String, String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putStringValidWithRestResponseAsync(@NonNull Map<String, String> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putStringValid(arrayBody);
    }

    /**
     * Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.
     *
     * @param arrayBody the Map&lt;String, String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putStringValidAsync(@NonNull Map<String, String> arrayBody) {
        return putStringValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, String&gt; object if successful.
     */
    public Map<String, String> getStringWithNull() {
        return getStringWithNullAsync().blockingGet();
    }

    /**
     * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, String>> getStringWithNullAsync(ServiceCallback<Map<String, String>> serviceCallback) {
        return ServiceFuture.fromBody(getStringWithNullAsync(), serviceCallback);
    }

    /**
     * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, String>>> getStringWithNullWithRestResponseAsync() {
        return service.getStringWithNull();
    }

    /**
     * Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, String>> getStringWithNullAsync() {
        return getStringWithNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, String&gt; object if successful.
     */
    public Map<String, String> getStringWithInvalid() {
        return getStringWithInvalidAsync().blockingGet();
    }

    /**
     * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, String>> getStringWithInvalidAsync(ServiceCallback<Map<String, String>> serviceCallback) {
        return ServiceFuture.fromBody(getStringWithInvalidAsync(), serviceCallback);
    }

    /**
     * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, String>>> getStringWithInvalidWithRestResponseAsync() {
        return service.getStringWithInvalid();
    }

    /**
     * Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, String>> getStringWithInvalidAsync() {
        return getStringWithInvalidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, LocalDate&gt; object if successful.
     */
    public Map<String, LocalDate> getDateValid() {
        return getDateValidAsync().blockingGet();
    }

    /**
     * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, LocalDate>> getDateValidAsync(ServiceCallback<Map<String, LocalDate>> serviceCallback) {
        return ServiceFuture.fromBody(getDateValidAsync(), serviceCallback);
    }

    /**
     * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, LocalDate>>> getDateValidWithRestResponseAsync() {
        return service.getDateValid();
    }

    /**
     * Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, LocalDate>> getDateValidAsync() {
        return getDateValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, LocalDate>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.
     *
     * @param arrayBody the Map&lt;String, LocalDate&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDateValid(@NonNull Map<String, LocalDate> arrayBody) {
        putDateValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.
     *
     * @param arrayBody the Map&lt;String, LocalDate&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDateValidAsync(@NonNull Map<String, LocalDate> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.
     *
     * @param arrayBody the Map&lt;String, LocalDate&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDateValidWithRestResponseAsync(@NonNull Map<String, LocalDate> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDateValid(arrayBody);
    }

    /**
     * Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.
     *
     * @param arrayBody the Map&lt;String, LocalDate&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDateValidAsync(@NonNull Map<String, LocalDate> arrayBody) {
        return putDateValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, LocalDate&gt; object if successful.
     */
    public Map<String, LocalDate> getDateInvalidNull() {
        return getDateInvalidNullAsync().blockingGet();
    }

    /**
     * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, LocalDate>> getDateInvalidNullAsync(ServiceCallback<Map<String, LocalDate>> serviceCallback) {
        return ServiceFuture.fromBody(getDateInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, LocalDate>>> getDateInvalidNullWithRestResponseAsync() {
        return service.getDateInvalidNull();
    }

    /**
     * Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, LocalDate>> getDateInvalidNullAsync() {
        return getDateInvalidNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, LocalDate>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get date dictionary value {"0": "2011-03-22", "1": "date"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, LocalDate&gt; object if successful.
     */
    public Map<String, LocalDate> getDateInvalidChars() {
        return getDateInvalidCharsAsync().blockingGet();
    }

    /**
     * Get date dictionary value {"0": "2011-03-22", "1": "date"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, LocalDate>> getDateInvalidCharsAsync(ServiceCallback<Map<String, LocalDate>> serviceCallback) {
        return ServiceFuture.fromBody(getDateInvalidCharsAsync(), serviceCallback);
    }

    /**
     * Get date dictionary value {"0": "2011-03-22", "1": "date"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, LocalDate>>> getDateInvalidCharsWithRestResponseAsync() {
        return service.getDateInvalidChars();
    }

    /**
     * Get date dictionary value {"0": "2011-03-22", "1": "date"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, LocalDate>> getDateInvalidCharsAsync() {
        return getDateInvalidCharsWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, LocalDate>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, OffsetDateTime&gt; object if successful.
     */
    public Map<String, OffsetDateTime> getDateTimeValid() {
        return getDateTimeValidAsync().blockingGet();
    }

    /**
     * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, OffsetDateTime>> getDateTimeValidAsync(ServiceCallback<Map<String, OffsetDateTime>> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeValidAsync(), serviceCallback);
    }

    /**
     * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, OffsetDateTime>>> getDateTimeValidWithRestResponseAsync() {
        return service.getDateTimeValid();
    }

    /**
     * Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, OffsetDateTime>> getDateTimeValidAsync() {
        return getDateTimeValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, OffsetDateTime>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.
     *
     * @param arrayBody the Map&lt;String, OffsetDateTime&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDateTimeValid(@NonNull Map<String, OffsetDateTime> arrayBody) {
        putDateTimeValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.
     *
     * @param arrayBody the Map&lt;String, OffsetDateTime&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDateTimeValidAsync(@NonNull Map<String, OffsetDateTime> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateTimeValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.
     *
     * @param arrayBody the Map&lt;String, OffsetDateTime&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDateTimeValidWithRestResponseAsync(@NonNull Map<String, OffsetDateTime> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDateTimeValid(arrayBody);
    }

    /**
     * Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.
     *
     * @param arrayBody the Map&lt;String, OffsetDateTime&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDateTimeValidAsync(@NonNull Map<String, OffsetDateTime> arrayBody) {
        return putDateTimeValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, OffsetDateTime&gt; object if successful.
     */
    public Map<String, OffsetDateTime> getDateTimeInvalidNull() {
        return getDateTimeInvalidNullAsync().blockingGet();
    }

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, OffsetDateTime>> getDateTimeInvalidNullAsync(ServiceCallback<Map<String, OffsetDateTime>> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, OffsetDateTime>>> getDateTimeInvalidNullWithRestResponseAsync() {
        return service.getDateTimeInvalidNull();
    }

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, OffsetDateTime>> getDateTimeInvalidNullAsync() {
        return getDateTimeInvalidNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, OffsetDateTime>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, OffsetDateTime&gt; object if successful.
     */
    public Map<String, OffsetDateTime> getDateTimeInvalidChars() {
        return getDateTimeInvalidCharsAsync().blockingGet();
    }

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, OffsetDateTime>> getDateTimeInvalidCharsAsync(ServiceCallback<Map<String, OffsetDateTime>> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeInvalidCharsAsync(), serviceCallback);
    }

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, OffsetDateTime>>> getDateTimeInvalidCharsWithRestResponseAsync() {
        return service.getDateTimeInvalidChars();
    }

    /**
     * Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, OffsetDateTime>> getDateTimeInvalidCharsAsync() {
        return getDateTimeInvalidCharsWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, OffsetDateTime>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, OffsetDateTime&gt; object if successful.
     */
    public Map<String, OffsetDateTime> getDateTimeRfc1123Valid() {
        return getDateTimeRfc1123ValidAsync().blockingGet();
    }

    /**
     * Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, OffsetDateTime>> getDateTimeRfc1123ValidAsync(ServiceCallback<Map<String, OffsetDateTime>> serviceCallback) {
        return ServiceFuture.fromBody(getDateTimeRfc1123ValidAsync(), serviceCallback);
    }

    /**
     * Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, OffsetDateTime>>> getDateTimeRfc1123ValidWithRestResponseAsync() {
        return service.getDateTimeRfc1123Valid();
    }

    /**
     * Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, OffsetDateTime>> getDateTimeRfc1123ValidAsync() {
        return getDateTimeRfc1123ValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, OffsetDateTime>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.
     *
     * @param arrayBody the Map&lt;String, OffsetDateTime&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDateTimeRfc1123Valid(@NonNull Map<String, OffsetDateTime> arrayBody) {
        putDateTimeRfc1123ValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.
     *
     * @param arrayBody the Map&lt;String, OffsetDateTime&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDateTimeRfc1123ValidAsync(@NonNull Map<String, OffsetDateTime> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDateTimeRfc1123ValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.
     *
     * @param arrayBody the Map&lt;String, OffsetDateTime&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDateTimeRfc1123ValidWithRestResponseAsync(@NonNull Map<String, OffsetDateTime> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        Map<String, DateTimeRfc1123> arrayBodyConverted = arrayBody.entrySet().stream().collect(java.util.stream.Collectors.toMap(Map.Entry::getKey, el -> new DateTimeRfc1123(el.getValue())));
        return service.putDateTimeRfc1123Valid(arrayBodyConverted);
    }

    /**
     * Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.
     *
     * @param arrayBody the Map&lt;String, OffsetDateTime&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDateTimeRfc1123ValidAsync(@NonNull Map<String, OffsetDateTime> arrayBody) {
        return putDateTimeRfc1123ValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Duration&gt; object if successful.
     */
    public Map<String, Duration> getDurationValid() {
        return getDurationValidAsync().blockingGet();
    }

    /**
     * Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Duration>> getDurationValidAsync(ServiceCallback<Map<String, Duration>> serviceCallback) {
        return ServiceFuture.fromBody(getDurationValidAsync(), serviceCallback);
    }

    /**
     * Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Duration>>> getDurationValidWithRestResponseAsync() {
        return service.getDurationValid();
    }

    /**
     * Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Duration>> getDurationValidAsync() {
        return getDurationValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Duration>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.
     *
     * @param arrayBody the Map&lt;String, Duration&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDurationValid(@NonNull Map<String, Duration> arrayBody) {
        putDurationValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.
     *
     * @param arrayBody the Map&lt;String, Duration&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDurationValidAsync(@NonNull Map<String, Duration> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDurationValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.
     *
     * @param arrayBody the Map&lt;String, Duration&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDurationValidWithRestResponseAsync(@NonNull Map<String, Duration> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDurationValid(arrayBody);
    }

    /**
     * Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.
     *
     * @param arrayBody the Map&lt;String, Duration&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDurationValidAsync(@NonNull Map<String, Duration> arrayBody) {
        return putDurationValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, byte[]&gt; object if successful.
     */
    public Map<String, byte[]> getByteValid() {
        return getByteValidAsync().blockingGet();
    }

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, byte[]>> getByteValidAsync(ServiceCallback<Map<String, byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getByteValidAsync(), serviceCallback);
    }

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, byte[]>>> getByteValidWithRestResponseAsync() {
        return service.getByteValid();
    }

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each item encoded in base64.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, byte[]>> getByteValidAsync() {
        return getByteValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, byte[]>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64.
     *
     * @param arrayBody the Map&lt;String, byte[]&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putByteValid(@NonNull Map<String, byte[]> arrayBody) {
        putByteValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64.
     *
     * @param arrayBody the Map&lt;String, byte[]&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putByteValidAsync(@NonNull Map<String, byte[]> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putByteValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64.
     *
     * @param arrayBody the Map&lt;String, byte[]&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putByteValidWithRestResponseAsync(@NonNull Map<String, byte[]> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putByteValid(arrayBody);
    }

    /**
     * Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)} with each elementencoded in base 64.
     *
     * @param arrayBody the Map&lt;String, byte[]&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putByteValidAsync(@NonNull Map<String, byte[]> arrayBody) {
        return putByteValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, byte[]&gt; object if successful.
     */
    public Map<String, byte[]> getByteInvalidNull() {
        return getByteInvalidNullAsync().blockingGet();
    }

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, byte[]>> getByteInvalidNullAsync(ServiceCallback<Map<String, byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getByteInvalidNullAsync(), serviceCallback);
    }

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, byte[]>>> getByteInvalidNullWithRestResponseAsync() {
        return service.getByteInvalidNull();
    }

    /**
     * Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64 encoded.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, byte[]>> getByteInvalidNullAsync() {
        return getByteInvalidNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, byte[]>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test string", "2": "Lorem ipsum"}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, byte[]&gt; object if successful.
     */
    public Map<String, byte[]> getBase64Url() {
        return getBase64UrlAsync().blockingGet();
    }

    /**
     * Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test string", "2": "Lorem ipsum"}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, byte[]>> getBase64UrlAsync(ServiceCallback<Map<String, byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getBase64UrlAsync(), serviceCallback);
    }

    /**
     * Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test string", "2": "Lorem ipsum"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, byte[]>>> getBase64UrlWithRestResponseAsync() {
        return service.getBase64Url();
    }

    /**
     * Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test string", "2": "Lorem ipsum"}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, byte[]>> getBase64UrlAsync() {
        return getBase64UrlWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, byte[]>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get dictionary of complex type null value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Widget&gt; object if successful.
     */
    public Map<String, Widget> getComplexNull() {
        return getComplexNullAsync().blockingGet();
    }

    /**
     * Get dictionary of complex type null value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Widget>> getComplexNullAsync(ServiceCallback<Map<String, Widget>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexNullAsync(), serviceCallback);
    }

    /**
     * Get dictionary of complex type null value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Widget>>> getComplexNullWithRestResponseAsync() {
        return service.getComplexNull();
    }

    /**
     * Get dictionary of complex type null value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Widget>> getComplexNullAsync() {
        return getComplexNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Widget>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get empty dictionary of complex type {}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Widget&gt; object if successful.
     */
    public Map<String, Widget> getComplexEmpty() {
        return getComplexEmptyAsync().blockingGet();
    }

    /**
     * Get empty dictionary of complex type {}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Widget>> getComplexEmptyAsync(ServiceCallback<Map<String, Widget>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexEmptyAsync(), serviceCallback);
    }

    /**
     * Get empty dictionary of complex type {}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Widget>>> getComplexEmptyWithRestResponseAsync() {
        return service.getComplexEmpty();
    }

    /**
     * Get empty dictionary of complex type {}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Widget>> getComplexEmptyAsync() {
        return getComplexEmptyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Widget>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Widget&gt; object if successful.
     */
    public Map<String, Widget> getComplexItemNull() {
        return getComplexItemNullAsync().blockingGet();
    }

    /**
     * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Widget>> getComplexItemNullAsync(ServiceCallback<Map<String, Widget>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexItemNullAsync(), serviceCallback);
    }

    /**
     * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Widget>>> getComplexItemNullWithRestResponseAsync() {
        return service.getComplexItemNull();
    }

    /**
     * Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Widget>> getComplexItemNullAsync() {
        return getComplexItemNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Widget>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Widget&gt; object if successful.
     */
    public Map<String, Widget> getComplexItemEmpty() {
        return getComplexItemEmptyAsync().blockingGet();
    }

    /**
     * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Widget>> getComplexItemEmptyAsync(ServiceCallback<Map<String, Widget>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexItemEmptyAsync(), serviceCallback);
    }

    /**
     * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Widget>>> getComplexItemEmptyWithRestResponseAsync() {
        return service.getComplexItemEmpty();
    }

    /**
     * Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Widget>> getComplexItemEmptyAsync() {
        return getComplexItemEmptyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Widget>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Widget&gt; object if successful.
     */
    public Map<String, Widget> getComplexValid() {
        return getComplexValidAsync().blockingGet();
    }

    /**
     * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Widget>> getComplexValidAsync(ServiceCallback<Map<String, Widget>> serviceCallback) {
        return ServiceFuture.fromBody(getComplexValidAsync(), serviceCallback);
    }

    /**
     * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Widget>>> getComplexValidWithRestResponseAsync() {
        return service.getComplexValid();
    }

    /**
     * Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Widget>> getComplexValidAsync() {
        return getComplexValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Widget>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.
     *
     * @param arrayBody the Map&lt;String, Widget&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putComplexValid(@NonNull Map<String, Widget> arrayBody) {
        putComplexValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.
     *
     * @param arrayBody the Map&lt;String, Widget&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putComplexValidAsync(@NonNull Map<String, Widget> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putComplexValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.
     *
     * @param arrayBody the Map&lt;String, Widget&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putComplexValidWithRestResponseAsync(@NonNull Map<String, Widget> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putComplexValid(arrayBody);
    }

    /**
     * Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.
     *
     * @param arrayBody the Map&lt;String, Widget&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putComplexValidAsync(@NonNull Map<String, Widget> arrayBody) {
        return putComplexValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get a null array.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     */
    public Map<String, List<String>> getArrayNull() {
        return getArrayNullAsync().blockingGet();
    }

    /**
     * Get a null array.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, List<String>>> getArrayNullAsync(ServiceCallback<Map<String, List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayNullAsync(), serviceCallback);
    }

    /**
     * Get a null array.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, List<String>>>> getArrayNullWithRestResponseAsync() {
        return service.getArrayNull();
    }

    /**
     * Get a null array.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, List<String>>> getArrayNullAsync() {
        return getArrayNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, List<String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an empty dictionary {}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     */
    public Map<String, List<String>> getArrayEmpty() {
        return getArrayEmptyAsync().blockingGet();
    }

    /**
     * Get an empty dictionary {}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, List<String>>> getArrayEmptyAsync(ServiceCallback<Map<String, List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayEmptyAsync(), serviceCallback);
    }

    /**
     * Get an empty dictionary {}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, List<String>>>> getArrayEmptyWithRestResponseAsync() {
        return service.getArrayEmpty();
    }

    /**
     * Get an empty dictionary {}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, List<String>>> getArrayEmptyAsync() {
        return getArrayEmptyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, List<String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     */
    public Map<String, List<String>> getArrayItemNull() {
        return getArrayItemNullAsync().blockingGet();
    }

    /**
     * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, List<String>>> getArrayItemNullAsync(ServiceCallback<Map<String, List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayItemNullAsync(), serviceCallback);
    }

    /**
     * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, List<String>>>> getArrayItemNullWithRestResponseAsync() {
        return service.getArrayItemNull();
    }

    /**
     * Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, List<String>>> getArrayItemNullAsync() {
        return getArrayItemNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, List<String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     */
    public Map<String, List<String>> getArrayItemEmpty() {
        return getArrayItemEmptyAsync().blockingGet();
    }

    /**
     * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, List<String>>> getArrayItemEmptyAsync(ServiceCallback<Map<String, List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayItemEmptyAsync(), serviceCallback);
    }

    /**
     * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, List<String>>>> getArrayItemEmptyWithRestResponseAsync() {
        return service.getArrayItemEmpty();
    }

    /**
     * Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, List<String>>> getArrayItemEmptyAsync() {
        return getArrayItemEmptyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, List<String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, List&lt;String&gt;&gt; object if successful.
     */
    public Map<String, List<String>> getArrayValid() {
        return getArrayValidAsync().blockingGet();
    }

    /**
     * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, List<String>>> getArrayValidAsync(ServiceCallback<Map<String, List<String>>> serviceCallback) {
        return ServiceFuture.fromBody(getArrayValidAsync(), serviceCallback);
    }

    /**
     * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, List<String>>>> getArrayValidWithRestResponseAsync() {
        return service.getArrayValid();
    }

    /**
     * Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, List<String>>> getArrayValidAsync() {
        return getArrayValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, List<String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}.
     *
     * @param arrayBody the Map&lt;String, List&lt;String&gt;&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putArrayValid(@NonNull Map<String, List<String>> arrayBody) {
        putArrayValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}.
     *
     * @param arrayBody the Map&lt;String, List&lt;String&gt;&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putArrayValidAsync(@NonNull Map<String, List<String>> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putArrayValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}.
     *
     * @param arrayBody the Map&lt;String, List&lt;String&gt;&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putArrayValidWithRestResponseAsync(@NonNull Map<String, List<String>> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putArrayValid(arrayBody);
    }

    /**
     * Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8", "9"]}.
     *
     * @param arrayBody the Map&lt;String, List&lt;String&gt;&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putArrayValidAsync(@NonNull Map<String, List<String>> arrayBody) {
        return putArrayValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }

    /**
     * Get an dictionaries of dictionaries with value null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     */
    public Map<String, Map<String, String>> getDictionaryNull() {
        return getDictionaryNullAsync().blockingGet();
    }

    /**
     * Get an dictionaries of dictionaries with value null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Map<String, String>>> getDictionaryNullAsync(ServiceCallback<Map<String, Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryNullAsync(), serviceCallback);
    }

    /**
     * Get an dictionaries of dictionaries with value null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryNullWithRestResponseAsync() {
        return service.getDictionaryNull();
    }

    /**
     * Get an dictionaries of dictionaries with value null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Map<String, String>>> getDictionaryNullAsync() {
        return getDictionaryNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Map<String, String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     */
    public Map<String, Map<String, String>> getDictionaryEmpty() {
        return getDictionaryEmptyAsync().blockingGet();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Map<String, String>>> getDictionaryEmptyAsync(ServiceCallback<Map<String, Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryEmptyAsync(), serviceCallback);
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryEmptyWithRestResponseAsync() {
        return service.getDictionaryEmpty();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Map<String, String>>> getDictionaryEmptyAsync() {
        return getDictionaryEmptyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Map<String, String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     */
    public Map<String, Map<String, String>> getDictionaryItemNull() {
        return getDictionaryItemNullAsync().blockingGet();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Map<String, String>>> getDictionaryItemNullAsync(ServiceCallback<Map<String, Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryItemNullAsync(), serviceCallback);
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryItemNullWithRestResponseAsync() {
        return service.getDictionaryItemNull();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Map<String, String>>> getDictionaryItemNullAsync() {
        return getDictionaryItemNullWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Map<String, String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     */
    public Map<String, Map<String, String>> getDictionaryItemEmpty() {
        return getDictionaryItemEmptyAsync().blockingGet();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Map<String, String>>> getDictionaryItemEmptyAsync(ServiceCallback<Map<String, Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryItemEmptyAsync(), serviceCallback);
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryItemEmptyWithRestResponseAsync() {
        return service.getDictionaryItemEmpty();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Map<String, String>>> getDictionaryItemEmptyAsync() {
        return getDictionaryItemEmptyWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Map<String, String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Map&lt;String, Map&lt;String, String&gt;&gt; object if successful.
     */
    public Map<String, Map<String, String>> getDictionaryValid() {
        return getDictionaryValidAsync().blockingGet();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Map<String, Map<String, String>>> getDictionaryValidAsync(ServiceCallback<Map<String, Map<String, String>>> serviceCallback) {
        return ServiceFuture.fromBody(getDictionaryValidAsync(), serviceCallback);
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Map<String, Map<String, String>>>> getDictionaryValidWithRestResponseAsync() {
        return service.getDictionaryValid();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Map<String, Map<String, String>>> getDictionaryValidAsync() {
        return getDictionaryValidWithRestResponseAsync()
            .flatMapMaybe((BodyResponse<Map<String, Map<String, String>>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @param arrayBody the Map&lt;String, Map&lt;String, String&gt;&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putDictionaryValid(@NonNull Map<String, Map<String, String>> arrayBody) {
        putDictionaryValidAsync(arrayBody).blockingAwait();
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @param arrayBody the Map&lt;String, Map&lt;String, String&gt;&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putDictionaryValidAsync(@NonNull Map<String, Map<String, String>> arrayBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putDictionaryValidAsync(arrayBody), serviceCallback);
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @param arrayBody the Map&lt;String, Map&lt;String, String&gt;&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> putDictionaryValidWithRestResponseAsync(@NonNull Map<String, Map<String, String>> arrayBody) {
        if (arrayBody == null) {
            throw new IllegalArgumentException("Parameter arrayBody is required and cannot be null.");
        }
        Validator.validate(arrayBody);
        return service.putDictionaryValid(arrayBody);
    }

    /**
     * Get an dictionaries of dictionaries of type &lt;string, string&gt; with value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.
     *
     * @param arrayBody the Map&lt;String, Map&lt;String, String&gt;&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable putDictionaryValidAsync(@NonNull Map<String, Map<String, String>> arrayBody) {
        return putDictionaryValidWithRestResponseAsync(arrayBody)
            .ignoreElement();
    }
}
