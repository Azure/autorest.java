/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.requiredoptional.implementation;

import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.CollectionFormat;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import fixtures.requiredoptional.Explicits;
import fixtures.requiredoptional.models.ArrayOptionalWrapper;
import fixtures.requiredoptional.models.ArrayWrapper;
import fixtures.requiredoptional.models.ClassOptionalWrapper;
import fixtures.requiredoptional.models.ClassWrapper;
import fixtures.requiredoptional.models.Error;
import fixtures.requiredoptional.models.ErrorException;
import fixtures.requiredoptional.models.IntOptionalWrapper;
import fixtures.requiredoptional.models.IntWrapper;
import fixtures.requiredoptional.models.Product;
import fixtures.requiredoptional.models.StringOptionalWrapper;
import fixtures.requiredoptional.models.StringWrapper;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.ArrayList;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * Explicits.
 */
public final class ExplicitsImpl implements Explicits {
    /**
     * The proxy service used to perform REST calls.
     */
    private ExplicitsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestRequiredOptionalTestServiceImpl client;

    /**
     * Initializes an instance of ExplicitsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ExplicitsImpl(AutoRestRequiredOptionalTestServiceImpl client) {
        this.service = RestProxy.create(ExplicitsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Explicits to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface ExplicitsService {
        @POST("reqopt/requied/integer/parameter")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredIntegerParameter(@BodyParam("application/json; charset=utf-8") int bodyParameter);

        @POST("reqopt/optional/integer/parameter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalIntegerParameter(@BodyParam("application/json; charset=utf-8") Integer bodyParameter);

        @POST("reqopt/requied/integer/property")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredIntegerProperty(@BodyParam("application/json; charset=utf-8") IntWrapper bodyParameter);

        @POST("reqopt/optional/integer/property")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalIntegerProperty(@BodyParam("application/json; charset=utf-8") IntOptionalWrapper bodyParameter);

        @POST("reqopt/requied/integer/header")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredIntegerHeader(@HeaderParam("headerParameter") int headerParameter);

        @POST("reqopt/optional/integer/header")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalIntegerHeader(@HeaderParam("headerParameter") Integer headerParameter);

        @POST("reqopt/requied/string/parameter")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredStringParameter(@BodyParam("application/json; charset=utf-8") String bodyParameter);

        @POST("reqopt/optional/string/parameter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalStringParameter(@BodyParam("application/json; charset=utf-8") String bodyParameter);

        @POST("reqopt/requied/string/property")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredStringProperty(@BodyParam("application/json; charset=utf-8") StringWrapper bodyParameter);

        @POST("reqopt/optional/string/property")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalStringProperty(@BodyParam("application/json; charset=utf-8") StringOptionalWrapper bodyParameter);

        @POST("reqopt/requied/string/header")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredStringHeader(@HeaderParam("headerParameter") String headerParameter);

        @POST("reqopt/optional/string/header")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalStringHeader(@HeaderParam("bodyParameter") String bodyParameter);

        @POST("reqopt/requied/class/parameter")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredClassParameter(@BodyParam("application/json; charset=utf-8") Product bodyParameter);

        @POST("reqopt/optional/class/parameter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalClassParameter(@BodyParam("application/json; charset=utf-8") Product bodyParameter);

        @POST("reqopt/requied/class/property")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredClassProperty(@BodyParam("application/json; charset=utf-8") ClassWrapper bodyParameter);

        @POST("reqopt/optional/class/property")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalClassProperty(@BodyParam("application/json; charset=utf-8") ClassOptionalWrapper bodyParameter);

        @POST("reqopt/requied/array/parameter")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredArrayParameter(@BodyParam("application/json; charset=utf-8") List<String> bodyParameter);

        @POST("reqopt/optional/array/parameter")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalArrayParameter(@BodyParam("application/json; charset=utf-8") List<String> bodyParameter);

        @POST("reqopt/requied/array/property")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredArrayProperty(@BodyParam("application/json; charset=utf-8") ArrayWrapper bodyParameter);

        @POST("reqopt/optional/array/property")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalArrayProperty(@BodyParam("application/json; charset=utf-8") ArrayOptionalWrapper bodyParameter);

        @POST("reqopt/requied/array/header")
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BodyResponse<Error>> postRequiredArrayHeader(@HeaderParam("headerParameter") String headerParameter);

        @POST("reqopt/optional/array/header")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<VoidResponse> postOptionalArrayHeader(@HeaderParam("headerParameter") String headerParameter);
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredIntegerParameter(@NonNull int bodyParameter) {
        return postRequiredIntegerParameterAsync(bodyParameter).blockingGet();
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredIntegerParameterAsync(@NonNull int bodyParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredIntegerParameterAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredIntegerParameterWithRestResponseAsync(@NonNull int bodyParameter) {
        return service.postRequiredIntegerParameter(bodyParameter);
    }

    /**
     * Test explicitly required integer. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredIntegerParameterAsync(@NonNull int bodyParameter) {
        return postRequiredIntegerParameterWithRestResponseAsync(bodyParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalIntegerParameter() {
        postOptionalIntegerParameterAsync().blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalIntegerParameterAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalIntegerParameterAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalIntegerParameterWithRestResponseAsync() {
        final Integer bodyParameter = null;
        return service.postOptionalIntegerParameter(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalIntegerParameterAsync() {
        return postOptionalIntegerParameterWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalIntegerParameter(Integer bodyParameter) {
        postOptionalIntegerParameterAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalIntegerParameterAsync(Integer bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalIntegerParameterAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalIntegerParameterWithRestResponseAsync(Integer bodyParameter) {
        return service.postOptionalIntegerParameter(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put null.
     *
     * @param bodyParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalIntegerParameterAsync(Integer bodyParameter) {
        return postOptionalIntegerParameterWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredIntegerProperty(@NonNull IntWrapper bodyParameter) {
        return postRequiredIntegerPropertyAsync(bodyParameter).blockingGet();
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredIntegerPropertyAsync(@NonNull IntWrapper bodyParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredIntegerPropertyAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredIntegerPropertyWithRestResponseAsync(@NonNull IntWrapper bodyParameter) {
        if (bodyParameter == null) {
            throw new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.");
        }
        Validator.validate(bodyParameter);
        return service.postRequiredIntegerProperty(bodyParameter);
    }

    /**
     * Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the IntWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredIntegerPropertyAsync(@NonNull IntWrapper bodyParameter) {
        return postRequiredIntegerPropertyWithRestResponseAsync(bodyParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalIntegerProperty() {
        postOptionalIntegerPropertyAsync().blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalIntegerPropertyAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalIntegerPropertyAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalIntegerPropertyWithRestResponseAsync() {
        final IntOptionalWrapper bodyParameter = null;
        return service.postOptionalIntegerProperty(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalIntegerPropertyAsync() {
        return postOptionalIntegerPropertyWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalIntegerProperty(IntOptionalWrapper bodyParameter) {
        postOptionalIntegerPropertyAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalIntegerPropertyAsync(IntOptionalWrapper bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalIntegerPropertyAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalIntegerPropertyWithRestResponseAsync(IntOptionalWrapper bodyParameter) {
        Validator.validate(bodyParameter);
        return service.postOptionalIntegerProperty(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.
     *
     * @param bodyParameter the IntOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalIntegerPropertyAsync(IntOptionalWrapper bodyParameter) {
        return postOptionalIntegerPropertyWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredIntegerHeader(@NonNull int headerParameter) {
        return postRequiredIntegerHeaderAsync(headerParameter).blockingGet();
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredIntegerHeaderAsync(@NonNull int headerParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredIntegerHeaderAsync(headerParameter), serviceCallback);
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredIntegerHeaderWithRestResponseAsync(@NonNull int headerParameter) {
        return service.postRequiredIntegerHeader(headerParameter);
    }

    /**
     * Test explicitly required integer. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredIntegerHeaderAsync(@NonNull int headerParameter) {
        return postRequiredIntegerHeaderWithRestResponseAsync(headerParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalIntegerHeader() {
        postOptionalIntegerHeaderAsync().blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalIntegerHeaderAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalIntegerHeaderAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalIntegerHeaderWithRestResponseAsync() {
        final Integer headerParameter = null;
        return service.postOptionalIntegerHeader(headerParameter);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalIntegerHeaderAsync() {
        return postOptionalIntegerHeaderWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalIntegerHeader(Integer headerParameter) {
        postOptionalIntegerHeaderAsync(headerParameter).blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalIntegerHeaderAsync(Integer headerParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalIntegerHeaderAsync(headerParameter), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalIntegerHeaderWithRestResponseAsync(Integer headerParameter) {
        return service.postOptionalIntegerHeader(headerParameter);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the Integer value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalIntegerHeaderAsync(Integer headerParameter) {
        return postOptionalIntegerHeaderWithRestResponseAsync(headerParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredStringParameter(@NonNull String bodyParameter) {
        return postRequiredStringParameterAsync(bodyParameter).blockingGet();
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredStringParameterAsync(@NonNull String bodyParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredStringParameterAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredStringParameterWithRestResponseAsync(@NonNull String bodyParameter) {
        if (bodyParameter == null) {
            throw new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.");
        }
        return service.postRequiredStringParameter(bodyParameter);
    }

    /**
     * Test explicitly required string. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredStringParameterAsync(@NonNull String bodyParameter) {
        return postRequiredStringParameterWithRestResponseAsync(bodyParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalStringParameter() {
        postOptionalStringParameterAsync().blockingAwait();
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalStringParameterAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalStringParameterAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalStringParameterWithRestResponseAsync() {
        final String bodyParameter = null;
        return service.postOptionalStringParameter(bodyParameter);
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalStringParameterAsync() {
        return postOptionalStringParameterWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalStringParameter(String bodyParameter) {
        postOptionalStringParameterAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalStringParameterAsync(String bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalStringParameterAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalStringParameterWithRestResponseAsync(String bodyParameter) {
        return service.postOptionalStringParameter(bodyParameter);
    }

    /**
     * Test explicitly optional string. Please put null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalStringParameterAsync(String bodyParameter) {
        return postOptionalStringParameterWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredStringProperty(@NonNull StringWrapper bodyParameter) {
        return postRequiredStringPropertyAsync(bodyParameter).blockingGet();
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredStringPropertyAsync(@NonNull StringWrapper bodyParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredStringPropertyAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredStringPropertyWithRestResponseAsync(@NonNull StringWrapper bodyParameter) {
        if (bodyParameter == null) {
            throw new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.");
        }
        Validator.validate(bodyParameter);
        return service.postRequiredStringProperty(bodyParameter);
    }

    /**
     * Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the StringWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredStringPropertyAsync(@NonNull StringWrapper bodyParameter) {
        return postRequiredStringPropertyWithRestResponseAsync(bodyParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalStringProperty() {
        postOptionalStringPropertyAsync().blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalStringPropertyAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalStringPropertyAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalStringPropertyWithRestResponseAsync() {
        final StringOptionalWrapper bodyParameter = null;
        return service.postOptionalStringProperty(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalStringPropertyAsync() {
        return postOptionalStringPropertyWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalStringProperty(StringOptionalWrapper bodyParameter) {
        postOptionalStringPropertyAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalStringPropertyAsync(StringOptionalWrapper bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalStringPropertyAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalStringPropertyWithRestResponseAsync(StringOptionalWrapper bodyParameter) {
        Validator.validate(bodyParameter);
        return service.postOptionalStringProperty(bodyParameter);
    }

    /**
     * Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.
     *
     * @param bodyParameter the StringOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalStringPropertyAsync(StringOptionalWrapper bodyParameter) {
        return postOptionalStringPropertyWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredStringHeader(@NonNull String headerParameter) {
        return postRequiredStringHeaderAsync(headerParameter).blockingGet();
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredStringHeaderAsync(@NonNull String headerParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredStringHeaderAsync(headerParameter), serviceCallback);
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredStringHeaderWithRestResponseAsync(@NonNull String headerParameter) {
        if (headerParameter == null) {
            throw new IllegalArgumentException("Parameter headerParameter is required and cannot be null.");
        }
        return service.postRequiredStringHeader(headerParameter);
    }

    /**
     * Test explicitly required string. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredStringHeaderAsync(@NonNull String headerParameter) {
        return postRequiredStringHeaderWithRestResponseAsync(headerParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalStringHeader() {
        postOptionalStringHeaderAsync().blockingAwait();
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalStringHeaderAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalStringHeaderAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalStringHeaderWithRestResponseAsync() {
        final String bodyParameter = null;
        return service.postOptionalStringHeader(bodyParameter);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalStringHeaderAsync() {
        return postOptionalStringHeaderWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalStringHeader(String bodyParameter) {
        postOptionalStringHeaderAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalStringHeaderAsync(String bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalStringHeaderAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalStringHeaderWithRestResponseAsync(String bodyParameter) {
        return service.postOptionalStringHeader(bodyParameter);
    }

    /**
     * Test explicitly optional string. Please put a header 'headerParameter' =&gt; null.
     *
     * @param bodyParameter the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalStringHeaderAsync(String bodyParameter) {
        return postOptionalStringHeaderWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredClassParameter(@NonNull Product bodyParameter) {
        return postRequiredClassParameterAsync(bodyParameter).blockingGet();
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredClassParameterAsync(@NonNull Product bodyParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredClassParameterAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredClassParameterWithRestResponseAsync(@NonNull Product bodyParameter) {
        if (bodyParameter == null) {
            throw new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.");
        }
        Validator.validate(bodyParameter);
        return service.postRequiredClassParameter(bodyParameter);
    }

    /**
     * Test explicitly required complex object. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredClassParameterAsync(@NonNull Product bodyParameter) {
        return postRequiredClassParameterWithRestResponseAsync(bodyParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalClassParameter() {
        postOptionalClassParameterAsync().blockingAwait();
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalClassParameterAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalClassParameterAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalClassParameterWithRestResponseAsync() {
        final Product bodyParameter = null;
        return service.postOptionalClassParameter(bodyParameter);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalClassParameterAsync() {
        return postOptionalClassParameterWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalClassParameter(Product bodyParameter) {
        postOptionalClassParameterAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalClassParameterAsync(Product bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalClassParameterAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalClassParameterWithRestResponseAsync(Product bodyParameter) {
        Validator.validate(bodyParameter);
        return service.postOptionalClassParameter(bodyParameter);
    }

    /**
     * Test explicitly optional complex object. Please put null.
     *
     * @param bodyParameter the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalClassParameterAsync(Product bodyParameter) {
        return postOptionalClassParameterWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredClassProperty(@NonNull ClassWrapper bodyParameter) {
        return postRequiredClassPropertyAsync(bodyParameter).blockingGet();
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredClassPropertyAsync(@NonNull ClassWrapper bodyParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredClassPropertyAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredClassPropertyWithRestResponseAsync(@NonNull ClassWrapper bodyParameter) {
        if (bodyParameter == null) {
            throw new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.");
        }
        Validator.validate(bodyParameter);
        return service.postRequiredClassProperty(bodyParameter);
    }

    /**
     * Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ClassWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredClassPropertyAsync(@NonNull ClassWrapper bodyParameter) {
        return postRequiredClassPropertyWithRestResponseAsync(bodyParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalClassProperty() {
        postOptionalClassPropertyAsync().blockingAwait();
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalClassPropertyAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalClassPropertyAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalClassPropertyWithRestResponseAsync() {
        final ClassOptionalWrapper bodyParameter = null;
        return service.postOptionalClassProperty(bodyParameter);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalClassPropertyAsync() {
        return postOptionalClassPropertyWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalClassProperty(ClassOptionalWrapper bodyParameter) {
        postOptionalClassPropertyAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalClassPropertyAsync(ClassOptionalWrapper bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalClassPropertyAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalClassPropertyWithRestResponseAsync(ClassOptionalWrapper bodyParameter) {
        Validator.validate(bodyParameter);
        return service.postOptionalClassProperty(bodyParameter);
    }

    /**
     * Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.
     *
     * @param bodyParameter the ClassOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalClassPropertyAsync(ClassOptionalWrapper bodyParameter) {
        return postOptionalClassPropertyWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredArrayParameter(@NonNull List<String> bodyParameter) {
        return postRequiredArrayParameterAsync(bodyParameter).blockingGet();
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredArrayParameterAsync(@NonNull List<String> bodyParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredArrayParameterAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredArrayParameterWithRestResponseAsync(@NonNull List<String> bodyParameter) {
        if (bodyParameter == null) {
            throw new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.");
        }
        Validator.validate(bodyParameter);
        return service.postRequiredArrayParameter(bodyParameter);
    }

    /**
     * Test explicitly required array. Please put null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredArrayParameterAsync(@NonNull List<String> bodyParameter) {
        return postRequiredArrayParameterWithRestResponseAsync(bodyParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalArrayParameter() {
        postOptionalArrayParameterAsync().blockingAwait();
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalArrayParameterAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalArrayParameterAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalArrayParameterWithRestResponseAsync() {
        final List<String> bodyParameter = null;
        return service.postOptionalArrayParameter(bodyParameter);
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalArrayParameterAsync() {
        return postOptionalArrayParameterWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalArrayParameter(List<String> bodyParameter) {
        postOptionalArrayParameterAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalArrayParameterAsync(List<String> bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalArrayParameterAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalArrayParameterWithRestResponseAsync(List<String> bodyParameter) {
        Validator.validate(bodyParameter);
        return service.postOptionalArrayParameter(bodyParameter);
    }

    /**
     * Test explicitly optional array. Please put null.
     *
     * @param bodyParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalArrayParameterAsync(List<String> bodyParameter) {
        return postOptionalArrayParameterWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredArrayProperty(@NonNull ArrayWrapper bodyParameter) {
        return postRequiredArrayPropertyAsync(bodyParameter).blockingGet();
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredArrayPropertyAsync(@NonNull ArrayWrapper bodyParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredArrayPropertyAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredArrayPropertyWithRestResponseAsync(@NonNull ArrayWrapper bodyParameter) {
        if (bodyParameter == null) {
            throw new IllegalArgumentException("Parameter bodyParameter is required and cannot be null.");
        }
        Validator.validate(bodyParameter);
        return service.postRequiredArrayProperty(bodyParameter);
    }

    /**
     * Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the client library should throw before the request is sent.
     *
     * @param bodyParameter the ArrayWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredArrayPropertyAsync(@NonNull ArrayWrapper bodyParameter) {
        return postRequiredArrayPropertyWithRestResponseAsync(bodyParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalArrayProperty() {
        postOptionalArrayPropertyAsync().blockingAwait();
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalArrayPropertyAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalArrayPropertyAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalArrayPropertyWithRestResponseAsync() {
        final ArrayOptionalWrapper bodyParameter = null;
        return service.postOptionalArrayProperty(bodyParameter);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalArrayPropertyAsync() {
        return postOptionalArrayPropertyWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalArrayProperty(ArrayOptionalWrapper bodyParameter) {
        postOptionalArrayPropertyAsync(bodyParameter).blockingAwait();
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalArrayPropertyAsync(ArrayOptionalWrapper bodyParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalArrayPropertyAsync(bodyParameter), serviceCallback);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalArrayPropertyWithRestResponseAsync(ArrayOptionalWrapper bodyParameter) {
        Validator.validate(bodyParameter);
        return service.postOptionalArrayProperty(bodyParameter);
    }

    /**
     * Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.
     *
     * @param bodyParameter the ArrayOptionalWrapper value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalArrayPropertyAsync(ArrayOptionalWrapper bodyParameter) {
        return postOptionalArrayPropertyWithRestResponseAsync(bodyParameter)
            .toCompletable();
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Error object if successful.
     */
    public Error postRequiredArrayHeader(@NonNull List<String> headerParameter) {
        return postRequiredArrayHeaderAsync(headerParameter).blockingGet();
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Error> postRequiredArrayHeaderAsync(@NonNull List<String> headerParameter, ServiceCallback<Error> serviceCallback) {
        return ServiceFuture.fromBody(postRequiredArrayHeaderAsync(headerParameter), serviceCallback);
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<Error>> postRequiredArrayHeaderWithRestResponseAsync(@NonNull List<String> headerParameter) {
        if (headerParameter == null) {
            throw new IllegalArgumentException("Parameter headerParameter is required and cannot be null.");
        }
        Validator.validate(headerParameter);
        String headerParameterConverted = this.client.serializerAdapter().serializeList(headerParameter, CollectionFormat.CSV);
        return service.postRequiredArrayHeader(headerParameterConverted);
    }

    /**
     * Test explicitly required array. Please put a header 'headerParameter' =&gt; null and the client library should throw before the request is sent.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Error> postRequiredArrayHeaderAsync(@NonNull List<String> headerParameter) {
        return postRequiredArrayHeaderWithRestResponseAsync(headerParameter)
            .flatMapMaybe((BodyResponse<Error> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalArrayHeader() {
        postOptionalArrayHeaderAsync().blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalArrayHeaderAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalArrayHeaderAsync(), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalArrayHeaderWithRestResponseAsync() {
        final List<String> headerParameter = null;
        String headerParameterConverted = this.client.serializerAdapter().serializeList(headerParameter, CollectionFormat.CSV);
        return service.postOptionalArrayHeader(headerParameterConverted);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalArrayHeaderAsync() {
        return postOptionalArrayHeaderWithRestResponseAsync()
            .toCompletable();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void postOptionalArrayHeader(List<String> headerParameter) {
        postOptionalArrayHeaderAsync(headerParameter).blockingAwait();
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> postOptionalArrayHeaderAsync(List<String> headerParameter, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(postOptionalArrayHeaderAsync(headerParameter), serviceCallback);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> postOptionalArrayHeaderWithRestResponseAsync(List<String> headerParameter) {
        Validator.validate(headerParameter);
        String headerParameterConverted = this.client.serializerAdapter().serializeList(headerParameter, CollectionFormat.CSV);
        return service.postOptionalArrayHeader(headerParameterConverted);
    }

    /**
     * Test explicitly optional integer. Please put a header 'headerParameter' =&gt; null.
     *
     * @param headerParameter the List&lt;String&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable postOptionalArrayHeaderAsync(List<String> headerParameter) {
        return postOptionalArrayHeaderWithRestResponseAsync(headerParameter)
            .toCompletable();
    }
}
