// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package fixtures.validation.implementation;

import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.VoidResponse;
import com.azure.core.implementation.RestProxy;
import com.azure.core.implementation.Validator;
import com.azure.core.implementation.annotation.BodyParam;
import com.azure.core.implementation.annotation.ExpectedResponses;
import com.azure.core.implementation.annotation.Get;
import com.azure.core.implementation.annotation.Host;
import com.azure.core.implementation.annotation.PathParam;
import com.azure.core.implementation.annotation.Post;
import com.azure.core.implementation.annotation.Put;
import com.azure.core.implementation.annotation.QueryParam;
import com.azure.core.implementation.annotation.ReturnType;
import com.azure.core.implementation.annotation.ServiceInterface;
import com.azure.core.implementation.annotation.ServiceMethod;
import com.azure.core.implementation.annotation.UnexpectedResponseExceptionType;
import fixtures.validation.AutoRestValidationTest;
import fixtures.validation.models.ErrorException;
import fixtures.validation.models.Product;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the AutoRestValidationTest type.
 */
public final class AutoRestValidationTestImpl implements AutoRestValidationTest {
    /**
     * The proxy service used to perform REST calls.
     */
    private AutoRestValidationTestService service;

    /**
     * Subscription ID.
     */
    private String subscriptionId;

    /**
     * Gets Subscription ID.
     *
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Sets Subscription ID.
     *
     * @param subscriptionId the subscriptionId value.
     */
    void setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
    }

    /**
     * Required string following pattern \d{2}-\d{2}-\d{4}.
     */
    private String apiVersion;

    /**
     * Gets Required string following pattern \d{2}-\d{2}-\d{4}.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * Sets Required string following pattern \d{2}-\d{2}-\d{4}.
     *
     * @param apiVersion the apiVersion value.
     */
    void setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of AutoRestValidationTest client.
     */
    public AutoRestValidationTestImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of AutoRestValidationTest client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public AutoRestValidationTestImpl(HttpPipeline httpPipeline) {
        this.httpPipeline = httpPipeline;
        this.service = RestProxy.create(AutoRestValidationTestService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for AutoRestValidationTest to be
     * used by the proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    @ServiceInterface(name = "AutoRestValidationTest")
    private interface AutoRestValidationTestService {
        @Get("fakepath/{subscriptionId}/{resourceGroupName}/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Product>> validationOfMethodParameters(@PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("id") int id, @QueryParam("apiVersion") String apiVersion);

        @Put("fakepath/{subscriptionId}/{resourceGroupName}/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<SimpleResponse<Product>> validationOfBody(@PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("id") int id, @BodyParam("application/json; charset=utf-8") Product body, @QueryParam("apiVersion") String apiVersion);

        @Get("validation/constantsInPath/{constantParam}/value")
        @ExpectedResponses({200})
        Mono<VoidResponse> getWithConstantInPath(@PathParam("constantParam") String constantParam);

        @Post("validation/constantsInPath/{constantParam}/value")
        @ExpectedResponses({200})
        Mono<SimpleResponse<Product>> postWithConstantInBody(@PathParam("constantParam") String constantParam, @BodyParam("application/json; charset=utf-8") Product body);
    }

    /**
     * Validates input parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product validationOfMethodParameters(String resourceGroupName, int id) {
        return validationOfMethodParametersAsync(resourceGroupName, id).block();
    }

    /**
     * Validates input parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> validationOfMethodParametersWithRestResponseAsync(String resourceGroupName, int id) {
        if (this.getSubscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.getSubscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.getApiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.getApiVersion() is required and cannot be null.");
        }
        return service.validationOfMethodParameters(this.getSubscriptionId(), resourceGroupName, id, this.getApiVersion());
    }

    /**
     * Validates input parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> validationOfMethodParametersAsync(String resourceGroupName, int id) {
        return validationOfMethodParametersWithRestResponseAsync(resourceGroupName, id)
            .flatMap((SimpleResponse<Product> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Validates body parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product validationOfBody(String resourceGroupName, int id) {
        return validationOfBodyAsync(resourceGroupName, id).block();
    }

    /**
     * Validates body parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> validationOfBodyWithRestResponseAsync(String resourceGroupName, int id) {
        if (this.getSubscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.getSubscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.getApiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.getApiVersion() is required and cannot be null.");
        }
        final Product body = null;
        return service.validationOfBody(this.getSubscriptionId(), resourceGroupName, id, body, this.getApiVersion());
    }

    /**
     * Validates body parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> validationOfBodyAsync(String resourceGroupName, int id) {
        return validationOfBodyWithRestResponseAsync(resourceGroupName, id)
            .flatMap((SimpleResponse<Product> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Validates body parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @param body the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product validationOfBody(String resourceGroupName, int id, Product body) {
        return validationOfBodyAsync(resourceGroupName, id, body).block();
    }

    /**
     * Validates body parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @param body the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> validationOfBodyWithRestResponseAsync(String resourceGroupName, int id, Product body) {
        if (this.getSubscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.getSubscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.getApiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.getApiVersion() is required and cannot be null.");
        }
        Validator.validate(body);
        return service.validationOfBody(this.getSubscriptionId(), resourceGroupName, id, body, this.getApiVersion());
    }

    /**
     * Validates body parameters on the method. See swagger for details.
     *
     * @param resourceGroupName Required string between 3 and 10 chars with pattern [a-zA-Z0-9]+.
     * @param id Required int multiple of 10 from 100 to 1000.
     * @param body the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> validationOfBodyAsync(String resourceGroupName, int id, Product body) {
        return validationOfBodyWithRestResponseAsync(resourceGroupName, id, body)
            .flatMap((SimpleResponse<Product> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getWithConstantInPath() {
        getWithConstantInPathAsync().block();
    }

    /**
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VoidResponse> getWithConstantInPathWithRestResponseAsync() {
        final String constantParam = "constant";
        return service.getWithConstantInPath(constantParam);
    }

    /**
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getWithConstantInPathAsync() {
        return getWithConstantInPathWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.empty());
    }

    /**
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product postWithConstantInBody() {
        return postWithConstantInBodyAsync().block();
    }

    /**
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> postWithConstantInBodyWithRestResponseAsync() {
        final String constantParam = "constant";
        final Product body = null;
        return service.postWithConstantInBody(constantParam, body);
    }

    /**
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> postWithConstantInBodyAsync() {
        return postWithConstantInBodyWithRestResponseAsync()
            .flatMap((SimpleResponse<Product> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * @param body the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Product object if successful.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Product postWithConstantInBody(Product body) {
        return postWithConstantInBodyAsync(body).block();
    }

    /**
     * @param body the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Product>> postWithConstantInBodyWithRestResponseAsync(Product body) {
        Validator.validate(body);
        final String constantParam = "constant";
        return service.postWithConstantInBody(constantParam, body);
    }

    /**
     * @param body the Product value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Product> postWithConstantInBodyAsync(Product body) {
        return postWithConstantInBodyWithRestResponseAsync(body)
            .flatMap((SimpleResponse<Product> res) -> {
                if (res.value() != null) {
                    return Mono.just(res.value());
                } else {
                    return Mono.empty();
                }
            });
    }
}
