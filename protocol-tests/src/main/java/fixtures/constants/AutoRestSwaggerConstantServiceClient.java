// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.constants;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import fixtures.constants.implementation.models.ModelAsStringNoRequiredOneValueDefaultOpEnum;
import fixtures.constants.implementation.models.ModelAsStringNoRequiredOneValueNoDefaultOpEnum;
import fixtures.constants.implementation.models.ModelAsStringNoRequiredTwoValueDefaultOpEnum;
import fixtures.constants.implementation.models.ModelAsStringNoRequiredTwoValueNoDefaultOpEnum;
import fixtures.constants.implementation.models.ModelAsStringRequiredOneValueDefaultOpEnum;
import fixtures.constants.implementation.models.ModelAsStringRequiredOneValueNoDefaultOpEnum;
import fixtures.constants.implementation.models.ModelAsStringRequiredTwoValueDefaultOpEnum;
import fixtures.constants.implementation.models.ModelAsStringRequiredTwoValueNoDefaultOpEnum;
import fixtures.constants.implementation.models.NoModelAsStringNoRequiredTwoValueDefaultOpEnum;
import fixtures.constants.implementation.models.NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum;
import fixtures.constants.implementation.models.NoModelAsStringRequiredTwoValueDefaultOpEnum;
import fixtures.constants.implementation.models.NoModelAsStringRequiredTwoValueNoDefaultOpEnum;

/** Initializes a new instance of the synchronous AutoRestSwaggerConstantServiceClient type. */
@ServiceClient(builder = AutoRestSwaggerConstantServiceClientBuilder.class)
public final class AutoRestSwaggerConstantServiceClient {
    @Generated private final AutoRestSwaggerConstantServiceAsyncClient client;

    /**
     * Initializes an instance of AutoRestSwaggerConstantServiceClient class.
     *
     * @param client the async client.
     */
    @Generated
    AutoRestSwaggerConstantServiceClient(AutoRestSwaggerConstantServiceAsyncClient client) {
        this.client = client;
    }

    /**
     * Puts constants to the testserver.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1", "value2".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1", "value2".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredTwoValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putNoModelAsStringNoRequiredTwoValueDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredOneValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putNoModelAsStringNoRequiredOneValueNoDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredOneValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putNoModelAsStringNoRequiredOneValueDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter. Allowed values: "value1", "value2".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredTwoValueNoDefaultWithResponse(
            String input, RequestOptions requestOptions) {
        return this.client.putNoModelAsStringRequiredTwoValueNoDefaultWithResponse(input, requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter. Allowed values: "value1", "value2".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredTwoValueDefaultWithResponse(
            String input, RequestOptions requestOptions) {
        return this.client.putNoModelAsStringRequiredTwoValueDefaultWithResponse(input, requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredOneValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putNoModelAsStringRequiredOneValueNoDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredOneValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putNoModelAsStringRequiredOneValueDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1", "value2".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredTwoValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putModelAsStringNoRequiredTwoValueNoDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1", "value2".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredTwoValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putModelAsStringNoRequiredTwoValueDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredOneValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putModelAsStringNoRequiredOneValueNoDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1".</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredOneValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.client.putModelAsStringNoRequiredOneValueDefaultWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter. Allowed values: "value1", "value2".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredTwoValueNoDefaultWithResponse(
            String input, RequestOptions requestOptions) {
        return this.client.putModelAsStringRequiredTwoValueNoDefaultWithResponse(input, requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter. Allowed values: "value1", "value2".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredTwoValueDefaultWithResponse(
            String input, RequestOptions requestOptions) {
        return this.client.putModelAsStringRequiredTwoValueDefaultWithResponse(input, requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter. Allowed values: "value1".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredOneValueNoDefaultWithResponse(
            String input, RequestOptions requestOptions) {
        return this.client.putModelAsStringRequiredOneValueNoDefaultWithResponse(input, requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter. Allowed values: "value1".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredOneValueDefaultWithResponse(
            String input, RequestOptions requestOptions) {
        return this.client.putModelAsStringRequiredOneValueDefaultWithResponse(input, requestOptions).block();
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putClientConstantsWithResponse(RequestOptions requestOptions) {
        return this.client.putClientConstantsWithResponse(requestOptions).block();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredTwoValueNoDefault(NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum input) {
        // Generated convenience method for putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (input != null) {
            requestOptions.addQueryParam("input", input.toString());
        }
        putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredTwoValueDefault(NoModelAsStringNoRequiredTwoValueDefaultOpEnum input) {
        // Generated convenience method for putNoModelAsStringNoRequiredTwoValueDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (input != null) {
            requestOptions.addQueryParam("input", input.toString());
        }
        putNoModelAsStringNoRequiredTwoValueDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredOneValueNoDefault() {
        // Generated convenience method for putNoModelAsStringNoRequiredOneValueNoDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putNoModelAsStringNoRequiredOneValueNoDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringNoRequiredOneValueDefault() {
        // Generated convenience method for putNoModelAsStringNoRequiredOneValueDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putNoModelAsStringNoRequiredOneValueDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringRequiredTwoValueNoDefault(NoModelAsStringRequiredTwoValueNoDefaultOpEnum input) {
        // Generated convenience method for putNoModelAsStringRequiredTwoValueNoDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putNoModelAsStringRequiredTwoValueNoDefaultWithResponse(input.toString(), requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringRequiredTwoValueDefault(NoModelAsStringRequiredTwoValueDefaultOpEnum input) {
        // Generated convenience method for putNoModelAsStringRequiredTwoValueDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putNoModelAsStringRequiredTwoValueDefaultWithResponse(input.toString(), requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringRequiredOneValueNoDefault() {
        // Generated convenience method for putNoModelAsStringRequiredOneValueNoDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putNoModelAsStringRequiredOneValueNoDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putNoModelAsStringRequiredOneValueDefault() {
        // Generated convenience method for putNoModelAsStringRequiredOneValueDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putNoModelAsStringRequiredOneValueDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredTwoValueNoDefault(ModelAsStringNoRequiredTwoValueNoDefaultOpEnum input) {
        // Generated convenience method for putModelAsStringNoRequiredTwoValueNoDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (input != null) {
            requestOptions.addQueryParam("input", input.toString());
        }
        putModelAsStringNoRequiredTwoValueNoDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredTwoValueDefault(ModelAsStringNoRequiredTwoValueDefaultOpEnum input) {
        // Generated convenience method for putModelAsStringNoRequiredTwoValueDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (input != null) {
            requestOptions.addQueryParam("input", input.toString());
        }
        putModelAsStringNoRequiredTwoValueDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredOneValueNoDefault(ModelAsStringNoRequiredOneValueNoDefaultOpEnum input) {
        // Generated convenience method for putModelAsStringNoRequiredOneValueNoDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (input != null) {
            requestOptions.addQueryParam("input", input.toString());
        }
        putModelAsStringNoRequiredOneValueNoDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringNoRequiredOneValueDefault(ModelAsStringNoRequiredOneValueDefaultOpEnum input) {
        // Generated convenience method for putModelAsStringNoRequiredOneValueDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (input != null) {
            requestOptions.addQueryParam("input", input.toString());
        }
        putModelAsStringNoRequiredOneValueDefaultWithResponse(requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringRequiredTwoValueNoDefault(ModelAsStringRequiredTwoValueNoDefaultOpEnum input) {
        // Generated convenience method for putModelAsStringRequiredTwoValueNoDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putModelAsStringRequiredTwoValueNoDefaultWithResponse(input.toString(), requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringRequiredTwoValueDefault(ModelAsStringRequiredTwoValueDefaultOpEnum input) {
        // Generated convenience method for putModelAsStringRequiredTwoValueDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putModelAsStringRequiredTwoValueDefaultWithResponse(input.toString(), requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringRequiredOneValueNoDefault(ModelAsStringRequiredOneValueNoDefaultOpEnum input) {
        // Generated convenience method for putModelAsStringRequiredOneValueNoDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putModelAsStringRequiredOneValueNoDefaultWithResponse(input.toString(), requestOptions).getValue();
    }

    /**
     * Puts constants to the testserver.
     *
     * @param input The input parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putModelAsStringRequiredOneValueDefault(ModelAsStringRequiredOneValueDefaultOpEnum input) {
        // Generated convenience method for putModelAsStringRequiredOneValueDefaultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putModelAsStringRequiredOneValueDefaultWithResponse(input.toString(), requestOptions).getValue();
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     *
     * @throws com.azure.core.exception.HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void putClientConstants() {
        // Generated convenience method for putClientConstantsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        putClientConstantsWithResponse(requestOptions).getValue();
    }
}
