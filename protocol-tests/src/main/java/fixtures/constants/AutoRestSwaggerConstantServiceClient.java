// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.constants;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import fixtures.constants.implementation.ContantsImpl;

/**
 * Initializes a new instance of the synchronous AutoRestSwaggerConstantServiceClient type.
 */
@ServiceClient(builder = AutoRestSwaggerConstantServiceClientBuilder.class)
public final class AutoRestSwaggerConstantServiceClient {
    @Generated
    private final ContantsImpl serviceClient;

    /**
     * Initializes an instance of AutoRestSwaggerConstantServiceClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    AutoRestSwaggerConstantServiceClient(ContantsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Puts constants to the testserver.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1",
     * "value2".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putNoModelAsStringNoRequiredTwoValueNoDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1",
     * "value2".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredTwoValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putNoModelAsStringNoRequiredTwoValueDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredOneValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putNoModelAsStringNoRequiredOneValueNoDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringNoRequiredOneValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putNoModelAsStringNoRequiredOneValueDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter. Allowed values: "value1", "value2".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredTwoValueNoDefaultWithResponse(String input,
        RequestOptions requestOptions) {
        return this.serviceClient.putNoModelAsStringRequiredTwoValueNoDefaultWithResponse(input, requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter. Allowed values: "value1", "value2".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredTwoValueDefaultWithResponse(String input,
        RequestOptions requestOptions) {
        return this.serviceClient.putNoModelAsStringRequiredTwoValueDefaultWithResponse(input, requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredOneValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putNoModelAsStringRequiredOneValueNoDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putNoModelAsStringRequiredOneValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putNoModelAsStringRequiredOneValueDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1",
     * "value2".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredTwoValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putModelAsStringNoRequiredTwoValueNoDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1",
     * "value2".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredTwoValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putModelAsStringNoRequiredTwoValueDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredOneValueNoDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putModelAsStringNoRequiredOneValueNoDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>input</td><td>String</td><td>No</td><td>The input parameter. Allowed values: "value1".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringNoRequiredOneValueDefaultWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putModelAsStringNoRequiredOneValueDefaultWithResponse(requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter. Allowed values: "value1", "value2".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredTwoValueNoDefaultWithResponse(String input,
        RequestOptions requestOptions) {
        return this.serviceClient.putModelAsStringRequiredTwoValueNoDefaultWithResponse(input, requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter. Allowed values: "value1", "value2".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredTwoValueDefaultWithResponse(String input,
        RequestOptions requestOptions) {
        return this.serviceClient.putModelAsStringRequiredTwoValueDefaultWithResponse(input, requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter. Allowed values: "value1".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredOneValueNoDefaultWithResponse(String input,
        RequestOptions requestOptions) {
        return this.serviceClient.putModelAsStringRequiredOneValueNoDefaultWithResponse(input, requestOptions);
    }

    /**
     * Puts constants to the testserver.
     * 
     * @param input The input parameter. Allowed values: "value1".
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putModelAsStringRequiredOneValueDefaultWithResponse(String input,
        RequestOptions requestOptions) {
        return this.serviceClient.putModelAsStringRequiredOneValueDefaultWithResponse(input, requestOptions);
    }

    /**
     * Pass constants from the client to this function. Will pass in constant path, query, and header parameters.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> putClientConstantsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.putClientConstantsWithResponse(requestOptions);
    }
}
