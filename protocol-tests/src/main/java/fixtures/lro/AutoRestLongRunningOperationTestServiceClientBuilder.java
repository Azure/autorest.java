// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package fixtures.lro;

import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddHeadersPolicy;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.util.ClientOptions;
import com.azure.core.util.Configuration;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.serializer.JacksonAdapter;
import fixtures.lro.implementation.AutoRestLongRunningOperationTestServiceClientImpl;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/** A builder for creating a new instance of the AutoRestLongRunningOperationTestServiceClient type. */
@ServiceClientBuilder(
        serviceClients = {
            LROsClient.class,
            LroRetrysClient.class,
            LrosaDsClient.class,
            LrosCustomHeaderClient.class,
            LROsAsyncClient.class,
            LroRetrysAsyncClient.class,
            LrosaDsAsyncClient.class,
            LrosCustomHeaderAsyncClient.class
        })
public final class AutoRestLongRunningOperationTestServiceClientBuilder {
    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    private final Map<String, String> properties = new HashMap<>();

    /** Create an instance of the AutoRestLongRunningOperationTestServiceClientBuilder. */
    public AutoRestLongRunningOperationTestServiceClientBuilder() {
        this.pipelinePolicies = new ArrayList<>();
    }

    /*
     * server parameter
     */
    private String host;

    /**
     * Sets server parameter.
     *
     * @param host the host value.
     * @return the AutoRestLongRunningOperationTestServiceClientBuilder.
     */
    public AutoRestLongRunningOperationTestServiceClientBuilder host(String host) {
        this.host = host;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline pipeline;

    /**
     * Sets The HTTP pipeline to send requests through.
     *
     * @param pipeline the pipeline value.
     * @return the AutoRestLongRunningOperationTestServiceClientBuilder.
     */
    public AutoRestLongRunningOperationTestServiceClientBuilder pipeline(HttpPipeline pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    /*
     * The HTTP client used to send the request.
     */
    private HttpClient httpClient;

    /**
     * Sets The HTTP client used to send the request.
     *
     * @param httpClient the httpClient value.
     * @return the AutoRestLongRunningOperationTestServiceClientBuilder.
     */
    public AutoRestLongRunningOperationTestServiceClientBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    /*
     * The configuration store that is used during construction of the service
     * client.
     */
    private Configuration configuration;

    /**
     * Sets The configuration store that is used during construction of the service client.
     *
     * @param configuration the configuration value.
     * @return the AutoRestLongRunningOperationTestServiceClientBuilder.
     */
    public AutoRestLongRunningOperationTestServiceClientBuilder configuration(Configuration configuration) {
        this.configuration = configuration;
        return this;
    }

    /*
     * The logging configuration for HTTP requests and responses.
     */
    private HttpLogOptions httpLogOptions;

    /**
     * Sets The logging configuration for HTTP requests and responses.
     *
     * @param httpLogOptions the httpLogOptions value.
     * @return the AutoRestLongRunningOperationTestServiceClientBuilder.
     */
    public AutoRestLongRunningOperationTestServiceClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        this.httpLogOptions = httpLogOptions;
        return this;
    }

    /*
     * The retry policy that will attempt to retry failed requests, if
     * applicable.
     */
    private RetryPolicy retryPolicy;

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the AutoRestLongRunningOperationTestServiceClientBuilder.
     */
    public AutoRestLongRunningOperationTestServiceClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }

    /*
     * The list of Http pipeline policies to add.
     */
    private final List<HttpPipelinePolicy> pipelinePolicies;

    /*
     * The client options such as application ID and custom headers to set on a
     * request.
     */
    private ClientOptions clientOptions;

    /**
     * Sets The client options such as application ID and custom headers to set on a request.
     *
     * @param clientOptions the clientOptions value.
     * @return the AutoRestLongRunningOperationTestServiceClientBuilder.
     */
    public AutoRestLongRunningOperationTestServiceClientBuilder clientOptions(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        return this;
    }

    /**
     * Adds a custom Http pipeline policy.
     *
     * @param customPolicy The custom Http pipeline policy to add.
     * @return the AutoRestLongRunningOperationTestServiceClientBuilder.
     */
    public AutoRestLongRunningOperationTestServiceClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        pipelinePolicies.add(customPolicy);
        return this;
    }

    /**
     * Builds an instance of AutoRestLongRunningOperationTestServiceClientImpl with the provided parameters.
     *
     * @return an instance of AutoRestLongRunningOperationTestServiceClientImpl.
     */
    private AutoRestLongRunningOperationTestServiceClientImpl buildInnerClient() {
        if (host == null) {
            this.host = "http://localhost:3000";
        }
        if (pipeline == null) {
            this.pipeline = createHttpPipeline();
        }
        AutoRestLongRunningOperationTestServiceClientImpl client =
                new AutoRestLongRunningOperationTestServiceClientImpl(
                        pipeline, JacksonAdapter.createDefaultSerializerAdapter(), host);
        return client;
    }

    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration =
                (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        if (httpLogOptions == null) {
            httpLogOptions = new HttpLogOptions();
        }
        if (clientOptions == null) {
            clientOptions = new ClientOptions();
        }
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = properties.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = properties.getOrDefault(SDK_VERSION, "UnknownVersion");
        String applicationId = CoreUtils.getApplicationId(clientOptions, httpLogOptions);
        policies.add(new UserAgentPolicy(applicationId, clientName, clientVersion, buildConfiguration));
        HttpHeaders headers = new HttpHeaders();
        clientOptions.getHeaders().forEach(header -> headers.set(header.getName(), header.getValue()));
        if (headers.getSize() > 0) {
            policies.add(new AddHeadersPolicy(headers));
        }
        policies.addAll(
                this.pipelinePolicies.stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);
        policies.add(new CookiePolicy());
        policies.addAll(
                this.pipelinePolicies.stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                        .policies(policies.toArray(new HttpPipelinePolicy[0]))
                        .httpClient(httpClient)
                        .clientOptions(clientOptions)
                        .build();
        return httpPipeline;
    }

    /**
     * Builds an instance of LROsAsyncClient async client.
     *
     * @return an instance of LROsAsyncClient.
     */
    public LROsAsyncClient buildLROsAsyncClient() {
        return new LROsAsyncClient(buildInnerClient().getLROs());
    }

    /**
     * Builds an instance of LroRetrysAsyncClient async client.
     *
     * @return an instance of LroRetrysAsyncClient.
     */
    public LroRetrysAsyncClient buildLroRetrysAsyncClient() {
        return new LroRetrysAsyncClient(buildInnerClient().getLroRetrys());
    }

    /**
     * Builds an instance of LrosaDsAsyncClient async client.
     *
     * @return an instance of LrosaDsAsyncClient.
     */
    public LrosaDsAsyncClient buildLrosaDsAsyncClient() {
        return new LrosaDsAsyncClient(buildInnerClient().getLrosaDs());
    }

    /**
     * Builds an instance of LrosCustomHeaderAsyncClient async client.
     *
     * @return an instance of LrosCustomHeaderAsyncClient.
     */
    public LrosCustomHeaderAsyncClient buildLrosCustomHeaderAsyncClient() {
        return new LrosCustomHeaderAsyncClient(buildInnerClient().getLrosCustomHeaders());
    }

    /**
     * Builds an instance of LROsClient sync client.
     *
     * @return an instance of LROsClient.
     */
    public LROsClient buildLROsClient() {
        return new LROsClient(buildInnerClient().getLROs());
    }

    /**
     * Builds an instance of LroRetrysClient sync client.
     *
     * @return an instance of LroRetrysClient.
     */
    public LroRetrysClient buildLroRetrysClient() {
        return new LroRetrysClient(buildInnerClient().getLroRetrys());
    }

    /**
     * Builds an instance of LrosaDsClient sync client.
     *
     * @return an instance of LrosaDsClient.
     */
    public LrosaDsClient buildLrosaDsClient() {
        return new LrosaDsClient(buildInnerClient().getLrosaDs());
    }

    /**
     * Builds an instance of LrosCustomHeaderClient sync client.
     *
     * @return an instance of LrosCustomHeaderClient.
     */
    public LrosCustomHeaderClient buildLrosCustomHeaderClient() {
        return new LrosCustomHeaderClient(buildInnerClient().getLrosCustomHeaders());
    }
}
