// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package azure.signalr.fluent.models;

import azure.signalr.models.ManagedIdentity;
import azure.signalr.models.ProvisioningState;
import azure.signalr.models.ResourceSku;
import azure.signalr.models.ServerlessUpstreamSettings;
import azure.signalr.models.ServiceKind;
import azure.signalr.models.SignalRCorsSettings;
import azure.signalr.models.SignalRFeature;
import azure.signalr.models.SignalRNetworkACLs;
import azure.signalr.models.SignalRTlsSettings;
import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** A class represent a resource. */
@Fluent
public final class SignalRResourceInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SignalRResourceInner.class);

    /*
     * The billing information of the resource.(e.g. Free, Standard)
     */
    @JsonProperty(value = "sku")
    private ResourceSku sku;

    /*
     * Settings used to provision or configure the resource
     */
    @JsonProperty(value = "properties")
    private SignalRProperties innerProperties;

    /*
     * The kind of the service - e.g. "SignalR" for
     * "Microsoft.SignalRService/SignalR"
     */
    @JsonProperty(value = "kind")
    private ServiceKind kind;

    /*
     * The managed identity response
     */
    @JsonProperty(value = "identity")
    private ManagedIdentity identity;

    /**
     * Get the sku property: The billing information of the resource.(e.g. Free, Standard).
     *
     * @return the sku value.
     */
    public ResourceSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The billing information of the resource.(e.g. Free, Standard).
     *
     * @param sku the sku value to set.
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withSku(ResourceSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the innerProperties property: Settings used to provision or configure the resource.
     *
     * @return the innerProperties value.
     */
    private SignalRProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the kind property: The kind of the service - e.g. "SignalR" for "Microsoft.SignalRService/SignalR".
     *
     * @return the kind value.
     */
    public ServiceKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of the service - e.g. "SignalR" for "Microsoft.SignalRService/SignalR".
     *
     * @param kind the kind value to set.
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withKind(ServiceKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the identity property: The managed identity response.
     *
     * @return the identity value.
     */
    public ManagedIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed identity response.
     *
     * @param identity the identity value to set.
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withIdentity(ManagedIdentity identity) {
        this.identity = identity;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SignalRResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public SignalRResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the externalIp property: The publicly accessible IP of the resource.
     *
     * @return the externalIp value.
     */
    public String externalIp() {
        return this.innerProperties() == null ? null : this.innerProperties().externalIp();
    }

    /**
     * Get the hostname property: FQDN of the service instance.
     *
     * @return the hostname value.
     */
    public String hostname() {
        return this.innerProperties() == null ? null : this.innerProperties().hostname();
    }

    /**
     * Get the publicPort property: The publicly accessible port of the resource which is designed for browser/client
     * side usage.
     *
     * @return the publicPort value.
     */
    public Integer publicPort() {
        return this.innerProperties() == null ? null : this.innerProperties().publicPort();
    }

    /**
     * Get the serverPort property: The publicly accessible port of the resource which is designed for customer server
     * side usage.
     *
     * @return the serverPort value.
     */
    public Integer serverPort() {
        return this.innerProperties() == null ? null : this.innerProperties().serverPort();
    }

    /**
     * Get the version property: Version of the resource. Probably you need the same or higher version of client SDKs.
     *
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Get the privateEndpointConnections property: Private endpoint connections to the resource.
     *
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().privateEndpointConnections();
    }

    /**
     * Get the tls property: TLS settings.
     *
     * @return the tls value.
     */
    public SignalRTlsSettings tls() {
        return this.innerProperties() == null ? null : this.innerProperties().tls();
    }

    /**
     * Set the tls property: TLS settings.
     *
     * @param tls the tls value to set.
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withTls(SignalRTlsSettings tls) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SignalRProperties();
        }
        this.innerProperties().withTls(tls);
        return this;
    }

    /**
     * Get the features property: List of SignalR featureFlags. e.g. ServiceMode.
     *
     * <p>FeatureFlags that are not included in the parameters for the update operation will not be modified. And the
     * response will only include featureFlags that are explicitly set. When a featureFlag is not explicitly set,
     * SignalR service will use its globally default value. But keep in mind, the default value doesn't mean "false". It
     * varies in terms of different FeatureFlags.
     *
     * @return the features value.
     */
    public List<SignalRFeature> features() {
        return this.innerProperties() == null ? null : this.innerProperties().features();
    }

    /**
     * Set the features property: List of SignalR featureFlags. e.g. ServiceMode.
     *
     * <p>FeatureFlags that are not included in the parameters for the update operation will not be modified. And the
     * response will only include featureFlags that are explicitly set. When a featureFlag is not explicitly set,
     * SignalR service will use its globally default value. But keep in mind, the default value doesn't mean "false". It
     * varies in terms of different FeatureFlags.
     *
     * @param features the features value to set.
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withFeatures(List<SignalRFeature> features) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SignalRProperties();
        }
        this.innerProperties().withFeatures(features);
        return this;
    }

    /**
     * Get the cors property: Cross-Origin Resource Sharing (CORS) settings.
     *
     * @return the cors value.
     */
    public SignalRCorsSettings cors() {
        return this.innerProperties() == null ? null : this.innerProperties().cors();
    }

    /**
     * Set the cors property: Cross-Origin Resource Sharing (CORS) settings.
     *
     * @param cors the cors value to set.
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withCors(SignalRCorsSettings cors) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SignalRProperties();
        }
        this.innerProperties().withCors(cors);
        return this;
    }

    /**
     * Get the upstream property: Upstream settings when the Azure SignalR is in server-less mode.
     *
     * @return the upstream value.
     */
    public ServerlessUpstreamSettings upstream() {
        return this.innerProperties() == null ? null : this.innerProperties().upstream();
    }

    /**
     * Set the upstream property: Upstream settings when the Azure SignalR is in server-less mode.
     *
     * @param upstream the upstream value to set.
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withUpstream(ServerlessUpstreamSettings upstream) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SignalRProperties();
        }
        this.innerProperties().withUpstream(upstream);
        return this;
    }

    /**
     * Get the networkACLs property: Network ACLs.
     *
     * @return the networkACLs value.
     */
    public SignalRNetworkACLs networkACLs() {
        return this.innerProperties() == null ? null : this.innerProperties().networkACLs();
    }

    /**
     * Set the networkACLs property: Network ACLs.
     *
     * @param networkACLs the networkACLs value to set.
     * @return the SignalRResourceInner object itself.
     */
    public SignalRResourceInner withNetworkACLs(SignalRNetworkACLs networkACLs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SignalRProperties();
        }
        this.innerProperties().withNetworkACLs(networkACLs);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }
}
