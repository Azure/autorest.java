// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package azure.signalr.livetests;

import azure.signalr.SignalRManager;
import azure.signalr.models.AclAction;
import azure.signalr.models.FeatureFlags;
import azure.signalr.models.KeyType;
import azure.signalr.models.ManagedIdentity;
import azure.signalr.models.ManagedIdentitySettings;
import azure.signalr.models.ManagedIdentityType;
import azure.signalr.models.NameAvailabilityParameters;
import azure.signalr.models.NetworkAcl;
import azure.signalr.models.PrivateEndpointAcl;
import azure.signalr.models.RegenerateKeyParameters;
import azure.signalr.models.ResourceSku;
import azure.signalr.models.ServerlessUpstreamSettings;
import azure.signalr.models.ServiceKind;
import azure.signalr.models.SignalRCorsSettings;
import azure.signalr.models.SignalRFeature;
import azure.signalr.models.SignalRNetworkACLs;
import azure.signalr.models.SignalRRequestType;
import azure.signalr.models.SignalRResource;
import azure.signalr.models.SignalRSkuTier;
import azure.signalr.models.SignalRTlsSettings;
import azure.signalr.models.UpstreamAuthSettings;
import azure.signalr.models.UpstreamAuthType;
import azure.signalr.models.UpstreamTemplate;
import com.azure.core.http.policy.HttpLogDetailLevel;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.TestBase;
import com.azure.core.test.annotation.DoNotRecord;
import com.azure.core.util.Context;
import com.azure.identity.DefaultAzureCredentialBuilder;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class signalRTests extends TestBase {
    private SignalRManager manager;

    @Override
    public void beforeTest() {
        manager =
            SignalRManager
                .configure()
                .withLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BASIC))
                .authenticate(new DefaultAzureCredentialBuilder().build(), new AzureProfile(AzureEnvironment.AZURE));
    }

    @Test
    @DoNotRecord(skipInPlayback = true)
    public void signalRTest() {
        // check name availability
        manager
            .signalRs()
            .checkNameAvailabilityWithResponse(
                "$(location)",
                new NameAvailabilityParameters()
                    .withType("Microsoft.SignalRService/SignalR")
                    .withName("$(resourceName)"),
                Context.NONE);

        // put signalR resource
        manager
            .signalRs()
            .define("$(resourceName)")
            .withRegion("$(location)")
            .withExistingResourceGroup("$(resourceGroupName)")
            .withTags(mapOf("key1", "value1"))
            .withSku(new ResourceSku().withName("Standard_S1").withTier(SignalRSkuTier.STANDARD).withCapacity(1))
            .withKind(ServiceKind.SIGNALR)
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED))
            .withTls(new SignalRTlsSettings().withClientCertEnabled(false))
            .withFeatures(
                Arrays
                    .asList(
                        new SignalRFeature()
                            .withFlag(FeatureFlags.SERVICE_MODE)
                            .withValue("Serverless")
                            .withProperties(mapOf()),
                        new SignalRFeature()
                            .withFlag(FeatureFlags.ENABLE_CONNECTIVITY_LOGS)
                            .withValue("True")
                            .withProperties(mapOf()),
                        new SignalRFeature()
                            .withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                            .withValue("False")
                            .withProperties(mapOf())))
            .withCors(new SignalRCorsSettings().withAllowedOrigins(Arrays.asList("https://foo.com", "https://bar.com")))
            .withUpstream(
                new ServerlessUpstreamSettings()
                    .withTemplates(
                        Arrays
                            .asList(
                                new UpstreamTemplate()
                                    .withHubPattern("*")
                                    .withEventPattern("connect,disconnect")
                                    .withCategoryPattern("*")
                                    .withUrlTemplate("https://example.com/chat/api/connect")
                                    .withAuth(
                                        new UpstreamAuthSettings()
                                            .withType(UpstreamAuthType.MANAGED_IDENTITY)
                                            .withManagedIdentity(
                                                new ManagedIdentitySettings().withResource("api://example"))))))
            .withNetworkACLs(
                new SignalRNetworkACLs()
                    .withDefaultAction(AclAction.DENY)
                    .withPublicNetwork(new NetworkAcl().withAllow(Arrays.asList(SignalRRequestType.CLIENT_CONNECTION)))
                    .withPrivateEndpoints(
                        Arrays
                            .asList(
                                new PrivateEndpointAcl()
                                    .withAllow(Arrays.asList(SignalRRequestType.SERVER_CONNECTION))
                                    .withName("$(resourceName).1fa229cd-bf3f-47f0-8c49-afb36723997e"))))
            .create();

        // get signalR resource
        manager.signalRs().getByResourceGroupWithResponse("$(resourceGroupName)", "$(resourceName)", Context.NONE);

        // update signalR resource
        SignalRResource resource =
            manager
                .signalRs()
                .getByResourceGroupWithResponse("$(resourceGroupName)", "$(resourceName)", Context.NONE)
                .getValue();
        resource
            .update()
            .withTags(mapOf("key1", "value1"))
            .withSku(new ResourceSku().withName("Standard_S1").withTier(SignalRSkuTier.STANDARD).withCapacity(1))
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED))
            .withTls(new SignalRTlsSettings().withClientCertEnabled(false))
            .withFeatures(
                Arrays
                    .asList(
                        new SignalRFeature()
                            .withFlag(FeatureFlags.SERVICE_MODE)
                            .withValue("Serverless")
                            .withProperties(mapOf()),
                        new SignalRFeature()
                            .withFlag(FeatureFlags.ENABLE_CONNECTIVITY_LOGS)
                            .withValue("True")
                            .withProperties(mapOf()),
                        new SignalRFeature()
                            .withFlag(FeatureFlags.ENABLE_MESSAGING_LOGS)
                            .withValue("False")
                            .withProperties(mapOf())))
            .withCors(new SignalRCorsSettings().withAllowedOrigins(Arrays.asList("https://foo.com", "https://bar.com")))
            .withUpstream(
                new ServerlessUpstreamSettings()
                    .withTemplates(
                        Arrays
                            .asList(
                                new UpstreamTemplate()
                                    .withHubPattern("*")
                                    .withEventPattern("connect,disconnect")
                                    .withCategoryPattern("*")
                                    .withUrlTemplate("https://example.com/chat/api/connect")
                                    .withAuth(
                                        new UpstreamAuthSettings()
                                            .withType(UpstreamAuthType.MANAGED_IDENTITY)
                                            .withManagedIdentity(
                                                new ManagedIdentitySettings().withResource("api://example"))))))
            .withNetworkACLs(
                new SignalRNetworkACLs()
                    .withDefaultAction(AclAction.DENY)
                    .withPublicNetwork(new NetworkAcl().withAllow(Arrays.asList(SignalRRequestType.CLIENT_CONNECTION)))
                    .withPrivateEndpoints(
                        Arrays
                            .asList(
                                new PrivateEndpointAcl()
                                    .withAllow(Arrays.asList(SignalRRequestType.SERVER_CONNECTION))
                                    .withName("$(resourceName).1fa229cd-bf3f-47f0-8c49-afb36723997e"))))
            .apply();

        // list keys
        manager.signalRs().listKeysWithResponse("$(resourceGroupName)", "$(resourceName)", Context.NONE);

        // regenerate key
        manager
            .signalRs()
            .regenerateKey(
                "$(resourceGroupName)",
                "$(resourceName)",
                new RegenerateKeyParameters().withKeyType(KeyType.PRIMARY),
                Context.NONE);

        // restart
        manager.signalRs().restart("$(resourceGroupName)", "$(resourceName)", Context.NONE);

        // list usages
        manager.usages().list("$(location)", Context.NONE);

        // list by resource group
        manager.signalRs().listByResourceGroup("$(resourceGroupName)", Context.NONE);

        // list operations
        manager.operations().list(Context.NONE);

        // delete
        manager.signalRs().delete("$(resourceGroupName)", "$(resourceName)", Context.NONE);
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
