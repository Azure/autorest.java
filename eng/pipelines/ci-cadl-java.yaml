trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main
  paths:
    include:
      - '*'
    exclude:
      - 'fluent*'
      - 'postprocessor'
      - 'vanilla-tests'
      - 'protocol*'

jobs:
  - job: Build

    timeoutInMinutes: 30

    variables:
      JavaVersion: 1.8
      NodeVersion: '18.x'
      isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

    pool:
      name: "azsdk-pool-mms-ubuntu-2004-general"
      vmImage: "MMSUbuntu20.04"

    steps:
      - task: NodeTool@0
        displayName: 'Install Node.js $(NodeVersion)'
        inputs:
          versionSpec: '$(NodeVersion)'

      - task: Maven@3
        retryCountOnTaskFailure: 3
        displayName: 'Build JAR'
        inputs:
          mavenPomFile: pom.xml
          goals: 'clean verify package install'
          options: '-P local,cadl -T 1C --no-transfer-progress'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: Npm@1
        displayName: 'Install Dependencies for TypeSpec Java'
        inputs:
          command: install
          workingDir: ./cadl-extension

      - task: Npm@1
        displayName: 'Build TypeSpec Java'
        inputs:
          command: custom
          customCommand: run build
          workingDir: ./cadl-extension

      - task: Npm@1
        displayName: 'Lint TypeSpec Java'
        inputs:
          command: custom
          customCommand: run lint
          workingDir: ./cadl-extension

      - task: Npm@1
        displayName: 'Check-Format TypeSpec Java'
        inputs:
          command: custom
          customCommand: run check-format
          workingDir: ./cadl-extension

      - task: Npm@1
        displayName: 'Pack TypeSpec Java'
        inputs:
          command: custom
          customCommand: pack
          workingDir: ./cadl-extension

      - script: |
          npm install -g @typespec/compiler
        displayName: 'Install TypeSpec'

      - task: PowerShell@2
        displayName: 'Generate Code'
        inputs:
          pwsh: true
          filePath: cadl-tests/Generate.ps1
          workingDirectory: ./cadl-tests

      - task: Npm@1
        displayName: 'Check-Format TypeSpec Tests'
        inputs:
          command: custom
          customCommand: run check-format
          workingDir: ./cadl-tests

      - script: |
          git status
          git diff
        displayName: 'Git Diff'

      - script: |
          [ -z "`git status --porcelain`" ]
        displayName: 'Check no Diff'

      - task: Npm@1
        displayName: 'Install Testserver'
        inputs:
          command: install

      - script: |
          node node_modules/\@azure-tools/cadl-ranch/dist/cli/cli.js serve node_modules/\@azure-tools/cadl-ranch-specs/http/ --coverageFile ./cadl-ranch-coverage-java.json &
        displayName: 'Start Cadl Ranch Test Server'
        workingDirectory: ./cadl-tests

      - task: Maven@3
        displayName: 'Run Cadl Tests'
        inputs:
          mavenPomFile: pom.xml
          goals: 'clean test'
          options: '-PtestCadl -pl cadl-tests -DtrimStackTrace=false --no-transfer-progress'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - script: |
          node node_modules/\@azure-tools/cadl-ranch/dist/cli/cli.js server stop
        displayName: 'Stop Cadl Ranch Test Server'
        workingDirectory: ./cadl-tests

      - script: |
          node node_modules/\@azure-tools/cadl-ranch/dist/cli/cli.js check-coverage node_modules/@azure-tools/cadl-ranch-specs/http --coverageFiles ./cadl-ranch-coverage-java.json
        displayName: 'Cadl Ranch Coverage Report'
        workingDirectory: ./cadl-tests
        continueOnError: true

      - publish: $(Build.SourcesDirectory)/cadl-tests/cadl-ranch-coverage-java.json
        artifact: CoverageReport
        displayName: 'Publish Cadl Ranch Coverage Report'

      - task: AzureCLI@2
        displayName: 'Upload to Cadl Ranch Coverage Report Dashboard'
        condition: eq(variables.isMain, 'true')
        inputs:
          azureSubscription: "Cadl Ranch Storage"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: node $(Build.SourcesDirectory)/cadl-tests/node_modules/\@azure-tools/cadl-ranch/dist/cli/cli.js upload-coverage --coverageFile $(Build.SourcesDirectory)/cadl-tests/cadl-ranch-coverage-java.json --generatorName java --storageAccountName azuresdkcadlranch --generatorVersion $(node -p -e "require('./cadl-extension/package.json').version")
