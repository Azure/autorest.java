trigger:
  branches:
    include:
    - main

pr:
  branches:
    include:
    - main

jobs:
  - job: Build

    variables:
      JavaVersion: 1.8
      NodeVersion: '14.x'

    pool:
      vmImage: ubuntu-latest

    steps:
      - task: NodeTool@0
        displayName: 'Install Node.js $(NodeVersion)'
        inputs:
          versionSpec: '$(NodeVersion)'

      - task: Maven@3
        displayName: 'Build and Package'
        inputs:
          mavenPomFile: pom.xml
          goals: 'install package'
          options: '-Dlocal -T 1C --no-transfer-progress'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - script: |
          npm install -g autorest
          npm install --no-bin-links
        displayName: 'Prepare Environment for Generation'

      - script: |
          ./generate
        displayName: 'Generate code'

      - script: |
          git status
          git diff
        displayName: 'Git Diff'

      - script: |
          [ -z "`git status --porcelain`" ]
        displayName: 'Check no diff in generated files'

      - task: Maven@3
        condition: succeededOrFailed()
        displayName: 'Run vanilla tests'
        inputs:
          mavenPomFile: pom.xml
          goals: 'clean test'
          options: '-DtestVanilla -pl vanilla-tests -DtrimStackTrace=false --no-transfer-progress'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          mergeTestResults: true
          testRunTitle: 'vanilla-tests'
          searchFolder: '$(System.DefaultWorkingDirectory)/vanilla-tests/'

      - task: Maven@3
        condition: succeededOrFailed()
        displayName: 'Run azure tests'
        inputs:
          mavenPomFile: pom.xml
          goals: 'clean test'
          options: '-DtestAzure -pl azure-tests -DtrimStackTrace=false --no-transfer-progress'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          mergeTestResults: true
          testRunTitle: 'azure-tests'
          searchFolder: '$(System.DefaultWorkingDirectory)/azure-tests/'

      - task: Maven@3
        condition: succeededOrFailed()
        displayName: 'Run protocol tests'
        inputs:
          mavenPomFile: pom.xml
          goals: 'clean test'
          options: '-DtestProtocol -pl protocol-tests -DtrimStackTrace=false --no-transfer-progress'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          mergeTestResults: true
          testRunTitle: 'protocol-tests'
          searchFolder: '$(System.DefaultWorkingDirectory)/protocol-tests/'

      - script: |
          cat node_modules/@microsoft.azure/autorest.testserver/coverage/report-vanilla.json
          cat node_modules/@microsoft.azure/autorest.testserver/coverage/report-azure.json
        displayName: 'Display coverage data'

      # autorest.testserver reads "package.json" 2 level up from "coverage" directory
      - script: |
          cp node_modules/@microsoft.azure/autorest.testserver/package.json node_modules/@microsoft.azure/package.json
        displayName: 'Prepare for coverage report publish'

      - script: |
          npm --prefix node_modules/@microsoft.azure/autorest.testserver run coverage publish -- --repo=$(Build.Repository.Name) --ref=$(Build.SourceBranch) --githubToken=$(github-token) --azStorageAccount=$(storage-coverage-user) --azStorageAccessKey=$(storage-coverage-pass)
        condition: and(succeeded(), ne(variables['storage-coverage-pass'], ''))
        displayName: 'Publish coverage report to storage account'

      - task: Maven@3
        condition: succeededOrFailed()
        displayName: 'Run protocol resilience tests'
        inputs:
          mavenPomFile: protocol-resilience-test/pom.xml
          goals: 'package revapi:check'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: $(JavaVersion)
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false

      - script: |
          ./protocol-sdk-integration-tests/test.py
        displayName: 'Run protocol test on sdk integration'
